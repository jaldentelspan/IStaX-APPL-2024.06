<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>PTP Clock Configuration Page</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_ptp_clocks_config.htm";

var bool_array = Array("False", "True");
var ptp_clocks = Array();
var ptp_dev_types = Array();
var clock_identity = Array();
var one_pps_mode_options = Array();
var adj_method_options = Array();
var ptp_profiles;
var entrycnt = 0;
var new_entry_cnt = 0;
var next_valid_clock_index = 0;
var print_new_entry_header = 0;
var portcount = configNormalPortMax - configPortMin + 1;
var pcp = genArrayInt(0, 7);
var ptp_transparent_clock_exists;

function on_delete_click(elem, frag)
{
    new_entry_cnt--;
    entrycnt--;
    document.getElementById('ptpData').deleteRow(elem.rowIndex-1);
    while (elem.childNodes.length > 0) {
        elem.removeChild(elem.firstChild);
    }
    if (entrycnt > 0) {
        var x = document.getElementById('ptpData').rows;
        for (n = 0; n < entrycnt; n++) {
            x[n].setAttribute("class", (n % 2) ? "config_even" : "config_odd");
        }
    }
    else {
       // no entries found - Display that in the table
        var tr = CreateStyledElement("tr","config_odd");
        addTextCell(tr, "", "c");
        addTextCell(tr, "No Clock Instances Present", "c");
        addTextCell(tr, "", "c");
        addTextCell(tr, "", "c");
        addTextCell(tr, "", "c");
        document.getElementById('ptpData').appendChild(tr);       // Add row to fragment
     }
    
    // This is a work-around for a rendering bug in Firefox. When a row is added to or deleted from a table,
    // vertical lines (internal borders) are added to the cells of the table.
    sel = document.getElementById('PTPConfig')
    sel.style.display = 'none';
    sel.offsetHeight;  // no need to store this anywhere, the reference is enough
    sel.style.display = '';

    return elem;
}

function addRow(index, frag, values) {
    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    entrycnt++;
    addCheckBoxCell(tr, 0, "c", "delete_" + values[0]);
    var td = CreateStyledElement("td", "c");
    var txt = document.createTextNode(values[0]);
    var link = document.createElement("a");
    link.setAttribute("id", "clock_inst_" + index);
    link.href = "ptp_clock_config.htm?clock_inst=" + parseInt(values[0]);
    link.appendChild(txt);  // Add Text
    td.appendChild(link);   // Add link to cell
    tr.appendChild(td);     // Add cell to row
    if (parseInt(values[0]) == next_valid_clock_index) {
        next_valid_clock_index++;
    }
    addTextCell(tr, values[1], "c", 1);
    addTextCell(tr, values[2], "c", 1);
    addTextCell(tr, values[3], "c", 1);
    addTextCell(tr, ptp_profiles[values[4]], "c", 1);
    if (values[1] == "E2eTransp") {
        ptp_transparent_clock_exists = true;
    }
    if (values[1] == "P2pTransp") {
        ptp_transparent_clock_exists = true;
    }    
    frag.appendChild(tr);       // Add row to fragment
}

function processUpdate(req, ref)
{
    // Format:
    // |<clock_instance>/<clock_type>/<en>/<en>/..../<en>/|....
    // !1/ord_bound/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1|....

    if(redirectOnError(req))
        return;

    if (req.responseText) {
        var data_options = req.responseText.split("^");
            one_pps_mode_options = data_options[1].split("/");
            adj_method_options   = data_options[2].split("/");
            phy_ts_options       = data_options[3].split("/");
            pps_domain_options   = data_options[4].split("/")
        var one_pps_mode_data    = data_options[5].split("|");
        var phy_ts_data          = data_options[6].split("/");
        var ptp_data             = data_options[7].split("#");
        ptp_profiles             = data_options[8].split("/");

        ptp_dev_types = ptp_data[0].split("|");
        ptp_clocks = ptp_data[1].split("|");

        var frag = document.createDocumentFragment();
        var tr = CreateStyledElement("tr","config_even");
        addTextCell(tr, "One_PPS_Mode", "param_label");
        var td = addSelectCell(tr, one_pps_mode_options, one_pps_mode_options, one_pps_mode_data[0], "cl", "one_pps_mode");
        td.style.width = "16em";
        frag.appendChild(tr);

        var tr = CreateStyledElement("tr","config_odd");
        addTextCell(tr, "External Enable", "param_label");
        var td = addSelectCell(tr, bool_array, bool_array, one_pps_mode_data[1], "cl", "external_enable");
        td.style.width = "16em";
        frag.appendChild(tr);

        var tr = CreateStyledElement("tr","config_even");
        addTextCell(tr, "Adjust Method", "param_label");
        var td = addSelectCell(tr, adj_method_options, adj_method_options, one_pps_mode_data[3], "cl", "adj_method");
        td.style.width = "16em";
        frag.appendChild(tr);

        var tr = CreateStyledElement("tr","config_odd");
        addTextCell(tr, "Clock Frequency", "param_label");
        var td = addInputCell(tr, one_pps_mode_data[2], "cl", "clock_freq");
        td.style.width = "16em";
        frag.appendChild(tr);

        var tr = CreateStyledElement("tr","config_odd");
        addTextCell(tr, "One PPS Domain", "param_label");
        var td = addSelectCell(tr, pps_domain_options, pps_domain_options, one_pps_mode_data[4], "cl", "pps_domain");
        td.style.width = "16em";
        frag.appendChild(tr);

        var tbody = document.getElementById("ptpExtClockConfigData");
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }

        var frag = document.createDocumentFragment();
        var tr = CreateStyledElement("tr","config_even");
        addTextCell(tr, "PHY Timestamping Mode", "param_label");
        var td = addSelectCell(tr, phy_ts_options, phy_ts_options, phy_ts_data, "cl", "phy_ts_mode");
        td.style.width = "16em";
        frag.appendChild(tr);

        var tbody = document.getElementById("ptpTSModeData");
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }


        // create holder for accumulated tbody elements and text nodes
        var frag = document.createDocumentFragment();
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
        
        // Determine if there are any entries
        if (ptp_clocks.length > 1) {
            for(var i = 0; i < ptp_clocks.length; i++) {
                if(ptp_clocks[i]) {
                    addRow(i, frag, ptp_clocks[i].split("/"));
                }
            }
        } else {
           // no entries found - Display that in the table
            var tr = CreateStyledElement("tr","config_odd");
            addTextCell(tr, "", "c");
            addTextCell(tr, "No Clock Instances Present", "c");
            addTextCell(tr, "", "c");
            addTextCell(tr, "", "c");
            addTextCell(tr, "", "c");
            addTextCell(tr, "", "c");
            frag.appendChild(tr);       // Add row to fragment
        }

        // Insert/replace frag into table body
        var tbody = document.getElementById("ptpData");
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
    } else {
        SpomHandleError();
    }
}

function requestUpdate() {
    if(SpomNavigationLoading())
        return;                 // Bail out, navigation will trigger update
    print_new_entry_header = 0;
    loadXMLDoc(SpomAddSidArg("/config/ptp_config"), processUpdate, null);
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function checkForm(form)
{
   var invalid_identity = false;

   var clock_frequency = document.getElementById("clock_freq");
   if (clock_frequency.value) {
       if(!isWithinRange("clock_freq", 1, 25000000, "Clock Frequency")) {
           return false;
       }
   }

   // Search for all the newly created entries before submitting.
   for (var new_idx = 0; new_idx < new_entry_cnt; new_idx++) {
        // clock_instance
        var clock_inst_value = document.getElementById("clock_inst_new_"+ new_idx);
        if (clock_inst_value.value) {
            if(!isWithinRange("clock_inst_new_"+ new_idx, 0, 3, "Clock Instance")) {
                return false;
            }
        }
        // Check that another clock with the same instance number does not already exist
        for (var n = 1; n <= entrycnt-new_entry_cnt; n++) {
            var clock_inst_other = document.getElementById("clock_inst_"+ n);
            if (clock_inst_value.value == clock_inst_other.text) {
                alert("Cannot create new clock with instance number that is already in use");
                return false;
            }
        }
        // Check that we are not about to create more than one new clock with a given instance number
        for (var n = 0; n < new_entry_cnt; n++) {
            if (n == new_idx) {
                continue;
            }
            var clock_inst_other = document.getElementById("clock_inst_new_"+ n);
            if (clock_inst_value.value == clock_inst_other.value) {
                alert("Cannot create more than one new clock with a given instance number");
                return false;
            }
        }
        // Check for Device Type
        var device_type_data = document.getElementById("devType_new_"+ new_idx);
        if (ptp_transparent_clock_exists) {
            if (device_type_data.value == "E2eTransp") {
                alert("Transparent Clock Already Exists");
                return false;
            }
            if (device_type_data.value == "P2pTransp") {
                alert("Transparent Clock Already Exists");
                return false;
            }
        }

        var profile_set = document.getElementById("ptp_profile_new_" + new_idx);
        if ((ptp_profiles[profile_set.value] == "G8275.2") && !isWithinRange("vid_new_" + new_idx, 1, 4095, "VID")) {
            return false;
        }

        if (ptp_profiles[profile_set.value] == "802.1AS" && device_type_data.value.endsWith("only")) {
            alert("Master/Slave only is not supported on gPTP");
            return false;
        }

        if (ptp_profiles[profile_set.value] == "802.1AS" && device_type_data.value.endsWith("Transp")) {
            alert("Transparent clock is not supported on gPTP");
            return false;
        }

        if (ptp_profiles[profile_set.value] != "AED 802.1AS" && device_type_data.value.endsWith("AED-GM")) {
            alert("Device type AED-GM is only compatible with AED 802.1AS profile");
            return false;
        }
//        // Check for Clock Identity
//        var iden_value = document.getElementById("clock_identity_new_"+ new_idx);
//        if (iden_value.value) {
//            var elem_based_identity = iden_value.value.split(":");
//            if( elem_based_identity.length != 8) {
//                invalid_identity = true;
//            }
//            for (var i = 0; i < elem_based_identity.length; i++) {
//                if (elem_based_identity[i].length > 2) {
//                    invalid_identity = true;
//                }
//                var hex_value = IsHex(elem_based_identity[i]);
//                if (!IsHex(elem_based_identity[i])) {
//                    invalid_identity = true;
//                }
//
//            }
//
//            if (invalid_identity == true) {
//                var str = "Invalid Clock Identity - " + iden_value.value;
//                alert(str);
//                return false;
//            }
//        }
   }
   return true;                // Feed the chickens and go home
}

function AddNewRow()
{
    
    var new_idx = 0;
    for(new_idx = 0; new_idx < 4; new_idx++) {
      if(!document.getElementById("clock_inst_new_" + new_idx)) {
        break;
      }
    }
    if (entrycnt >= 4) {
      alert("Maximum of 4 clock instances can be created.");
      return false;
    }

    new_entry_cnt++;
    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    var tr = CreateStyledElement("tr", entrycnt % 2 ? "config_even" : "config_odd");

    var del_button = document.createElement('input');
    del_button.onclick = function() {on_delete_click(tr, frag);};
    del_button.type = "button";
    del_button.value = " Delete ";
    var td = CreateTd("c");
    addCell(tr, td, del_button);

    var edit_ctrl = addInputCell(tr, next_valid_clock_index, "c", "clock_inst_new_" + new_idx, 1);
    edit_ctrl.setAttribute("maxLength", 1);

    var edit_ctrl = addInputCell(tr, next_valid_clock_index, "c", "clk_dom_new_" + new_idx, 1);
    edit_ctrl.setAttribute("maxLength", 1);
    addInputCell(tr, next_valid_clock_index, "c", "vid_new_" + new_idx, 5, 5);

    addSelectCell(tr, ptp_dev_types, ptp_dev_types, ptp_dev_types[1], "c", "devType_new_" + new_idx);
    addSelectCell(tr, ptp_profiles, genArrayInt(0, ptp_profiles.length), 0, "c", "ptp_profile_new_" + new_idx);
    // addSelectCell(tr, bool_array, genArrayInt(0, bool_array.length), 0, "c", "enforce_profile_new_" + new_idx);

//   var edit_ctrl = addInputCell(tr, clock_identity[next_valid_clock_index] , "c", "clock_identity_new_" + new_idx, 23);
//   edit_ctrl.setAttribute("maxLength", 23);

    frag.appendChild(tr);       // Add row to fragment

    var tbody = document.getElementById("ptpData");
    if (entrycnt == 0) {
        tbody.deleteRow(0);
    }
    entrycnt++;
    if (!tbody.appendChild(frag)) { // Add Frag to table body
      alert("This browser doesn't support dynamic tables.");
    }

    // This is a work-around for a rendering bug in Firefox. When a row is added to or deleted from a table,
    // vertical lines (internal borders) are added to the cells of the table.
    sel = document.getElementById('PTPConfig')
    sel.style.display = 'none';
    sel.offsetHeight;  // no need to store this anywhere, the reference is enough
    sel.style.display = '';
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

</script>

</head>

<body class="content" onload="requestUpdate();">
    <form method="POST" action="/config/ptp_config" onsubmit="return checkForm(this);">
      <h1>PTP External Clock Mode <span id="display_sid"></span></h1>
       <table id="PTPExtClockMode" summary="PTP External Clock Mode Configuration" cellspacing="0" class="config">
           <tbody id="ptpExtClockConfigData"></tbody>
      </table>
      <h1>&nbsp;</h1>
      <h1>PTP timestamping mode </h1>
       <table id="PTPTimestampMode" summary="PTP Timestamping Mode Configuration" cellspacing="0" class="config">
           <tbody id="ptpTSModeData"></tbody>
      </table>
      <h1>&nbsp;</h1>
      <h1>PTP Clock Configuration </h1>
      <table id="PTPConfig" summary="PTP Clock Configuration" cellspacing="0" class="config" style = "width : 580px;" >
          <thead>
              <tr class="config_header">
                  <th class="hdrc" style="width: 80px">Delete</th>
                  <th class="hdrc" style="width: 100px">Clock Instance</th>
                  <th class="hdrc" style="width: 100px">Clk Domain</th>
                  <th class="hdrc" style="width: 100px">VID</th>
                  <th class="hdrc" style="width: 100px">Device Type</th>
                  <th class="hdrc">Profile</th>
              </tr>
          </thead> 
          <tbody id="ptpData"></tbody>
      </table>
      <p>
          <input type="hidden" id="submit_sid" name="sid">
          <input type="button" id="addNewEntry" value="Add New PTP Clock" onclick="AddNewRow()">
          <input type="submit" value="Save">
          <input type="reset" value="Reset">
      </p>
    </form>
</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
