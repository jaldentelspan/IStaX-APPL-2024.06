#
# Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.
#

MODULE_IF_FLAG = defined(VTSS_SW_OPTION_AUTH)

INCLUDE_BEGIN
#include "vtss_auth_api.h"
#include "misc_api.h"
#ifdef VTSS_SW_OPTION_RADIUS
#include "vtss_radius_api.h"
#endif
#include <netinet/in.h>
#include "icli_porting_util.h"
#ifdef VTSS_SW_OPTION_CLI
#include "cli_io_api.h"
#endif
#include "vtss/appl/ssh.h"
#if defined(VTSS_SW_OPTION_FAST_CGI)
#include "fast_cgi_api.h"
#endif
/*lint --e{438, 550} */

INCLUDE_END

FUNCTION_BEGIN

#undef IC_RC
#define IC_RC(expr) do {                              \
    mesa_rc _rc_ = (expr);                            \
    if (_rc_ != VTSS_RC_OK) {                            \
        ICLI_PRINTF("%% AAA: %s\n", error_txt(_rc_)); \
        return _rc_;                                  \
    }                                                 \
} while (0)

#define P2COL(col1, col2, c1, c2) icli_stats(session_id, col1, col2, c1, c2)

static BOOL VTSS_AUTH_ICLI_console_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    switch (ask) {
    case ICLI_ASK_PRESENT:
#ifdef VTSS_APPL_AUTH_ENABLE_CONSOLE
        runtime->present = cli_module_enabled();
#else
        runtime->present = FALSE;
#endif
        return TRUE;
    case ICLI_ASK_BYWORD:
    case ICLI_ASK_HELP:
    case ICLI_ASK_RANGE:
    default:
        break;
    }
    return FALSE;
}

static BOOL VTSS_AUTH_ICLI_telnet_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    switch (ask) {
    case ICLI_ASK_PRESENT:
#ifdef VTSS_SW_OPTION_CLI_TELNET
        runtime->present = telnet_module_enabled();
#else
        runtime->present = FALSE;
#endif
        return TRUE;
    case ICLI_ASK_BYWORD:
    case ICLI_ASK_HELP:
    case ICLI_ASK_RANGE:
    default:
        break;
    }
    return FALSE;
}

static BOOL VTSS_AUTH_ICLI_ssh_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    switch (ask) {
    case ICLI_ASK_PRESENT:
#if defined(VTSS_SW_OPTION_SSH)
        runtime->present = true;
#else
        runtime->present = false;
#endif
        return TRUE;
    case ICLI_ASK_BYWORD:
    case ICLI_ASK_HELP:
    case ICLI_ASK_RANGE:
    default:
        break;
    }
    return FALSE;
}

static BOOL VTSS_AUTH_ICLI_http_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    switch (ask) {
    case ICLI_ASK_PRESENT:
#if defined(VTSS_SW_OPTION_WEB) || defined(VTSS_SW_OPTION_FAST_CGI)
        runtime->present = web_module_enabled();
#else
        runtime->present = FALSE;
#endif
        return TRUE;
    case ICLI_ASK_BYWORD:
    case ICLI_ASK_HELP:
    case ICLI_ASK_RANGE:
    default:
        break;
    }
    return FALSE;
}

static BOOL VTSS_AUTH_ICLI_radius_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    switch (ask) {
    case ICLI_ASK_PRESENT:
#ifdef VTSS_SW_OPTION_RADIUS
        runtime->present = TRUE;
#else
        runtime->present = FALSE;
#endif
        return TRUE;
    case ICLI_ASK_BYWORD:
    case ICLI_ASK_HELP:
    case ICLI_ASK_RANGE:
    default:
        break;
    }
    return FALSE;
}

static BOOL VTSS_AUTH_ICLI_tacacs_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    switch (ask) {
    case ICLI_ASK_PRESENT:
#ifdef VTSS_SW_OPTION_TACPLUS
        runtime->present = TRUE;
#else
        runtime->present = FALSE;
#endif
        return TRUE;
    case ICLI_ASK_BYWORD:
    case ICLI_ASK_HELP:
    case ICLI_ASK_RANGE:
    default:
        break;
    }
    return FALSE;
}

#ifdef VTSS_SW_OPTION_RADIUS
static void VTSS_AUTH_ICLI_radius_show_statistics(u32 session_id, vtss_auth_host_index_t ix)
{
    vtss_radius_auth_client_server_mib_s mib_auth;
    vtss_radius_acct_client_server_mib_s mib_acct;
    mesa_rc                              rc;
    char                                 buf[128];

    if ((rc = vtss_radius_auth_client_mib_get((int)ix, &mib_auth)) != VTSS_RC_OK) {
        ICLI_PRINTF("Error: %s\n", error_txt(rc));
        return;
    }

    ICLI_PRINTF("\nRADIUS Server #%u (%s:%d) Authentication Statistics:\n",
               ix + 1,
               misc_ipv4_txt(mib_auth.radiusAuthServerInetAddress, buf),
               mib_auth.radiusAuthClientServerInetPortNumber);

    P2COL("Rx Access Accepts",           "Tx Access Requests",        mib_auth.radiusAuthClientExtAccessAccepts,            mib_auth.radiusAuthClientExtAccessRequests);
    P2COL("Rx Access Rejects",           "Tx Access Retransmissions", mib_auth.radiusAuthClientExtAccessRejects,            mib_auth.radiusAuthClientExtAccessRetransmissions);
    P2COL("Rx Access Challenges",        "Tx Pending Requests",       mib_auth.radiusAuthClientExtAccessChallenges,         mib_auth.radiusAuthClientExtPendingRequests);
    P2COL("Rx Malformed Acc. Responses", "Tx Timeouts",               mib_auth.radiusAuthClientExtMalformedAccessResponses, mib_auth.radiusAuthClientExtTimeouts);
    P2COL("Rx Bad Authenticators",       NULL,                        mib_auth.radiusAuthClientExtBadAuthenticators,        0);
    P2COL("Rx Unknown Types",            NULL,                        mib_auth.radiusAuthClientExtUnknownTypes,             0);
    P2COL("Rx Packets Dropped",          NULL,                        mib_auth.radiusAuthClientExtPacketsDropped,           0);
    ICLI_PRINTF("%-27s %10s", "State:",
               mib_auth.state == VTSS_RADIUS_SERVER_STATE_DISABLED  ? "Disabled"  :
               mib_auth.state == VTSS_RADIUS_SERVER_STATE_NOT_READY ? "Not Ready" :
               mib_auth.state == VTSS_RADIUS_SERVER_STATE_READY     ? "Ready"     :
               "Dead");

    if (mib_auth.state == VTSS_RADIUS_SERVER_STATE_DEAD) {
        ICLI_PRINTF(" (%u seconds left)", mib_auth.dead_time_left_secs);
    }

    // radiusAuthClientExtRoundTripTime is measured in hundredth of a second. Convert that to ms.
    ICLI_PRINTF("\n%-27s %10u ms\n", "Round-Trip Time:", mib_auth.radiusAuthClientExtRoundTripTime * 10);

    if ((rc = vtss_radius_acct_client_mib_get((int)ix, &mib_acct)) != VTSS_RC_OK) {
        ICLI_PRINTF("Error: %s\n", error_txt(rc));
        return;
    }

    ICLI_PRINTF("\nRADIUS Server #%u (%s:%d) Accounting Statistics:\n",
               ix + 1,
               misc_ipv4_txt(mib_acct.radiusAccServerInetAddress, buf),
               mib_acct.radiusAccClientServerInetPortNumber);

    P2COL("Rx Responses",           "Tx Requests",         mib_acct.radiusAccClientExtResponses,          mib_acct.radiusAccClientExtRequests);
    P2COL("Rx Malformed Responses", "Tx Retransmissions",  mib_acct.radiusAccClientExtMalformedResponses, mib_acct.radiusAccClientExtRetransmissions);
    P2COL("Rx Bad Authenticators",  "Tx Pending Requests", mib_acct.radiusAccClientExtBadAuthenticators,  mib_acct.radiusAccClientExtPendingRequests);
    P2COL("Rx Unknown Types",       "Tx Timeouts",         mib_acct.radiusAccClientExtUnknownTypes,       mib_acct.radiusAccClientExtTimeouts);
    P2COL("Rx Packets Dropped",     NULL,                  mib_acct.radiusAccClientExtPacketsDropped,     0);
    ICLI_PRINTF("%-27s %10s", "State:",
               mib_acct.state == VTSS_RADIUS_SERVER_STATE_DISABLED  ? "Disabled"  :
               mib_acct.state == VTSS_RADIUS_SERVER_STATE_NOT_READY ? "Not Ready" :
               mib_acct.state == VTSS_RADIUS_SERVER_STATE_READY     ? "Ready"     :
               "Dead");
    if (mib_acct.state == VTSS_RADIUS_SERVER_STATE_DEAD) {
        ICLI_PRINTF(" (%u seconds left)", mib_acct.dead_time_left_secs);
    }

    // radiusAccClientExtRoundTripTime is measured in hundredth of a second. Convert that to ms.
    ICLI_PRINTF("\n%-27s %10u ms\n", "Round-Trip Time:", mib_acct.radiusAccClientExtRoundTripTime * 10);
}

static void VTSS_AUTH_ICLI_radius_show_server(u32 session_id,
                                              vtss_auth_host_index_t ix,
                                              const vtss_appl_auth_radius_server_conf_t *const conf)
{
    ICLI_PRINTF("RADIUS Server #%u:\n", ix + 1);
    ICLI_PRINTF("  Host name  : %s\n", conf->host);
    ICLI_PRINTF("  Auth port  : %u\n", conf->auth_port);
    ICLI_PRINTF("  Acct port  : %u\n", conf->acct_port);
    if (conf->timeout) {
        ICLI_PRINTF("  Timeout    : %u seconds\n", conf->timeout);
    } else {
        ICLI_PRINTF("  Timeout    :\n");
    }
    if (conf->retransmit) {
        ICLI_PRINTF("  Retransmit : %u times\n", conf->retransmit);
    } else {
        ICLI_PRINTF("  Retransmit :\n");
    }
    ICLI_PRINTF("  Key        : %s\n", conf->key);
}

static mesa_rc VTSS_AUTH_ICLI_radius_show(u32 session_id, BOOL statistics)
{
    vtss_appl_auth_radius_global_conf_t conf;
    vtss_appl_auth_radius_server_conf_t server;
    int                                 cnt;
    vtss_auth_host_index_t              ix;
    char                                buf[INET6_ADDRSTRLEN];

    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    ICLI_PRINTF("Global RADIUS Server Timeout      : %u seconds\n", conf.timeout);
    ICLI_PRINTF("Global RADIUS Server Retransmit   : %u times\n",   conf.retransmit);
    ICLI_PRINTF("Global RADIUS Server Deadtime     : %u minutes\n", conf.deadtime);
    ICLI_PRINTF("Global RADIUS Server Key          : %s\n",         conf.key);
    ICLI_PRINTF("Global RADIUS Server Attribute 4  : %s\n",         conf.nas_ip_address_enable ? misc_ipv4_txt(conf.nas_ip_address, buf) : "");
#ifdef VTSS_SW_OPTION_IPV6
    ICLI_PRINTF("Global RADIUS Server Attribute 95 : %s\n",         conf.nas_ipv6_address_enable ? misc_ipv6_txt(&conf.nas_ipv6_address, buf) : "");
#endif /* VTSS_SW_OPTION_IPV6 */
    ICLI_PRINTF("Global RADIUS Server Attribute 32 : %s\n",         conf.nas_identifier);

    for (cnt = ix = 0; ix < VTSS_APPL_AUTH_NUMBER_OF_SERVERS; ix++ ) {
        if ((vtss_appl_auth_radius_server_get(ix, &server) == VTSS_RC_OK) && (strlen(server.host) > 0)) {
            VTSS_AUTH_ICLI_radius_show_server(session_id, ix, &server);
            cnt++;
        }
    }
    if (!cnt) {
        ICLI_PRINTF("No servers configured!\n");
    }

    if (statistics) {
        for (ix = 0; ix < VTSS_APPL_AUTH_NUMBER_OF_SERVERS; ix++ ) {
            if ((vtss_appl_auth_radius_server_get(ix, &server) == VTSS_RC_OK) && (strlen(server.host) > 0)) {
                VTSS_AUTH_ICLI_radius_show_statistics(session_id, ix);
            }
        }
    }
    return VTSS_RC_OK;
}
#endif /* VTSS_SW_OPTION_RADIUS */

#ifdef VTSS_SW_OPTION_TACPLUS
static void VTSS_AUTH_ICLI_tacacs_show_server(u32 session_id,
                                              vtss_auth_host_index_t ix,
                                              const vtss_appl_auth_tacacs_server_conf_t *const conf)
{
    ICLI_PRINTF("TACACS+ Server #%u:\n", ix + 1);
    ICLI_PRINTF("  Host name  : %s\n", conf->host);
    ICLI_PRINTF("  Port       : %u\n", conf->port);
    if (conf->timeout) {
        ICLI_PRINTF("  Timeout    : %u seconds\n", conf->timeout);
    } else {
        ICLI_PRINTF("  Timeout    :\n");
    }
    ICLI_PRINTF("  Key        : %s\n", conf->key);
}

static mesa_rc VTSS_AUTH_ICLI_tacacs_show(u32 session_id)
{
    vtss_appl_auth_tacacs_global_conf_t conf;
    vtss_appl_auth_tacacs_server_conf_t server;
    int                                 cnt;
    vtss_auth_host_index_t              ix;

    IC_RC(vtss_appl_auth_tacacs_global_conf_get(&conf));
    ICLI_PRINTF("Global TACACS+ Server Timeout      : %u seconds\n", conf.timeout);
    ICLI_PRINTF("Global TACACS+ Server Deadtime     : %u minutes\n", conf.deadtime);
    ICLI_PRINTF("Global TACACS+ Server Key          : %s\n",         conf.key);

    for (cnt = ix = 0; ix < VTSS_APPL_AUTH_NUMBER_OF_SERVERS; ix++ ) {
        if ((vtss_appl_auth_tacacs_server_get(ix, &server) == VTSS_RC_OK) && (strlen(server.host) > 0)) {
            VTSS_AUTH_ICLI_tacacs_show_server(session_id, ix, &server);
            cnt++;
        }
    }
    if (!cnt) {
        ICLI_PRINTF("No servers configured!\n");
    }
    return VTSS_RC_OK;
}
#endif /* VTSS_SW_OPTION_TACPLUS */

#if defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH) || defined(VTSS_SW_OPTION_WEB) || defined(VTSS_SW_OPTION_FAST_CGI)
static mesa_rc VTSS_AUTH_ICLI_authen_agent_show(u32 session_id, vtss_appl_auth_agent_t agent)
{
    int                                i;
    vtss_appl_auth_authen_agent_conf_t c;
    vtss_appl_auth_authen_method_t     m;

    IC_RC(vtss_appl_auth_authen_agent_conf_get(agent, &c));
    ICLI_PRINTF("  %-7s : ", vtss_appl_auth_agent_name(agent));
    for (i = 0; i <= VTSS_APPL_AUTH_METHOD_PRI_IDX_MAX; i++) {
        m = c.method[i];
        if ((i == 0) || (m != VTSS_APPL_AUTH_AUTHEN_METHOD_NONE)) {
            ICLI_PRINTF("%s ", vtss_appl_auth_authen_method_name(m));
            if (m == VTSS_APPL_AUTH_AUTHEN_METHOD_NONE) {
                break;
            }
        }
    }
    ICLI_PRINTF("\n");
    return VTSS_RC_OK;
}

#ifdef VTSS_SW_OPTION_TACPLUS
static mesa_rc VTSS_AUTH_ICLI_author_agent_show(u32 session_id, vtss_appl_auth_agent_t agent)
{
    vtss_appl_auth_author_agent_conf_t c;

    IC_RC(vtss_appl_auth_author_agent_conf_get(agent, &c));
    ICLI_PRINTF("  %-7s : %s, commands ", vtss_appl_auth_agent_name(agent), vtss_appl_auth_author_method_name(c.method));
    if (c.cmd_enable) {
        ICLI_PRINTF("%u%s enabled, config-commands %s\n", c.cmd_priv_lvl, (c.cmd_priv_lvl < 15) ? "-15" : "", icli_bool_txt(c.cfg_cmd_enable));
    } else {
        ICLI_PRINTF("disabled\n");
    }
    return VTSS_RC_OK;
}
#endif /* VTSS_SW_OPTION_TACPLUS */

#ifdef VTSS_SW_OPTION_TACPLUS
static mesa_rc VTSS_AUTH_ICLI_acct_agent_show(u32 session_id, vtss_appl_auth_agent_t agent)
{
    vtss_appl_auth_acct_agent_conf_t c;

    IC_RC(vtss_appl_auth_acct_agent_conf_get(agent, &c));
    ICLI_PRINTF("  %-7s : %s, commands ", vtss_appl_auth_agent_name(agent), vtss_appl_auth_acct_method_name(c.method));
    if (c.cmd_enable) {
        ICLI_PRINTF("%u%s enabled", c.cmd_priv_lvl, (c.cmd_priv_lvl < 15) ? "-15" : "");
    } else {
        ICLI_PRINTF("disabled");
    }
    ICLI_PRINTF(", exec %s\n", icli_bool_txt(c.exec_enable));
    return VTSS_RC_OK;
}
#endif /* VTSS_SW_OPTION_TACPLUS */
#endif /* defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH) || defined(VTSS_SW_OPTION_WEB) || defined(VTSS_SW_OPTION_FAST_CGI) */
FUNCTION_END

EXPORT_BEGIN
EXPORT_END

HELP_UNENCRYPTED     = Specifies an UNENCRYPTED secret key will follow
HELP_UNENCRYPTED_KEY = The UNENCRYPTED (Plain Text) secret key. Notice that you have no chance to get the Plain Text secret key after this command. The system will always display the ENCRYPTED password.
HELP_ENCRYPTED       = Specifies an ENCRYPTED secret key will follow
HELP_ENCRYPTED_KEY   = The ENCRYPTED (hidden) secret key. Notice the ENCRYPTED secret key will be decoded by system internally. You cannot directly use it as same as the Plain Text and it is not human-readable text normally.

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH) || defined(VTSS_SW_OPTION_WEB) || defined(VTSS_SW_OPTION_FAST_CGI)

COMMAND = aaa authentication login { console | telnet | ssh | http } { [ local | radius | tacacs ] ... }

DOC_CMD_DESC    = Use the aaa authentication login command to configure the authentication methods.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

! aaa
CMD_VAR = 
RUNTIME =
HELP    = Authentication, Authorization and Accounting
BYWORD  = 

! authentication
CMD_VAR =
RUNTIME = 
HELP    = Authentication
BYWORD  = 

! login
CMD_VAR =
RUNTIME = 
HELP    = Login
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = VTSS_AUTH_ICLI_console_present
HELP    = Configure Console authentication
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = VTSS_AUTH_ICLI_telnet_present
HELP    = Configure Telnet authentication
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = VTSS_AUTH_ICLI_ssh_present
HELP    = Configure SSH authentication
BYWORD  = ssh : Option

! http
CMD_VAR = has_http
RUNTIME = VTSS_AUTH_ICLI_http_present
HELP    = Configure HTTP authentication
BYWORD  = http : Option

! local
CMD_VAR = has_local
RUNTIME = 
HELP    = Use local database for authentication
BYWORD  = local : Option

! radius
CMD_VAR = has_radius
RUNTIME = VTSS_AUTH_ICLI_radius_present
HELP    = Use RADIUS for authentication
BYWORD  = radius : Option

! tacacs
CMD_VAR = has_tacacs
RUNTIME = VTSS_AUTH_ICLI_tacacs_present
HELP    = Use TACACS+ for authentication
BYWORD  = tacacs : Option

VARIABLE_BEGIN
    vtss_appl_auth_authen_agent_conf_t ac = {{VTSS_APPL_AUTH_AUTHEN_METHOD_NONE}};
VARIABLE_END

CODE_BEGIN
    if (has_local) {
        ac.method[0] = VTSS_APPL_AUTH_AUTHEN_METHOD_LOCAL;
    } else if (has_radius) {
        ac.method[0] = VTSS_APPL_AUTH_AUTHEN_METHOD_RADIUS;
    } else if (has_tacacs) {
        ac.method[0] = VTSS_APPL_AUTH_AUTHEN_METHOD_TACACS;
    }

    if (has_local_1) {
        ac.method[1] = VTSS_APPL_AUTH_AUTHEN_METHOD_LOCAL;
    } else if (has_radius_1) {
        ac.method[1] = VTSS_APPL_AUTH_AUTHEN_METHOD_RADIUS;
    } else if (has_tacacs_1) {
        ac.method[1] = VTSS_APPL_AUTH_AUTHEN_METHOD_TACACS;
    }

    if (has_local_2) {
        ac.method[2] = VTSS_APPL_AUTH_AUTHEN_METHOD_LOCAL;
    } else if (has_radius_2) {
        ac.method[2] = VTSS_APPL_AUTH_AUTHEN_METHOD_RADIUS;
    } else if (has_tacacs_2) {
        ac.method[2] = VTSS_APPL_AUTH_AUTHEN_METHOD_TACACS;
    }

    if (has_console) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_CONSOLE, &ac));
    } else if (has_telnet) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_TELNET, &ac));
    } else if (has_ssh) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_SSH, &ac));
    } else if (has_http) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_HTTP, &ac));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH) || defined(VTSS_SW_OPTION_WEB) || defined(VTSS_SW_OPTION_FAST_CGI)

COMMAND = no aaa authentication login { console | telnet | ssh | http }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

! no
CMD_VAR = 
RUNTIME =
HELP    = 
BYWORD  = 

! aaa
CMD_VAR = 
RUNTIME =
HELP    = Authentication, Authorization and Accounting
BYWORD  = 

! authentication
CMD_VAR = 
RUNTIME =
HELP    = Authentication
BYWORD  = 

! login
CMD_VAR = 
RUNTIME =
HELP    = Login
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = VTSS_AUTH_ICLI_console_present
HELP    = Disable Console authentication
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = VTSS_AUTH_ICLI_telnet_present
HELP    = Disable Telnet authentication
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = VTSS_AUTH_ICLI_ssh_present
HELP    = Disable SSH authentication
BYWORD  = ssh : Option

! http
CMD_VAR = has_http
RUNTIME = VTSS_AUTH_ICLI_http_present
HELP    = Disable HTTP authentication
BYWORD  = http : Option

VARIABLE_BEGIN
    vtss_appl_auth_authen_agent_conf_t ac = {{VTSS_APPL_AUTH_AUTHEN_METHOD_NONE}};
VARIABLE_END

CODE_BEGIN
    if (has_console) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_CONSOLE, &ac));
    } else if (has_telnet) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_TELNET, &ac));
    } else if (has_ssh) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_SSH, &ac));
    } else if (has_http) {
        IC_RC(vtss_appl_auth_authen_agent_conf_set(VTSS_APPL_AUTH_AGENT_HTTP, &ac));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = (defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH)) && defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = aaa authorization { console | telnet | ssh } tacacs commands <0-15> [ config-commands ]

DOC_CMD_DESC    = Use the aaa authorization command to configure the authorization methods.
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = 
DOC_CMD_EXAMPLE = 

FUNC_NAME = 
FUNC_REUSE = 

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = 

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR = 

! aaa
CMD_VAR =
RUNTIME = 
HELP    = 
BYWORD  = 

! authorization
CMD_VAR =
RUNTIME = 
HELP    = Authorization
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = VTSS_AUTH_ICLI_console_present
HELP    = Configure Console command authorization
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = VTSS_AUTH_ICLI_telnet_present
HELP    = Configure Telnet command authorization
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = VTSS_AUTH_ICLI_ssh_present
HELP    = Configure SSH command authorization
BYWORD  = ssh : Option

! tacacs
CMD_VAR =
RUNTIME = VTSS_AUTH_ICLI_tacacs_present
HELP    = Use TACACS+ for authorization
BYWORD  = 

! commands
CMD_VAR =
RUNTIME = 
HELP    = Enable command authorization
BYWORD  = 

! <0-15>
CMD_VAR = priv_lvl
RUNTIME = 
HELP    = Command privilege level. Commands equal and above this level are authorized
BYWORD  = <PrivLvl : 0-15>

! config-commands
CMD_VAR = has_config_commands
RUNTIME = 
HELP    = Include configuration commands
BYWORD  = config-commands : Option

VARIABLE_BEGIN
    vtss_appl_auth_author_agent_conf_t ac = {VTSS_APPL_AUTH_AUTHOR_METHOD_TACACS, TRUE};
VARIABLE_END

CODE_BEGIN
    ac.cmd_priv_lvl = priv_lvl;

    if (has_config_commands) {
        ac.cfg_cmd_enable = TRUE;
    }

    if (has_console) {
        IC_RC(vtss_appl_auth_author_agent_conf_set(VTSS_APPL_AUTH_AGENT_CONSOLE, &ac));
    } else if (has_telnet) {
        IC_RC(vtss_appl_auth_author_agent_conf_set(VTSS_APPL_AUTH_AGENT_TELNET, &ac));
    } else if (has_ssh) {
        IC_RC(vtss_appl_auth_author_agent_conf_set(VTSS_APPL_AUTH_AGENT_SSH, &ac));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = (defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH)) && defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = no aaa authorization { console | telnet | ssh }

DOC_CMD_DESC    = 
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = 
DOC_CMD_EXAMPLE = 

FUNC_NAME = 
FUNC_REUSE = 

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR = 

! no
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! aaa
CMD_VAR = 
RUNTIME = 
HELP    = Authentication, Authorization and Accounting
BYWORD  = 

! authorization
CMD_VAR = 
RUNTIME = 
HELP    = Authorization
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = VTSS_AUTH_ICLI_console_present
HELP    = Disable Console authorization
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = VTSS_AUTH_ICLI_telnet_present
HELP    = Disable Telnet authorization
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = VTSS_AUTH_ICLI_ssh_present
HELP    = Disable SSH authorization
BYWORD  = ssh : Option

VARIABLE_BEGIN
    vtss_appl_auth_author_agent_conf_t ac = {VTSS_APPL_AUTH_AUTHOR_METHOD_NONE};
VARIABLE_END

CODE_BEGIN
    if (has_console) {
        IC_RC(vtss_appl_auth_author_agent_conf_set(VTSS_APPL_AUTH_AGENT_CONSOLE, &ac));
    } else if (has_telnet) {
        IC_RC(vtss_appl_auth_author_agent_conf_set(VTSS_APPL_AUTH_AGENT_TELNET, &ac));
    } else if (has_ssh) {
        IC_RC(vtss_appl_auth_author_agent_conf_set(VTSS_APPL_AUTH_AGENT_SSH, &ac));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = (defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH)) && defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = aaa accounting { console | telnet | ssh } tacacs { [ commands <0-15> ] [ exec ] }*1

DOC_CMD_DESC    = Use the aaa accounting command to configure the accounting methods.
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = 
DOC_CMD_EXAMPLE = 

FUNC_NAME = 
FUNC_REUSE = 

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = 

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR = 

! aaa
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! accounting
CMD_VAR = 
RUNTIME = 
HELP    = Accounting
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = VTSS_AUTH_ICLI_console_present
HELP    = Configure Console command accounting
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = VTSS_AUTH_ICLI_telnet_present
HELP    = Configure Telnet command accounting
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = VTSS_AUTH_ICLI_ssh_present
HELP    = Configure SSH command accounting
BYWORD  = ssh : Option

! tacacs
CMD_VAR = 
RUNTIME = VTSS_AUTH_ICLI_tacacs_present
HELP    = Use TACACS+ for accounting
BYWORD  = 

! commands
CMD_VAR = has_commands
RUNTIME = 
HELP    = Enable command accounting
BYWORD  = commands : Option

! <0-15>
CMD_VAR = priv_lvl
RUNTIME = 
HELP    = Command privilege level. Commands equal and above this level are accounted
BYWORD  = <PrivLvl : 0-15>

! exec
CMD_VAR = has_exec
RUNTIME = 
HELP    = Enable EXEC accounting
BYWORD  = exec : Option

VARIABLE_BEGIN
    vtss_appl_auth_acct_agent_conf_t ac = {VTSS_APPL_AUTH_ACCT_METHOD_TACACS};
VARIABLE_END

CODE_BEGIN
    if (has_commands) {
        ac.cmd_enable = TRUE;
        ac.cmd_priv_lvl = priv_lvl;
    }

    if (has_exec) {
        ac.exec_enable = TRUE;
    }

    if (has_console) {
        IC_RC(vtss_appl_auth_acct_agent_conf_set(VTSS_APPL_AUTH_AGENT_CONSOLE, &ac));
    } else if (has_telnet) {
        IC_RC(vtss_appl_auth_acct_agent_conf_set(VTSS_APPL_AUTH_AGENT_TELNET, &ac));
    } else if (has_ssh) {
        IC_RC(vtss_appl_auth_acct_agent_conf_set(VTSS_APPL_AUTH_AGENT_SSH, &ac));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = (defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH)) && defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = no aaa accounting { console | telnet | ssh }

DOC_CMD_DESC    = 
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = 
DOC_CMD_EXAMPLE = 

FUNC_NAME = 
FUNC_REUSE = 

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR = 

! no
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! aaa
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! accounting
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = 
HELP    = 
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = 
HELP    = 
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = 
HELP    = 
BYWORD  = ssh : Option

VARIABLE_BEGIN
    vtss_appl_auth_acct_agent_conf_t ac = {VTSS_APPL_AUTH_ACCT_METHOD_NONE};
VARIABLE_END

CODE_BEGIN
    if (has_console) {
        IC_RC(vtss_appl_auth_acct_agent_conf_set(VTSS_APPL_AUTH_AGENT_CONSOLE, &ac));
    } else if (has_telnet) {
        IC_RC(vtss_appl_auth_acct_agent_conf_set(VTSS_APPL_AUTH_AGENT_TELNET, &ac));
    } else if (has_ssh) {
        IC_RC(vtss_appl_auth_acct_agent_conf_set(VTSS_APPL_AUTH_AGENT_SSH, &ac));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = radius-server timeout <1-1000>

DOC_CMD_DESC    = Use the radius-server timeout command to configure the global RADIUS timeout value.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: radius-server
! 2: timeout
! 3: <seconds:1-1000>

CMD_VAR =
CMD_VAR =
CMD_VAR = seconds

HELP = Configure RADIUS
HELP = Time to wait for a RADIUS server to reply
HELP = Wait time in seconds

BYWORD =
BYWORD =
BYWORD = <Seconds : 1-1000>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.timeout = seconds;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = no radius-server timeout

DOC_CMD_DESC    = Use the no radius-server timeout command to reset the global RADIUS timeout value to default.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: radius-server
! 3: timeout

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP = Configure RADIUS
HELP = Time to wait for a RADIUS server to reply

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.timeout = VTSS_APPL_AUTH_TIMEOUT_DEFAULT;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = radius-server retransmit <1-1000>

DOC_CMD_DESC    = Use the radius-server retransmit command to configure the global RADIUS retransmit value.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: radius-server
! 2: retransmit
! 3: <retries:1-1000>

CMD_VAR =
CMD_VAR =
CMD_VAR = retries

HELP = Configure RADIUS
HELP = Specify the number of retries to active server
HELP = Number of retries for a transaction

BYWORD =
BYWORD =
BYWORD = <Retries : 1-1000>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.retransmit = retries;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = no radius-server retransmit

DOC_CMD_DESC    = Use the no radius-server retransmit command to reset the global RADIUS retransmit value to default.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: radius-server
! 3: retransmit

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP = Configure RADIUS
HELP = Specify the number of retries to active server

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.retransmit = VTSS_APPL_AUTH_RETRANSMIT_DEFAULT;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = radius-server deadtime <1-1440>

DOC_CMD_DESC    = Use the radius-server deadtime command to configure the global RADIUS deadtime value.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: radius-server
! 2: deadtime
! 3: <minutes:1-1440>

CMD_VAR =
CMD_VAR =
CMD_VAR = minutes

HELP = Configure RADIUS
HELP = Time to stop using a RADIUS server that doesn't respond
HELP = Time in minutes

BYWORD =
BYWORD =
BYWORD = <Minutes : 1-1440>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.deadtime = minutes;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = no radius-server deadtime

DOC_CMD_DESC    = Use the no radius-server deadtime command to reset the global RADIUS deadtime value to default.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: radius-server
! 3: deadtime

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP = Configure RADIUS
HELP = Time to stop using a RADIUS server that doesn't respond

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.deadtime = VTSS_APPL_AUTH_DEADTIME_DEFAULT;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = radius-server key { [unencrypted] <line1-63> | encrypted <word96-224> }

DOC_CMD_DESC    = Use the radius-server key command to configure the global RADIUS key.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: radius-server
! 2: key
! 3: unencrypted
! 4: <key:line1-63>
! 5: encrypted
! 6: <key:word96-224>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = unencrypted_key
CMD_VAR = has_encrypted
CMD_VAR = encrypted_key

HELP = Configure RADIUS
HELP = Set RADIUS encryption key
HELP = ##HELP_UNENCRYPTED
HELP = ##HELP_UNENCRYPTED_KEY
HELP = ##HELP_ENCRYPTED
HELP = ##HELP_ENCRYPTED_KEY

BYWORD =
BYWORD =
BYWORD =
BYWORD = <Key : line1-63>
BYWORD =
BYWORD = <Key : word224>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    if (vtss_appl_auth_radius_global_conf_get(&conf) == VTSS_RC_OK) {
        if (has_encrypted && encrypted_key) {
            conf.encrypted = TRUE;
            strncpy(conf.key, encrypted_key, sizeof(conf.key));
        } else if (unencrypted_key) {
            conf.encrypted = FALSE;
            strncpy(conf.key, unencrypted_key, sizeof(conf.key));
        }
        IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = no radius-server key

DOC_CMD_DESC    = Use the no radius-server key command to remove the global RADIUS key.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: radius-server
! 3: key

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP = Configure RADIUS
HELP = Set RADIUS encryption key

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.encrypted = FALSE;
    memset(conf.key, 0, sizeof(conf.key));
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = radius-server attribute 4 <ipv4_ucast>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: radius-server
! 2: attribute
! 3: 4
! 4: <ipv4:ipv4_ucast>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = ipv4

HELP =
HELP = NAS attributes
HELP = attribute number 4 = NAS-IP-Address
HELP = NAS-IP-Address

BYWORD =
BYWORD =
BYWORD = <VConst4 : Constant (4)>
BYWORD = <Ipv4 : ipv4_ucast>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.nas_ip_address = ipv4;
    conf.nas_ip_address_enable = TRUE;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = no radius-server attribute 4

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: radius-server
! 3: attribute
! 4: 4

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD = <VConst4 : Constant (4)>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.nas_ip_address_enable = FALSE;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS) && defined(VTSS_SW_OPTION_IPV6)

COMMAND = radius-server attribute 95 <ipv6_ucast>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: radius-server
! 2: attribute
! 3: 95
! 4: <ipv6:ipv6_ucast>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = ipv6

HELP =
HELP = NAS attributes
HELP = attribute number 95 = NAS-IPv6-Address
HELP = <NAS-IPv6-Address>

BYWORD =
BYWORD =
BYWORD = <VConst95 : Constant (95)>
BYWORD = <Ipv6 : ipv6_ucast>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.nas_ipv6_address = ipv6;
    conf.nas_ipv6_address_enable = TRUE;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS) && defined(VTSS_SW_OPTION_IPV6)

COMMAND = no radius-server attribute 95

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: radius-server
! 3: attribute
! 4: 95

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD = <VConst95 : Constant (95)>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    conf.nas_ipv6_address_enable = FALSE;
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = radius-server attribute 32 <line1-253>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: radius-server
! 2: attribute
! 3: 32
! 4: <id:line1-255>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = id

HELP =
HELP = NAS attributes
HELP = attribute number 32 = NAS-Identifier
HELP = NAS-Identifier

BYWORD =
BYWORD =
BYWORD = <VConst32 : Constant (32)>
BYWORD = <Id : line1-253>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    if (id) {
        IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
        strncpy(conf.nas_identifier, id, sizeof(conf.nas_identifier));
        IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = no radius-server attribute 32

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: radius-server
! 3: attribute
! 4: 32

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD = <VConst32 : Constant (32)>

VARIABLE_BEGIN
    vtss_appl_auth_radius_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_radius_global_conf_get(&conf));
    memset(conf.nas_identifier, 0, sizeof(conf.nas_identifier));
    IC_RC(vtss_appl_auth_radius_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = radius-server host <word1-255> [ auth-port <0-65535> ] [ acct-port <0-65535> ] [ timeout <1-1000> ] [ retransmit <1-1000> ] [ key { [unencrypted] <line1-63> | encrypted <word96-224> } ]

DOC_CMD_DESC    = Use the radius-server host command to add a new RADIUS host.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

! radius-server
CMD_VAR =
RUNTIME =
HELP    = Configure RADIUS
BYWORD  =

! host
CMD_VAR =
RUNTIME =
HELP    = Specify a RADIUS server
BYWORD  =

! <word1-255>
CMD_VAR = host_name
RUNTIME =
HELP    = Hostname or IPv4/IPv6 address
BYWORD  = <HostName : word1-255>

! auth-port
CMD_VAR = has_auth_port
RUNTIME =
HELP    = UDP port for RADIUS authentication server
BYWORD  = auth-port : Option

! <0-65535>
CMD_VAR = auth_port
RUNTIME =
HELP    = UDP port number or 0 to disable authentication
BYWORD  = <AuthPort : 0-65535>

! acct-port
CMD_VAR = has_acct_port
RUNTIME =
HELP    = UDP port for RADIUS accounting server
BYWORD  = acct-port : Option

! <0-65535>
CMD_VAR = acct_port
RUNTIME =
HELP    = UDP port number or 0 to disable accounting
BYWORD  = <AcctPort : 0-65535>

! timeout
CMD_VAR = has_timeout
RUNTIME =
HELP    = Time to wait for this RADIUS server to reply (overrides default)
BYWORD  = timeout : Option

! <1-1000>
CMD_VAR = seconds
RUNTIME =
HELP    = Wait time in seconds
BYWORD  = <Seconds : 1-1000>

! retransmit
CMD_VAR = has_retransmit
RUNTIME =
HELP    = Specify the number of retries to active server (overrides default)
BYWORD  = retransmit : Option

! <1-1000>
CMD_VAR = retries
RUNTIME =
HELP    = Number of retries for a transaction
BYWORD  = <Retries : 1-1000>

! key
CMD_VAR =
RUNTIME =
HELP    = Server specific key (overrides default)
BYWORD  = key : Option

! unencrypted
CMD_VAR =
RUNTIME =
HELP = ##HELP_UNENCRYPTED
BYWORD  =

! <line1-63>
CMD_VAR = unencrypted_key
RUNTIME =
HELP = ##HELP_UNENCRYPTED_KEY
BYWORD  = <Key : line1-63>

! encrypted
CMD_VAR = has_encrypted
RUNTIME =
HELP = ##HELP_ENCRYPTED
BYWORD  =

! <word96-224>
CMD_VAR = encrypted_key
RUNTIME =
HELP = ##HELP_ENCRYPTED_KEY
BYWORD  = <word96-224>

VARIABLE_BEGIN
    vtss_appl_auth_radius_server_conf_t server = {{0}, VTSS_APPL_AUTH_RADIUS_AUTH_PORT_DEFAULT, VTSS_APPL_AUTH_RADIUS_ACCT_PORT_DEFAULT, 0, 0, FALSE, {0}};
VARIABLE_END

CODE_BEGIN
    if (vtss_appl_auth_server_address_valid(host_name) != VTSS_RC_OK) {
        ICLI_PRINTF("%% RADIUS: invalid hostname or ip address\n");
        return ICLI_RC_ERROR;
    }
    if (host_name) {
        strncpy(server.host, host_name, sizeof(server.host));
    }
    if (has_auth_port) {
        server.auth_port = auth_port;
    }
    if (has_acct_port) {
        server.acct_port = acct_port;
    }
    if (has_timeout) {
        server.timeout = seconds;
    }
    if (has_retransmit) {
        server.retransmit = retries;
    }
    if (has_encrypted && encrypted_key) {
        server.encrypted = TRUE;
        strncpy(server.key, encrypted_key, sizeof(server.key));
    } else if (unencrypted_key) {
        server.encrypted = FALSE;
        strncpy(server.key, unencrypted_key, sizeof(server.key));
    }
    IC_RC(vtss_appl_auth_radius_server_add(&server));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = no radius-server host <word1-255> [ auth-port <0-65535> ] [ acct-port <0-65535> ]

DOC_CMD_DESC    = Use the no radius-server host command to delete an existing RADIUS host.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

! no
CMD_VAR =
RUNTIME =
HELP    =
BYWORD  =

! radius-server
CMD_VAR =
RUNTIME =
HELP    = Configure RADIUS
BYWORD  =

! host
CMD_VAR =
RUNTIME =
HELP    = Specify a RADIUS server
BYWORD  =

! <word1-255>
CMD_VAR = host_name
RUNTIME =
HELP    = Hostname or IPv4/IPv6 address
BYWORD  = <HostName : word1-255>

! auth-port
CMD_VAR = has_auth_port
RUNTIME =
HELP    = UDP port for RADIUS authentication server
BYWORD  = auth-port : Option

! <0-65535>
CMD_VAR = auth_port
RUNTIME =
HELP    = UDP port number
BYWORD  = <AuthPort : 0-65535>

! acct-port
CMD_VAR = has_acct_port
RUNTIME =
HELP    = UDP port for RADIUS accounting server
BYWORD  = acct-port : Option

! <0-65535>
CMD_VAR = acct_port
RUNTIME =
HELP    = UDP port number
BYWORD  = <AcctPort : 0-65535>

VARIABLE_BEGIN
    vtss_appl_auth_radius_server_conf_t server = {{0}, VTSS_APPL_AUTH_RADIUS_AUTH_PORT_DEFAULT, VTSS_APPL_AUTH_RADIUS_ACCT_PORT_DEFAULT, 0, 0, FALSE, {0}};
VARIABLE_END

CODE_BEGIN
    if (host_name) {
        strncpy(server.host, host_name, sizeof(server.host));
    }
    if (has_auth_port) {
        server.auth_port = auth_port;
    }
    if (has_acct_port) {
        server.acct_port = acct_port;
    }
    IC_RC(vtss_appl_auth_radius_server_del(&server));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = tacacs-server timeout <1-1000>

DOC_CMD_DESC    = Use the tacacs-server timeout command to configure the global TACACS+ timeout value.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: tacacs-server
! 2: timeout
! 3: <seconds:1-1000>

CMD_VAR =
CMD_VAR =
CMD_VAR = seconds

HELP = Configure TACACS+
HELP = Time to wait for a TACACS+ server to reply
HELP = Wait time in seconds

BYWORD =
BYWORD =
BYWORD = <Seconds : 1-1000>

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_tacacs_global_conf_get(&conf));
    conf.timeout = seconds;
    IC_RC(vtss_appl_auth_tacacs_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = no tacacs-server timeout

DOC_CMD_DESC    = Use the no tacacs-server timeout command to reset the global TACACS+ timeout value to default.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: tacacs-server
! 3: timeout

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP = Configure TACACS+
HELP = Time to wait for a TACACS+ server to reply

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_tacacs_global_conf_get(&conf));
    conf.timeout = VTSS_APPL_AUTH_TIMEOUT_DEFAULT;
    IC_RC(vtss_appl_auth_tacacs_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = tacacs-server deadtime <1-1440>

DOC_CMD_DESC    = Use the tacacs-server deadtime command to configure the global TACACS+ deadtime value.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: tacacs-server
! 2: deadtime
! 3: <minutes:1-1440>

CMD_VAR =
CMD_VAR =
CMD_VAR = minutes

HELP = Configure TACACS+
HELP = Time to stop using a TACACS+ server that doesn't respond
HELP = Time in minutes

BYWORD =
BYWORD =
BYWORD = <Minutes : 1-1440>

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_tacacs_global_conf_get(&conf));
    conf.deadtime = minutes;
    IC_RC(vtss_appl_auth_tacacs_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = no tacacs-server deadtime

DOC_CMD_DESC    = Use the no tacacs-server deadtime command to reset the global TACACS+ deadtime value to default.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: tacacs-server
! 3: deadtime

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP = Configure TACACS+
HELP = Time to stop using a TACACS+ server that doesn't respond

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_tacacs_global_conf_get(&conf));
    conf.deadtime = VTSS_APPL_AUTH_DEADTIME_DEFAULT;
    IC_RC(vtss_appl_auth_tacacs_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = tacacs-server key { [unencrypted] <line1-63> | encrypted <word96-224> }

DOC_CMD_DESC    = Use the tacacs-server key command to configure the global TACACS+ key.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: tacacs-server
! 2: key
! 3: unencrypted
! 4: <key:line1-63>
! 5: encrypted
! 6: <key:word96-224>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = unencrypted_key
CMD_VAR = has_encrypted
CMD_VAR = encrypted_key

HELP = Configure TACACS+
HELP = Set TACACS+ encryption key
HELP = ##HELP_UNENCRYPTED
HELP = ##HELP_UNENCRYPTED_KEY
HELP = ##HELP_ENCRYPTED
HELP = ##HELP_ENCRYPTED_KEY

BYWORD =
BYWORD =
BYWORD =
BYWORD = <Key : line1-63>
BYWORD =
BYWORD = <Key : word224>

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    if (vtss_appl_auth_tacacs_global_conf_get(&conf) == VTSS_RC_OK) {
        if (has_encrypted && encrypted_key) {
            conf.encrypted = TRUE;
            strncpy(conf.key, encrypted_key, sizeof(conf.key));
        } else if (unencrypted_key) {
            conf.encrypted = FALSE;
            strncpy(conf.key, unencrypted_key, sizeof(conf.key));
        }
        IC_RC(vtss_appl_auth_tacacs_global_conf_set(&conf));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = no tacacs-server key

DOC_CMD_DESC    = Use the no tacacs-server key command to remove the global TACACS+ key.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: tacacs-server
! 3: key

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP =
HELP = Configure TACACS+
HELP = Set TACACS+ encryption key

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_global_conf_t conf;
VARIABLE_END

CODE_BEGIN
    IC_RC(vtss_appl_auth_tacacs_global_conf_get(&conf));
    conf.encrypted = FALSE;
    memset(conf.key, 0, sizeof(conf.key));
    IC_RC(vtss_appl_auth_tacacs_global_conf_set(&conf));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = tacacs-server host <word1-255> [ port <0-65535> ] [ timeout <1-1000> ] [ key { [unencrypted] <line1-63> | encrypted <word96-224> } ]

DOC_CMD_DESC    = Use the tacacs-server host command to add a new TACACS+ host.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

! tacacs-server
CMD_VAR =
RUNTIME =
HELP    = Configure TACACS+
BYWORD  =

! host
CMD_VAR =
RUNTIME =
HELP    = Specify a TACACS+ server
BYWORD  =

! <word1-255>
CMD_VAR = host_name
RUNTIME =
HELP    = Hostname or IPv4/IPv6 address
BYWORD  = <HostName : word1-255>

! port
CMD_VAR = has_port
RUNTIME =
HELP    = TCP port for TACACS+ server
BYWORD  = port : Option

! <0-65535>
CMD_VAR = port
RUNTIME =
HELP    = TCP port number
BYWORD  = <Port : 0-65535>

! timeout
CMD_VAR = has_timeout
RUNTIME =
HELP    = Time to wait for this TACACS+ server to reply (overrides default)
BYWORD  = timeout : Option

! <1-1000>
CMD_VAR = seconds
RUNTIME =
HELP    = Wait time in seconds
BYWORD  = <Seconds : 1-1000>

! key
CMD_VAR =
RUNTIME =
HELP    = Server specific key (overrides default)
BYWORD  = key : Option

! unencrypted
CMD_VAR =
RUNTIME =
HELP = ##HELP_UNENCRYPTED
BYWORD  =

! <line1-63>
CMD_VAR = unencrypted_key
RUNTIME =
HELP = ##HELP_UNENCRYPTED_KEY
BYWORD  = <Key : line1-63>

! encrypted
CMD_VAR = has_encrypted
RUNTIME =
HELP = ##HELP_ENCRYPTED
BYWORD  =

! <word96-224>
CMD_VAR = encrypted_key
RUNTIME =
HELP = ##HELP_ENCRYPTED_KEY
BYWORD  = <word96-224>

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_server_conf_t server = {{0}, VTSS_APPL_AUTH_TACACS_PORT_DEFAULT, 0, 0, FALSE, {0}};
VARIABLE_END

CODE_BEGIN
    if (vtss_appl_auth_server_address_valid(host_name) != VTSS_RC_OK) {
        ICLI_PRINTF("%% TACACS: invalid hostname or ip address\n");
        return ICLI_RC_ERROR;
    }
    if (host_name) {
        strncpy(server.host, host_name, sizeof(server.host));
    }
    if (has_port) {
        server.port = port;
    }
    if (has_timeout) {
        server.timeout = seconds;
    }
    if (has_encrypted && encrypted_key) {
        server.encrypted = TRUE;
        strncpy(server.key, encrypted_key, sizeof(server.key));
    } else if (unencrypted_key) {
        server.encrypted = FALSE;
        strncpy(server.key, unencrypted_key, sizeof(server.key));
    }
    IC_RC(vtss_appl_auth_tacacs_server_add(&server));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = no tacacs-server host <word1-255> [ port <0-65535> ]

DOC_CMD_DESC    = Use the no tacacs-server host command to delete an existing TACACS+ host.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

! no
CMD_VAR =
RUNTIME =
HELP    =
BYWORD  =

! tacacs-server
CMD_VAR =
RUNTIME =
HELP    = Configure TACACS+
BYWORD  =

! host
CMD_VAR =
RUNTIME =
HELP    = Specify a TACACS+ server
BYWORD  =

! <word1-255>
CMD_VAR = host_name
RUNTIME =
HELP    = Hostname or IPv4/IPv6 address
BYWORD  = <HostName : word1-255>

! port
CMD_VAR = has_port
RUNTIME =
HELP    = TCP port for TACACS+ server
BYWORD  = port : Option

! <0-65535>
CMD_VAR = port
RUNTIME =
HELP    = TCP port number
BYWORD  = <Port : 0-65535>

VARIABLE_BEGIN
    vtss_appl_auth_tacacs_server_conf_t server = {{0}, VTSS_APPL_AUTH_TACACS_PORT_DEFAULT, 0, 0, FALSE, {0}};
VARIABLE_END

CODE_BEGIN
    if (host_name) {
        strncpy(server.host, host_name, sizeof(server.host));
    }
    if (has_port) {
        server.port = port;
    }
    IC_RC(vtss_appl_auth_tacacs_server_del(&server));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_APPL_AUTH_ENABLE_CONSOLE) || defined(VTSS_SW_OPTION_CLI_TELNET) || defined(VTSS_SW_OPTION_SSH) || defined(VTSS_SW_OPTION_WEB) || defined(VTSS_SW_OPTION_FAST_CGI)

COMMAND = show aaa

DOC_CMD_DESC    = Use the show aaa command to view the currently active authentication login methods.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

RUNTIME =

! 1: show
! 2: aaa

CMD_VAR =
CMD_VAR =

HELP =
HELP = Authentication, Authorization and Accounting methods

BYWORD =
BYWORD =

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    ICLI_PRINTF("Authentication : \n");
#ifdef VTSS_APPL_AUTH_ENABLE_CONSOLE
    IC_RC(VTSS_AUTH_ICLI_authen_agent_show(session_id, VTSS_APPL_AUTH_AGENT_CONSOLE));
#endif
#ifdef VTSS_SW_OPTION_CLI_TELNET
    IC_RC(VTSS_AUTH_ICLI_authen_agent_show(session_id, VTSS_APPL_AUTH_AGENT_TELNET));
#endif
#ifdef VTSS_SW_OPTION_SSH
    IC_RC(VTSS_AUTH_ICLI_authen_agent_show(session_id, VTSS_APPL_AUTH_AGENT_SSH));
#endif
#if defined(VTSS_SW_OPTION_WEB) || defined(VTSS_SW_OPTION_FAST_CGI)
    IC_RC(VTSS_AUTH_ICLI_authen_agent_show(session_id, VTSS_APPL_AUTH_AGENT_HTTP));
#endif

#ifdef VTSS_SW_OPTION_TACPLUS
    ICLI_PRINTF("Authorization : \n");
#ifdef VTSS_APPL_AUTH_ENABLE_CONSOLE
    IC_RC(VTSS_AUTH_ICLI_author_agent_show(session_id, VTSS_APPL_AUTH_AGENT_CONSOLE));
#endif
#ifdef VTSS_SW_OPTION_CLI_TELNET
    IC_RC(VTSS_AUTH_ICLI_author_agent_show(session_id, VTSS_APPL_AUTH_AGENT_TELNET));
#endif
#ifdef VTSS_SW_OPTION_SSH
    IC_RC(VTSS_AUTH_ICLI_author_agent_show(session_id, VTSS_APPL_AUTH_AGENT_SSH));
#endif
#endif /* VTSS_SW_OPTION_TACPLUS */

#ifdef VTSS_SW_OPTION_TACPLUS
    ICLI_PRINTF("Accounting : \n");
#ifdef VTSS_APPL_AUTH_ENABLE_CONSOLE
    IC_RC(VTSS_AUTH_ICLI_acct_agent_show(session_id, VTSS_APPL_AUTH_AGENT_CONSOLE));
#endif
#ifdef VTSS_SW_OPTION_CLI_TELNET
    IC_RC(VTSS_AUTH_ICLI_acct_agent_show(session_id, VTSS_APPL_AUTH_AGENT_TELNET));
#endif
#ifdef VTSS_SW_OPTION_SSH
    IC_RC(VTSS_AUTH_ICLI_acct_agent_show(session_id, VTSS_APPL_AUTH_AGENT_SSH));
#endif
#endif /* VTSS_SW_OPTION_TACPLUS */
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_RADIUS)

COMMAND = show radius-server [ statistics ]

DOC_CMD_DESC    = Use the show radius-server command to view the current RADIUS configuration and statistics.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

RUNTIME =

! 1: show
! 2: radius-server
! 3: statistics

CMD_VAR =
CMD_VAR =
CMD_VAR = has_statistics

HELP =
HELP = RADIUS configuration
HELP = RADIUS statistics

BYWORD =
BYWORD =
BYWORD = <Statistics : option>

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    IC_RC(VTSS_AUTH_ICLI_radius_show(session_id, has_statistics));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_TACPLUS)

COMMAND = show tacacs-server

DOC_CMD_DESC    = Use the show tacacs-server command to view the current TACACS+ configuration.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

RUNTIME =

! 1: show
! 2: tacacs-server

CMD_VAR =
CMD_VAR =

HELP =
HELP = TACACS+ configuration

BYWORD =
BYWORD =

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    IC_RC(VTSS_AUTH_ICLI_tacacs_show(session_id));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug aaa login { console | telnet | ssh | http } <word31> [ <word31> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! aaa
CMD_VAR =
RUNTIME =
HELP    = Authentication, Authorization and Accounting
BYWORD  = 

! login
CMD_VAR = 
RUNTIME = 
HELP    = Test login authentication, authorization and accounting
BYWORD  =

! console
CMD_VAR = has_console
RUNTIME =
HELP    = Console login
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME =
HELP    = Telnet login
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME =
HELP    = SSH login
BYWORD  = ssh : Option

! http
CMD_VAR = has_http
RUNTIME =
HELP    = Web login
BYWORD  = http : Option

! <word31>
CMD_VAR = username
RUNTIME =
HELP    = Username
BYWORD  = <Username : word31>

! <word31>
CMD_VAR = password
RUNTIME =
HELP    = Password
BYWORD  = <Password : word31>

VARIABLE_BEGIN
    vtss_appl_auth_agent_t agent = VTSS_APPL_AUTH_AGENT_CONSOLE;
    mesa_rc                rc;
    u8                     dbg_priv_lvl;
    u16                    dbg_agent_id;
VARIABLE_END

CODE_BEGIN
    if (has_console) {
        agent = VTSS_APPL_AUTH_AGENT_CONSOLE;
    } else if (has_telnet) {
        agent = VTSS_APPL_AUTH_AGENT_TELNET;
    } else if (has_ssh) {
        agent = VTSS_APPL_AUTH_AGENT_SSH;
    } else if (has_http) {
        agent = VTSS_APPL_AUTH_AGENT_HTTP;
    }

    rc = vtss_auth_login(agent, "dbg", username, password ? password : "", &dbg_priv_lvl, &dbg_agent_id);

    ICLI_PRINTF("rc: %s, agent: '%s', username: '%s', password: '%s', priv_lvl: '%u', agent_id: '%u'\n",
                error_txt(rc),
                vtss_appl_auth_agent_name(agent),
                username,
                password ? password : "",
                dbg_priv_lvl,
                dbg_agent_id);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = 

COMMAND = debug aaa cmd { console | telnet | ssh } <word31> [ priv-lvl <0-15> ] [ config-commands ] <line1-255>

DOC_CMD_DESC    = 
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = 
DOC_CMD_EXAMPLE = 

FUNC_NAME = 
FUNC_REUSE = 

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = 

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR = 

! debug
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! aaa
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! cmd
CMD_VAR = 
RUNTIME = 
HELP    = Test command authorization and accounting
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = 
HELP    = Console command
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = 
HELP    = Telnet command
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = 
HELP    = SSH Command
BYWORD  = ssh : Option

! <word31>
CMD_VAR = username
RUNTIME = 
HELP    = Username
BYWORD  = <Username : word31>

! priv-lvl
CMD_VAR = has_priv_lvl
RUNTIME = 
HELP    = Command privilege level - default is 15
BYWORD  = priv-lvl : Option

! <0-15>
CMD_VAR = priv_lvl
RUNTIME = 
HELP    = The privilege level of the command
BYWORD  = <PrivLvl : 0-15>

! config-commands
CMD_VAR = has_config_commands
RUNTIME = 
HELP    = Flag as configuration command
BYWORD  = config-commands : Option

! <line1-255>
CMD_VAR = command
RUNTIME = 
HELP    = The command
BYWORD  = <Command : line1-255>

VARIABLE_BEGIN
    vtss_appl_auth_agent_t agent = VTSS_APPL_AUTH_AGENT_CONSOLE;
    mesa_rc                rc;
    const u8               dbg_priv_lvl = 15;
    const u16              dbg_agent_id = 42;
    u8                     cmd_priv_lvl = 15;
VARIABLE_END

CODE_BEGIN
    if (has_console) {
        agent = VTSS_APPL_AUTH_AGENT_CONSOLE;
    } else if (has_telnet) {
        agent = VTSS_APPL_AUTH_AGENT_TELNET;
    } else if (has_ssh) {
        agent = VTSS_APPL_AUTH_AGENT_SSH;
    }

    if (has_priv_lvl) {
        cmd_priv_lvl = priv_lvl;
    }
    rc = vtss_auth_cmd(agent, "dbg", username, command ? command : "", dbg_priv_lvl, dbg_agent_id, TRUE, cmd_priv_lvl, has_config_commands);

    ICLI_PRINTF("rc: %s, agent: '%s', username: '%s', priv_lvl: '%u', cfg_cmd: '%d'\n",
                error_txt(rc),
                vtss_appl_auth_agent_name(agent),
                username,
                cmd_priv_lvl,
                has_config_commands);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = 

COMMAND = debug aaa logout { console | telnet | ssh } <word31>

DOC_CMD_DESC    = 
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = 
DOC_CMD_EXAMPLE = 

FUNC_NAME = 
FUNC_REUSE = 

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = 

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR = 

! debug
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! aaa
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! logout
CMD_VAR = 
RUNTIME = 
HELP    = Test logout accounting
BYWORD  = 

! console
CMD_VAR = has_console
RUNTIME = 
HELP    = Console logout
BYWORD  = console : Option

! telnet
CMD_VAR = has_telnet
RUNTIME = 
HELP    = Telnet logout
BYWORD  = telnet : Option

! ssh
CMD_VAR = has_ssh
RUNTIME = 
HELP    = SSH logout
BYWORD  = ssh : Option

! <word31>
CMD_VAR = username
RUNTIME = 
HELP    = Username
BYWORD  = <Username : word31>

VARIABLE_BEGIN
    vtss_appl_auth_agent_t agent = VTSS_APPL_AUTH_AGENT_CONSOLE;
    mesa_rc                rc;
    const u8               dbg_priv_lvl = 15;
    const u16              dbg_agent_id = 42; /* Must never be 0! */
VARIABLE_END

CODE_BEGIN
    if (has_console) {
        agent = VTSS_APPL_AUTH_AGENT_CONSOLE;
    } else if (has_telnet) {
        agent = VTSS_APPL_AUTH_AGENT_TELNET;
    } else if (has_ssh) {
        agent = VTSS_APPL_AUTH_AGENT_SSH;
    }

    rc = vtss_auth_logout(agent, "dbg", username, dbg_priv_lvl, dbg_agent_id);

    ICLI_PRINTF("rc: %s, agent: '%s', username: '%s'\n",
                error_txt(rc),
                vtss_appl_auth_agent_name(agent),
                username);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = 

COMMAND = aaa integrity-log

DOC_CMD_DESC    = 
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = 
DOC_CMD_EXAMPLE = 

FUNC_NAME = 
FUNC_REUSE = 

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = 

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR = 

! aaa
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! integrity-log
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

CODE_BEGIN
    vtss_auth_integrity_log();
    ICLI_PRINTF("Checksum for application+running-config logged\n");
CODE_END

CMD_END
