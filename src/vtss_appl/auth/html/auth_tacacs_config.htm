<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2023 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>TACACS+ Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

var reqObject, curServerCnt, newServerCnt;
var hostSize = 32;
var keySize  = 14;

// Help page magic
var help_page = "/help/help_auth_tacacs_config.htm";

var global_key_configured = false;

var oTChangeSecretKey = Array("No", "Yes");
var oVChangeSecretKey = Array(0, 1);

function changeGlobalSecretKey()
{
    var fld = document.getElementById('key');

    if (document.getElementById("change_secret_key").value == 1) {
        fld.disabled = false;
        if (fld.style.color === "gray") {
            // We have inserted the asterisks. Clear them.
            fld.style.color = "";
            fld.style.fontWeight = "";
            fld.value = "";
        }
    } else {
        fld.disabled = true;
        if (fld.value === "" && global_key_configured === "1") {
            // User hasn't input anything and a global key is configured. Make
            // that apparent to the user by writing a bunch of asterisks.
            fld.style.color = "gray";
            fld.style.fontWeight = "bold";
            fld.value = "************";
        }
    }
}

function changeServerSecretKey(i)
{
    var cbox = document.getElementById("key_change_" + i);
    var fld  = document.getElementById("key_"        + i);

    if (!cbox || !fld) {
        // Not yet added to document.
        return;
    }

    fld.disabled = !cbox.checked;
    if (!fld.disabled) {
        if (fld.style.color === "gray") {
            // We have inserted the asterisks. Clear them.
            fld.style.color = "";
            fld.style.fontWeight = "";
            fld.value = "";
        }
    } else {
        var fld2 = document.getElementById("key_configured_" + i);
        if (fld.value === "" && fld2 && fld2.value === "1") {
            // User hasn't input anything and a key is configured. Make that
            // apparent to the user by writing a bunch of asterisks.
            fld.style.color = "gray";
            fld.style.fontWeight = "bold";
            fld.value = "************";
        }
    }
}

function addGlobalTable(timeout, deadtime)
{
    var tb = document.getElementById('global_tbody');
    var frag = document.createDocumentFragment();
    var tr;
    var fld;

    // Timeout
    tr = CreateStyledElement("tr", "config");
    addTypedTextCell(tr, "td", "Timeout", "param_label");
    fld = addInputCell(tr, timeout, "cl", "timeout", 4, 4);
    fld.parentNode.appendChild(document.createTextNode(" seconds"));
    frag.appendChild(tr);

    // Deadtime
    tr = CreateStyledElement("tr", "config");
    addTypedTextCell(tr, "td", "Deadtime", "param_label");
    fld = addInputCell(tr, deadtime, "cl", "deadtime", 4, 4);
    fld.parentNode.appendChild(document.createTextNode(" minutes"));
    frag.appendChild(tr);

    // Change secret Key
    tr = CreateStyledElement("tr", "config");
    addTypedTextCell(tr, "td", "Change Secret Key", "param_label");
    addSelectCell(tr, oTChangeSecretKey, oVChangeSecretKey, 0, "cl", "change_secret_key", "100%", null, false, changeGlobalSecretKey);
    frag.appendChild(tr);

    // Key
    tr = CreateStyledElement("tr", "config");
    tr.id = "keyUpdateHeader";
    addTypedTextCell(tr, "td", "Key", "param_label");
    fld = addInputCell(tr, "", "cl", "key", keySize, configAuthKeyLen);
    frag.appendChild(tr);

    // Create the table
    clearChildNodes(tb);
    tb.appendChild(frag);
}

function addHostRow(i, frag, host)
{
    var td, tr = CreateStyledElement("tr", i % 2 ? "config_odd" : "config_even");
    var values = host.split("|");

    if (curServerCnt < configAuthServerCnt) {
        addCheckBoxCell(tr, 0, "c", "delete_" + i);
        td = addInputCell(tr, unescape(values[0]), "c", "host_" + i, hostSize, configAuthHostLen);
        td.readOnly = true;
        td = addInputCell(tr, values[1], "c", "port_" + i,  5, 5);
        td.readOnly = true;
        addInputCell(tr, parseInt(values[2], 10) === 0 ? "" : values[2], "c", "timeout_" + i, 4, 4);
        td = addCheckBoxCell(tr, 0, "c", "key_change_" + i);
        td.onchange = function() {changeServerSecretKey(i);};
        addInputCell(tr, "", "c", "key_" + i, keySize, configAuthKeyLen, "80%", 1, true);

        // Save whether a key is configured or not in a hidden element.
        td = addInputCell(tr, 0, "c", "key_configured_" + i, 4, 4);
        td.type = "hidden";
        td.value = values[3];
        frag.appendChild(tr);
        curServerCnt++;
    }
}

/*
# Configuration format:
#
# <timeout>#<deadtime>#<global_key_configured>#<host_config>
#
# timeout               :== unsigned int # global timeout
# deadtime              :== unsigned int # global deadtime
# global_key_configured :== boolean      # global key
#
# host_config :== <host 0>/<host 1>/...<host n>
#   host x := <hostname>|<port>|<timeout>|<key_configured>
#     hostname       :== string
#     port           :== 0..0xffff
#     timeout        :== unsigned int
#     key_configured :== boolean
#
*/
function processUpdate(req, ref)
{
    var frag, values, host, i, tb;

    if (redirectOnError(req)) {
        return;
    }

    curServerCnt = newServerCnt = 0;
    if (reqObject !== req) {
        reqObject = req;
    }

    if (req.responseText) {
        frag = document.createDocumentFragment();
        values = req.responseText.split("#");
        global_key_configured = values[2];
        addGlobalTable(values[0], values[1]);
        changeGlobalSecretKey();

        if (values[3]) {
            host = values[3].split("/");
            for (i = 0; i < host.length; i++) {
                addHostRow(i, frag, host[i]);
            }
        }
        tb = document.getElementById('server_tbody');
        clearChildNodes(tb);
        tb.appendChild(frag);

        if (values[3]) {
            for (i = 0; i < host.length; i++) {
                changeServerSecretKey(i);
            }
        }

        document.getElementById('addNewButton').disabled = (curServerCnt >= configAuthServerCnt);
    }
}

function addNewServer()
{
    var frag, tr, td, tb, del;

    if (curServerCnt >= configAuthServerCnt) {
        alert("The maximum number of hosts is " + configAuthServerCnt);
        return;
    }

    document.getElementById('addNewButton').disabled = true; // Only add one server at a time
    newServerCnt = 1;

    frag = document.createDocumentFragment();
    tr = CreateStyledElement("tr", curServerCnt % 2 ? "config_odd" : "config_even");

    td = addButtonCell(tr, "Delete", "c", "delNewButton");
    td.onclick = function() {
        document.getElementById("server_tbody").removeChild(tr);
        document.getElementById('addNewButton').disabled = false;
        newServerCnt = 0;
    };
    addInputCell(tr, "", "c", "host_" + curServerCnt, hostSize, configAuthHostLen);
    addInputCell(tr, configAuthTacacsPortDef, "c", "port_" + curServerCnt,  5, 5);
    addInputCell(tr, "", "c", "timeout_" + curServerCnt,    4, 4);
    var field = addCheckBoxCell(tr, 1, "c", "key_change_" + curServerCnt);
    field.type = "hidden";
    addInputCell(tr, "", "c", "key_" + curServerCnt, keySize, configAuthKeyLen);
    frag.appendChild(tr);

    tb = document.getElementById('server_tbody');
    tb.appendChild(frag);
}

function requestUpdate()
{
    loadXMLDoc("/config/auth_tacacs_config", processUpdate);
}

function checkForm(form)
{
    var i, newHost, newPort, host, port;

    if (!isWithinRange("timeout", configAuthTimeoutMin, configAuthTimeoutMax, "'Timeout'", " seconds")) {
        return false;
    }
    if (!isWithinRange("deadtime", configAuthDeadtimeMin, configAuthDeadtimeMax, "'Deadtime'", " minutes")) {
        return false;
    }
    for (i = 0; i < (curServerCnt + newServerCnt); i++) {
        if (document.getElementById("delete_" + i) && document.getElementById("delete_" + i).checked) {
            continue; // Don't check if it is going to be deleted
        }
        trimInput("host_" + i);
        if (!isValidHostOrIP("host_" + i, "Hostname")) {
            return false;
        }
        if (!isWithinRange("port_" + i, 0, 0xffff, "'Port'", "")) {
            return false;
        }
        if (document.getElementById("timeout_" + i).value.length) {
            if (!isWithinRange("timeout_" + i, configAuthTimeoutMin, configAuthTimeoutMax, "'Timeout'", " seconds")) {
                return false;
            }
        }
    }
    if (newServerCnt) {
        // Check against existing entries
        newHost = document.getElementById("host_" + curServerCnt).value;
        newPort = parseInt(document.getElementById("port_" + curServerCnt).value, 10);
        for (i = 0; i < (curServerCnt); i++) {
            host = document.getElementById("host_" + i).value;
            port = parseInt(document.getElementById("port_" + i).value, 10);
            if ((host == newHost) && (port == newPort)) {
                return GiveAlert("New hostname and port matches another entry",
                                 document.getElementById("host_" + curServerCnt));
            }
        }
    }
    return true;
}

function resetForm()
{
    processUpdate(reqObject);
}
 </script>
</head>

<body class="content" onload="requestUpdate();">

<form method="POST" action="/config/auth_tacacs_config" onsubmit="return checkForm(this);">

<h1>TACACS+ Server Configuration</h1>

<h2>Global Configuration</h2>
<table summary="Global Configuration" class="config">
 <tbody id="global_tbody">
 </tbody>
</table>

<h2>Server Configuration</h2>
<table summary="Server Configuration" class="config">
 <thead>
  <tr>
   <th>Delete</th>
   <th>Hostname</th>
   <th>Port</th>
   <th>Timeout</th>
   <th colspan="2">Change Secret Key</th>
  </tr>
 </thead>
 <tbody id="server_tbody">
 </tbody>
</table>

<p>
<input type="button" id="addNewButton" value="Add New Server" onclick="addNewServer();">
</p>

<p>
<input type="submit" value="Save">
<input type="button" value="Reset" onclick="resetForm();">
</p>

</form>

</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
