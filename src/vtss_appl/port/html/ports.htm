<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Port Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/HeaderControl.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_ports.htm";

var yesno = Array("images/no.gif", "images/yes.gif");
var ecmT = Array("Discard", "Restart"); // Excessive Collision Modes
var ecmV = Array("0", "1");

var fecModeT = Array("none", "r-fec", "auto"); // FEC modes without Reed-Solomon
var fecModeV = Array("0", "1", "3");

var fecModeRsT = Array("none", "r-fec", "rs-fec", "auto"); // FEC modes Including Reed-Solomon
var fecModeRsV = Array("0", "1", "2", "3");

var totOpt = new Hash();        // total set of speed options
// Set of dual-media options
var dualMediaT = Array("Dual", "RJ45", "SFP");
var dualMediaV = Array("2", "0", "1");

var MEBA_PORT_CAP_NONE              = 0x00000000; // No capabilities
var MEBA_PORT_CAP_AUTONEG           = 0x00000001; // Auto negotiation
var MEBA_PORT_CAP_10M_HDX           = 0x00000002; // 10 Mbps, half duplex
var MEBA_PORT_CAP_10M_FDX           = 0x00000004; // 10 Mbps, full duplex
var MEBA_PORT_CAP_100M_HDX          = 0x00000008; // 100 Mbps, half duplex
var MEBA_PORT_CAP_100M_FDX          = 0x00000010; // 100 Mbps, full duplex
var MEBA_PORT_CAP_1G_FDX            = 0x00000020; // 1 Gbps, full duplex
var MEBA_PORT_CAP_2_5G_FDX          = 0x00000040; // 2.5 Gbps, full duplex
var MEBA_PORT_CAP_5G_FDX            = 0x00000080; // 5Gbps, full duplex
var MEBA_PORT_CAP_10G_FDX           = 0x00000100; // 10Gbps, full duplex
var MEBA_PORT_CAP_25G_FDX           = 0x00000200; // 25Gbps, full duplex
var MEBA_PORT_CAP_FLOW_CTRL         = 0x00001000; // Flow control
var MEBA_PORT_CAP_COPPER            = 0x00002000; // Copper media
var MEBA_PORT_CAP_FIBER             = 0x00004000; // Fiber media
var MEBA_PORT_CAP_DUAL_COPPER       = 0x00008000; // Dual media, copper preferred
var MEBA_PORT_CAP_DUAL_FIBER        = 0x00010000; // Dual media, fiber preferred
var MEBA_PORT_CAP_SD_ENABLE         = 0x00020000; // Signal Detect enabled
var MEBA_PORT_CAP_SD_HIGH           = 0x00040000; // Signal Detect active high
var MEBA_PORT_CAP_SD_INTERNAL       = 0x00080000; // Signal Detect select internal
var MEBA_PORT_CAP_XAUI_LANE_FLIP    = 0x00200000; // Flip the XAUI lanes
var MEBA_PORT_CAP_VTSS_10G_PHY      = 0x00400000; // Connected to VTSS 10G PHY
var MEBA_PORT_CAP_SFP_DETECT        = 0x00800000; // Auto detect the SFP module
var MEBA_PORT_CAP_STACKING          = 0x01000000; // Stack port candidate
var MEBA_PORT_CAP_DUAL_SFP_DETECT   = 0x02000000; // Auto detect the SFP module for dual media
var MEBA_PORT_CAP_SFP_ONLY          = 0x04000000; // SFP only port (not dual media)
var MEBA_PORT_CAP_DUAL_NO_COPPER    = 0x08000000; // SFP copper not supported in dual media
var MEBA_PORT_CAP_SERDES_RX_INVERT  = 0x10000000; // Serdes RX signal is inverted
var MEBA_PORT_CAP_SERDES_TX_INVERT  = 0x20000000; // Serdes TX signal is inverted
var MEBA_PORT_CAP_INT_PHY           = 0x40000000; // Connected to internal PHY
var MEBA_PORT_CAP_NO_FORCE          = 0x80000000; // Force mode is unsupported
var MEBA_PORT_CAP_HDX               = (MEBA_PORT_CAP_10M_HDX | MEBA_PORT_CAP_100M_HDX);

var MESA_SPEED_UNDEFINED = 0; // Undefined
var MESA_SPEED_10M       = 1; // 10 M
var MESA_SPEED_100M      = 2; // 100 M
var MESA_SPEED_1G        = 3; // 1 G
var MESA_SPEED_2500M     = 4; // 2.5G
var MESA_SPEED_5G        = 5; // 5G or 2x2.5G
var MESA_SPEED_10G       = 6; // 10 G
var MESA_SPEED_25G       = 8; // 25G
var MESA_SPEED_AUTO      = 9; // Auto negotiation

var VTSS_APPL_PORT_MEDIA_CU   = 0;
var VTSS_APPL_PORT_MEDIA_DUAL = 2;

function createTableHdr(fc, hdx, pfc, dual_media, has_at_least_one_kr)
{
  var frag = document.createDocumentFragment();
  var tr, td;

  tr = CreateStyledElement("tr", "config_header");
  td = addTextHeaderCell(tr, "Port");
  td.setAttribute("rowSpan", 2);

  td = addTextHeaderCell(tr, "Link");
  td.setAttribute("rowSpan", 2);

  td = addTextHeaderCell(tr, "Warning");
  td.setAttribute("rowSpan", 2);

  addTextHeaderCell(tr, "Speed", "", 2);

  if (dual_media) {
      td = document.createElement("th");
      td.innerHTML = "Dual-media";
      td.setAttribute("rowSpan", 2);
      tr.appendChild(td);
  }

  addTextHeaderCell(tr, "Adv Duplex", "", 2);
  addTextHeaderCell(tr, "Adv speed", "", 6);

  if (fc) {
      addTextHeaderCell(tr, "Flow Control", "", 3);
  }
  if (pfc) {
      addTextHeaderCell(tr, "PFC", "", 2);
  }

  td = document.createElement("th");
  td.innerHTML = "Maximum<br/>Frame Size"; // Since it contains a break, we use the innerHTML property
  td.setAttribute("rowSpan", 2);
  tr.appendChild(td);

  if (hdx) {
      td = document.createElement("th");
      td.innerHTML = "Excessive<br/>Collision Mode"; // Same as above
      td.setAttribute("rowSpan", 2);
      tr.appendChild(td);
  }


  td = document.createElement("th");
  td.innerHTML = "Frame<br/>Length Check";
  td.setAttribute("rowSpan", 2);
  tr.appendChild(td);

  if (has_at_least_one_kr) {
      td = addTextHeaderCell(tr, "FEC Mode");
      td.setAttribute("rowSpan", 2);
  }

  frag.appendChild(tr);

  tr = CreateStyledElement("tr", "config_header");
  addTextHeaderCell(tr, "Current");
  addTextHeaderCell(tr, "Configured");
  addTextHeaderCell(tr, "Fdx");
  addTextHeaderCell(tr, "Hdx");
  addTextHeaderCell(tr, "10M");
  addTextHeaderCell(tr, "100M");
  addTextHeaderCell(tr, "1G");
  addTextHeaderCell(tr, "2.5G");
  addTextHeaderCell(tr, "5G");
  addTextHeaderCell(tr, "10G");

  if (fc) {
    addTextHeaderCell(tr, "Enable");
    addTextHeaderCell(tr, "Curr Rx");
    addTextHeaderCell(tr, "Curr Tx");
  }
  if (pfc) {
    addTextHeaderCell(tr, "Enable");
    addTextHeaderCell(tr, "Priority");
  }
  frag.appendChild(tr);

  var thead = document.getElementById('portHdr');
  clearChildNodes(thead);
  thead.appendChild(frag);
}

function SpeedSelectOptions(capabilities, enabled, auto, speed, fdx)
{
    // 'A' separated list of values
    // admin_state (bool), speed (mesa_port_speed_t), fdx (bool)

    // Default, disabled entry
    // disabled, MESA_SPEED_UNDEFINED, no_fdx
    var oT = Array("Disabled");
    var oV = Array("0A0A0");
    var oD = Array(false); // An array for disable option in drop down menu
    var val = oV[oV.length - 1];

    if(capabilities & MEBA_PORT_CAP_AUTONEG) {
        // Auto-negotiation
        // enabled, MESA_SPEED_AUTO, fdx
        oT.push("Automatic");
        oV.push("1A9A1");
        oD.push(false);
        if(enabled && auto) {
            val = oV[oV.length - 1];
        }
    }

    if(capabilities & MEBA_PORT_CAP_10M_HDX) {
        // Forced 10 Mbps, half duplex
        // enabled, MESA_SPEED_10M, no_fdx
        oT.push("10Mbps HDX");
        oV.push("1A1A0");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_10M && !fdx) {
            val = oV[oV.length - 1];
        }
    }

    if(capabilities & MEBA_PORT_CAP_10M_FDX) {
        // Forced 10 Mbps, full duplex
        // enabled, MESA_SPEED_10M, fdx
        oT.push("10Mbps FDX");
        oV.push("1A1A1");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_10M && fdx) {
            val = oV[oV.length - 1];
        }
    }

    if(capabilities & MEBA_PORT_CAP_100M_HDX) {
        // Forced 100 Mbps, half duplex
        // enabled, MESA_SPEED_100M, no_fdx
        oT.push("100Mbps HDX");
        oV.push("1A2A0");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if(enabled && !auto && speed === MESA_SPEED_100M && !fdx) {
            val = oV[oV.length - 1];
        }
    }

    if (capabilities & MEBA_PORT_CAP_100M_FDX) {
        // Forced 100 Mbps, full duplex
        // enabled, MESA_SPEED_100M, fdx
        oT.push("100Mbps FDX");
        oV.push("1A2A1");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_100M && fdx) {
            val = oV[oV.length - 1];
        }
    }

    if (capabilities & MEBA_PORT_CAP_1G_FDX) {
        // Forced 1Gbps, full duplex
        // enabled, MESA_SPEED_1G, fdx
        oT.push("1Gbps FDX");
        oV.push("1A3A1");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_1G && fdx) {
            val = oV[oV.length - 1];
        }
    }

    if (capabilities & MEBA_PORT_CAP_2_5G_FDX) {
        // Forced 2.5Gbps, full duplex
        // enabled, MESA_SPEED_2500M, fdx
        oT.push("2.5Gbps FDX");
        oV.push("1A4A1");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_2500M && fdx) {
            val = oV[oV.length - 1];
        }
    }

    if (capabilities & MEBA_PORT_CAP_5G_FDX) {
        // Forced 5Gbps, full duplex
        // enabled, MESA_SPEED_5G, fdx
        oT.push("5Gbps FDX");
        oV.push("1A5A1");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_5G && fdx) {
            val = oV[oV.length - 1];
        }
    }
    if (capabilities & MEBA_PORT_CAP_10G_FDX) {
        // Forced 10Gbps, full duplex
        // enabled, MESA_SPEED_10G, fdx
        oT.push("10Gbps FDX");
        oV.push("1A6A1");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_10G && fdx) {
            val = oV[oV.length - 1];
        }
    }
    if (capabilities & MEBA_PORT_CAP_25G_FDX) {
        // Forced 25Gbps, full duplex
        // enabled, MESA_SPEED_25G, fdx
        oT.push("25Gbps FDX");
        oV.push("1A8A1");
        // MEBA_PORT_CAP_NO_FORCE - force mode is unsupported, so disable the entry
        oD.push((capabilities & MEBA_PORT_CAP_NO_FORCE) && (capabilities & MEBA_PORT_CAP_COPPER) ? true : false);
        if (enabled && !auto && speed === MESA_SPEED_25G && fdx) {
            val = oV[oV.length - 1];
        }
    }

    // Collect the total set of options
    oV.each(function(val, ix){ totOpt.set(val, oT[ix]); });
    return [oT, oV, val, oD];
}

function UpdatedAdvEnabledness(capa, speed_fld, fdx_fld, hdx_fld, spd10_fld, spd100_fld, spd1000_fld, spd2500_fld, spd5g_fld, spd10g_fld)
{
    var dx_ena      = false;
    var spd10_ena   = false;
    var spd100_ena  = false;
    var spd1000_ena = false;
    var spd2500_ena = false;
    var spd5g_ena   = false;
    var spd10g_ena  = false;
    var selectedSpeed = speed_fld.options[speed_fld.selectedIndex].text;

    if (selectedSpeed === "Automatic") {
        // Don't have to check whether MEBA_PORT_CAP_AUTONEG is set, since it's
        // already checked in order to be able to get here.

        // We only support advertising on pure copper ports, and not dual media
        // ports.
        if (capa & MEBA_PORT_CAP_COPPER) {
            dx_ena      = (capa & (MEBA_PORT_CAP_HDX))                               !== 0;
            spd10_ena   = (capa & (MEBA_PORT_CAP_10M_HDX  | MEBA_PORT_CAP_10M_FDX))  !== 0;
            spd100_ena  = (capa & (MEBA_PORT_CAP_100M_HDX | MEBA_PORT_CAP_100M_FDX)) !== 0;
            spd1000_ena = (capa & (MEBA_PORT_CAP_1G_FDX))                            !== 0;
            spd2500_ena = (capa & (MEBA_PORT_CAP_2_5G_FDX))                          !== 0;
            spd5g_ena   = (capa & (MEBA_PORT_CAP_5G_FDX))                            !== 0;
            spd10g_ena  = (capa & (MEBA_PORT_CAP_10G_FDX))                           !== 0;
        }
    } else {
        // All advertisement checkboxes are to be disabled if we run forced
        // speed
    }

    fdx_fld.disabled     = !dx_ena;
    hdx_fld.disabled     = !dx_ena;
    spd10_fld.disabled   = !spd10_ena;
    spd100_fld.disabled  = !spd100_ena;
    spd1000_fld.disabled = !spd1000_ena;
    spd2500_fld.disabled = !spd2500_ena;
    spd5g_fld.disabled   = !spd5g_ena;
    spd10g_fld.disabled  = !spd10g_ena;
}

function OnSpeedChange(portno, capa)
{
    UpdatedAdvEnabledness(
        capa,
        $("speed_"          + portno),
        $("fdx_"            + portno),
        $("hdx_"            + portno),
        $("adv_speed_10_"   + portno),
        $("adv_speed_100_"  + portno),
        $("adv_speed_1000_" + portno),
        $("adv_speed_2500_" + portno),
        $("adv_speed_5g_"   + portno),
        $("adv_speed_10g_"  + portno));
}

function SpeedSelect(tr, portno, capabilities, enabled, auto, speed, fdx)
{
    var opts = SpeedSelectOptions(capabilities, enabled, auto, speed, fdx);

    var sel_fld = addSelectCell(tr, opts[0], opts[1], opts[2], "cr", "speed_" + portno, null, null, null, null, opts[3]);
    sel_fld.onchange = function () {OnSpeedChange(portno, capabilities);};

    // Make sure that all listboxes in the same column have the same width.
    // We use the 'em' units, which dynamically scales the listbox
    // with the zoom-factor. If we used the 'px' unit, the listbox
    // would have the same width no matter the zoom factor.
    // '1em' is the width of an 'M'.
    sel_fld.style.width = "10em"; // The longest string in the listbox is 11 characters wide, but none use capital Ms only, so we reduce it a few chars.
    return sel_fld;
}

function isPrioRange(str)
{
    var myReg;
    myReg = /^[\,\-01234567]+$/;

    return myReg.test(str);
}

function addRow(index, frag, values, has_at_least_one_kr) {
    var portno = parseInt(values[0], 10);
    var capa = parseInt(values[1], 10);
    var enable = parseInt(values[2], 10);
    var auto = parseInt(values[3], 10);
    var speed = parseInt(values[4], 10);
    var fdx = parseInt(values[5], 10);
    var maxframe = parseInt(values[6], 10);
    var fc = parseInt(values[7], 10);
    var flow = parseInt(values[8], 10);
    var link = values[9];
    var state = values[10];
    var rxpause = parseInt(values[11], 10);
    var txpause = parseInt(values[12], 10);
    var hdx = parseInt(values[13], 10);
    var exc = parseInt(values[14], 10);
    var adv_fdx = parseInt(values[15], 10);
    var adv_hdx = parseInt(values[16], 10);
    var adv_speed_10 = parseInt(values[17],10);
    var adv_speed_100 = parseInt(values[18],10);
    var adv_speed_1000 = parseInt(values[19],10);
    var adv_speed_2500 = parseInt(values[20],10);
    var adv_speed_5g = parseInt(values[21],10);
    var adv_speed_10g = parseInt(values[22],10);
    var phy_10g = parseInt(values[23],10);
    var pfc_cap = parseInt(values[24],10);
    var pfc = values[25];
    var frm_len_chk = parseInt(values[26], 10);
    var dual_media = parseInt(values[27], 10);
    var media_type = parseInt(values[28], 10);
    var has_kr = parseInt(values[29],10);
    var fec_mode = parseInt(values[30],10);
    var port_warnings_text = values[31];

    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    addTextCell(tr, configPortName(portno, 0), "cr");
    addImageCell(tr, "c", "images/led-" + link.toLowerCase() + ".gif", link);
    addImageCell(tr, "c", port_warnings_text === "" ? "images/led-off.gif" : "images/led-yellow.gif" , port_warnings_text);
    addTextCell(tr, state);
    var speed_fld = SpeedSelect(tr, portno, capa, enable, auto, speed, fdx);

    // dual-media configuration
    // Applicable only for dual-media ports
    if (dual_media) {
        if (dual_media === 2) {
            addSelectCell(tr, dualMediaT, dualMediaV, media_type, "cr", "dual_media_" + portno, "100%");
        } else {
            addTextCell(tr, " ", "c");
        }
    }

    var fdx_fld     = addCheckBoxCell(tr, adv_fdx,        "c", "fdx_"            + portno);
    var hdx_fld     = addCheckBoxCell(tr, adv_hdx,        "c", "hdx_"            + portno);
    var spd10_fld   = addCheckBoxCell(tr, adv_speed_10,   "c", "adv_speed_10_"   + portno);
    var spd100_fld  = addCheckBoxCell(tr, adv_speed_100,  "c", "adv_speed_100_"  + portno);
    var spd1000_fld = addCheckBoxCell(tr, adv_speed_1000, "c", "adv_speed_1000_" + portno);
    var spd2500_fld = addCheckBoxCell(tr, adv_speed_2500, "c", "adv_speed_2500_" + portno);
    var spd5g_fld   = addCheckBoxCell(tr, adv_speed_5g,   "c", "adv_speed_5g_"   + portno);
    var spd10g_fld  = addCheckBoxCell(tr, adv_speed_10g,  "c", "adv_speed_10g_"  + portno);

    // Update enabledness of the advertisement checkboxes.
    UpdatedAdvEnabledness(capa, speed_fld, fdx_fld, hdx_fld, spd10_fld, spd100_fld, spd1000_fld, spd2500_fld, spd5g_fld, spd10g_fld);

    // Flow control
    if (fc) {
        if (fc === 2) {
            addCheckBoxCell(tr, flow, "c", "flow_" + portno);
            addImageCell(tr, "c", yesno[rxpause], "Rx Pause");
            addImageCell(tr, "c", yesno[txpause], "Tx Pause");
        } else {
            addTextCell(tr, " ?", "c", 3);
        }
    }

    if (pfc_cap) {
        var pfc_ena = addCheckBoxCell(tr, (pfc === "") ? 0 : 1, "c", "pfc_ena_" + portno);
        var pfc_range = addInputCell(tr, (pfc === "") ? "0-7" : unescape(pfc), "cr", "pfc_range_" + portno, 5);
        pfc_range.setAttribute("maxLength", 15); /* 0,1,2,3,4,5,6,7 */
    }

    var edit_ctrl = addInputCell(tr, maxframe, "cr", "max_" + portno, 5);
    edit_ctrl.setAttribute("maxLength", configPortFrameSizeMax > 9999 ? 5 : 4);

    /* Excessive Collision only for HDX-capable */
    if (hdx) {
        if (hdx === 2) {
            addSelectCell(tr, ecmT, ecmV, exc, "cr", "exc_" + portno, "100%");
        } else {
            addTextCell(tr, " ", "c");
        }
    }

    addCheckBoxCell(tr, frm_len_chk, "c", "frm_len_chk_" + portno);

    if (has_at_least_one_kr) {
        if (has_kr) {
            if (capa & MEBA_PORT_CAP_25G_FDX) {
                // you can select rs-fec
                addSelectCell(tr, fecModeRsT, fecModeRsV, fec_mode, "cr", "fec_mode_" + portno, "100%");
            } else {
                // you can NOT select rs-fec
                addSelectCell(tr, fecModeT, fecModeV, fec_mode, "cr", "fec_mode_" + portno, "100%");
            }
        } else {
            addTextCell(tr, " ", "c");
        }
    }

    frag.appendChild(tr);       // Add row to fragment
}

function CreateControlBar(fc, hdx, pfc, dual_media, has_at_least_one_kr)
{
    var oV = totOpt.getKeys().sort();
    var oT = oV.map(function(val) { return totOpt.get(val); });
    var cBar = new HeaderControlBar([{text: "*", className: "cr"},
                                     "", "", "",
                                    {name: "speed_", options: [oT, oV]}]);
    if (dual_media) {
        cBar.extend([{name: "dual_media_", options: [dualMediaT, dualMediaV]}]);
    }

    cBar.extend([{name: "fdx_"}]);
    cBar.extend([{name: "hdx_"}]);
    cBar.extend([{name: "adv_speed_10_"}]);
    cBar.extend([{name: "adv_speed_100_"}]);
    cBar.extend([{name: "adv_speed_1000"}]);
    cBar.extend([{name: "adv_speed_2500_"}]);
    cBar.extend([{name: "adv_speed_5g_"}]);
    cBar.extend([{name: "adv_speed_10g_"}]);

    if (fc) {
        cBar.extend([{name: "flow_"}, null, null]);
    }

    if (pfc) {
        cBar.extend([{name: "pfc_ena_"}]);
        cBar.extend([{name: "pfc_range_"}]);
    }

    cBar.extend([{name: "max_"}]);

    if (hdx) {
        cBar.extend([{name: "exc_"}]);
    }

    cBar.extend([{name: "frm_len_chk_"}]);

    if (has_at_least_one_kr) {
        cBar.extend([{name: "fec_mode_"}]);
    }

    cBar.construct('portData');
}

function processUpdate(req, ref)
{
    if (redirectOnError(req, "/stack_error.htm")) {
        return;
    }

    var portconfig = req.responseText.split("|");
    var fc         = 0;
    var pfc        = 0;
    var hdx        = 0;
    var dual_media = 0;
    var port_cap   = 0;
    var has_kr     = 0;
    var has_fec    = 0;
    var has_at_least_one_kr = 0;

    for (i = 0; i < portconfig.length; i++) {
        if (portconfig[i]) {
            pval = portconfig[i].split("/");
            has_kr = parseInt(pval[29], 10);
            if (has_kr === 1) {
                has_at_least_one_kr = 1;
                break;
            }
        }
    }

    // Create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    for (i = 0; i < portconfig.length; i++) {

        if (portconfig[i]) {
            pval = portconfig[i].split("/");
            port_cap = parseInt(pval[1], 10);
            if (i === 0) {
                fc = parseInt(pval[7], 10);
                pfc = parseInt(pval[24], 10);
                hdx = parseInt(pval[13], 10);
                dual_media = parseInt(pval[27], 10);
                createTableHdr(fc, hdx, pfc, dual_media, has_at_least_one_kr);
            }
            addRow(i, frag, pval, has_at_least_one_kr);
        }
    }
    var tbody = document.getElementById(ref);
    clearChildNodes(tbody);
    if (!tbody.appendChild(frag)) { // Add Frag to table body
        alert("This browser doesn't support dynamic tables.");
    }

    CreateControlBar(fc, hdx, pfc, dual_media, has_at_least_one_kr);

    document.getElementById("update").style.visibility = "hidden";
}

function requestUpdate() {
    document.getElementById("update").style.visibility = "visible";
    loadXMLDoc("/config/ports", processUpdate, 'portData');
}

function checkForm(form)
{
    var fld1, fld2, fld3, fld4, fld5, fld6, speed;
    for(var i = configPortMin; i <= configNormalPortMax; i++) {
        fld1 = document.getElementById("max_" + i);
        if (fld1) {
            if (!isWithinRange("max_" + i, configPortFrameSizeMin, configPortFrameSizeMax, "'Maximum Frame Size'", " bytes.")) {
                return false;
            }
        }

        fld1 = document.getElementById("pfc_ena_" + i);
        fld2 = document.getElementById("flow_" + i);
        if (fld1 && fld2) {
            if (fld1.checked && fld2.checked) {
                return GiveAlert("Both PFC and Flow Control cannot both be enabled for the same port");
            }
        }

        if (fld1 && fld1.checked) {
            fld2 = document.getElementById("pfc_range_" + i);
            if (!isPrioRange(fld2.value)) {
                return GiveAlert("Not legal priority range:" + fld2.value);
            }
        }

        fld1 = $("speed_" + i);
        speed = parseInt(fld1.value.substring(2, 3), 10);

        fld2 = document.getElementById("dual_media_" + i);
        if (fld1 && fld2) {
            if (parseInt(fld2.value, 10) === VTSS_APPL_PORT_MEDIA_DUAL && speed !== MESA_SPEED_AUTO) {
                return GiveAlert("Cannot set forced speed/duplex for dual media interface(s): " + i, fld1);
            }
        }

        if (speed === MESA_SPEED_AUTO) {
            fld1 = $("fdx_" + i);
            fld2 = $("hdx_" + i);

            if (!fld1.checked && !fld2.checked) {
                return GiveAlert("At least one of Hdx or Fdx must be advertised", fld1);
            }
        }

        if (speed === MESA_SPEED_AUTO) {
            fld1 = $("adv_speed_10_"   + i);
            fld2 = $("adv_speed_100_"  + i);
            fld3 = $("adv_speed_1000_" + i);
            fld4 = $("adv_speed_2500_" + i);
            fld5 = $("adv_speed_5g_"   + i);
            fld6 = $("adv_speed_10g_"  + i);

            if (!fld1.checked && !fld2.checked && !fld3.checked && !fld4.checked && !fld5.checked && !fld6.checked) {
                return GiveAlert("At least one speed must be advertised", fld1);
            }
        }
    }

    return true;
}

function redirect()
{
    document.location.href = "ports.htm";
}

function saveConfig()
{
    if (checkForm() === false) {
        return false;
    }
    document.configForm.submit();
    /* Users maybe change connect port setting, it'll cause the HTTP session disconnect.
       We request again if over 3 seconds no response */
    setTimeout('redirect()', 3 * 1000);
    return true;
}

window.onload = function() {
    processResponseErrMsg();
    requestUpdate();
};

 </script>
</head>

<body class="content">

<h1>Port Configuration</h1>

<div class="refreshbar">
 <form action="#">
  <input type="button" value="Refresh" onclick="requestUpdate(); this.blur();">
  <img id="update" alt="" src="images/updating.gif">
 </form>
</div>

<form name="configForm" method="POST" action="/config/ports" onsubmit="return checkForm(this);">

<table id="portConfig" summary="Switch Port Configuration" class="config">
 <thead id="portHdr">
 </thead>
 <tbody id="portData">
 </tbody>
</table>

<p>
<input type="button" value="Save" onclick="saveConfig();">
<input type="reset" value="Reset">
</p>

</form>

<!-- IE caching bug -->
 <div style="visibility: hidden;">
 <img alt="" src="images/yes.gif">
 <img alt="" src="images/no.gif">
</div>

</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
