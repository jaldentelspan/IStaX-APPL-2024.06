/*
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
*/

/*
 Microchip is aware that some terminology used in this technical document is
 antiquated and inappropriate. As a result of the complex nature of software
 where seemingly simple changes have unpredictable, and often far-reaching
 negative results on the software's functionality (requiring extensive retesting
 and revalidation) we are unable to make the desired changes in all legacy
 systems without compromising our product or our clients' products.
*/

#ifndef _VTSS_APPL_MSTP_H_
#define _VTSS_APPL_MSTP_H_

#include <vtss/appl/types.h>
#include <vtss/appl/interface.h>
#include <vtss/appl/aggr.h>

/**
 * \file
 *
 * \brief Public MSTP management API
 *
 * \details This header file describes the MSTP control functions and
 * associated types and defines.
 *
 */

/** The common instance MSTI index */
#define VTSS_MSTI_CIST       0

/** The MSTID reserved for the Traffic Engineering instance (TE-MSTID) */
#define VTSS_MSTID_TE        0xffe    // 4094

/** Maximum supported MSTI instances.
 *
 * \note CIST occupies index zero, so valid (non-CIST) MSTI indexes
 * goes from 1 to (N_MSTI_MAX-1).
 */
#if !defined(VTSS_APPL_MSTP_MAX_MSTI)
#define VTSS_APPL_MSTP_MAX_MSTI      8
#endif

/**
 * 6.4.3 - adminPoint2Point values
 */
typedef enum {
    VTSS_APPL_MSTP_P2P_FORCETRUE,  /*!< The administrator requires the
                                    * MAC to be treated as if it is
                                    * connected to a point-to-point LAN,
                                    * regardless of any indications to
                                    * the contrary that are generated by
                                    * the MAC entity. */
    VTSS_APPL_MSTP_P2P_FORCEFALSE,  /*!< The administrator requires the
                                     * MAC to be treated as connected to a
                                     * non-point-to-point LAN, regardless
                                     * of any indications to the contrary
                                     * that are generated by the MAC
                                     * entity. */
    VTSS_APPL_MSTP_P2P_AUTO,        /*!< The administrator requires the
                                     * point-to-point status of the MAC to
                                     * be determined in accordance with
                                     * the specific MAC procedures defined
                                     * in 6.5. */
} vtss_appl_mstp_p2p_t;

/**
 * 7.4 - port state
 */
typedef enum {
    VTSS_APPL_MSTP_PORTSTATE_DISABLED,   /*!< Disabled/inactive port */
    VTSS_APPL_MSTP_PORTSTATE_DISCARDING, /*!< Discarding port */
    VTSS_APPL_MSTP_PORTSTATE_LEARNING,   /*!< Learning (but not forwarding) port */
    VTSS_APPL_MSTP_PORTSTATE_FORWARDING, /*!< Forwarding port */
} vtss_appl_mstp_portstate_t;

/** Value for automatic path cost (port) */
#define VTSS_APPL_MSTP_PORT_PATHCOST_AUTO   ((uint32_t)0)

/** Value signifying an event has never occurred
 * (timeSinceTopologyChange)
 */
#define VTSS_APPL_MSTP_TIMESINCE_NEVER      ((uint32_t)-1)

/**
 * Values for forceProtocolVersion (17.13.4)
 */
typedef enum {
    VTSS_APPL_MSTP_PROTOCOL_VERSION_COMPAT = 0, /*!< Compatible operation (STP) */
    VTSS_APPL_MSTP_PROTOCOL_VERSION_RSTP   = 2, /*!< RSTP Operation */
    VTSS_APPL_MSTP_PROTOCOL_VERSION_MSTP   = 3, /*!< MSTP Operation */
} vtss_appl_mstp_forceversion_t;

/** 14.2.1 and 13.12
 */
typedef enum {
    VTSS_MSTP_PORTROLE_MASTERPORT = 0,     /*!< a) A value of 0 indicates Master Port */
    VTSS_MSTP_PORTROLE_ALTBACKUPPORT = 1,  /*!< b) A value of 1 indicates Alternate or Backup. */
    VTSS_MSTP_PORTROLE_ROOTPORT = 2,       /*!< c) A value of 2 indicates Root. */
    VTSS_MSTP_PORTROLE_DESIGNATEDPORT = 3, /*!< d) A value of 3 indicates Designated. */
    VTSS_MSTP_PORTROLE_ALTERNATEPORT,      /*!< Alternate port */
    VTSS_MSTP_PORTROLE_BACKUPPORT,         /*!< Backup port */
    VTSS_MSTP_PORTROLE_UNKNOWNPORT,        /*!< Unknown port */
    VTSS_MSTP_PORTROLE_DISABLEDPORT        /*!< Disabled port */
} vtss_mstp_portrole_t;

/** Maximum valid VID value */
#define VTSS_APPL_MSTP_MAX_VID              4096

/** Minimum valid VID value */
#define VTSS_APPL_MSTP_MIN_VID              1

/** Null (invalid) VID value */
#define VTSS_APPL_MSTP_NULL_VID             0

/** Length of a bridge identifier - 2 bytes priority and 6 bytes
 * Bridge Address
 */
#define VTSS_APPL_MSTP_BRIDGEID_LEN         8

/** Maximum length of the MSTP configuration identifier name */
#define VTSS_APPL_MSTP_CONFIG_NAME_MAXLEN   32

/** MSTI map MD5 digest length */
#define VTSS_APPL_MSTP_DIGEST_LEN           16

/**
 * Type for representing a bridge instance ID - MSTID
 */
typedef uint16_t vtss_appl_mstp_mstid_t;

/**
 * 802.1Q - 8.9 MST Configuration table
 *
 * (Host order MSTIDs)
 *
 * For the purposes of calculating the Configuration Digest, the MST
 * Configuration Table is considered to contain 4096 consecutive
 * 16-bit elements, where each element of the table (with the
 * exception of the first and last) contains an MSTID value. The first
 * element of the table contains the value 0, the second element the
 * MSTID value corresponding to VID 1, the third element the MSTID
 * value corresponding to VID 2, and so on, with the next to last
 * element of the table containing the MSTID value corresponding to
 * VID 4094, and the last element containing the value 0.
 */
typedef struct {
    vtss_appl_mstp_mstid_t map[VTSS_APPL_MSTP_MAX_VID];  /*!< The MSTI mapping for each VID */
} vtss_appl_mstp_map_t;

/**
 * Bridge status structure (12.8.1.1.3 Outputs)
 */
typedef struct {
    /** Number of ports in bridge (max) */
    uint n_ports;

    /** a) Bridge Identifier - as defined in 9.2.5 of IEEE Std
     * 802.1D. The Bridge Identifier for the CIST.
     */
    uint8_t bridgeId[VTSS_APPL_MSTP_BRIDGEID_LEN];

    /** Time Since Topology Change - in an STP Bridge, the count in
     * seconds of the time elapsed since the Topology Change flag
     * parameter for the Bridge (8.5.3.12 of IEEE Std 802.1D, 1998
     * Edition) was last True, or in an RSTP or MSTP Bridge, the count
     * in seconds since tcWhile timer (13.21 of this standard or
     * 17.15.7 of IEEE Std 802.1D) for any Port was non-zero */
    uint32_t timeSinceTopologyChange;

    /** Topology Change Count - in an STP Bridge, the count of the times
     * the Topology Change flag parameter for the Bridge has been set
     * (i.e., transitioned from False to True) since the Bridge was
     * powered on or initialized, or in an RSTP or MSTP Bridge, the
     * count of times that there has been at least one non-zero
     * tcWhile timer (13.21 of this standard or 17.15.7 of IEEE Std
     * 802.1D). */
    uint32_t topologyChangeCount;

    /** d) Topology Change - in an STP Bridge, the value of the Topology
     * Change parameter (8.5.3.12 of IEEE Std 802.1D, 1998 Edition),
     * or in an RSTP or MSTP Bridge, asserted if the tcWhile timer for
     * any Port for the CIST (13.21 of this standard, 17.15.7 of IEEE
     * Std 802.1D) is non-zero. */
    mesa_bool_t topologyChange;

    /** e) Designated Root (13.23.3 of this standard, 17.18.7 of IEEE
     * Std 802.1D).
     */
    uint8_t designatedRoot[VTSS_APPL_MSTP_BRIDGEID_LEN];

    /** f) Root Path Cost (13.23.3 of this standard, 17.18.7 of IEEE
     * Std 802.1D).
     */
    uint32_t rootPathCost;

    /** g) Root Port (13.23.5 of this standard, 17.17.5 of IEEE Std
     * 802.1D).
     */
    uint32_t rootPort;

    /** h) Max Age (13.23.7 of this standard, 17.18.18 of IEEE Std
     * 802.1D).
     */
    uint32_t maxAge;

    /** i) Forward Delay (13.23.7 of this standard, 17.16.2 of IEEE
     * Std 802.1D).
     */
    uint32_t forwardDelay;

    /** j) Bridge Max Age (13.23.4 of this standard, 17.17.4 of IEEE
     * Std 802.1D).
     */
    uint32_t bridgeMaxAge;

    /** k) Bridge Hello Time (13.23.4 of this standard, 17.17.4 of
     * IEEE Std 802.1D). This parameter is present only if the Bridge
     * supports STP or RSTP.
    */
    uint32_t bridgeHelloTime;

    /** l) Bridge Forward Delay (13.23.4 of this standard, 17.17.4 of
     * IEEE Std 802.1D).
     */
    uint32_t bridgeForwardDelay;

    /** m) Hold Time (8.5.3.14 of IEEE Std 802.1D, 1998 Edition) or
     * Transmission Limit (TxHoldCount in 13.22 of this standard and
     * 17.16.6 of IEEE Std 802.1D).
    */
    uint32_t txHoldCount;

    /** n) forceVersion - the value of the Force Protocol Version
     * parameter for the Bridge (13.6.2 of this standard and 17.16.1
     * of IEEE Std 802.1D)
     */
    vtss_appl_mstp_forceversion_t forceVersion;

    /** o) CIST Regional Root Identifier (13.16.4). The Bridge
     * Identifier of the current CIST Regional Root.
     *
     * \note Only valid for the CIST.
     */
    uint8_t cistRegionalRoot[VTSS_APPL_MSTP_BRIDGEID_LEN];

    /** p) CIST Path Cost. The CIST path cost from the transmitting
     * Bridge to the CIST Regional Root.
     *
     * \note Only valid for the CIST.
     */
    uint32_t cistInternalPathCost;

    /** q) MaxHops (13.22.1).
     *
     * \note Only valid for the CIST.
     */
    uint8_t maxHops;

} vtss_appl_mstp_bridge_status_t;

/**
 * CIST Bridge configuration structure (12.8.1.3.2 Inputs)
 */
typedef struct {
    /** a) Bridge Max Age - the new value (13.23.4 of this standard,
     * 17.17.4 of IEEE Std 802.1D).
     */
    uint32_t bridgeMaxAge;

    /** b) Bridge Hello Time - the new value (13.23.4 of this standard,
     * 17.17.4 of IEEE Std 802.1D)
     */
    uint32_t bridgeHelloTime;

    /** c) Bridge Forward Delay - the new value (13.23.4 of this
     * standard, 17.17.4 of IEEE Std 802.1D).
     */
    uint32_t bridgeForwardDelay;

    /** d) Bridge Priority - the new value of the priority part of the
     * Bridge Identifier (13.23.2) for the CIST.
     *
     * \note Use the vtss_appl_mstp_set_bridge_priority() interface to set
     * this parameter.
     */
    uint8_t dummy;

    /** e) forceVersion - the new value of the Force Protocol Version
     * parameter for the Bridge (13.6.2 of this standard, 17.16.1 of
     * IEEE Std 802.1D).
     */
    vtss_appl_mstp_forceversion_t forceVersion;

    /** f) TxHoldCount - the new value of TxHoldCount (17.13.12 of IEEE Std 802.1D).
     */
    uint32_t txHoldCount;

    /** g) MaxHops - the new value of MaxHops (13.22.1).
     */
    uint8_t MaxHops;

    /** bpduFiltering - enable BPDU filtering for edge ports
     */
    mesa_bool_t bpduFiltering;

    /** bpduGuard - enable BPDU guard for edge ports
     */
    mesa_bool_t bpduGuard;

    /** Error Recovery Delay - the number of seconds until a STP
     * inconsistent port is recovered. Valid values are zero (recovery
     * disabled) or between 30 and 86400 (24 hours).
     */
    uint32_t errorRecoveryDelay;

} vtss_appl_mstp_bridge_param_t;

/**
 * Port status structure (12.8.2.1.3 Outputs)
 */
typedef struct {
    /** a) Uptime - count in seconds of the time elapsed since the Port
     * was last reset or initialized (BEGIN, 13.23).
     */
    uint32_t uptime;

    /** b) State - the current state of the Port (i.e., Disabled,
     * Listening, Learning, Forwarding, or Blocking) (8.4, 13.35 of
     * this standard, 17.5 of IEEE Std 802.1D).
     */
    vtss_appl_mstp_portstate_t state;

    /** b) State - port state (printable string) */
    char statestr[16];

    /** c) Port Identifier - the unique Port identifier comprising two
     * parts, the Port Number and the Port Priority field (13.24.12 of
     * this standard, 17.18.16 of IEEE Std 802.1D).
     */
    uint8_t portId[2];

    /** d) Path Cost (17.16.5 of IEEE Std 802.1D). */
    uint32_t pathCost;

    /** e) Designated Root (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D).
     */
    uint8_t designatedRoot[VTSS_APPL_MSTP_BRIDGEID_LEN];

    /** f) Designated Cost (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D).
     */
    uint32_t designatedCost;

    /** g) Designated Bridge (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D).
     */
    uint8_t designatedBridge[VTSS_APPL_MSTP_BRIDGEID_LEN];

    /** h) Designated Port (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D).
     */
    uint8_t designatedPort[2];

    /** i) Topology Change Acknowledge (17.18.37 of IEEE Std
     * 802.1D).
     */
    mesa_bool_t tcAck;

    /** j) Hello Time (13.24.13 of this standard, 17.18.18 of IEEE Std
     * 802.1D).
     */
    uint32_t helloTime;

    /** k) adminEdgePort (18.3.3 of IEEE Std 802.1D). Present in
     * implementations that support the identification of edge
     * ports.
     */
    mesa_bool_t adminEdgePort;

    /** l) operEdgePort (18.3.4 of IEEE Std 802.1D). Present in
     * implementations that support the identification of edge ports.
     */
    mesa_bool_t operEdgePort;

    /** 802.1D-l) autoEdgePort (17.13.3). Optional and provided only by RSTP
     * Bridges that support the automatic identification of edge
     * ports. */
    mesa_bool_t autoEdgePort;

    /** m) MAC Enabled - the current state of the MAC Enabled
     * parameter (6.4.2). Present if the implementation supports the
     * MAC Enabled parameter. */
    mesa_bool_t dummy;

    /** n) MAC Operational - the current state of the MAC Operational
     * parameter (6.4.2 of IEEE Std 802.1D,). Present if the
     * implementation supports the MAC Operational parameter.
     */
    mesa_bool_t macOperational;

    /** o) adminPointToPointMAC - the current state of the
     * adminPointToPointMAC parameter (6.4.3 of IEEE Std
     * 802.1D). Present if the implementation supports the
     * adminPointToPointMAC parameter.
     */
    vtss_appl_mstp_p2p_t adminPointToPointMAC;

    /** p) operPointToPointMAC - the current state of the
     * operPointToPointMAC parameter (6.4.3 of IEEE Std
     * 802.1D). Present if the implementation supports the
     * operPointToPointMAC parameter.
     */
    mesa_bool_t operPointToPointMAC;

    /** q) restrictedRole - the current state of the restrictedRole
     * parameter for the Port (13.25.14).
     */
    mesa_bool_t restrictedRole;

    /** r) restrictedTcn - the current state of the restrictedTcn
     * parameter for the Port (13.25.15).
     */
    mesa_bool_t restrictedTcn;

    /** s) Port Role - the current Port Role for the Port (i.e., Root,
     * Alternate, Designated, or Backup)
     */
    char rolestr[16];

    /** t) Disputed - the current value of the disputed variable for
     * the CIST for the Port (13.24, and 17.19 of IEEE Std 802.1D).
     */
    mesa_bool_t disputed;

} vtss_appl_mstp_port_status_t;

/**
 * Single priority vector structure. Vitesse extension.
 */
typedef struct {
    uint8_t  rootBridgeId[VTSS_APPL_MSTP_BRIDGEID_LEN];       /*!< CIST only - Regional root */
    uint32_t extRootPathCost;                                 /*!< CIST only - Exterior pathcost */
    uint8_t  regRootBridgeId[VTSS_APPL_MSTP_BRIDGEID_LEN];    /*!< Interior Root */
    uint32_t intRootPathCost;                                 /*!< Interior pathcost */
    uint8_t  DesignatedBridgeId[VTSS_APPL_MSTP_BRIDGEID_LEN]; /*!< Designated bridge */
    uint8_t  DesignatedPortId[2];                             /*!< Designated portId */
} vtss_appl_mstp_bridge_vector_t;

/**
 * Port vectors structure. Vitesse extension.
 */
typedef struct {
    vtss_appl_mstp_bridge_vector_t designated; /*!< Designated bridge vector*/
    vtss_appl_mstp_bridge_vector_t port;       /*!< Port bridge vector */
    vtss_appl_mstp_bridge_vector_t message;    /*!< Received bridge vector */
    char                           infoIs[16]; /*!< Port priority vector origin */
} vtss_appl_mstp_port_vectors_t;

/**
 * Port statistics structure. Vitesse extension.
 */
typedef struct {
    uint32_t stp_frame_xmits;        /*!< STP frames transmitted */
    uint32_t stp_frame_recvs;        /*!< STP frames received */
    uint32_t tcn_frame_xmits;        /*!< TCN frames transmitted */
    uint32_t tcn_frame_recvs;        /*!< TCN frames received */
    uint32_t rstp_frame_xmits;       /*!< RSTP frames transmitted */
    uint32_t rstp_frame_recvs;       /*!< RSTP frames received */
    uint32_t mstp_frame_xmits;       /*!< MSTP frames transmitted */
    uint32_t mstp_frame_recvs;       /*!< MSTP frames received */
    uint32_t unknown_frame_recvs;    /*!< Unknown frames received and discarded in error */
    uint32_t illegal_frame_recvs;    /*!< Illegal frames received and discarded in error */
} vtss_appl_mstp_port_statistics_t;

/**
 * Vlan bitmap structure. Vitesse extension.
 */
typedef struct {
    uint8_t vlan_bitmap[512];  /*!< Vlan bitmap for MSTI config */
} vtss_appl_mstp_vlan_bitmap_t;

/**
 * Port configuration structure (12.8.2.3.2 Inputs)
 */
typedef struct {
    /* b) Path Cost - the new value (13.37.1 of this standard, 17.16.5
     * of IEEE Std 802.1D).
     *
     * NB: See vtss_appl_mstp_msti_port_param_t
     */
    //uint32_t adminPathCost;

    /* c) Port Priority - the new value of the priority field for the
     * Port Identifier (13.24.12 of this standard, 17.18.7 of IEEE Std
     * 802.1D).
     *
     * NB: See vtss_appl_mstp_msti_port_param_t
     */
    //uint8_t  adminPortPriority;

    /** d) adminEdgePort - the new value of the adminEdgePort parameter
     * (18.3.3 of IEEE Std 802.1D).
     */
    mesa_bool_t adminEdgePort;

    /** e) autoEdgePort - the new value of the autoEdgePort parameter
     * (802.1D 17.13.3). */
    mesa_bool_t adminAutoEdgePort;

    /* f) MAC Enabled - the new value of the MAC Enabled parameter
     * (6.4.2).
     * NB: Not present in this implementation. See vtss_appl_mstp_port_enable().
     */
    //mesa_bool_t macEnabled;

    /** g) adminPointToPointMAC - the new value of the
     * adminPointToPointMAC parameter (6.4.3).
     */
    vtss_appl_mstp_p2p_t adminPointToPointMAC;

    /** g) restrictedRole - the new value of the restrictedRole
     * parameter for the Port (13.25.14).
     */
    mesa_bool_t restrictedRole;

    /** h) restrictedTcn - the new value of the restrictedTcn parameter
     * for the Port (13.25.15).
     */
    mesa_bool_t restrictedTcn;

    /** bpduGuard - enable BPDU guard on port (irrespective of bridge
     * bpduGuard setting).
     */
    mesa_bool_t bpduGuard;

} vtss_appl_mstp_port_param_t;

/**
 * Cist Port parameters.
 */
typedef struct {
    vtss_appl_mstp_port_param_t param;  /*!< The base MSTP port parameters */
    mesa_bool_t                   enable; /*!< Whether the port is controlled by MSTP */
} vtss_appl_mstp_port_config_t;

/**
 * MSTI Port configuration structure (12.8.2.4.2 Inputs)
 */
typedef struct {
    /** c) Path Cost - the new value (13.37.1).
     */
    uint32_t adminPathCost;

    /** d) Port Priority - the new value of the priority field for the
     * Port Identifier (13.24.12).
     */
    uint8_t adminPortPriority;
} vtss_appl_mstp_msti_port_param_t;

/**
 * Port management status - has the base MSTP status
 * vtss_appl_mstp_port_status_t plus additional info.
 */
typedef struct {
    mesa_bool_t enabled;                  /*!< Enabled for xSTP */
    mesa_bool_t active;                   /*!< Active for xSTP */
    uint parent;                   /*!< Aggregated? */
    const char *fwdstate;          /*!< Current fwdstate */
    vtss_appl_mstp_port_status_t core;  /*!< Core RSTP state (if active) */
} vtss_appl_mstp_port_mgmt_status_t;

/**
 *  MST Configuration Table. See 12.12.3.
 */
typedef struct {
    char configname[VTSS_APPL_MSTP_CONFIG_NAME_MAXLEN]; /*!< The Configuration Name */
    uint16_t revision;                                       /*!< The Configuration Revision */
    vtss_appl_mstp_map_t map;                           /*!< The Configuration Mapping */
} vtss_appl_mstp_msti_config_t;

/**
 * Bridge instance parameters. See 12.8.1.2/12.8.1.4.
 */
typedef struct {
    uint8_t priority; /*!< The priority part of the CIST/MSTI Bridge
                  * Identifier (13.23.2) */
} vtss_appl_mstp_msti_param_t;

/**
 * Type for representing a bridge instance index - MSTI
 */
typedef uint8_t vtss_appl_mstp_msti_t;

#ifdef __cplusplus
extern "C" {
#endif

/**
 * 12.8.1.1 Get Bridge Protocol Parameters
 *
 * Purpose: To read current parameters in the Bridge's Bridge Protocol
 * Entity.
 *
 * \param conf [IN] The bridge configuration data
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_system_config_get(vtss_appl_mstp_bridge_param_t *conf);

/**
 * 12.8.1.3 Set Bridge Protocol Parameters
 *
 * To modify parameters in the Bridge's Bridge Protocol Entity, in
 * order to force a configuration of the spanning tree and/or tune the
 * reconfiguration time to suit a specific topology. In RSTP and MSTP
 * implementations, this operation causes these values to be set for
 * all Ports of the Bridge.
 *
 * \param conf [IN] The bridge configuration data
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_system_config_set(const vtss_appl_mstp_bridge_param_t *conf);

/**
 * Read MSTI Mapping parameters
 *
 * Reads the current MSTI mapping configuration, as well as the
 * resulting configuration digest as described in 802.1Q-2005.
 *
 * \param conf [OUT]       The MSTI mapping configuration
 *
 * \param cfg_digest [OUT] The configuration digest, This pointer is
 * optional (may be NULL).
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_msti_config_get(vtss_appl_mstp_msti_config_t *conf,
                               uint8_t cfg_digest[VTSS_APPL_MSTP_DIGEST_LEN]);

/**
 * 12.12.3 Set MST Configuration Table
 *
 * \param conf [IN] A table mapping each of the 4096 VLANs to a
 * corresponding MSTI. (802.1Q - 8.9). Entry 0 is skipped. The
 * remainder of entries must map to a valid MSTI index, with the CIST
 * having the value \e '0'. Initially, all VID's map to the CIST.
 * The \e conf structure also contain the configuration name and revision.
 *
 * \return VTSS_RC_OK if the map contain valid mappings, and other
 * parametrs have valid values.
 *
 * \note The current implementation do not distinguish between FID's
 * and VID's, i.e. there is a 1:1 mapping between them.
 *
 * \note MSTI instances in the bridge will be created and deleted as a
 * side-effect of setting the mapping table.
 *
 * Likewise, active CIST ports will be probed for MSTI membership and
 * MSTI ports will be added respectively removed to synchronize
 * instantiated ports in the active MSTIs.
 */
mesa_rc
vtss_appl_mstp_msti_config_set(const vtss_appl_mstp_msti_config_t *conf);

/**
 * Aux: Get MSTI instance from VLAN id
 *
 * Purpose: To return the MSTI instance to which a VLAN id is mapped,
 *
 * \param vid [IN] The VLAN id to get the corresponding MSTI for.
 *
 * \param msti [OUT] The MSTP instance to which the VLAN id is mapped.
 *
 * \return VTSS_RC_OK if the operation succeeded. If not, msti is undefined.
 */
mesa_rc
vtss_appl_mstp_msti_lookup(mesa_vid_t vid, vtss_appl_mstp_msti_t *msti);

/**
 * 12.8.1.2 Get MSTI Bridge Protocol Parameters
 *
 * Purpose: To read parameters in the Bridge's Bridge Protocol Entity
 * for the specified Spanning Tree instance.
 *
 * \param msti [IN] The MSTP instance number. The CIST has instance number
 * zero.
 *
 * \param param [OUT] The current MSTI parameters (the \em
 * bridgePriority).
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_msti_param_get(vtss_appl_mstp_msti_t msti,
                              vtss_appl_mstp_msti_param_t *param);

/**
 * 12.8.1.4 Set MSTI Bridge Protocol Parameters
 *
 * To modify parameters in the Bridge's Bridge Protocol Entity for the
 * specified Spanning Tree instance, in order to force a configuration
 * of the spanning tree and/or to suit a specific topology.
 *
 * \param msti [IN] The MSTP instance number. The CIST has instance
 * number zero.
 *
 * \param param [IN] The MSTI parameters (the \em bridgePriority).
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail
 * if the given \e msti is not a valid instance number.
 */
mesa_rc
vtss_appl_mstp_msti_param_set(vtss_appl_mstp_msti_t msti,
                              const vtss_appl_mstp_msti_param_t *param);

/**
 * 12.8.2.1 Get CIST port parameters
 *
 * Purpose: To read parameters for a CIST Port in the bridge's Bridge
 * Protocol Entity.
 *
 * \param ifindex [IN] Interface index - the logical interface index of
 * the Bridge Port. This may be any physical switch port.
 *
 * \param conf [OUT] The current port configuration data (12.8.2.3.2
 * Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail
 * if the given interface index is not a valid port number.
 *
 * \note To get Port Priority or Port Path Cost, use \em
 * vtss_appl_mstp_get_interface_mstiport_config() with the \e msti
 * parameter set to VTSS_MSTI_CIST.
 */
mesa_rc
vtss_appl_mstp_interface_config_get(vtss_ifindex_t ifindex,
                                    vtss_appl_mstp_port_config_t *conf);

/**
 * 12.8.2.3 Set CIST port parameters
 *
 * Purpose: To modify parameters for a Port in the bridge's Bridge
 * Protocol Entity in order to force a configuration of the spanning
 * tree for the CIST.
 *
 * Procedure: In RSTP and MSTP Bridges, the Path Cost (13.37.1 of this
 * standard, 17.16.5 of IEEE Std 802.1D) and Port Priority (17.18.7 of
 * IEEE Std 802.1D) parameters for the Port are updated using the
 * supplied values. The reselect parameter value for the CIST for the
 * Port (13.24 of this standard, 17.18.29 of IEEE Std 802.1D) is set
 * TRUE, and the selected parameter for the CIST for the Port (13.24
 * of this standard, 17.18.31 of IEEE Std 802.1D) is set FALSE.
 *
 * \param ifindex [IN] Interface index - the logical interface index of
 * the Bridge Port. This may be any physical switch port.
 *
 * \param conf [IN] The port configuration data (12.8.2.3.2 Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail
 * if the given interface index is not a valid port number.
 *
 * \note To set Port Priority or Port Path Cost, use \em
 * vtss_appl_mstp_set_interface_mstiport_config() with the \e msti
 * parameter set to VTSS_MSTI_CIST.
 */
mesa_rc
vtss_appl_mstp_interface_config_set(vtss_ifindex_t ifindex,
                                    const vtss_appl_mstp_port_config_t *conf);

/**
 * 12.8.2.1 Get CIST port parameters for aggregations
 *
 * Purpose: To get CIST port parameters for STP ports formed by link
 * aggregations. All aggregations share the \e same set of parameters.
 *
 * See vtss_appl_mstp_get_interface_config().
 *
 * \param conf [OUT] The port configuration data (12.8.2.3.2 Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded.
 *
 */
mesa_rc
vtss_appl_mstp_aggregation_config_get(vtss_appl_mstp_port_config_t *conf);

/**
 * 12.8.2.3 Set CIST port parameters for aggregations
 *
 * Purpose: To set CIST port parameters for STP ports formed by link
 * aggregations. All aggregations share the \e same set of parameters.
 *
 * See vtss_appl_mstp_set_interface_config().
 *
 * \param conf [OUT] The port configuration data (12.8.2.3.2 Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_aggregation_config_set(const vtss_appl_mstp_port_config_t *conf);

/**
 * 12.8.2.2 Get MSTI port parameters
 *
 * Purpose: To read parameters for a MSTI/CIST Port in the Bridge's
 * Bridge Protocol Entity.
 *
 * \param ifindex [IN] Interface index - the logical interface index of
 * the Bridge Port. This may be any physical switch port.
 *
 * \param msti [IN] The MSTP port instance number. The CIST has
 * instance number zero.
 *
 * \param param [IN] The current CIST/MSTI port configuration data
 * (12.8.2.4.2 Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail
 * if the given interface index is not a valid port number.
 */
mesa_rc
vtss_appl_mstp_interface_mstiport_config_get(vtss_ifindex_t ifindex,
                                             vtss_appl_mstp_msti_t msti,
                                             vtss_appl_mstp_msti_port_param_t *param);

/**
 * 12.8.2.4 Set MSTI port parameters
 *
 * Purpose: To modify parameters for a Port in the Bridge's Bridge
 * Protocol Entity in order to force a configuration of the spanning
 * tree for the specified Spanning Tree instance.
 *
 * Procedure: The Path Cost (13.37.1 of this standard, 17.16.5 of IEEE
 * Std 802.1D) and Port Priority (17.18.7 of IEEE Std 802.1D)
 * parameters for the specified MSTI and Port are updated using the
 * supplied values. The reselect parameter value for the MSTI for the
 * Port (13.24) is set TRUE, and the selected parameter for the MSTI
 * for the Port () is set FALSE.
 *
 * \param ifindex [IN] Interface index - the logical interface index of
 * the Bridge Port. This may be any physical switch port.
 *
 * \param msti [IN] The MSTP port instance number. The CIST has instance
 * number zero.
 *
 * \param param [OUT] The port configuration data (12.8.2.4.2 Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail
 * if the given interface index is not a valid port number.
 */
mesa_rc
vtss_appl_mstp_interface_mstiport_config_set(vtss_ifindex_t ifindex,
                                             vtss_appl_mstp_msti_t msti,
                                             const vtss_appl_mstp_msti_port_param_t *param);

/**
 * 12.8.2.2 Get MSTI port parameters for aggregations
 *
 * Purpose: To get MSTI port parameters for STP ports formed by link
 * aggregations. All aggregations share the \e same set of parameters.
 *
 * See vtss_appl_mstp_get_interface_mstiport_config().
 *
 * \param msti [IN] The MSTI instance number. The CIST has
 * instance number zero.
 *
 * \param param [OUT] The aggregated ports configuration data
 * (12.8.2.4.2 Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_aggregation_mstiport_config_get(vtss_appl_mstp_msti_t msti,
                                               vtss_appl_mstp_msti_port_param_t *param);

/**
 * 12.8.2.4 Set MSTI port parameters for aggregations
 *
 * Purpose: To set MSTI port parameters for STP ports formed by link
 * aggregations. All aggregations share the \e same set of parameters.
 *
 * See vtss_appl_mstp_set_interface_mstiport_config().
 *
 * \param msti [IN] The MSTI instance number. The CIST has
 * instance number zero.
 *
 * \param param [IN] The aggregated ports configuration data
 * (12.8.2.4.2 Inputs)
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_aggregation_mstiport_config_set(vtss_appl_mstp_msti_t msti,
                                               const vtss_appl_mstp_msti_port_param_t *param);

/**
 * 12.8.1.1 Read CIST Bridge Protocol Parameters
 * 12.8.1.2 Read MSTI Bridge Protocol Parameters
 *
 * Purpose: To obtain information regarding the Bridge's Spanning Tree
 * Protocol Entity.
 *
 * \param msti [IN] The MSTP port instance number. The CIST has
 * instance number zero.
 *
 * \param status [OUT] The bridge status data (12.8.1.1.3 Outputs)
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail
 * if the given \e msti is not a valid instance number.
 *
 * \note Some outputs are only defined for the CIST - see 802.1Q-2005
 * 12.8.1.2.
 */
mesa_rc
vtss_appl_mstp_bridge_status_get(vtss_appl_mstp_msti_t msti,
                                 vtss_appl_mstp_bridge_status_t *status);

/**
 * 12.8.2.1 Read CIST Port Parameters
 * 12.8.2.2 Read MSTI Port Parameters
 *
 * Purpose: To obtain information regarding a specific Port within the
 * Bridge's Bridge Protocol Entity, for the CIST/MSTI.
 *
 * \param ifindex [IN] Interface index - the logical interface index of
 * the Bridge Port. This may be any physical switch port or
 * aggregation.
 *
 * \param msti [IN] The MSTP port instance number. The CIST has
 * instance number zero.
 *
 * \param status [OUT] The port status data (12.8.2.1.3 Outputs)
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail
 * if the given interface index is not a valid port number or
 * aggregation.
 *
 * \note Some outputs are only defined for the CIST - see 802.1Q
 * 12.8.2.1.3/12.8.2.2.3 Outputs
 */
mesa_rc
vtss_appl_mstp_interface_status_get(vtss_ifindex_t ifindex,
                                    vtss_appl_mstp_msti_t msti,
                                    vtss_appl_mstp_port_mgmt_status_t *status);

/**
 * Read Port Statistics
 *
 * Purpose: To obtain information regarding a specific Port's PDU
 * reception and transmission within the Bridge's Spanning Tree
 * Protocol Entity.
 *
 * \param ifindex [IN] Interface index - the logical interface index of
 * the Bridge Port. This may be any physical switch port or
 * aggregation
 *
 * \param stats [OUT] The port statistics data
 *
 * \return VTSS_RC_OK if the operation succeeded. The operation will fail if
 * the given interface index is not a valid port number or
 * aggregation.
 */
mesa_rc
vtss_appl_mstp_interface_statistics_get(vtss_ifindex_t ifindex,
                                        vtss_appl_mstp_port_statistics_t *stats);

/**
 * Convert a Bridge Identifier to a printable string.
 *
 * \param buffer [OUT] The returned human readable representation of
 * the provided bridge identifier.
 *
 * \param size [IN] The size of the output buffer
 *
 * \param bridgeid [IN] The bridge identifier
 *
 *  \return The number of characters emitted to the output buffer
 */
int vtss_appl_mstp_bridge2str(void *buffer,
                              size_t size,
                              const uint8_t *bridgeid);
/**
 * Read vlan bitmap for a MSTI value
 *
 * For a given MSTI value, this function returns all the vlans that has that MSTI value setup in a bitmap format.
 *
 * \param msti_value [IN] The given MSTI value
 *
 * \param vlan_bitmap [OUT] The vlan bitmap
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_mstp_msti_table_get(vtss_appl_mstp_mstid_t msti_value,
                                      vtss_appl_mstp_vlan_bitmap_t *vlan_bitmap);

/**
 * Iterate MSTI table
 *
 * This function will iterate through all MSTI to vlan bitmap mappings
 * found in the table.
 *
 * \param prev_msti [IN]  previous msti value.
 * \param next_msti [OUT] next msti value.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_msti_table_itr(const vtss_appl_mstp_mstid_t *const prev_msti,
                              vtss_appl_mstp_mstid_t *const next_msti);

/**
 * Set MSTI value for a given vlan bitmap
 *
 * Set MSTI value for all the vlans based on the bitmap
 *
 * \param msti_value [IN] The given MSTI value
 *
 * \param vlan_bitmap [IN] The vlan bitmap
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc
vtss_appl_mstp_msti_table_set(vtss_appl_mstp_mstid_t msti_value,
                              const vtss_appl_mstp_vlan_bitmap_t *vlan_bitmap);

#ifdef __cplusplus
}
#endif

#endif  /* _VTSS_APPL_MSTP_H_ */
