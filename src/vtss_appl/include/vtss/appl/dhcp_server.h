/*

 Copyright (c) 2006-2023 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

*/

/**
 * \file
 * \brief Public DHCP Server API
 * \details This header file describes DHCP Server control functions and types.
 */

#ifndef _VTSS_APPL_DHCP_SERVER_H_
#define _VTSS_APPL_DHCP_SERVER_H_

#include <vtss/appl/types.h>
#include <vtss/appl/interface.h>
#include <vtss/appl/module_id.h>

//----------------------------------------------------------------------------
#ifdef __cplusplus
extern "C" {
#endif
//----------------------------------------------------------------------------

/** Number of each servers */
#define VTSS_APPL_DHCP_SERVER_SERVER_MAX_CNT                4

/** Length of domain name */
#define VTSS_APPL_DHCP_SERVER_DOMAIN_NAME_LEN               32

/** Length of vendor class identifier */
#define VTSS_APPL_DHCP_SERVER_VENDOR_CLASS_ID_LEN           64

/** Length of vendor class identifier */
#define VTSS_APPL_DHCP_SERVER_VENDOR_SPECIFIC_INFO_LEN      32

/** Number of vendor class specific information */
#define VTSS_APPL_DHCP_SERVER_VENDOR_CLASS_INFO_CNT         4

/** Length of client identifier */
#define VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_NAME_LEN    64

/** Length of host name */
#define VTSS_APPL_DHCP_SERVER_HOST_NAME_LEN                 32

/** Length of DHCP pool name */
#define VTSS_APPL_DHCP_SERVER_POOL_NAME_LEN                 32

/** Length of date string */
#define VTSS_APPL_DHCP_SERVER_DATE_STR_LEN                  64

#ifdef VTSS_SW_OPTION_DHCP_SERVER_RESERVED_ADDRESSES
/** Max number of reserved address entries per pool */
#define VTSS_APPL_DHCP_SERVER_RESERVED_CNT                  MEBA_CAP_BOARD_PORT_MAP_COUNT
#endif

/**  Error codes that can be generated by this module */
enum {
    VTSS_APPL_DHCP_SERVER_RC_ERROR = MODULE_ERROR_START(VTSS_MODULE_ID_DHCP_SERVER),
    VTSS_APPL_DHCP_SERVER_RC_ERR_PARAMETER,
    VTSS_APPL_DHCP_SERVER_RC_ERR_POOL_NOT_EXIST,
    VTSS_APPL_DHCP_SERVER_RC_ERR_NOT_EXIST,
    VTSS_APPL_DHCP_SERVER_RC_ERR_MEMORY,
    VTSS_APPL_DHCP_SERVER_RC_ERR_FULL,
    VTSS_APPL_DHCP_SERVER_RC_ERR_DUPLICATE,
    VTSS_APPL_DHCP_SERVER_RC_ERR_IP,
    VTSS_APPL_DHCP_SERVER_RC_ERR_NOT_IN_SUBNET,
    VTSS_APPL_DHCP_SERVER_RC_ERR_IFC_OCCUPIED,
    VTSS_APPL_DHCP_SERVER_RC_ERR_POOL_TYPE_CONFLICT,
};

/**
 * \brief Data struct of pool name
 *  The data type is to encapsulate char string of user name to be index.
 */
typedef struct {
    char    pool_name[VTSS_APPL_DHCP_SERVER_POOL_NAME_LEN + 1]; /*!< Pool Name */
} vtss_appl_dhcp_server_pool_name_t;

/**
 * \brief DHCP Server global configurations
 */
typedef struct {
    mesa_bool_t    mode;   /*!< Global mode to enable/disable DHCP server services */
} vtss_appl_dhcp_server_config_globals_t;

/**
 * \brief DHCP Server VLAN configurations
 */
typedef struct {
    mesa_bool_t    mode;   /*!< mode to enable/disable DHCP server services per VLAN */
} vtss_appl_dhcp_server_config_vlan_entry_t;

/**
 *  \brief
 *      Type of Pool.
 */
typedef enum {
    VTSS_APPL_DHCP_SERVER_POOL_TYPE_NONE,       /*!< Not defined    */
    VTSS_APPL_DHCP_SERVER_POOL_TYPE_NETWORK,    /*!< Network        */
    VTSS_APPL_DHCP_SERVER_POOL_TYPE_HOST,       /*!< Host           */
} vtss_appl_dhcp_server_pool_type_t;

/**
 *  \brief
 *      Type of netbios node.
 */
typedef enum {
    VTSS_APPL_DHCP_SERVER_NETBIOS_NODE_TYPE_NONE, /*!< Node none(invalid) */
    VTSS_APPL_DHCP_SERVER_NETBIOS_NODE_TYPE_B,    /*!< Node B, 0x1 */
    VTSS_APPL_DHCP_SERVER_NETBIOS_NODE_TYPE_P,    /*!< Node P, 0x2 */
    VTSS_APPL_DHCP_SERVER_NETBIOS_NODE_TYPE_M,    /*!< Node M, 0x4 */
    VTSS_APPL_DHCP_SERVER_NETBIOS_NODE_TYPE_H,    /*!< Node H, 0x8 */
} vtss_appl_dhcp_server_netbios_node_type_t;

/**
 *  \brief
 *      Vendor class information for option 43 and 60.
 *      If string length of class_id is 0, then this is not used.
 */
typedef struct {
    char        class_id[VTSS_APPL_DHCP_SERVER_VENDOR_CLASS_ID_LEN + 1];                    /*!< Vendor class identifier                                              */
    char        specific_info[2 + 2 * VTSS_APPL_DHCP_SERVER_VENDOR_SPECIFIC_INFO_LEN + 1];  /*!< Hex string of Vendor specific information                            */
} vtss_appl_dhcp_server_vendor_class_info_t;

/**
 *  \brief
 *      Type of data used for client identifier.
 *
 *      http://www.iana.org/assignments/arp-parameters/arp-parameters.xml
 *      if 0, it contains an identifier, e.g. a fully qualified domain name,
 *          other than a hardware address.
 *      if 1, Ethernet MAC address.
 *      others, ha, we do not understand it.
 */
typedef enum {
    VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_TYPE_NONE,  /*!< Not defined                  */
    VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_TYPE_NAME,  /*!< Client identifier other than hardware type  */
    VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_TYPE_MAC,   /*!< Ethernet MAC address         */
} vtss_appl_dhcp_server_client_identifier_type_t;

#ifdef VTSS_SW_OPTION_DHCP_SERVER_RESERVED_ADDRESSES
/**
 * \brief A reserved entry. A pool of type AUTOMATIC can have a list of reserved entries that are searched
 * and used before automatic address allocation takes place.
 * 
 * There can only be one reserved entry per ifindex. If ifindex is VTSS_IFINDEX_NONE the entry is unused.
 */
typedef struct {
    vtss_ifindex_t         ifindex;             /*!< Interface with reservation. VTSS_IFINDEX_NONE == unused entry */
    mesa_ipv4_t            address;             /*!< Address to hand out to (first) client attaching to interface */
} vtss_appl_dhcp_server_reserved_entry_t;
#endif

/**
 * \brief DHCP Server Pool configurations
 */
typedef struct {
    vtss_appl_dhcp_server_pool_type_t               type;                                                           /*!< Pool types: Network type or Host type */
    mesa_ipv4_t                                     ip;                                                             /*!< IP address */
    mesa_ipv4_t                                     subnet_mask;                                                    /*!< Subnet mask */
    mesa_ipv4_t                                     subnet_broadcast;                                               /*!< Subnet broadcast address */
    mesa_ipv4_t                                     default_router[VTSS_APPL_DHCP_SERVER_SERVER_MAX_CNT];           /*!< Default router */
    uint32_t                                             lease_day;                                                      /*!< Lease time days, range: 0-365 */
    uint32_t                                             lease_hour;                                                     /*!< Lease time hours, range: 0-23 */
    uint32_t                                             lease_minute;                                                   /*!< Lease time minutes, range: 0-59 */
    char                                            domain_name[VTSS_APPL_DHCP_SERVER_DOMAIN_NAME_LEN + 1];         /*!< Domain name */
    mesa_ipv4_t                                     dns_server[VTSS_APPL_DHCP_SERVER_SERVER_MAX_CNT];               /*!< DNS server */
    mesa_ipv4_t                                     ntp_server[VTSS_APPL_DHCP_SERVER_SERVER_MAX_CNT];               /*!< NTP server */
    mesa_ipv4_t                                     netbios_name_server[VTSS_APPL_DHCP_SERVER_SERVER_MAX_CNT];      /*!< Netbios name server */
    vtss_appl_dhcp_server_netbios_node_type_t       netbios_node_type;                                              /*!< Netbios node type */
    char                                            netbios_scope[VTSS_APPL_DHCP_SERVER_DOMAIN_NAME_LEN + 1];       /*!< Netbios scope */
    char                                            nis_domain_name[VTSS_APPL_DHCP_SERVER_DOMAIN_NAME_LEN + 1];     /*!< NIS domain name */
    mesa_ipv4_t                                     nis_server[VTSS_APPL_DHCP_SERVER_SERVER_MAX_CNT];               /*!< NIS server */
    vtss_appl_dhcp_server_vendor_class_info_t       vendor_class_info[VTSS_APPL_DHCP_SERVER_VENDOR_CLASS_INFO_CNT]; /*!< Vendor class information */
    vtss_appl_dhcp_server_client_identifier_type_t  client_identifier_type;                                         /*!< Client identifier Type */
    char                                            client_identifier_name[VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_NAME_LEN + 1];     /*!< NAME if client_identifier_type is VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_TYPE_NAME */
    mesa_mac_t                                      client_identifier_mac;                                          /*!< MAC address if client_identifier_type is VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_TYPE_MAC */
    mesa_mac_t                                      client_haddr;                                                   /*!< Client hardware address */
    char                                            client_name[VTSS_APPL_DHCP_SERVER_HOST_NAME_LEN + 1];           /*!< Client Host name */
#ifdef VTSS_SW_OPTION_DHCP_SERVER_RESERVED_ADDRESSES
    mesa_bool_t                                     reserved_only;                                                  /*!< Whether to only hand out reserved addresses (TRUE) or not (FALSE) */
    vtss_appl_dhcp_server_reserved_entry_t          reserved[VTSS_APPL_DHCP_SERVER_RESERVED_CNT];                   /*!< Reserved entries */
#endif
} vtss_appl_dhcp_server_config_pool_entry_t;

/**
 *  \brief Declined IP address.
 */
typedef struct {
    mesa_ipv4_t     ip;    /*!< Declined IP address */
} vtss_appl_dhcp_server_status_declined_ip_entry_t;

/**
 *  \brief DHCP server statistics.
 */
typedef struct {
    uint32_t             discover_cnt;   /*!< Number of Discover packets   */
    uint32_t             offer_cnt;      /*!< Number of Offer packets      */
    uint32_t             request_cnt;    /*!< Number of Request packets    */
    uint32_t             ack_cnt;        /*!< Number of ACK packets        */
    uint32_t             nak_cnt;        /*!< Number of NACK packets       */
    uint32_t             decline_cnt;    /*!< Number of Decline packets    */
    uint32_t             release_cnt;    /*!< Number of Release packets    */
    uint32_t             inform_cnt;     /*!< Number of Inform packets     */
} vtss_appl_dhcp_server_status_statistics_t;

/**
 *  \brief
 *      Binding type.
 */
typedef enum {
    VTSS_APPL_DHCP_SERVER_BINDING_TYPE_NONE,        /*!< No binding(invalid) */
    VTSS_APPL_DHCP_SERVER_BINDING_TYPE_AUTOMATIC,   /*!< Automatic binding with network-type pool */
    VTSS_APPL_DHCP_SERVER_BINDING_TYPE_MANUAL,      /*!< Manual binding with host-type pool */
    VTSS_APPL_DHCP_SERVER_BINDING_TYPE_EXPIRED,     /*!< Expired binding */
} vtss_appl_dhcp_server_binding_type_t;

/**
 *  \brief
 *      Binding state.
 */
typedef enum {
    VTSS_APPL_DHCP_SERVER_BINDING_STATE_NONE,        /*!< No state(free list) */
    VTSS_APPL_DHCP_SERVER_BINDING_STATE_ALLOCATED,   /*!< Allocated, but wait for final confirm */
    VTSS_APPL_DHCP_SERVER_BINDING_STATE_COMMITTED,   /*!< Committed */
    VTSS_APPL_DHCP_SERVER_BINDING_STATE_EXPIRED,     /*!< Expired */
} vtss_appl_dhcp_server_binding_state_t;

/**
 *  \brief DHCP binding to DHCP client.
 */
typedef struct {
    vtss_appl_dhcp_server_binding_state_t           state;                                                      /*!< binding state */
    vtss_appl_dhcp_server_binding_type_t            type;                                                       /*!< binding type */
    char                                            pool_name[VTSS_APPL_DHCP_SERVER_POOL_NAME_LEN + 1];         /*!< Pool name */
    mesa_ipv4_t                                     server_id;                                                  /*!< Server identifier */
    mesa_vid_t                                      vid;                                                        /**< VLAN ID */
    mesa_ipv4_t                                     subnet_mask;                                                /*!< Subnet mask */
    vtss_appl_dhcp_server_client_identifier_type_t  client_identifier_type;                                     /*!< Client identifier Type */
    char                                            client_identifier_name[VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_NAME_LEN + 1]; /*!< NAME if client_identifier_type is VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_TYPE_NAME */
    mesa_mac_t                                      client_identifier_mac;                                      /*!< MAC address if client_identifier_type is VTSS_APPL_DHCP_SERVER_CLIENT_IDENTIFIER_TYPE_MAC */
    mesa_mac_t                                      chaddr;                                                     /*!< Client hardware address */
    char                                            lease_str[VTSS_APPL_DHCP_SERVER_DATE_STR_LEN + 1];          /*!< Lease time of the binding */
    char                                            time_to_expire_str[VTSS_APPL_DHCP_SERVER_DATE_STR_LEN + 1]; /*!< remaining time to expire */
} vtss_appl_dhcp_server_status_binding_entry_t;

/**
 *  \brief Action to statistics database, vtss_appl_dhcp_server_status_statistics_t
 */
typedef struct {
    mesa_bool_t            clear;    /*!< clear all statistics */
} vtss_appl_dhcp_server_control_statistics_t;

/**
 *  \brief Action to binding entry, vtss_appl_dhcp_server_status_binding_entry_t
 */
typedef struct {
    mesa_ipv4_t                             clear_by_ip;    /*!< clear binding by IP address. If 0.0.0.0 then do nothing. */
    vtss_appl_dhcp_server_binding_type_t    clear_by_type;  /*!< clear binding by binding type. If VTSS_APPL_DHCP_SERVER_BINDING_TYPE_NONE then do nothing. */
} vtss_appl_dhcp_server_control_binding_t;

/*
==============================================================================

    Public APIs

==============================================================================
*/
/**
 * \brief Get DHCP server global configuration
 *
 * \param globals [OUT] The global configuration.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_globals_get(
    vtss_appl_dhcp_server_config_globals_t          *const globals
);

/**
 * \brief Set DHCP server global configuration
 *
 * \param globals [IN] The global configuration.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_globals_set(
    const vtss_appl_dhcp_server_config_globals_t    *const globals
);

/**
 * \brief Iterate function of VLAN configuration table
 *
 * To get first and get next ifindex of VLAN.
 *
 * \param prev_ifindex [IN]  ifindex of previous VLAN.
 * \param next_ifindex [OUT] ifindex of next VLAN.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_vlan_entry_itr(
    const vtss_ifindex_t    *const prev_ifindex,
    vtss_ifindex_t          *const next_ifindex
);

/**
 * \brief Get VLAN configuration entry
 *
 * To read VLAN configuration of DHCP server.
 *
 * \param ifindex [IN]  (key) ifindex of VLAN
 * \param vlan    [OUT] VLAN configuration
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_vlan_entry_get(
    vtss_ifindex_t                              ifindex,
    vtss_appl_dhcp_server_config_vlan_entry_t   *const vlan
);

/**
 * \brief Set VLAN configuration entry
 *
 * To write VLAN configuration of DHCP server.
 *
 * \param ifindex [IN] (key) ifindex of VLAN
 * \param vlan    [IN] VLAN configuration
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_vlan_entry_set(
    vtss_ifindex_t                                      ifindex,
    const vtss_appl_dhcp_server_config_vlan_entry_t     *const vlan
);

/**
 * \brief Iterate function of excluded IP table
 *
 * To get first and get next indexes.
 *
 * \param prev_lowIp  [IN]  previous low IP address.
 * \param next_lowIp  [OUT] next low IP address.
 * \param prev_highIp [IN]  previous high IP address.
 * \param next_highIp [OUT] next high IP address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_excluded_ip_entry_itr(
    const mesa_ipv4_t       *const prev_lowIp,
    mesa_ipv4_t             *const next_lowIp,
    const mesa_ipv4_t       *const prev_highIp,
    mesa_ipv4_t             *const next_highIp
);

/**
 * \brief Get excluded IP configuration entry
 *
 * To read excluded IP configuration of DHCP server.
 *
 * \param lowIp  [IN] (key 1) low IP address.
 * \param highIp [IN] (key 2) high IP address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_excluded_ip_entry_get(
    mesa_ipv4_t     lowIp,
    mesa_ipv4_t     highIp
);

/**
 * \brief Set excluded IP configuration entry
 *
 * To write excluded IP configuration of DHCP server.
 *
 * \param lowIp  [IN] (key 1) low IP address.
 * \param highIp [IN] (key 2) high IP address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_excluded_ip_entry_set(
    mesa_ipv4_t     lowIp,
    mesa_ipv4_t     highIp
);

/**
 * \brief Delete excluded IP configuration entry
 *
 * To remove excluded IP configuration of DHCP server.
 *
 * \param lowIp  [IN] (key 1) low IP address.
 * \param highIp [IN] (key 2) high IP address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_excluded_ip_entry_del(
    mesa_ipv4_t     lowIp,
    mesa_ipv4_t     highIp
);

/**
 * \brief Iterate function of pool table
 *
 * To get first and get next indexes.
 *
 * \param prev_poolname [IN]  previous pool name.
 * \param next_poolname [OUT] next pool name.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_pool_entry_itr(
    const vtss_appl_dhcp_server_pool_name_t    *const prev_poolname,
    vtss_appl_dhcp_server_pool_name_t          *const next_poolname
);

/**
 * \brief Get DHCP Pool Configuration
 *
 * To read configuration of DHCP pool.
 *
 * \param pool_name [IN]  (key) Pool name.
 * \param pool      [OUT] The configuration of Pool
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_pool_entry_get(
    vtss_appl_dhcp_server_pool_name_t           pool_name,
    vtss_appl_dhcp_server_config_pool_entry_t   *const pool
);

/**
 * \brief Set DHCP Pool Configuration
 *
 * To add or modify configuration of DHCP pool.
 *
 * \param pool_name [IN] (key) Pool name.
 * \param pool      [IN] The configuration of Pool
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_pool_entry_set(
    vtss_appl_dhcp_server_pool_name_t                   pool_name,
    const vtss_appl_dhcp_server_config_pool_entry_t     *const pool
);

/**
 * \brief Delete DHCP Pool Configuration
 *
 * To delete configuration of DHCP pool.
 *
 * \param pool_name [IN] (key) Pool name.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_pool_entry_del(
    vtss_appl_dhcp_server_pool_name_t   pool_name
);

#ifdef VTSS_SW_OPTION_DHCP_SERVER_RESERVED_ADDRESSES
/**
 * \brief Iterate function of reserved adresses
 *
 * To get first and get next indexes.
 *
 * \param prev_poolname [IN]  previous pool name.
 * \param prev_ip_address  [IN]  previous ip address.
 * \param next_poolname [OUT] next pool name.
 * \param next_ip_address  [OUT] next ip address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_reserved_entry_itr(
    const vtss_appl_dhcp_server_pool_name_t    *const prev_poolname,
    vtss_appl_dhcp_server_pool_name_t          *const next_poolname,
    const mesa_ipv4_t                          *const prev_ip_address,
    mesa_ipv4_t                                *const next_ip_address
);

/**
 * \brief Get reserved address entry
 *
 * To read a reserved entry
 *
 * \param poolname  [IN]  Pool name.
 * \param ip_address   [IN]  Ip address.
 * \param ifindex [IN]  Interface for which the address is reserved
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_reserved_entry_get(
    const vtss_appl_dhcp_server_pool_name_t    *const poolname,
    const mesa_ipv4_t                          *const ip_address,
    vtss_ifindex_t                             *const ifindex
);

/**
 * \brief Set reserved address entry
 *
 * To set a reserved entry
 *
 * \param poolname  [IN]  Pool name.
 * \param ip_address   [IN]  Ip address.
 * \param ifindex [IN]  Interface for which the address is reserved
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_reserved_entry_set(
    const vtss_appl_dhcp_server_pool_name_t    *const poolname,
    const mesa_ipv4_t                          *const ip_address,
    const vtss_ifindex_t                       *const ifindex
);

/**
 * \brief Delete reserved address entry
 *
 * To delete a reserved entry
 *
 * \param poolname  [IN]  Pool name.
 * \param ip_address   [IN]  Ip address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_config_reserved_entry_del(
    const vtss_appl_dhcp_server_pool_name_t    *const poolname,
    const mesa_ipv4_t                          *const ip_address
);
#endif // VTSS_SW_OPTION_DHCP_SERVER_RESERVED_ADDRESSES

/**
 * \brief Iterate function of declined IP table
 *
 * To get first and get next indexes.
 *
 * \param prev_entryNo  [IN]  previous entry number of declined IP address.
 * \param next_entryNo  [OUT] next entry number of declined IP address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_status_declined_ip_entry_itr(
    const uint32_t       *const prev_entryNo,
    uint32_t             *const next_entryNo
);

/**
 * \brief Get declined IP entry
 *
 * To read declined IP entry of DHCP server.
 *
 * \param entryNo    [IN]  (key) entry number
 * \param declinedIp [OUT] Declined IP address
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_status_declined_ip_entry_get(
    uint32_t                                                 entryNo,
    vtss_appl_dhcp_server_status_declined_ip_entry_t    *const declinedIp
);

/**
 * \brief Get statistics of DHCP server
 *
 * \param statistics [OUT] The statistics.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_status_statistics_get(
    vtss_appl_dhcp_server_status_statistics_t       *const statistics
);

/**
 * \brief Iterate function of binding table
 *
 * To get first and get next indexes.
 *
 * \param prev_ip  [IN]  previous binding IP address.
 * \param next_ip  [OUT] next binding IP address.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_status_binding_entry_itr(
    const mesa_ipv4_t       *const prev_ip,
    mesa_ipv4_t             *const next_ip
);

/**
 * \brief Get binding entry
 *
 * To read binding entry in DHCP server.
 *
 * \param ip      [IN]  (key) IP address of the binding
 * \param binding [OUT] binding entry
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_status_binding_entry_get(
    mesa_ipv4_t                                     ip,
    vtss_appl_dhcp_server_status_binding_entry_t    *const binding
);

/**
 * \brief Get action of statistics
 *
 * \param control [OUT] The action.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_control_statistics_get(
    vtss_appl_dhcp_server_control_statistics_t          *const control
);

/**
 * \brief Set action to statistics
 *
 * \param control [IN] The action.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_control_statistics_set(
    const vtss_appl_dhcp_server_control_statistics_t    *const control
);

/**
 * \brief Get action of binding
 *
 * \param control [OUT] The action.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_control_binding_get(
    vtss_appl_dhcp_server_control_binding_t         *const control
);

/**
 * \brief Set action to binding
 *
 * \param control [IN] The action.
 *
 * \return VTSS_RC_OK if the operation succeeded.
 */
mesa_rc vtss_appl_dhcp_server_control_binding_set(
    const vtss_appl_dhcp_server_control_binding_t   *const control
);

//----------------------------------------------------------------------------
#ifdef __cplusplus
}
#endif
//----------------------------------------------------------------------------

#endif  /* _VTSS_APPL_DHCP_SERVER_H_ */
