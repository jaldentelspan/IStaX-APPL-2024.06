<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Stream Detailed Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="stream_lib.js"></script>
 <script type="text/javascript" src="tsn_lib.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_stream_edit.htm";

// Page arguments
var page_args = searchArgs(window.location.search);

var selected_inst = 0;
if (page_args["streamid"]) {
    selected_inst = parseInt(page_args["streamid"], 10);
}

// Global variables
var instanceTable, configMacTable, configVlanTable, configProtocolTypeTable, configProtocolEtypeTable, configProtocolLLCTable, configProtocolSNAPTable, configProtocolIPv4Table, configProtocolIPv6Table, configPortMembersTable, globals, variables;

/******************************************************************************/
// on_mac_match_type_change()
/******************************************************************************/
function on_mac_match_type_change(is_dmac)
{
    var name, mac_match_type, disable;

    name = is_dmac ? "d" : "s";
    mac_match_type = $(name + "macMatchType");

    if (!mac_match_type) {
        // Not visible yet
        return;
    }

    disable = mac_match_type.value != "valueMask";

    $(name + "mac").disabled     = disable;
    $(name + "macMask").disabled = disable;
}

/******************************************************************************/
// on_vlan_tag_match_change()
/******************************************************************************/
function on_vlan_tag_match_change(is_outer)
{
    var name, presence_type, disable;

    name = is_outer ? "outerTag" : "innerTag";
    presence_type = $(name);

    if (!presence_type) {
        // Not visible yet
        return;
    }

    disable = presence_type.value != "tagged";

    $(name + "TagType").disabled  = disable;
    $(name + "VidValue").disabled = disable;
    $(name + "VidMask").disabled  = disable;
    $(name + "PcpValue").disabled = disable;
    $(name + "PcpMask").disabled  = disable;
    $(name + "Dei").disabled      = disable;
}

/******************************************************************************/
// on_snap_oui_type_change()
/******************************************************************************/
function on_snap_oui_type_change()
{
    var fld = $("snapOuiType");

    if (!fld) {
        // Not visible yet
        return;
    }

    $("snapOui").disabled = fld.value != "custom";
}

/******************************************************************************/
// on_ip_dscp_match_type_change()
/******************************************************************************/
function on_ip_dscp_match_type_change(is_ipv4)
{
    var name = is_ipv4 ? "ipv4" : "ipv6", fld;

    fld = $(name + "DscpMatchType");

    if (!fld) {
        // Not visible yet
        return;
    }

    $(name + "DscpLow").disabled  = fld.value == "any";
    $(name + "DscpHigh").disabled = fld.value != "range";
}

/******************************************************************************/
// on_ip_proto_or_dport_match_change()
/******************************************************************************/
function on_ip_proto_or_dport_match_change(is_ipv4)
{
    var name = is_ipv4 ? "ipv4" : "ipv6", proto_type, dport_match, dport_disabled;

    proto_type  = $(name + "ProtoType");
    dport_match = $(name + "DportMatchType");

    if (!proto_type || !dport_match) {
        // Not visible yet
        return;
    }

    $(name + "ProtoValue").disabled = proto_type.value != "custom";

    // The Destination TCP/UDP port match type field is not available unless the
    // IP protocol is TCP or UDP
    dport_disabled = proto_type.value != "tcp" && proto_type.value != "udp";
    $(name + "DportMatchType").disabled = dport_disabled;

    // Furthermore, the Destination TCP/UDP min and max values are not available
    // unless the range match is correct
    $(name + "DportLow").disabled  = dport_disabled || dport_match.value == "any";
    $(name + "DportHigh").disabled = dport_disabled || dport_match.value != "range";
}

/******************************************************************************/
// protocol_hide_table_if_not_this_one()
/******************************************************************************/
function protocol_hide_table_if_not_this_one(table, this_one)
{
    // Don't use $(table).style.visiblity = 'visible' or 'hidden', because then
    // the space reserved for the table is preserved.
    $(table).style.display = this_one && this_one == table ? 'block' : 'none';
}

/******************************************************************************/
// protocol_hide_all_tables_but_this_one()
/******************************************************************************/
function protocol_hide_all_tables_but_this_one(this_one)
{
    protocol_hide_table_if_not_this_one("configProtocolEtypeTableContent", this_one);
    protocol_hide_table_if_not_this_one("configProtocolLLCTableContent",   this_one);
    protocol_hide_table_if_not_this_one("configProtocolSNAPTableContent",  this_one);
    protocol_hide_table_if_not_this_one("configProtocolIPv4TableContent",  this_one);
    protocol_hide_table_if_not_this_one("configProtocolIPv6TableContent",  this_one);
}

/******************************************************************************/
// on_protocol_type_change()
/******************************************************************************/
function on_protocol_type_change()
{
    var fld = $("protocolType"), this_one;

    if (!fld || fld.value == "any") {
        // Don't show any protocol tables
        this_one = undefined;
    } else if (fld.value == "etype") {
        this_one = "configProtocolEtypeTableContent";
    } else if (fld.value == "llc") {
        this_one = "configProtocolLLCTableContent";
    } else if (fld.value == "snap") {
        this_one = "configProtocolSNAPTableContent";
    } else if (fld.value == "ipv4") {
        this_one = "configProtocolIPv4TableContent";
    } else {
        this_one = "configProtocolIPv6TableContent";
    }

    protocol_hide_all_tables_but_this_one(this_one);
}

/******************************************************************************/
// enable_disable_update()
/******************************************************************************/
function enable_disable_update()
{
    on_mac_match_type_change(true  /* DMAC */);
    on_mac_match_type_change(false /* SMAC */);
    on_vlan_tag_match_change(true  /* Outer */);
    on_vlan_tag_match_change(false /* Inner */);
    on_snap_oui_type_change();
    on_ip_dscp_match_type_change(true  /* IPv4 */);
    on_ip_dscp_match_type_change(false /* IPv6 */);
    on_ip_proto_or_dport_match_change(true  /* IPv4 */);
    on_ip_proto_or_dport_match_change(false /* IPv6 */);
}

/******************************************************************************/
// add_option_to_selector()
/******************************************************************************/
function add_option_to_selector(selector, show, val, def)
{
    var option;

    option = document.createElement("option");
    option.appendChild(document.createTextNode(show));
    option.setAttribute("value", val);
    if (def) {
        option.setAttribute("selected", true);
    }

    selector.options.add(option);
}

/******************************************************************************/
// update_instance_selector()
/******************************************************************************/
function update_instance_selector()
{
    var i, inst, selector, def, default_seen = false;

    // Update instance selector combo box.
    selector = $("inst_select");
    clearChildNodes(selector);
    for (i = 0; i < variables.conf.length; i++) {
        inst = variables.conf[i].key;

        def = inst == selected_inst;
        if (def) {
            default_seen = true;
        }

        add_option_to_selector(selector, "Stream ID #" + inst, inst, def);
    }

    // Add a "New Stream" option
    add_option_to_selector(selector, "New Stream", 0, !default_seen);
}

/******************************************************************************/
// add_instance_rows()
/******************************************************************************/
function add_instance_rows(key, statu)
{
    var table_rows = new Array(), stream_id_cell;

    // Header
    table_rows.push({fields: [
              {type: "disp_hdr", params: ["Stream ID"]},
              {type: "disp_hdr", params: ["Attached Clients", 1, 1, "150px"]},
              {type: "disp_hdr", params: ["Stream Collection"]},
              {type: "disp_hdr", params: ["Warnings"]}]
          });

    // Data
    if (parseInt(key, 10) === 0) {
        // New stream. Allow user to change it.
        stream_id_cell = {type: "input", params:[0, "cr", "stream_id", 3]};
    } else {
        stream_id_cell = {type: "digit", params:[key]};
    }

    table_rows.push({fields: [
               stream_id_cell,
               {type: "text",  params: [stream_lib_attached_clients_to_str(statu), "cl"]},
               stream_lib_stream_collection_cell_get(statu),
               {type: "image", params: ["c", stream_lib_oper_warnings_to_image(statu), stream_lib_oper_warnings_to_str(statu)]}]
          });

    return table_rows;
}

/******************************************************************************/
// add_mac_rows()
/******************************************************************************/
function add_mac_rows(val)
{
    var table_rows = new Array();

    // Header
    table_rows.push({fields: [
                 {type: "disp_hdr", params: ["DMAC/SMAC"]},
                 {type: "disp_hdr", params: ["Type"]},
                 {type: "disp_hdr", params: ["MAC"]},
                 {type: "disp_hdr", params: ["Mask"]}]
              });

    // DMAC
    table_rows.push({fields: [
                {type: "text",   params: ["DMAC"]},
                {type: "select", params: [Object.values(stream_lib_dmac_match_type_map), Object.keys(stream_lib_dmac_match_type_map), val.dmacMatchType, "cl", "dmacMatchType", "107px", null, null, function() {on_mac_match_type_change(true);}]},
                {type: "input",  params: [val.dmac,     "cr", "dmac",     17, 17]},
                {type: "input",  params: [val.dmacMask, "cr", "dmacMask", 17, 17]}]
        });

    // SMAC
    table_rows.push({fields: [
                {type: "text",   params: ["SMAC"]},
                {type: "select", params: [Object.values(stream_lib_smac_match_type_map), Object.keys(stream_lib_smac_match_type_map), stream_lib_mac_is_zero(val.smacMask) ? "any" : "valueMask", "cl", "smacMatchType", "107px", null, null, function() {on_mac_match_type_change(false);}]},
                {type: "input",  params: [val.smac,     "cr", "smac",     17, 17]},
                {type: "input",  params: [val.smacMask, "cr", "smacMask", 17, 17]}]
        });

    return table_rows;
}

/******************************************************************************/
// add_vlan_row()
/******************************************************************************/
function add_vlan_row(val, is_outer)
{
    var row, name = is_outer ? "outerTag" : "innerTag";

    row = {fields: [
            {type: "text",   params: [is_outer ? "Outer" : "Inner"]},
            {type: "select", params: [Object.values(stream_lib_vlan_tag_match_map), Object.keys(stream_lib_vlan_tag_match_map), val[name],              "c", name, null, null, null, function() {on_vlan_tag_match_change(is_outer);}]},
            {type: "select", params: [Object.values(stream_lib_vlan_tag_type_map),  Object.keys(stream_lib_vlan_tag_type_map),  val[name + "TagType"],  "c", name + "TagType", "80px"]},
            {type: "input",  params: [val[name + "VidValue"],                   "cr", name + "VidValue", 5, 5, "100px"]},
            {type: "input",  params: [stream_lib_d2h(val[name + "VidMask"], 3), "cr", name + "VidMask",  5, 5, "100px"]},
            {type: "select", params: [Object.values(stream_lib_vlan_pcp_map),       Object.keys(stream_lib_vlan_pcp_map),       val[name + "PcpValue"], "c", name + "PcpValue", "45px"]},
            {type: "select", params: [Object.values(stream_lib_vlan_pcp_mask_map),  Object.keys(stream_lib_vlan_pcp_mask_map),  val[name + "PcpMask"],  "c", name + "PcpMask",  "77px"]},
            {type: "select", params: [Object.values(stream_lib_vcap_bit_map),       Object.keys(stream_lib_vcap_bit_map),       val[name + "Dei"],      "c", name + "Dei",      "55px"]}]
    };

    return row;
}

/******************************************************************************/
// add_vlan_rows()
/******************************************************************************/
function add_vlan_rows(val)
{
    var table_rows = new Array();

    // Header
    table_rows.push(
        {fields: [
            {type: "disp_hdr", params: ["Outer/Inner"]},
            {type: "disp_hdr", params: ["Presence"]},
            {type: "disp_hdr", params: ["Tag Type"]},
            {type: "disp_hdr", params: ["VLAN"]},
            {type: "disp_hdr", params: ["VLAN Mask"]},
            {type: "disp_hdr", params: ["PCP"]},
            {type: "disp_hdr", params: ["PCP Mask"]},
            {type: "disp_hdr", params: ["DEI"]}]
        });

    // Data
    table_rows.push(add_vlan_row(val, true  /* Outer */));
    table_rows.push(add_vlan_row(val, false /* Inner */));

    return table_rows;
}

/******************************************************************************/
// add_protocol_type_rows()
/******************************************************************************/
function add_protocol_type_rows(val)
{
    var table_rows = new Array();

    // Header
    table_rows.push({fields: [{type: "disp_hdr", params: ["Type"]}]});

    // Data
    table_rows.push({fields: [{type: "select", params: [Object.values(stream_lib_protocol_type_map), Object.keys(stream_lib_protocol_type_map), val.protocolType, "c", "protocolType", null, null, null, on_protocol_type_change]}]});

    return table_rows;
}

/******************************************************************************/
// add_protocol_etype_rows()
/******************************************************************************/
function add_protocol_etype_rows(val)
{
    var table_rows = new Array(), v;

    // Header
    table_rows.push({fields: [{type: "disp_hdr", params: ["EtherType"]}]});

    // Data
    if (val.protocolType == "etype") {
        v = val;
    } else {
        v = globals.default_conf;
    }

    table_rows.push({fields: [{type: "input", params: [stream_lib_d2h(v.etherType, 4), "cr", "etherType", 6, 6]}]});

    return table_rows;
}

/******************************************************************************/
// add_protocol_llc_rows()
/******************************************************************************/
function add_protocol_llc_rows(val)
{
    var table_rows = new Array(), v;

    // Header
    table_rows.push(
        {fields: [
            {type: "disp_hdr", params: ["DSAP"]},
            {type: "disp_hdr", params: ["SSAP"]}]}
        );

    // Data
    if (val.protocolType == "llc") {
        v = val;
    } else {
        v = globals.default_conf;
    }

    table_rows.push(
        {fields: [
            {type: "input", params: [stream_lib_d2h(v.llcDsap, 2), "cr", "llcDsap", 4, 4]},
            {type: "input", params: [stream_lib_d2h(v.llcSsap, 2), "cr", "llcSsap", 4, 4]}]}
        );

    return table_rows;
}

/******************************************************************************/
// add_protocol_snap_rows()
/******************************************************************************/
function add_protocol_snap_rows(val)
{
    var table_rows = new Array(), v;

    // Header
    table_rows.push(
        {fields: [
            {type: "disp_hdr", params: ["SNAP Type"]},
            {type: "disp_hdr", params: ["OUI"]},
            {type: "disp_hdr", params: ["Protocol ID"]}]}
        );

    // Data
    if (val.protocolType == "snap") {
        v = val;
    } else {
        v = globals.default_conf;
    }

    table_rows.push(
        {fields: [
            {type: "select", params: [Object.values(stream_lib_snap_oui_type_map), Object.keys(stream_lib_snap_oui_type_map), v.snapOuiType, "cl", "snapOuiType", null, null, null, on_snap_oui_type_change]},
            {type: "input",  params: [v.snapOui,                    "cr", "snapOui", 6, 6]},
            {type: "input",  params: [stream_lib_d2h(v.snapPid, 4), "cr", "snapPid", 6, 6]}]
        });

    return table_rows;
}

/******************************************************************************/
// add_protocol_ipv4_rows()
/******************************************************************************/
function add_protocol_ipv4_rows(val)
{
    var table_rows = new Array(), v;

    // Header
    // 1st row (numbers are colspan, rowspan)
    table_rows.push(
        {fields: [
            {type: "disp_hdr", params: ["Source IP",                 2, 1]},
            {type: "disp_hdr", params: ["Destination IP",            2, 1]},
            {type: "disp_hdr", params: ["DSCP",                      3, 1]},
            {type: "disp_hdr", params: ["Fragment",                  1, 2]},
            {type: "disp_hdr", params: ["Protocol",                  2, 1]},
            {type: "disp_hdr", params: ["TCP/UDP Destination Port ", 3, 1]}
        ]});

    // 2nd row
    table_rows.push(
        {fields: [
            // SIP
            {type: "disp_hdr", params: ["Address",       1, 1]},
            {type: "disp_hdr", params: ["Prefix Length", 1, 1]},

            // DIP
            {type: "disp_hdr", params: ["Address",       1, 1]},
            {type: "disp_hdr", params: ["Prefix Length", 1, 1]},

            // DSCP
            {type: "disp_hdr", params: ["Match",         1, 1]},
            {type: "disp_hdr", params: ["Minimum",       1, 1]},
            {type: "disp_hdr", params: ["Maximum",       1, 1]},

            // Protocol
            {type: "disp_hdr", params: ["Type",          1, 1]},
            {type: "disp_hdr", params: ["Value",         1, 1]},

            // DPORT
            {type: "disp_hdr", params: ["Match",         1, 1]},
            {type: "disp_hdr", params: ["Minimum",       1, 1]},
            {type: "disp_hdr", params: ["Maximum",       1, 1]}
        ]});

    // Data
    if (val.protocolType == "ipv4") {
        v = val;
    } else {
        v = globals.default_conf;
    }

    table_rows.push(
        {fields: [
            {type: "input",  params: [v.ipv4SipAddress,    "cr", "ipv4SipAddress",   15, 15]},
            {type: "input",  params: [v.ipv4SipPrefixSize, "cr", "ipv4SipPrefixSize", 2,  2, "100px"]},
            {type: "input",  params: [v.ipv4DipAddress,    "cr", "ipv4DipAddress",   15, 15]},
            {type: "input",  params: [v.ipv4DipPrefixSize, "cr", "ipv4DipPrefixSize", 2,  2, "100px"]},
            {type: "select", params: [Object.values(stream_lib_match_type_map), Object.keys(stream_lib_match_type_map), v.ipv4DscpMatchType,      "cl", "ipv4DscpMatchType",  "68px", null, null, function() {on_ip_dscp_match_type_change(true);}]},
            {type: "input",  params: [v.ipv4DscpLow,       "cr", "ipv4DscpLow",       2,  2, "71px"]},
            {type: "input",  params: [v.ipv4DscpHigh,      "cr", "ipv4DscpHigh",      2,  2, "71px"]},
            {type: "select", params: [Object.values(stream_lib_vcap_bit_yes_no_map), Object.keys(stream_lib_vcap_bit_yes_no_map), v.ipv4Fragment, "c", "ipv4Fragment",        "75px"]},
            {type: "select", params: [Object.values(stream_lib_ip_proto_type_map), Object.keys(stream_lib_ip_proto_type_map), v.ipv4ProtoType,    "cl", "ipv4ProtoType",      "74px", null, null, function() {on_ip_proto_or_dport_match_change(true);}]},
            {type: "input",  params: [v.ipv4ProtoValue,    "cr", "ipv4ProtoValue",    3,  3]},
            {type: "select", params: [Object.values(stream_lib_match_type_map), Object.keys(stream_lib_match_type_map), v.ipv4DportMatchType,     "cl", "ipv4DportMatchType", "68px", null, null, function() {on_ip_proto_or_dport_match_change(true);}]},
            {type: "input",  params: [v.ipv4DportLow,      "cr", "ipv4DportLow",      5,  5, "71px"]},
            {type: "input",  params: [v.ipv4DportHigh,     "cr", "ipv4DportHigh",     5,  5, "71px"]}
        ]});

    return table_rows;
}

/******************************************************************************/
// add_protocol_ipv6_rows()
/******************************************************************************/
function add_protocol_ipv6_rows(val)
{
    var table_rows = new Array(), v;

    // Header
    // 1st row (numbers are colspan, rowspan)
    table_rows.push(
        {fields: [
            {type: "disp_hdr", params: ["Source IP",                 2, 1]},
            {type: "disp_hdr", params: ["Destination IP",            2, 1]},
            {type: "disp_hdr", params: ["DSCP",                      3, 1]},
            {type: "disp_hdr", params: ["Protocol",                  2, 1]},
            {type: "disp_hdr", params: ["TCP/UDP Destination Port ", 3, 1]}
        ]});

    // 2nd row
    table_rows.push(
        {fields: [
            // SIP
            {type: "disp_hdr", params: ["Address",       1, 1]},
            {type: "disp_hdr", params: ["Prefix Length", 1, 1]},

            // DIP
            {type: "disp_hdr", params: ["Address",       1, 1]},
            {type: "disp_hdr", params: ["Prefix Length", 1, 1]},

            // DSCP
            {type: "disp_hdr", params: ["Match",         1, 1]},
            {type: "disp_hdr", params: ["Minimum",       1, 1]},
            {type: "disp_hdr", params: ["Maximum",       1, 1]},

            // Protocol
            {type: "disp_hdr", params: ["Type",          1, 1]},
            {type: "disp_hdr", params: ["Value",         1, 1]},

            // DPORT
            {type: "disp_hdr", params: ["Match",         1, 1]},
            {type: "disp_hdr", params: ["Minimum",       1, 1]},
            {type: "disp_hdr", params: ["Maximum",       1, 1]}
        ]});

    // Data
    if (val.protocolType == "ipv6") {
        v = val;
    } else {
        v = globals.default_conf;
    }

    table_rows.push(
        {fields: [
            {type: "input",  params: [v.ipv6SipAddress,    "cr", "ipv6SipAddress",   15, 15]},
            {type: "input",  params: [v.ipv6SipPrefixSize, "cr", "ipv6SipPrefixSize", 3,  3, "100px"]},
            {type: "input",  params: [v.ipv6DipAddress,    "cr", "ipv6DipAddress",   15, 15]},
            {type: "input",  params: [v.ipv6DipPrefixSize, "cr", "ipv6DipPrefixSize", 3,  3, "100px"]},
            {type: "select", params: [Object.values(stream_lib_match_type_map), Object.keys(stream_lib_match_type_map), v.ipv6DscpMatchType,   "cl", "ipv6DscpMatchType",  "68px", null, null, function() {on_ip_dscp_match_type_change(false);}]},
            {type: "input",  params: [v.ipv6DscpLow,       "cr", "ipv6DscpLow",       2,  2, "71px"]},
            {type: "input",  params: [v.ipv6DscpHigh,      "cr", "ipv6DscpHigh",      2,  2, "71px"]},
            {type: "select", params: [Object.values(stream_lib_ip_proto_type_map), Object.keys(stream_lib_ip_proto_type_map), v.ipv6ProtoType, "cl", "ipv6ProtoType",      "74px", null, null, function() {on_ip_proto_or_dport_match_change(false);}]},
            {type: "input",  params: [v.ipv6ProtoValue,    "cr", "ipv6ProtoValue",    3,  3]},
            {type: "select", params: [Object.values(stream_lib_match_type_map), Object.keys(stream_lib_match_type_map), v.ipv6DportMatchType,  "cl", "ipv6DportMatchType", "68px", null, null, function() {on_ip_proto_or_dport_match_change(false);}]},
            {type: "input",  params: [v.ipv6DportLow,      "cr", "ipv6DportLow",      5,  5, "71px"]},
            {type: "input",  params: [v.ipv6DportHigh,     "cr", "ipv6DportHigh",     5,  5, "71px"]}
        ]});

    return table_rows;
}

/******************************************************************************/
// add_port_member_rows()
/******************************************************************************/
function add_port_member_rows(val)
{
    var table_rows = new Array(), elements, port_no, ifname;

    // Header
    elements = Array();
    elements.push({type: "disp_hdr", params: ["Port"]});

    // Give the port an ID, so that we can add a tooltip for it, showing the
    // interface name (e.g. 'Gi 1/1') for it.
    Object.values(stream_lib_port_map).forEach(function(port_no) {
        elements.push({type: "disp_hdr", params: [port_no, undefined, undefined, undefined, "port_" + port_no]});
    });

    table_rows.push({fields: elements});

    // Data
    elements = Array();
    elements.push({type:"text", params:["Member", "c"]});

    // For each port, create a new, unchecked checkbox.
    Object.values(stream_lib_port_map).forEach(function(port_no) {
        elements.push({type: "chkbox", params: [false, "c", "member_" + port_no]});
    });

    // Check those checkboxes that are included in the port list.
    Object.values(val.portList).forEach(function(ifname) {
        elements[stream_lib_port_map[ifname]].params[0] = true;
    });

    table_rows.push({fields: elements});

    return table_rows;
}

/******************************************************************************/
// field_is_hidden()
// Found this on Stackoverflow.
/******************************************************************************/
function field_is_hidden(fld)
{
    return fld.offsetParent === null;
}

/******************************************************************************/
// field_is_active()
/******************************************************************************/
function field_is_active(fld)
{
    return !fld.disabled && !field_is_hidden(fld);
}

/******************************************************************************/
// validate_fld()
// Returns 0 if fld_name not found.
// Returns 1 if fld_name found, but is disabled.
// Returns 2 if fld_name found and is enabled.
/******************************************************************************/
function validate_fld(fld_name)
{
    var fld;

    fld = $(fld_name);

    if (!fld) {
        alert("Internal error: Unable to find field called " + fld_name);
        return 0;
    }

    if (!field_is_active(fld)) {
        // Don't check disabled or hidden fields, the caller's caller has made
        // sure to set fields not used in this mode to their defaults in order
        // not to have the JSON parser throw up.
        return 1;
    }

    return 2;
}

/******************************************************************************/
// validate_range()
/******************************************************************************/
function validate_range(fld_name, min, max, msg)
{
    var result = validate_fld(fld_name);

    if (result < 2) {
        return result === 0 ? false : true;
    }

    return isWithinRange(fld_name, min, max, msg) ? true : false;
}

/******************************************************************************/
// validate_mac()
/******************************************************************************/
function validate_mac(fld_name)
{
    var result = validate_fld(fld_name);

    if (result < 2) {
        return result === 0 ? false : true;
    }

    return IsValidMacAddress(fld_name) ? true : false;
}

/******************************************************************************/
// validate_oui()
/******************************************************************************/
function validate_oui(fld_name, msg)
{
    var result = validate_fld(fld_name), fld, i;

    if (result < 2) {
        return result === 0 ? false : true;
    }

    fld = $(fld_name);

    if (fld.value.length != 6) {
        fld.select();
        alert(msg + " must be exactly 6 characters long");
        return false;
    }

    for (i = 0; i < fld.value.length; i++) {
        if (!IsHex(fld.value[i], false)) {
            fld.select();
            alert(msg + " contains non-hexadecimal characters");
            return false;
        }
    }

    return true;
}

/******************************************************************************/
// validate_ipv4_addr()
/******************************************************************************/
function validate_ipv4_addr(ip_addr_name, prefix_len_name, msg)
{
    var result = validate_fld(ip_addr_name), ip_addr_fld, prefix_len_fld, ip1, ip2, ip3, ip4;

    if (result < 2) {
        return result === 0 ? false : true;
    }

    result = validate_fld(prefix_len_name);
    if (result < 2) {
        return result === 0 ? false : true;
    }

    if (!isIpStr(ip_addr_name, false, msg + " Address", 2 /* allow any IP address */, false)) {
        return false;
    }

    // These are leftovers from isIpStr() and contain the individual bytes of
    // the IP address.
    ip1 = parseInt(RegExp.$1, 10);
    ip2 = parseInt(RegExp.$2, 10);
    ip3 = parseInt(RegExp.$3, 10);
    ip4 = parseInt(RegExp.$4, 10);

    // Prefix Length
    if (!isWithinRange(prefix_len_name, 0, 32, msg + " Prefix Length")) {
        return false;
    }

    prefix_len_fld = $(prefix_len_name);
    if (parseInt(prefix_len_fld.value, 10) !== 0) {
        // The Prefix length is non-zero. No concerns
        return true;
    }

    // Figure out whether the IP address is zero.
    if (ip1 || ip2 || ip3 || ip4) {
        // The IP address is non-zero, but the prefix length is 0. Get a
        // confirmation from the user that this is correct.
        if (!confirm("The " + msg + " Address is non-zero. With a Prefix Length of 0, this will not lead to any mathing on " + msg + ". Continue?")) {
            return false;
        }
    }

    return true;
}

/******************************************************************************/
// validate_ipv6_addr()
/******************************************************************************/
function validate_ipv6_addr(ip_addr_name, prefix_len_name, msg)
{
    var result = validate_fld(ip_addr_name), ip_addr_fld, prefix_len_fld;

    if (result < 2) {
        return result === 0 ? false : true;
    }

    result = validate_fld(prefix_len_name);
    if (result < 2) {
        return result === 0 ? false : true;
    }

    if (!isIpv6Str2(ip_addr_name, msg + " Address", 0 /* allow any IPv6 address */, false /* do alert if not valid */)) {
       return false;
    }

    // Prefix Length
    if (!isWithinRange(prefix_len_name, 0, 128, msg + " Prefix Length")) {
        return false;
    }

    prefix_len_fld = $(prefix_len_name);
    if (parseInt(prefix_len_fld.value, 10) !== 0) {
        // The Prefix length is non-zero. No concerns
        return true;
    }

    // Figure out whether the IP address is zero.
    if (!isIpv6AddrZero(ip_addr_name)) {
        // The IP address is non-zero, but the prefix length is 0. Get a
        // confirmation from the user that this is correct.
        if (!confirm("The " + msg + " Address is non-zero. With a Prefix Length of 0, this will not lead to any mathing on " + msg + ". Continue?")) {
            return false;
        }
    }

    return true;
}

/******************************************************************************/
// validate()
/******************************************************************************/
function validate(new_stream)
{
    var fld;

    // Stream ID
    // If this doesn't exist in the JSON input, it's because it's an existing
    // stream, we are updating.
    if (new_stream) {
        // It's a new stream. Validate it.
        if (!validate_range("stream_id", 1, globals.capabilities.InstanceMax, "Stream ID")) {
            return false;
        }

        // If the stream ID already exists, give the user a chance to overwrite
        // or cancel.
        fld = $('stream_id');
        if (stream_lib_inst_get(variables.conf, fld.value)) {
            // Make the field active.
            fld.focus();
            if (!confirm("The chosen Stream ID already exists. Overwrite?")) {
                return false;
            }
        }
    }

    if (!validate_mac("dmac")) {
        return false;
    }

    if (!validate_mac("dmacMask")) {
        return false;
    }

    if (!validate_mac("smac")) {
        return false;
    }

    if (!validate_mac("smacMask")) {
        return false;
    }

    if (!validate_range("outerTagVidValue", 0, configVlanIdMax, "Outer Tag's VLAN")) {
        return false;
    }

    if (!validate_range("outerTagVidMask", 0x0, 0xfff, "Outer Tag's VLAN Mask")) {
        return false;
    }

    if (!validate_range("innerTagVidValue", 0, configVlanIdMax, "Inner Tag's VLAN")) {
        return false;
    }

    if (!validate_range("innerTagVidMask", 0x0, 0xfff, "Inner Tag's VLAN Mask")) {
        return false;
    }

    if (!validate_range("etherType", 0x600, 0xffff, "EtherType")) {
        return false;
    }

    if (!validate_range("llcDsap", 0x0, 0xff, "LLC DSAP")) {
        return false;
    }

    if (!validate_range("llcSsap", 0x0, 0xff, "LLC SSAP")) {
        return false;
    }

    if (!validate_oui("snapOui", "SNAP OUI")) {
        return false;
    }

    if (!validate_range("snapPid", 0x0, 0xffff, "SNAP Protocol ID")) {
        return false;
    }

    if (!validate_ipv4_addr("ipv4SipAddress", "ipv4SipPrefixSize", "Source IP")) {
        return false;
    }

    if (!validate_ipv4_addr("ipv4DipAddress", "ipv4DipPrefixSize", "Destination IP")) {
        return false;
    }

    if (!validate_range("ipv4DscpLow", 0, 63, "DSCP Minimum Value")) {
        return false;
    }

    if (!validate_range("ipv4DscpHigh", 0, 63, "DSCP Maximum Value")) {
        return false;
    }

    if (!validate_range("ipv4ProtoValue", 0, 255, "IPv4 Protocol Value")) {
        return false;
    }

    if (!validate_range("ipv4DportLow", 0, 65535, "TCP/UDP Destination Port Minimum Value")) {
        return false;
    }

    if (!validate_range("ipv4DportHigh", 0, 65535, "TCP/UDP Destination Port Maximum Value")) {
        return false;
    }

    if (!validate_ipv6_addr("ipv6SipAddress", "ipv6SipPrefixSize", "Source IP")) {
        return false;
    }

    if (!validate_ipv6_addr("ipv6DipAddress", "ipv6DipPrefixSize", "Destination IP")) {
        return false;
    }

    if (!validate_range("ipv6DscpLow", 0, 63, "DSCP Minimum Value")) {
        return false;
    }

    if (!validate_range("ipv6DscpHigh", 0, 63, "DSCP Maximum Value")) {
        return false;
    }

    if (!validate_range("ipv6ProtoValue", 0, 255, "IPv6 Protocol Value")) {
        return false;
    }

    if (!validate_range("ipv6DportLow", 0, 65535, "TCP/UDP Destination Port Minimum Value")) {
        return false;
    }

    if (!validate_range("ipv6DportHigh", 0, 65535, "TCP/UDP Destination Port Maximum Value")) {
        return false;
    }

    return true;
}

/******************************************************************************/
// on_submit_done()
/******************************************************************************/
function on_submit_done(responseText)
{
    var msg;

    if (responseText && responseText.error) {
        if (responseText.error.message) {
            msg = responseText.error.message;
        } else if (responseText.error.code) {
            msg = responseText.error.code;
        }
    }

    if (msg) {
        alert(msg);
        return;
    }

    // Refresh the page
    requestUpdate();
}

/******************************************************************************/
// on_save_button_click()
/******************************************************************************/
function on_save_button_click()
{
    var json, key, keys, v, vp, res;

    // Get the full form that we are about to submit.
    json = html2Json(tablesForm);
    keys = Object.keys(json);

    // The JSON parser cannot handle hexadecimal numbers, so let's start by
    // changing them to decimal numbers.
    keys.forEach(function(key) {
        v = json[key];

        if (v.length >= 3 && v[0] == '0' && v[1].toLowerCase() == 'x') {
            // Get chars after "0x"
            vp = v.slice(2);
            if (IsHex(vp, false)) {
                json[key] = parseInt(vp, 16).toString();
            }
        }

        // Set all disabled or hidden fields to their defaults in order not to
        // have the JSON parser throw up and return an unusable error message.
        // This is useful if the user has selected an option that enables, the
        // field, then changes the field's value to an invalid value, and then
        // selects an option that disables or hides the field.
        fld = $(key);
        if (!fld) {
            alert("Internal error: Unable to find " + key);
            return;
        }

        if (!field_is_active(fld)) {
            json[key] = globals.default_conf[key];
        }
    });

    // Time to validate the input. If selected_inst is undefined, it's a new
    // stream we are creating. Otherwise it's an existing stream.
    if (!validate(!selected_inst)) {
        return;
    }

    // Time to convert the member port checkboxes to a port list.
    json["portList"] = new Array();
    Object.each(stream_lib_port_map, function(port_no, ifname) {
        fld = $("member_" + port_no);
        if (fld.checked) {
            json["portList"].push(ifname);
        }
    });

    // Update selected_inst, if it's not set.
    if (!selected_inst) {
        selected_inst = $("stream_id").value;
    }

    // Always use stream.config.add(), because stream.config.set() starts by
    // reading the current configuration, which might not exist.
    // We also request to be called back unless redirecting, so that we can show
    // a possible error code and if everything went OK, we can refresh the page.
    requestJsonDoc("stream.config.add", [selected_inst, json], on_submit_done, selected_inst, true /* always call us back - unless redirecting */);
}

/******************************************************************************/
// on_reset_button_click()
/******************************************************************************/
function on_reset_button_click()
{
    instanceTable.resetEvent();
    configMacTable.resetEvent();
    configVlanTable.resetEvent();
    configProtocolTypeTable.resetEvent();
    configProtocolEtypeTable.resetEvent();
    configProtocolLLCTable.resetEvent();
    configProtocolSNAPTable.resetEvent();
    configProtocolIPv4Table.resetEvent();
    configProtocolIPv6Table.resetEvent();
    configPortMembersTable.resetEvent();

    // Also update enable/disable
    enable_disable_update();

    // And protocol tables
    on_protocol_type_change();
}

/******************************************************************************/
// on_back_button_click()
/******************************************************************************/
function on_back_button_click()
{
    document.location.href = "stream_ctrl.htm";
}

/******************************************************************************/
// tooltips_update()
/******************************************************************************/
function tooltips_update()
{
    var ifname, port_no, fld;

    Object.keys(stream_lib_port_map).forEach(function(ifname) {
        // Set the interface name as a tooltip for both the heading row and the
        // individual checkboxes.
        port_no = stream_lib_port_map[ifname];
        $("port_"   + port_no).setAttribute('title', ifname);
        $("member_" + port_no).setAttribute('title', ifname);
    });
}

/******************************************************************************/
// processUpdate()
/******************************************************************************/
function processUpdate()
{
    var record, statu;

    update_instance_selector();

    // Hide all protocol tables.
    protocol_hide_all_tables_but_this_one(undefined);

    if (selected_inst) {
        record = stream_lib_inst_get(variables.conf,  selected_inst);
        statu  = stream_lib_inst_get(variables.statu, selected_inst);

        if (!record || !statu) {
            alert("Stream ID " + selected_inst + " does not exist.");
            on_back_button_click();
            return;
        }

        statu = statu.val;
    } else {
        // When selected_inst is 0, it's a new entry
        record = {"key": 0, "val": globals.default_conf};
        statu  = undefined;
    }

    // One record spread around many tables
    instanceTable.addRows(add_instance_rows(record.key, statu));
    instanceTable.update();

    configMacTable.addRows(add_mac_rows(record.val));
    configMacTable.update();

    configVlanTable.addRows(add_vlan_rows(record.val));
    configVlanTable.update();

    configProtocolTypeTable.addRows(add_protocol_type_rows(record.val));
    configProtocolTypeTable.update();

    configProtocolEtypeTable.addRows(add_protocol_etype_rows(record.val));
    configProtocolEtypeTable.update();

    configProtocolLLCTable.addRows(add_protocol_llc_rows(record.val));
    configProtocolLLCTable.update();

    configProtocolSNAPTable.addRows(add_protocol_snap_rows(record.val));
    configProtocolSNAPTable.update();

    configProtocolIPv4Table.addRows(add_protocol_ipv4_rows(record.val));
    configProtocolIPv4Table.update();

    configProtocolIPv6Table.addRows(add_protocol_ipv6_rows(record.val));
    configProtocolIPv6Table.update();

    configPortMembersTable.addRows(add_port_member_rows(record.val));
    configPortMembersTable.update();

    // Update hints/tool tips (we can only do this *after* the tables have been
    // displayed, because otherwise the $(id) doesn't work.
    tooltips_update();

    // Update enabled/disabled
    enable_disable_update();

    // Show selected protocol table
    on_protocol_type_change();
}

/******************************************************************************/
// on_inst_select()
/******************************************************************************/
function on_inst_select(fld)
{
    selected_inst = parseInt(fld.options[fld.selectedIndex].value, 10);
    processUpdate();
}

/******************************************************************************/
// requestUpdate()
/******************************************************************************/
function requestUpdate()
{
    variables = {conf: {}, statu: {}};
    stream_lib_json_request(variables, processUpdate);
}

/******************************************************************************/
// on_globals_received()
/******************************************************************************/
function on_globals_received()
{
    stream_lib_port_map = {};
    Object.each(globals.port_name_map, function(record, idx) {
        // This sets stream_lib_port_map to e.g. {'Gi 1/1': 1}, ..., {'Gi 1/24': 24}, ...
        // where the key is the interface name and the value is the port_no.
        stream_lib_port_map[record.key] = record.val;
    });

    requestUpdate();
}

/******************************************************************************/
// window::domready()
/******************************************************************************/
window.addEvent('domready', function() {
    instanceTable            = new DynamicTable("instanceTableContent",            "config");
    configMacTable           = new DynamicTable("configMacTableContent",           "config");
    configVlanTable          = new DynamicTable("configVlanTableContent",          "config");
    configProtocolTypeTable  = new DynamicTable("configProtocolTypeTableContent",  "config");
    configProtocolEtypeTable = new DynamicTable("configProtocolEtypeTableContent", "config");
    configProtocolLLCTable   = new DynamicTable("configProtocolLLCTableContent",   "config");
    configProtocolSNAPTable  = new DynamicTable("configProtocolSNAPTableContent",  "config");
    configProtocolIPv4Table  = new DynamicTable("configProtocolIPv4TableContent",  "config");
    configProtocolIPv6Table  = new DynamicTable("configProtocolIPv6TableContent",  "config");
    configPortMembersTable   = new DynamicTable("configPortMembersTableContent",   "config");

    globals = {capabilities: {}, port_name_map: {}, default_conf: {}};
    stream_lib_json_request(globals, on_globals_received);
});
 </script>
</head>

<body class="content">
  <h1>Stream Configuration</h1>

  <div class="refreshbar">
    <select id="inst_select" onchange="on_inst_select(this);">
       <option value="1">Stream ID #</option>
    </select>

    <input type="button" value="Refresh" onClick="requestUpdate(); this.blur();"/>
    <img id="update" alt="" src="images/updating.gif">
  </div>

  <form id="tablesForm" action="">
    <h2>Stream ID</h2>
    <div id="instanceTableContent"></div>

    <h2>MAC Addresses</h2>
    <div id="configMacTableContent"></div>

    <h2>VLAN Tags</h2>
    <div id="configVlanTableContent"></div>

    <h2>Protocol</h2>
    <div id="configProtocolTypeTableContent"></div><br/>
    <div id="configProtocolEtypeTableContent"></div>
    <div id="configProtocolLLCTableContent"></div>
    <div id="configProtocolSNAPTableContent"></div>
    <div id="configProtocolIPv4TableContent"></div>
    <div id="configProtocolIPv6TableContent"></div>

    <h2>Port Members</h2>
    <div id="configPortMembersTableContent"></div>
  </form>

  <p>
    <input type="button" value="Save"  onclick="on_save_button_click();">
    <input type="button" value="Reset" onclick="on_reset_button_click();">
    <input type="button" value="Back"  onclick="on_back_button_click();">
  </p>
</body>
</html>

