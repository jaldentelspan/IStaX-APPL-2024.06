<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>PSFP Stream Gate Status Details</title>

 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="psfp_lib.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_psfp_gate_status_details.htm";

// Page arguments
var page_args = searchArgs(window.location.search);

var selected_inst = -1;
if (page_args["gateid"]) {
    selected_inst = parseInt(page_args["gateid"], 10);
}

// Global variables
var statusTable, configTable, variables;

/******************************************************************************/
// on_clear_done()
/******************************************************************************/
function on_clear_done(gate_id, err_msg, last)
{
    if (err_msg) {
        alert(err_msg);
    }

    if (last) {
        // Done with all of them. Refresh the page
        requestUpdate();
    }
}

/******************************************************************************/
// submit_clear_request()
/******************************************************************************/
function submit_clear_request(rx)
{
    var submit_json = {ClearGateClosedDueToInvalidRx: rx, ClearGateClosedDueToOctetsExceeded: !rx};

    psfp_lib_json_submit("psfp.control.gate_clear.set", [[selected_inst, submit_json]], on_clear_done);
}

/******************************************************************************/
// on_rx_clear_button_click()
/******************************************************************************/
function on_rx_clear_button_click()
{
    submit_clear_request(true);
}

/******************************************************************************/
// on_oct_exc_clear_button_click()
/******************************************************************************/
function on_oct_exc_clear_button_click()
{
    submit_clear_request(false);
}

/******************************************************************************/
// rx_clear_button_active()
/******************************************************************************/
function rx_clear_button_active(conf, statu)
{
    return conf.AdminGateEnabled && statu.GateClosedDueToInvalidRx;
}

/******************************************************************************/
// oct_exc_clear_button_active()
/******************************************************************************/
function oct_exc_clear_button_active(conf, statu)
{
    return conf.AdminGateEnabled && statu.GateClosedDueToOctetsExceeded;
}

/******************************************************************************/
// add_option_to_selector()
/******************************************************************************/
function add_option_to_selector(selector, show, val, def)
{
    var option;

    option = document.createElement("option");
    option.appendChild(document.createTextNode(show));
    option.setAttribute("value", val);
    if (def) {
        option.setAttribute("selected", true);
    }

    selector.options.add(option);
}

/******************************************************************************/
// update_instance_selector()
/******************************************************************************/
function update_instance_selector()
{
    var i, inst, selector, def;

    // Update instance selector combo box.
    selector = $("inst_select");
    clearChildNodes(selector);
    for (i = 0; i < variables.gate_statu.length; i++) {
        inst = variables.gate_statu[i].key;

        def = inst == selected_inst;
        add_option_to_selector(selector, "Gate ID #" + inst, inst, def);
    }
}

/******************************************************************************/
// add_header()
/******************************************************************************/
function add_header(table_rows)
{
    // 1st row (numbers are colspan, rowspan)
    table_rows.push({fields: [
        {type: "disp_hdr", params:["Gate ID",        1, 2]},
        {type: "disp_hdr", params:["Enabled",        1, 2]},
        {type: "disp_hdr", params:["Config Pending", 1, 2]},
        {type: "disp_hdr", params:["State",          1, 2]},
        {type: "disp_hdr", params:["IPV",            1, 2]},
        {type: "disp_hdr", params:["Closed Due To",  2, 1]}]
    });

    // 2nd row
    table_rows.push({fields: [
        {type: "disp_hdr", params:["Invalid Rx",       1, 1]},
        {type: "disp_hdr", params:["Octects Exceeded", 1, 1]}]
    });
}

/******************************************************************************/
// add_status_rows()
/******************************************************************************/
function add_status_rows(gate_id, conf, statu)
{
    var rx_clear_button_name, oct_exc_clear_button_name, table_rows = new Array();

    // Header
    // 1st row (numbers are colspan, rowspan)
    table_rows.push({fields: [
        {type: "disp_hdr", params: ["Stream Gate ID",       1, 2]},
        {type: "disp_hdr", params: ["Enabled",              1, 2]},
        {type: "disp_hdr", params: ["Config Pending",       1, 2]},
        {type: "disp_hdr", params: ["State",                1, 2]},
        {type: "disp_hdr", params: ["IPV",                  1, 2]},
        {type: "disp_hdr", params: ["Closed Due To",        4, 1]},
        {type: "disp_hdr", params: ["Config Change Errors", 1, 2]},
        {type: "disp_hdr", params: ["Current Time",         2, 1]}]
    });

    // 2nd row
    table_rows.push({fields: [
        {type: "disp_hdr", params: ["Invalid Rx",       2, 1]},
        {type: "disp_hdr", params: ["Octects Exceeded", 2, 1]},
        {type: "disp_hdr", params: ["Seconds",          1, 1]},
        {type: "disp_hdr", params: ["ISO 8601",         1, 1]}]
    });

    // Data
    rx_clear_button_name = "RxClearButton";
    if (rx_clear_button_active(conf, statu)) {
        psfp_lib_disable_button_add(rx_clear_button_name);
    } else {
        psfp_lib_disable_button_del(rx_clear_button_name);
    }

    oct_exc_clear_button_name = "OctExcClearButton";
    if (oct_exc_clear_button_active(conf, statu)) {
        psfp_lib_disable_button_add(oct_exc_clear_button_name);
    } else {
        psfp_lib_disable_button_del(oct_exc_clear_button_name);
    }

    if (conf.AdminGateEnabled) {
        table_rows.push({fields: [
            {type: "digit",     params: [gate_id]},
            {type: "text",      params: ["Yes",                                            "cl"]},
            {type: "text",      params: [statu.ConfigPending ? "Yes" : "No",               "cl"]},
            {type: "text",      params: [psfp_lib_gate_state_map[statu.OperGateState],     "cl"]},
            {type: "text",      params: [statu.OperIpv == -1 ? "Disabled" : statu.OperIpv, "cl"]},
            {type: "text",      params: [statu.GateClosedDueToInvalidRx      ? "Yes" : "No", "cl"]},
            {type: "button",    params: ["Clear", "c", rx_clear_button_name,      on_rx_clear_button_click]},
            {type: "text",      params: [statu.GateClosedDueToOctetsExceeded ? "Yes" : "No", "cl"]},
            {type: "button",    params: ["Clear", "c", oct_exc_clear_button_name, on_oct_exc_clear_button_click]},
            {type: "digit",     params: [statu.ConfigChangeErrors]},
            {type: "text",      params: [statu.CurrentTimeTxt,     "cr"]},
            {type: "text",      params: [statu.CurrentTimeIso8601, "cr"]}]
        });
    } else {
        table_rows.push({fields: [
            {type: "digit",     params: [gate_id]},
            {type: "text",      params: ["No", "cl"]},
            {type: "empty_row", params: [6, " "]},
            {type: "text",      params: [statu.CurrentTimeTxt,     "cr"]},
            {type: "text",      params: [statu.CurrentTimeIso8601, "cr"]}]
        });
    }

    return table_rows;
}

/******************************************************************************/
// get_fld_value()
/******************************************************************************/
function get_fld_value(conf, statu, i, name, valid)
{
    if (!valid) {
        // We print a dash if the chosen configuration isn't valid.
        return "-";
    }

    if (i === 0) {
        // Get operational config
        return statu["OperConf" + name];
    } else if (i === 1) {
        // Get pending config
        return statu["PendConf" + name];
    } else {
        // Get configured config
        return conf["Admin" + name];
    }
}

/******************************************************************************/
// add_config_rows()
/******************************************************************************/
function add_config_rows(conf, statu)
{
    var table_rows = new Array(), valid, gcl_length, gcl_length_max, i, flds, val, val2, gce, gce_name;

    // Header
    table_rows.push({fields: [
        {type: "disp_hdr", params: ["Configuration", 1, 1]},
        {type: "disp_hdr", params: ["Operational",   1, 1, "170px"]},
        {type: "disp_hdr", params: ["Pending",       1, 1, "170px"]},
        {type: "disp_hdr", params: ["Configured",    1, 1, "170px"]}]
    });

    // Data
    valid          = [];
    gcl_length     = [];
    gcl_length_max = 0;

    // Loop across each of the configurations (operational, pending, configured)
    for (i = 0; i < 3; i++) {
        // Figure out whether to display this configuration.
        // Whether we display the operational and pending depends on whether
        // they are valid. We always display the configured.
        valid.push(i === 0 ? statu.OperConfValid : i === 1 ? statu.ConfigPending : true);

        // This array get to contain the GCL length for each of the
        // configurations. This is to be used later.
        if (valid[i]) {
            val = get_fld_value(conf, statu, i, "GclLength", true);
        } else {
            // If the configuration is not valid, don't print any GCEs for it.
            val = 0;
        }

        gcl_length.push(val);

        // Find the maximum of the three.
        if (gcl_length[i] > gcl_length_max) {
            gcl_length_max = gcl_length[i];
        }
    }

    // Now for the individual non-GCE rows.
    // Config Change Time (in seconds)
    flds  = {fields: []};
    flds.fields.push( {type: "text", params: ["Config Change Time (Seconds)"]});
    for (i = 0; i < 3; i++) {
        if (valid[i] && i === 0) {
            val = statu.ConfigChangeTimeTxt;
        } else {
            val = get_fld_value(conf, statu, i, "BaseTimeTxt", valid[i]);
        }

        flds.fields.push({type: "digit", params: [val]});
    }

    table_rows.push(flds);

    // Config Change Time (in ISO 8601 format)
    flds  = {fields: []};
    flds.fields.push( {type: "text", params: ["Config Change Time (ISO 8601)"]});
    for (i = 0; i < 3; i++) {
        if (valid[i] && i === 0) {
            val = statu.ConfigChangeTimeIso8601;
        } else {
            val = get_fld_value(conf, statu, i, "BaseTimeIso8601", valid[i]);
        }

        flds.fields.push({type: "digit", params: [val]});
    }

    table_rows.push(flds);

    // Cycle Time
    flds = {fields: []};
    flds.fields.push({type: "text", params: ["Cycle Time"]});
    for (i = 0; i < 3; i++) {
        if (valid[i]) {
            val  = get_fld_value(conf, statu, i, "CycleTimeNumerator", true);
            val2 = get_fld_value(conf, statu, i, "CycleTimeUnit",      true);
            flds.fields.push({type: "digit", params: [val + " " + val2]});
        } else {
            flds.fields.push({type: "digit", params: ["-"]});
        }
    }

    table_rows.push(flds);

    // Cycle Time Extension
    flds = {fields: []};
    flds.fields.push({type: "text", params: ["Cycle Time Extension"]});
    for (i = 0; i < 3; i++) {
        if (valid[i]) {
            val  = get_fld_value(conf, statu, i, "CycleTimeExtensionNumerator", true);
            val2 = get_fld_value(conf, statu, i, "CycleTimeExtensionUnit",      true);
            flds.fields.push({type: "digit", params: [val + " " + val2]});
        } else {
            flds.fields.push({type: "digit", params: ["-"]});
        }
    }

    table_rows.push(flds);

    // GCL Length
    flds = {fields: []};
    flds.fields.push({type: "text", params: ["Control List Length"]});
    for (i = 0; i < 3; i++) {
        if (i === 0 && !valid[i]) {
            // If the operational configuration is not valid, print a GCL length
            // of 0. This is in order to emphasize that the non-GCE values
            // indeed are valid now, and that it uses a GCL length of 0.
            val = 0;
        } else {
            val = get_fld_value(conf, statu, i, "GclLength", valid[i]);
        }

        flds.fields.push({type: "digit", params: [val]});
    }

    table_rows.push(flds);

    // Print GCEs

    // GCE Gate State
    for (gce = 0; gce < gcl_length_max; gce++) {
        gce_name = "Gce" + gce;

        flds = {fields: []};
        flds.fields.push({type: "text", params: ["Control List Index " + gce + " Gate State"]});
        for (i = 0; i < 3; i++) {
            if (valid[i] && gce < gcl_length[i]) {
                val = psfp_lib_gate_state_map[get_fld_value(conf, statu, i, gce_name + "GateState", true)];
            } else {
                val = "-";
            }

            flds.fields.push({type: "digit", params: [val]});
        }

        table_rows.push(flds);
    }

    // GCE IPV
    for (gce = 0; gce < gcl_length_max; gce++) {
        gce_name = "Gce" + gce;

        flds = {fields: []};
        flds.fields.push({type: "text", params: ["Control List Index " + gce + " IPV"]});
        for (i = 0; i < 3; i++) {
            if (valid[i] && gce < gcl_length[i]) {
                val = get_fld_value(conf, statu, i, gce_name + "Ipv", true);
                if (val == -1) {
                    val = "Disabled";
                }
            } else {
                val = "-";
            }

            flds.fields.push({type: "digit", params: [val]});
        }

        table_rows.push(flds);
    }

    // GCE Time Interval
    for (gce = 0; gce < gcl_length_max; gce++) {
        gce_name = "Gce" + gce;

        flds = {fields: []};
        flds.fields.push({type: "text", params: ["Control List Index " + gce + " Time Interval"]});
        for (i = 0; i < 3; i++) {
            if (valid[i] && gce < gcl_length[i]) {
                val  = get_fld_value(conf, statu, i, gce_name + "TimeIntervalNumerator", true);
                val2 = get_fld_value(conf, statu, i, gce_name + "TimeIntervalUnit",      true);
                flds.fields.push({type: "digit", params: [val + " " + val2]});
            } else {
                flds.fields.push({type: "digit", params: ["-"]});
            }
        }

        table_rows.push(flds);
    }

    // GCE Octet Max
    for (gce = 0; gce < gcl_length_max; gce++) {
        gce_name = "Gce" + gce;

        flds = {fields: []};
        flds.fields.push({type: "text", params: ["Control List Index " + gce + " Octet Max"]});
        for (i = 0; i < 3; i++) {
            if (valid[i] && gce < gcl_length[i]) {
                val = get_fld_value(conf, statu, i, gce_name + "IntervalOctetMax", true);
                if (val == -1) {
                    val = "Disabled";
                }
            } else {
                val = "-";
            }

            flds.fields.push({type: "digit", params: [val]});
        }

        table_rows.push(flds);
    }

    // Show or hide the configTable depending on whether the instance is enabled
    // or disabled, respectively.
    // Don't use $(table).style.visiblity = 'visible' or 'hidden', because then
    // the space reserved for the table is preserved.
    $("configTableContent").style.display = conf.AdminGateEnabled ? 'block' : 'none';

    return table_rows;
}

/******************************************************************************/
// on_back_button_click()
/******************************************************************************/
function on_back_button_click()
{
    document.location.href = "psfp_gate_status_overview.htm";
}

/******************************************************************************/
// enable_disable_update()
/******************************************************************************/
function enable_disable_update(conf, statu)
{
    var fld;

    fld = $("RxClearButton");
    if (fld) {
        fld.disabled = !rx_clear_button_active(conf, statu);
    }

    fld = $("OctExcClearButton");
    if (fld) {
        fld.disabled = !oct_exc_clear_button_active(conf, statu);
    }
}

/******************************************************************************/
// processUpdate()
/******************************************************************************/
function processUpdate()
{
    var record, statu, i;

    update_instance_selector();

    if (selected_inst != -1) {
        record = psfp_lib_inst_get(variables.gate_conf,  selected_inst);
        statu  = psfp_lib_inst_get(variables.gate_statu, selected_inst);
    }

    if (!record || !statu) {
        alert("Stream Gate ID " + selected_inst + " does not exist.");
        on_back_button_click();
        return;
    }

    // Add table rows
    statusTable.addRows(add_status_rows(record.key, record.val, statu.val));
    statusTable.update();

    configTable.addRows(add_config_rows(record.val, statu.val));
    configTable.update();

    enable_disable_update(record.val, statu.val);

    // Refresh timer
    psfp_lib_autorefresh_update();
}

/******************************************************************************/
// on_inst_select()
/******************************************************************************/
function on_inst_select(fld)
{
    selected_inst = parseInt(fld.options[fld.selectedIndex].value, 10);
    processUpdate();
}

/******************************************************************************/
// requestUpdate()
/******************************************************************************/
function requestUpdate()
{
    variables = {gate_conf: {}, gate_statu: {}};
    psfp_lib_json_request(variables, processUpdate);
}

/******************************************************************************/
// window::domready()
/******************************************************************************/
window.addEvent('domready', function() {
    statusTable = new DynamicTable("statusTableContent", "display");
    configTable = new DynamicTable("configTableContent", "display");

    psfp_lib_disable_button_add("inst_select");
    psfp_lib_disable_button_add("autorefresh");
    psfp_lib_disable_button_add("refresh_button");

    requestUpdate();
});
 </script>
</head>

<body class="content">
  <h1>PSFP Stream Gate Status Details</h1>

  <div class="refreshbar">
    <select id="inst_select" onchange="on_inst_select(this);">
       <option value="1">Gate #</option>
    </select>

    <label for="autorefresh">Auto-refresh</label>
    <input type="checkbox" name="autorefresh" id="autorefresh" onclick="psfp_lib_on_autorefresh_click();">
    <input type="button"   id="refresh_button" value="Refresh" onclick="requestUpdate(); this.blur();">
    <img id="psfp_update" alt="" src="images/updating.gif">
  </div>

  <div id="statusTableContent"></div>
  <h2>&nbsp;</h2>
  <div id="configTableContent"></div>
  <p>
    <input type="button" value="Back" onclick="on_back_button_click();">
  </p>

</body>
</html>

