<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>PSFP Stream Gate Status Overview</title>

 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="psfp_lib.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_psfp_gate_status_overview.htm";

// Global variables
var statusTable, variables;

/******************************************************************************/
// on_clear_done()
/******************************************************************************/
function on_clear_done(gate_id, err_msg, last)
{
    if (err_msg) {
        alert("Stream Gate #" + gate_id + ": " + err_msg);
    }

    if (last) {
        // Done with all of them. Refresh the page
        requestUpdate();
    }
}

/******************************************************************************/
// submit_clear_request()
/******************************************************************************/
function submit_clear_request(gate_id, rx)
{
    var submit_json = {ClearGateClosedDueToInvalidRx: rx, ClearGateClosedDueToOctetsExceeded: !rx};

    psfp_lib_json_submit("psfp.control.gate_clear.set", [[gate_id, submit_json]], on_clear_done);
}

/******************************************************************************/
// on_rx_clear_button_click()
/******************************************************************************/
function on_rx_clear_button_click(gate_id)
{
    submit_clear_request(gate_id, true);
}

/******************************************************************************/
// on_oct_exc_clear_button_click()
/******************************************************************************/
function on_oct_exc_clear_button_click(gate_id)
{
    submit_clear_request(gate_id, false);
}

/******************************************************************************/
// rx_clear_button_active()
/******************************************************************************/
function rx_clear_button_active(conf, statu)
{
    return conf.AdminGateEnabled && statu.GateClosedDueToInvalidRx;
}

/******************************************************************************/
// oct_exc_clear_button_active()
/******************************************************************************/
function oct_exc_clear_button_active(conf, statu)
{
    return conf.AdminGateEnabled && statu.GateClosedDueToOctetsExceeded;
}

/******************************************************************************/
// add_header()
/******************************************************************************/
function add_header(table_rows)
{
    // 1st row (numbers are colspan, rowspan)
    table_rows.push({fields: [
        {type: "disp_hdr", params: ["Stream Gate ID", 1, 2]},
        {type: "disp_hdr", params: ["Enabled",        1, 2]},
        {type: "disp_hdr", params: ["Config Pending", 1, 2]},
        {type: "disp_hdr", params: ["State",          1, 2]},
        {type: "disp_hdr", params: ["IPV",            1, 2]},
        {type: "disp_hdr", params: ["Closed Due To",  4, 1]}]
    });

    // 2nd row
    table_rows.push({fields: [
        {type: "disp_hdr", params: ["Invalid Rx",       2, 1]},
        {type: "disp_hdr", params: ["Octects Exceeded", 2, 1]}]
    });
}

/******************************************************************************/
// add_row()
/******************************************************************************/
function add_row(gate_id, conf, statu)
{
    var rx_clear_button_name, oct_exc_clear_button_name, row;

    rx_clear_button_name = "RxClearButton_" + gate_id;
    if (rx_clear_button_active(conf, statu)) {
        psfp_lib_disable_button_add(rx_clear_button_name);
    } else {
        psfp_lib_disable_button_del(rx_clear_button_name);
    }

    oct_exc_clear_button_name = "OctExcClearButton_" + gate_id;
    if (oct_exc_clear_button_active(conf, statu)) {
        psfp_lib_disable_button_add(oct_exc_clear_button_name);
    } else {
        psfp_lib_disable_button_del(oct_exc_clear_button_name);
    }

    if (conf.AdminGateEnabled) {
        row = {fields: [
                  {type: "link",      params: ["cr", "psfp_gate_status_details.htm?gateid=" + gate_id, gate_id]},
                  {type: "text",      params: ["Yes",                                              "cl"]},
                  {type: "text",      params: [statu.ConfigPending                 ? "Yes" : "No", "cl"]},
                  {type: "text",      params: [psfp_lib_gate_state_map[statu.OperGateState],       "cl"]},
                  {type: "text",      params: [statu.OperIpv == -1 ? "Disabled" : statu.OperIpv,   "cl"]},
                  {type: "text",      params: [statu.GateClosedDueToInvalidRx      ? "Yes" : "No", "cl"]},
                  {type: "button",    params: ["Clear", "c", rx_clear_button_name,      function() {on_rx_clear_button_click(gate_id);}]},
                  {type: "text",      params: [statu.GateClosedDueToOctetsExceeded ? "Yes" : "No", "cl"]},
                  {type: "button",    params: ["Clear", "c", oct_exc_clear_button_name, function() {on_oct_exc_clear_button_click(gate_id);}]}]
        };
    } else {
        row = {fields: [
                  {type: "link",      params: ["cr", "psfp_gate_status_details.htm?gateid=" + gate_id, gate_id]},
                  {type: "text",      params: ["No", "cl"]},
                  {type: "empty_row", params: [7, " "]}]
        };
    }

    return row;
}

/******************************************************************************/
// add_rows()
/******************************************************************************/
function add_rows()
{
    var table_rows, inst_conf, cnt;

    table_rows = new Array();
    add_header(table_rows);

    // Add data rows
    cnt = 0;
    Object.each(variables.gate_statu, function(record) {
        inst_conf = psfp_lib_inst_get(variables.gate_conf, record.key);
        if (inst_conf) {
            table_rows.push(add_row(record.key, inst_conf.val, record.val));
            cnt++;
        }
    });

    // Empty row
    if (!cnt) {
        table_rows.push({fields: [{type: "empty_row", params: [7, "No Stream Gate instances"]}]});
    }

    return table_rows;
}

/******************************************************************************/
// enable_disable_update()
/******************************************************************************/
function enable_disable_update()
{
    var gate_id, conf, statu, fld;

    Object.each(variables.gate_statu, function(record) {
        gate_id = record.key;
        statu   = record.val;
        conf    = psfp_lib_inst_get(variables.gate_conf, gate_id);

        fld = $("RxClearButton_" + gate_id);
        if (fld) {
            fld.disabled = !rx_clear_button_active(conf.val, statu);
        }

        fld = $("OctExcClearButton_" + gate_id);
        if (fld) {
            fld.disabled = !oct_exc_clear_button_active(conf.val, statu);
        }
    });
}

/******************************************************************************/
// processUpdate()
/******************************************************************************/
function processUpdate()
{
    // Add table rows
    statusTable.addRows(add_rows());

    // Update this dynamic table
    statusTable.update();

    // Enable/Disable buttons
    enable_disable_update();

    // Refresh timer
    psfp_lib_autorefresh_update();
}

/******************************************************************************/
// requestUpdate()
/******************************************************************************/
function requestUpdate()
{
    variables = {gate_conf: {}, gate_statu: {}};
    psfp_lib_json_request(variables, processUpdate);
}

/******************************************************************************/
// window::domready()
/******************************************************************************/
window.addEvent('domready', function() {
    statusTable = new DynamicTable("statusTableContent", "display");

    psfp_lib_disable_button_add("autorefresh");
    psfp_lib_disable_button_add("refresh_button");
    requestUpdate();
});
 </script>
</head>

<body class="content">

  <h1>PSFP Stream Gate Status Overview</h1>

  <div class="refreshbar">
    <label for="autorefresh">Auto-refresh</label>
    <input type="checkbox" name="autorefresh" id="autorefresh" onclick="psfp_lib_on_autorefresh_click();">
    <input type="button"   id="refresh_button" value="Refresh" onclick="requestUpdate(); this.blur();">
    <img id="psfp_update" alt="" src="images/updating.gif">
  </div>

  <div id="statusTableContent"></div>
</body>
</html>

