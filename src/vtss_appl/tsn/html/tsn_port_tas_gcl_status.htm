<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2023 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>

<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>GCL Operational Parameters</title>

 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="tsn_lib.js"></script>
 <script type="text/javascript">

var help_page = "/help/help_tsn_port_tas_gcl_status.htm";

// Global variables
var myDynamicTable, timerID;
var port_no = configPortMin;
var intf    = "Gi";

// This piece of code makes sure that a specific instance can be selected
// directly, when navigating from a hyperlink on a different page.
var arg_idx = document.URL.indexOf('?');
if(arg_idx != -1) {
    var args = document.URL.substring(arg_idx+1, document.URL.length);
    var tup = args.split('=');
    if(tup.length == 2) {
        if(tup[0] == 'port') {
            var split_val = tup[1].split("/");
            port_no = parseInt(split_val[1], 10);
            split_val = tup[1].split("%");
            intf    = split_val[0];
        }
    }
}

function addHeader(table_rows)
{
    var row;

    row = {fields:[
                   {type:"disp_hdr", params:["GCL ID", 1, 2]},
                   {type:"disp_hdr", params:["Gate State", 8, 1]},
                   {type:"disp_hdr", params:["Time Interval",1,1]}
                  ]
          };

    table_rows.push(row);

    row = {fields:[
                   {type:"disp_hdr", params:["Q0"]},
                   {type:"disp_hdr", params:["Q1"]},
                   {type:"disp_hdr", params:["Q2"]},
                   {type:"disp_hdr", params:["Q3"]},
                   {type:"disp_hdr", params:["Q4"]},
                   {type:"disp_hdr", params:["Q5"]},
                   {type:"disp_hdr", params:["Q6"]},
                   {type:"disp_hdr", params:["Q7"]},
                   {type:"disp_hdr", params:["nanoseconds"]}
                  ]
          };
    table_rows.push(row);
}

function addRow(key, val)
{
    var bits = new Array();
    var gateStates = parseInt(val.GateState, 16);
    stringToBits(gateStates, bits);

    var gcl_id = key[1];
    var row = {
        "key":key,
        fields:[
            {type:"text",   params:[gcl_id, "cr"]},
            {type:"image",  params:["c", bits[0]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",  params:["c", bits[1]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",  params:["c", bits[2]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",  params:["c", bits[3]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",  params:["c", bits[4]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",  params:["c", bits[5]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",  params:["c", bits[6]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",  params:["c", bits[7]  ? "images/yes.gif" : "images/no.gif"]},
            {type:"text",   params:[val.TimeInterval, "cr"]}
           ]
    };

    return row;
}

function addRows(recv_json)
{
    var table_rows = new Array();
    var empty_colspan = 21;

    addHeader(table_rows);

    Object.each(recv_json, function(record) {
        var recv_port = record.key[0];
        var res = recv_port.split("/");
        var interf = recv_port.split(" ");
        var port_id = parseInt(res[1], 10);
        if (port_id == port_no) {
            if (intf == interf[0]) {
                table_rows.push(addRow(record.key, record.val));
            }
        }
    });

    // Empty row
    if (!recv_json.length) {
        table_rows.push({fields:[{type:"empty_row", params:[empty_colspan]}]});
    }

    return table_rows;
}

function processUpdate(recv_json)
{
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("Get dynamic data failed.");
        return;
    }

    // Save the received JSON data
    myDynamicTable.saveRecvJson("status", recv_json);

    // Add table rows
    myDynamicTable.addRows(addRows(recv_json));

    // Update this dynamic table
    myDynamicTable.update();

    // Refresh timer
    var autorefresh = document.getElementById("autorefresh");
    if (autorefresh && autorefresh.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
    }
}

function requestUpdate()
{
    // Restore table content
    myDynamicTable.restore();

    requestJsonDoc("tsn.status.interface.tas.gclEntry.get", null, processUpdate, "status");
}

function backFunc() {
    document.location.href="tsn_port_tas_status.htm";
}

function checkRefresh(fld)
{
    if (fld.checked) {
        requestUpdate();
    } else if (timerID) {
        clearTimeout(timerID);
        timerID = null;
    }
}

window.addEvent('domready', function() {
    // Create a from with table body for receive/transmit JSON data
    myDynamicTable = new DynamicTable("myTableContent", "display");

    requestUpdate();
});

 </script>
</head>

<body class="content">

<h1>GCL Operational Parameters</h1>

<div class="refreshbar">
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" name="autorefresh" id="autorefresh" onclick="checkRefresh(this);">
  <input type="button" value="Refresh"  onClick="requestUpdate();      this.blur();">
  <img id="update" alt="" src="images/updating.gif">
</div>

<div id="myTableContent"></div>

<p>
<input type="button" id="Back" value="Back" onclick="backFunc()">&nbsp;&nbsp;&nbsp;&nbsp;
</p>

</body>
</html>
