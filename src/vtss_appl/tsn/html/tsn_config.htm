<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>

<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>TAS Configuration Parameters </title>

 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/format.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="lib/HeaderControl.js"></script>
 <script type="text/javascript" src="tsn_lib.js"></script>
 <script type="text/javascript">

var help_page = "/help/help_tsn_config.htm";

var myDynamicGlobalTable, myCapabilities, myTableClockDomain;

var oTProcedure   = Array("None","Time only", "Time And Ptp");
var oVProcedure   = Array("none","timeonly", "timeAndPtp");


function addGlobalRowProcedure(val)
{
    var row = {fields:[
        {type:"conf_hdr", params:["Procedure"]},
        {type:"select",   params:[oTProcedure, oVProcedure, val.Procedure, "c", "procedure_"]}
    ]
    };
    return row;
}

function addGlobalRowTimeout(val)
{
    var row = {fields:[
        {type:"conf_hdr", params:["Timeout"]},
        {type:"input",  params:[val.Timeout, "cr", "timeout_", 9, 9],
                            validate:{func:isWithinRange, params:["timeout_", 10, 200, "Timeout"]}}
    ]
    };
    return row;
}

function addGlobalRowPtpport(val)
{
    var row = {fields:[
        {type:"conf_hdr", params:["PTPport"]},
        {type:"input",  params:[val.PtpPort, "cr", "ptpport_", 9, 9],
                            validate:{func:isWithinRange, params:["ptpport_", 0, 3, "PtpPort"]}}
    ]
    };
    return row;
}

function addRowClockDomain(val)
{
    var row = {fields:[
        {type:"conf_hdr", params:["ClockDomain"]},
        {type:"input",  params:[val.ClockDomain, "cr", "clockdomain_", 9, 9],
                            validate:{func:isWithinRange, params:["clockdomain_", 0, 2, "ClockDomain"]}}
    ]
    };
    return row;
}


function addGlobalRows(recv_json)
{
    var table_rows = new Array();
    table_rows.push(addGlobalRowProcedure(recv_json));
    table_rows.push(addGlobalRowTimeout(recv_json));
    table_rows.push(addGlobalRowPtpport(recv_json));
    return table_rows;
}

function addClockDomainRows(recv_json)
{
    var table_rows = new Array();
    table_rows.push(addRowClockDomain(recv_json));
    return table_rows;
}

function processUpdate(recv_json, name)
{
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("Get dynamic data failed.");
        return;
    }

    // Save the received JSON data
    if (name == "globalConfig") {
        myDynamicGlobalTable.saveRecvJson(name, recv_json);
        myDynamicGlobalTable.addRows(addGlobalRows(recv_json));
        myDynamicGlobalTable.update();

        myTableClockDomain.saveRecvJson(name, recv_json);
        myTableClockDomain.addRows(addClockDomainRows(recv_json));
        myTableClockDomain.update();
    } else {
        alert("Unexpected configuration name:", name);
        return;
    }
}

function isConsistent()
{
    var i, cycle_timeN_fld, cycle_timeD_fld, cycle_timeN_val, cycle_timeD_val;

    return true;
}


function checkForm()
{
    // Check if duplicated row key
    if (!isConsistent()) {
        return false;
    }

    return true;
}

function requestUpdate()
{
    // Restore table content
    myDynamicGlobalTable.restore();
    myTableClockDomain.restore();

    requestJsonDoc("tsn.config.global.get", null, processUpdate, "globalConfig");
}

function resetForms()
{
    myDynamicGlobalTable.resetEvent();
    myTableClockDomain.resetEvent();
}

function submitForms()
{
    // Validate row data
    if (!myDynamicGlobalTable.validate()) {
        return;
    }
    if (!myTableClockDomain.validate()) {
        return;
    }

    var old_param = myDynamicGlobalTable.getRecvJson("globalConfig");
    var json_obj = {"Procedure":"", "Timeout":0, "PtpPort":0, "ClockDomain":0 };

    var e = $("procedure_");

    json_obj["Procedure"]    = e.options[e.selectedIndex].value;
    json_obj["Timeout"]      = parseInt($("timeout_").value,10);
    json_obj["PtpPort"]      = parseInt($("ptpport_").value,10);
    json_obj["ClockDomain"]  = parseInt($("clockdomain_").value,10);


    if (JSON.stringify(old_param) != JSON.stringify(json_obj)) {
        // This record changed, update with new values
        console.log(json_obj);
        requestJsonDoc("tsn.config.global.set", json_obj, requestUpdate);
    }
}

function requestUpdateGlobals(recv_json, name)
{
    if (name == "capabilities") {
        myCapabilities = recv_json;
    }
    if (myCapabilities) {
        requestUpdate();
    }
}

window.addEvent('domready', function() {
    // Create a form with table body for receive/transmit JSON data
    myDynamicGlobalTable = new DynamicTable("myTableGlobalContent", "config");
    myTableClockDomain = new DynamicTable("myTableClockDomain", "config");
    requestJsonDoc("tsn.capabilities.get", null, requestUpdateGlobals, "capabilities");
});

 </script>
</head>

<body class="content">

<h1>TSN Configuration Parameters </h1>

<div class="refreshbar">
  <img id="update" alt="" src="images/updating.gif">
</div>

<div id="myTableGlobalContent"></div>

<h1>TSN Clock domain</h1>

<div id="myTableClockDomain"></div>

<p>
<input type="button" value="Save" onclick="submitForms();">
<input type="button" value="Reset" onclick="resetForms();">
</p>

</body>
</html>
