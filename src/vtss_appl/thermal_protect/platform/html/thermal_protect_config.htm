<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/HeaderControl.js"></script>
 <script type="text/javascript">


// Help page magic
var help_page = "/help/help_thermal_protect_config.htm";

var grps_cnt = 0;


//
// Table for the thermal temperature for the different groups
//
function UpdateThermalTemperatureTable (thermal_grp_temp) {

    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();

    clearChildNodes(document.getElementById('thermalTempTable')); // Delete table if it already exists
    
    // Create header
    var tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr,"Group","hdrc",1);
    addTextHeaderCell(tr,"Temperature","hdrc",2);
    frag.appendChild(tr);       // Add row to fragment

    temperatures = thermal_grp_temp.split(","); // Get the temperature for each Group 
    grps_cnt = temperatures.length;

    for(var Group = 0; Group < grps_cnt; Group++) {
        if(temperatures[Group].length) {
	    tr = CreateStyledElement("tr", Group % 2 ? "config_odd" : "config_even");
	    addTextCell(tr, Group, "cr");
	    addInputCell(tr, temperatures[Group], "c", "thermal_grp_temp_" + Group, 3, 3);
	    addTextCell(tr, "\u00b0C", "cr"); // print degrees C
	    frag.appendChild(tr);       // Add row to fragment
        }
    }
    FinishTable(frag,'thermalTempTable');
}

//
// Table for the suisude groups for the ports
//
function UpdateThermalPortsTable(thermal_grps) {

    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();

    clearChildNodes(document.getElementById('thermalPortsHead')); // Delete table if it already exists
    
    // Create header
    var tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr,"Port","hdrc",1);
    addTextHeaderCell(tr,"Group","hdrc",1);
    frag.appendChild(tr);       // Add row to fragment

    FinishTable(frag,'thermalPortsHead');

    grps = thermal_grps.split(",");
    
    // Make a list with all the groups
    var oT = Array();
    var oV = Array();

    for (var i = 0; i < grps_cnt; i++) {
	oV[i] = oT[i] = i; // Here text is the same as value
    }
    oT[grps_cnt] = "Disabled";
    oV[grps_cnt] = grps_cnt;

    // Create the table
    for (var port = configPortMin; port <= grps.length; port++) {
	var index = port - configPortMin;
	if(grps[index].length) {
	    var tr3 = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
	    addTextCell(tr3, port, "cr");
	    addSelectCell(tr3, oT, oV, grps[index], "cr", "thermal_port_grp_" + index);
	    frag.appendChild(tr3);       // Add row to fragment
	}
    }
    FinishTable(frag,'thermalPortsBody');

    var cBar = new HeaderControlBar([{text: "*", className: "cr"},
    {name: "thermal_port_grp_"}]);
    
    cBar.construct('thermalPortsBody', 'config_odd');
}

//
// Update when web page is loaded
//
function processUpdate(req, ref)
{
    // Format: 
    //  <err_msg>|<t_max>|<t_on>
    
    if(redirectOnError(req)) {
        return;
    }

    if(req.responseText) {
        // Get and set configurations settings
        var config = req.responseText.split("|");
        var err_msg            = config[0];
        var thermal_grp_temp  = config[1]; // Get the temperature where the different groups shall do thermal protection
        var thermal_port_grps = config[2]; // Get the thermal Group for each port
        
        // Error message
        if (err_msg !== "") {
            alert(err_msg);
        }
	
        UpdateThermalTemperatureTable(thermal_grp_temp);
        UpdateThermalPortsTable(thermal_port_grps);        
                
    } else {
        SpomHandleError();   
    }
}

//
// Check all input when "save" button is pressed.
//
function checkForm(form)
{

    for(var Group = 0; Group < grps_cnt; Group++) {
	if(!isWithinRange("thermal_grp_temp_" + Group , 0 ,255, "'Temperature'", " C")) {
	    return false;
	}
    }
    return true;                // Feed the chickens and go home
}


//
// Web page updated
//
function requestUpdate() {
    if(SpomNavigationLoading()) {
        return;                 // Bail out, navigation will trigger update
    }
    loadXMLDoc(SpomAddSidArg("/config/thermal_protect_config"), processUpdate, 'config');
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

//
// Check if the switch in the stack is changed.
//
function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}
</script>

</head>
<body class="content" onload="requestUpdate();">
<h1>Thermal Protection Configuration</h1>
<form name="ConfigForm" method="POST" action="/config/thermal_protect_config" onsubmit="if (!checkForm()) { return false; } changeForm('grayOut');">


<h2>Temperature settings for groups</h2>
<table id="ThermalGrpTemp" summary="Thermal Protection Temperature Shutdown" class="config">
 <tbody id="thermalTempTable">
 </tbody>
</table>


<h2>Port groups <span id="display_sid"></span></h2>
<table id="thermalonfig" summary="Port Thermal Protection Configuration" class="config">
 <tbody id="thermalPortsHead"> </tbody>
 <tbody id="thermalPortsBody"> </tbody>
</table>

<p>
<input type="hidden" id="submit_sid" name="sid">
<input type="submit" value="Save">
<input type="reset" value="Reset">
</p>
</form>
</body>
</html>
     

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
