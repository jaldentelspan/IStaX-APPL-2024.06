<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2023 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Protocol Group to VLAN mapping table</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">
 var help_page = "/help/help_vcl_grp_2_vlan_mapping.htm";
var reqObject;
var timerID;
var timeOut = settingsRefreshInterval();

var maxEntriesNum = configVCLGrp2VLANMax - configVCLGrp2VLANMin + 1;
var entryIdxArray = Array();
var originalEntriesNum, newEntriesNum;
var usedGrpNameArray = Array();
var vidArray = Array();

var pageArgs = searchArgs(window.location.search);
if (pageArgs.GROUP_error && parseInt(pageArgs.GROUP_error, 10) == 1) {
   alert("Failure while deleting one of the old Group to VID mappings");
}
if (pageArgs.GROUP_error && parseInt(pageArgs.GROUP_error, 10) == 2) {
   alert("Group to VID mapping is not present anymore. Make sure you refresh the web page in order to update to any changes made through ICLI");
}
if (pageArgs.GROUP_error && parseInt(pageArgs.GROUP_error, 10) == 3) {
   alert("Failure while updating one or more of the old Group to VID mappings");
}
if (pageArgs.GROUP_error && parseInt(pageArgs.GROUP_error, 10) == 4) {
   alert("Failure while adding one or more of the new Group to VID mappings");
}
if (pageArgs.GROUP_error && parseInt(pageArgs.GROUP_error, 10) == 5) {
   alert("Entry cannot be empty of port members. If your intention was to delete the entry, please use the delete checkbox instead.");
}
if (pageArgs.GROUP_error && parseInt(pageArgs.GROUP_error, 10) == 6) {
   alert("Group to VLAN ID mapping already exists and it has to be deleted if a new mapping for the specific Group is required.");
}

// Adds a hidden cell to a table (the hidden table in this case)
function addHidden(TableeElement,CellName,Value) {
  var theTable = document.getElementById(TableeElement);
  var y = document.createElement('td');
  field = addInputCell(y,CellName,"c",Value);
  theTable.style.visibility = "hidden";
  theTable.tHead.rows[0].appendChild(y);
}

// Delete the hidden table
function DelHidden(TableeElement) {
   var theTable = document.getElementById(TableeElement);
   var allRows = theTable.rows;
   originalEntriesNum = 0;
   while (allRows[0].cells.length > 1) {
       allRows[0].deleteCell(-1);
   }
}

function addEntryIdx()
{
    var fld;

    for (var i = 1; i <= maxEntriesNum; i++) {
        fld = document.getElementById("delEntryIdx_" + i);
        if (!fld) {
            entryIdxArray[newEntriesNum++] = i;
            return i;
        }
    }
    return 0;
}

function delEntryIdx(id, tr)
{
    var values = id.split("_");
    var idx = parseInt(values[1], 10);
    var pcount = SpomCurrentPorts();
    var i, j;

    pcount = parseInt(pcount, 10) + 3;
    for(j = 0; j < SpomCurrentPorts(); j++) {
        if (isStackPort(j + 1)) {
            pcount--;
        }
    }
    for (i = 0; i < newEntriesNum; i++) {
        if (idx == entryIdxArray[i]) {
            for (j = i; j < newEntriesNum; j++) {
                entryIdxArray[j] = entryIdxArray[j + 1];
            }
            break;
        }
    }

    newEntriesNum--;
    document.getElementById('vlanData').deleteRow(tr.rowIndex);

    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    var tbody = document.getElementById("vlanData");

    if (originalEntriesNum === 0 && newEntriesNum === 0) {
       clearChildNodes(tbody);
       addTblHeader(frag);
       // no entries found - Display that in the table
       tr = CreateStyledElement("tr","config_even");
       addTextCell(tr, "No Group entry found!", "c", pcount);
       frag.appendChild(tr);       // Add row to fragment
       tbody.appendChild(frag);
    }
}

function AddNewRow()
{
    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    var tbody = document.getElementById("vlanData");

    if ((originalEntriesNum === 0) && (newEntriesNum === 0)) {
       clearChildNodes(tbody);
       addTblHeader(frag);
       tbody.appendChild(frag);
    }
 
    var entryIdx = addEntryIdx();
    if (entryIdx === 0) {
        alert("The maximum number of entries is " + maxEntriesNum);
        return;
    }

    if ((originalEntriesNum + newEntriesNum) > maxEntriesNum) {
        newEntriesNum--;
        alert("The maximum number of entries is " + maxEntriesNum);
        return;
    }
    var tr = CreateStyledElement("tr", (originalEntriesNum + entryIdx) % 2 ? "config_even" : "config_odd");

    var button = document.createElement('input');
    button.onclick = function() { delEntryIdx(this.id, tr); };
    button.id = "delEntryIdx_" + entryIdx;
    button.type = "button";
    button.value = " Delete ";
    var td = CreateTd("c");
    addCell(tr, td, button);

    //Group Name
    var edit_ctrl = addInputCell(tr, "", "cl", "name_new_" + entryIdx, 16);
    edit_ctrl.setAttribute("maxLength", 16); // 'camelCase' required for maxLength for this to work with IE.
    //VLAN ID
    var edit_ctrl_name = addInputCell(tr, "", "cl", "vid_new_" + newEntriesNum, 4);
    edit_ctrl_name.setAttribute("maxLength", 4);

    //checkboxes
    for(var i = 0; i < SpomCurrentPorts(); i++) {
        if (isStackPort(i + 1)) {
            continue;
        }
        addCheckBoxCell(tr, 0, "c", "mask_new_" + entryIdx + "_" + (i + 1));
    }

    frag.appendChild(tr);       // Add row to fragment

    if (!tbody.appendChild(frag)) { // Add Frag to table body
      alert("This browser doesn't support dynamic tables.");
    }
}


function addRow(index, frag, values)
{
  vidArray[originalEntriesNum] = values[1];
  usedGrpNameArray[originalEntriesNum] = values[0];
  originalEntriesNum++;
  var idx = parseInt(index, 10) + 1;
  var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
  var txt;
  //Delete checkbox
  addCheckBoxCell(tr, 0, "c", "delete_" + idx);
  //hidden Grp id field
  addHidden("HiddenTable", values[0], "hiddenGrp_" + idx);
  //hidden vid field
  addHidden("HiddenTable", values[1], "hiddenVID_" + idx);
  //Group Name
  txt = addTextCell(tr, values[0], "c");
  //VID
  txt = addTextCell(tr, values[1], "c");
  //Member ports
  var checkboxAry = values[2].split(",");
  var port = 0;
  for (var i = 0; i < SpomCurrentPorts(); i++) {
      if (isStackPort(i + 1)) {
          continue;
      }
      port++;
      addCheckBoxCell(tr, parseInt(checkboxAry[i], 10), "c", "mask_" + idx + "_" + port);
  }
  frag.appendChild(tr);       // Add row to fragment
 }

function changeFilter () {
    var tempAry = this.id.split("_");
    var length = 5;
    var defaultTxt = "08-00";
    var index = tempAry[1];
    if (index != "new") {
        alert (index);
    } else {
        index = tempAry[2];
    }
    if (this.value == "Ethernet") {
        length = 5;
        defaultTxt = "08-00";
    } else if (this.value == "LLC") {
        length = 5;
        defaultTxt = "FE-EE";
    } else if (this.value == "SNAP") {
        length = 14;
        defaultTxt = "00-E0-2B-00-01";
    } else {
               alert ("Error: Wrong value of Frame type");
    }
    var elemRef = document.getElementById("value_new_" + index);
    elemRef.setAttribute("maxLength", length);
    elemRef.setAttribute("size", length);
    elemRef.value = defaultTxt;


}

var prev_req = "";
function processUpdate(req, ref)
{
 /* Format: <Group Name 1><Group Name 2>...<Group Name n>,<Group Name i>/<VID i>/<Member port 1 status>#...<Member port max status> */

 //var valuesdommy = "ABC/1/1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#|CDE/2/1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#1#|";
 /* take backup of previous req object */
  prev_req = req;
    var tbody = document.getElementById(ref);
    var frag = document.createDocumentFragment();
    clearChildNodes(tbody);
    addTblHeader(frag);
    if(redirectOnError(req)) {
        return;
    }
    var portcount = SpomCurrentPorts();
    for (var i = 0; i < SpomCurrentPorts(); i++) {
        if (isStackPort(i + 1)) {
            portcount--;
        }
    }
    originalEntriesNum = 0;
    newEntriesNum = 0;
    var number_of_entries = 0;
    if (reqObject != req) {
        reqObject = req;
    }
    if (req.responseText) {
        var len = entryIdxArray.length;
        if (len > 0) {
            entryIdxArray.splice(0, len);
        }
        var vclConfigRecAry = req.responseText.split(";");
        for (i = 0; i < vclConfigRecAry.length; i++) {
            if (vclConfigRecAry[i] !== "") {
                var rowAry = vclConfigRecAry[i].split("/");
                addRow(i, frag, rowAry);
                number_of_entries++;
            }
        }
    }
    if (!number_of_entries) {
    // no entries found - Display that in the table
        var tr = CreateStyledElement("tr","config_even");
        addTextCell(tr, "Currently no entries present in the switch", "c", 5 + portcount);
        frag.appendChild(tr);       // Add row to fragment    
    }
    if (!tbody.appendChild(frag)) { // Add Frag to table body
        alert("This browser doesn't support dynamic tables.");
    }
    var autorefresh = document.getElementById('autorefresh');
    if (autorefresh.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
    }
    updateFuncBar(1);
}

function addTblHeader(frag)
{
    var tr;
    var portcount = SpomCurrentPorts();
    tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr, "", "hdrc", 3);
    for(var j = 0; j < SpomCurrentPorts(); j++) {
        if (isStackPort(j + 1)) {
            portcount--;
        }
    }
    addTextHeaderCell(tr, "Port Members", "hdrc", portcount);
    frag.appendChild(tr);       // Add row to fragment
    tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr,"Delete","hdrc");
    addTextHeaderCell(tr,"Group Name","hdrc");
    addTextHeaderCell(tr,"VLAN ID","hdrc");
    for (var i = 0; i < SpomCurrentPorts(); i++ ) {
        if (isStackPort(i + 1)) {
            continue;
        }
        addTextHeaderCell(tr, configPortName(i + 1, 0), "portno");
    }
    frag.appendChild(tr);       // Add row to fragment
}

function chkRefresh(fld) {
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = null;
    } else {
        requestUpdate();
    }
}

function requestUpdate()
{
    DelHidden("HiddenTable");
    if(SpomNavigationLoading()) {
        return;         // Bail out, navigation will trigger update
    }
    updateFuncBar(0);
    loadXMLDoc(SpomAddSidArg("/config/vcl_grp_2_vlan_map"), processUpdate, 'vlanData');
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

function checkName(sText)
{
    var ValidChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var ValidDigits = "0123456789";
    var IsValid = 0;
    var NumDigits = 0;
    var Char;

    for (var i = 0; i < sText.length; i++)
    {
        Char = sText.charAt(i);
        if (ValidDigits.indexOf(Char) == -1 || Char === "")
        {
            if (ValidChars.indexOf(Char) == -1 || Char === "")
            {
                return IsValid;
            }
        } else {
            NumDigits = NumDigits + 1;
        }
    }
    if (NumDigits != i) {
        IsValid = 1;
    }
    return IsValid;
}

function checkForm()
{
    var VLANfld, fld1, fld2, temp, i, ii, jused, jchk;
    var GrpNamefld, cur_port_fld, next_port_fld;
    var deleteEntriesNum = 0;
    var port_count = 0;
    var port = 0;

    var front_port_cnt = SpomCurrentPorts();
    for(ii = 0; ii < SpomCurrentPorts(); ii++) {
        if (isStackPort(ii + 1)) {
            front_port_cnt--;
        }
    }

    //count number of entries to be deleted
    for (i = 0, temp = i + 1; i < originalEntriesNum; i++) {
        fld1 = document.getElementById("delete_" + temp);
        if (fld1.checked) {
            deleteEntriesNum++;
        }

        //check for mutual exclusion in usedGroup name list
        for (jused = i + 1; jused < originalEntriesNum; jused++) {
            if (usedGrpNameArray[i] == usedGrpNameArray[jused]) {//Check for mutual exclusion
                for(jchk = 0; jchk < SpomCurrentPorts(); jchk++) {
                    if (isStackPort(jchk + 1)) {
                        continue;
                    }
                    cur_port_fld = document.getElementById("mask_" + temp +"_" + (jchk + 1));
                    next_port_fld = document.getElementById("mask_"+ (jused + 1) +"_" + (jchk + 1));
                    if (cur_port_fld.checked && next_port_fld.checked) {
                        GiveAlert("Entry with Group Name " + usedGrpNameArray[jused] + "has a port list that is not mutually exclusive!");
                        return false;
                    }
                }
            }
        }
	temp++;
    }

    //check new entries
    for (i = 1; i <= newEntriesNum; i++) {

        VLANfld = document.getElementById("vid_new_" + entryIdxArray[i-1]);
        GrpNamefld = document.getElementById("name_new_" + entryIdxArray[i-1]);
        //Validate Group Name fields
        if (GrpNamefld.value !== "") {
            if (!checkName(GrpNamefld.value)) {
                GiveAlert("Invalid characters found in the group name. Please check help page for the correct Group name format.");
                GrpNamefld.select();
                return false;
            }
        } else {
            GiveAlert("Group Name field cannot be empty. Please provide a valid group name for the entry.");
            GrpNamefld.select();
            return false;
        }

        //Check whether current Group Name and VID exists in already stored static entries
        for (var j = 0; j < originalEntriesNum; j++) {
            if (GrpNamefld.value == usedGrpNameArray[j] && VLANfld.value == vidArray[j]) {
                GiveAlert("Group Name " + GrpNamefld.value + " to VID " + VLANfld.value + " mapping is already in use in another entry. Please edit that one instead of adding it again!", GrpNamefld);
                return false;
            }
            if (GrpNamefld.value == usedGrpNameArray[j]) {//Mutually exclusive port list check
                for(jchk = 0; jchk < SpomCurrentPorts(); jchk++) {
                    if (isStackPort(jchk + 1)) {
                        continue;
                    }
                    cur_port_fld = document.getElementById("mask_new_" + entryIdxArray[i-1] +"_" + (jchk + 1));
                    next_port_fld = document.getElementById("mask_" + (j + 1) + "_" + (jchk + 1));
                    if (cur_port_fld.checked && next_port_fld.checked) {
                        GiveAlert("Entry with Group Name " + GrpNamefld.value + " has a port list that is not mutually exclusive!", GrpNamefld);
                        return false;
                    }
                }
            }
        }

        //check the entry exist in new entries
        for (j = i + 1; j <= newEntriesNum; j++) {
            var nextGrpName = document.getElementById("name_new_"+ entryIdxArray[j-1]).value ;
            var nextVIDValue = document.getElementById("vid_new_"+ entryIdxArray[j-1]).value ;
            if (GrpNamefld.value == nextGrpName && nextVIDValue == VLANfld.value) {
                GiveAlert("Group Name " + GrpNamefld.value + " to VID " + VLANfld.value + " mapping exists more that once in the entries to be added. Please add the mapping only once since it is unique!", GrpNamefld);
                return false;
            }
            if (GrpNamefld.value == nextGrpName) {//Mutually exclusive port list check
                for(jchk = 0; jchk < SpomCurrentPorts(); jchk++) {
                    if (isStackPort(jchk + 1)) {
                        continue;
                    }
                    cur_port_fld = document.getElementById("mask_new_" + entryIdxArray[i-1] + "_" + (jchk + 1));
                    next_port_fld = document.getElementById("mask_new_" + entryIdxArray[j-1] + "_" + (jchk + 1));
                    if (cur_port_fld.checked && next_port_fld.checked) {
                        GiveAlert("Entry with Group Name " + GrpNamefld.value + " has a port list that is not mutually exclusive!", GrpNamefld);
                        return false;
                    }
                }
            }
        }

        //Check whether the vid added is an integer.
        if (!isInt(VLANfld.value)) {
            GiveAlert("Invalid VLAN ID " + VLANfld.value + "(not an integer).");
            VLANfld.select();
            return false;
        }
        //vid
        if(!isWithinRange("vid_new_"+ entryIdxArray[i-1], 1, 4095, "'VLAN ID'")) {
            return false;
        }

        //check the member ports in new entry
        port_count = 0;
        for(j = 0; j < SpomCurrentPorts(); j++) {
            if (isStackPort(j + 1)) {
                continue;
            }
            var port_fld = document.getElementById("mask_new_" + entryIdxArray[i-1] + "_" + (j + 1));
            if (!port_fld.checked) {
                port_count++;
            }
        }
	if (port_count == front_port_cnt) {
            GiveAlert("No port members for entry [Group Name \"" + GrpNamefld.value + "\", VID " + VLANfld.value + "]. Please add at least one port member for that mapping.");
            VLANfld.select();
            return false;
        }

    }//Main for loop for validating new entries

    //Check existing entries for updates
    for (i = 0, temp = i + 1; i < originalEntriesNum; i++) {
	port_count = 0;
        for(ii = 0; ii < SpomCurrentPorts(); ii++) {
            if (isStackPort(ii + 1)) {
                continue;
            }
            fld2 = document.getElementById("mask_" + temp + "_" + (ii + 1));
            if (!fld2.checked) {
                port_count++;
            } 
        }
        temp++;
        if (port_count == front_port_cnt) {
            GiveAlert("At least one port must be selected. If you are trying to delete the entry, check the delete checkbox instead.");
            return false;
        }
    }
    return true;
}

function updateFuncBar(enable)
{
    if (enable) {
        document.getElementById("refresh").style.visibility = "visible";
        document.getElementById("update").style.visibility = "hidden";
    } else {
        document.getElementById("refresh").style.visibility = "hidden";
        document.getElementById("update").style.visibility = "visible";
    }
}

</script>
</head>

<body class="content" onload="requestUpdate();">

<div class="refreshbar">
 <form action="#">
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
  <input type="button" id="refresh" value="Refresh" onClick="requestUpdate(); this.blur(); " style="visibility:hidden">
  <span id="update">&nbsp;Updating...</span>
 </form>
</div>

<h1>Group Name to VLAN mapping Table <span id="display_sid"></span></h1>

<form id="grp_2_vlan_map_form" method="POST" action="/config/vcl_grp_2_vlan_map" onsubmit="return checkForm();">

<table id="dscpConfig" summary="Switch Group to VID mapping configuration" cellspacing="0" class="config">
 <tbody id="vlanData">
 </tbody>
</table>

<p>
<input type="button" id="addNewEntry" value="Add New Entry" onclick="AddNewRow()">
</p>

<table style="visibility: hidden; display: none;"  id="HiddenTable"  summary="HiddenTable">
 <thead>
  <tr>
   <th> &nbsp; </th>
  </tr>
 </thead>
</table>

<p>
 <input type="hidden" id="submit_sid" name="sid">
 <input type="submit" value="Save">
 <input type="reset" value="Reset">
</p>

</form>
</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
