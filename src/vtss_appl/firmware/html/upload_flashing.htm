<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Firmware update in progress</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

var timerID;
var currentReq;

function getCompleted()
{
    top.location.href = top.location.href;
}

function startUpdate(message, when)
{
    var ticker = document.getElementById('ticker');
    ticker.innerHTML = message;
    ticker.style.fontStyle = "italic";
    timerID = setTimeout('doPoll()', when);
}

function doRetry(mesg)
{
    startUpdate(mesg, 2 * 1000);
}

function pollTimeout()
{
    currentReq.abort();
    doRetry("Poll timeout, retry...");
}

function doCompleted(good, errText, timeout)
{
    var progress = document.getElementById('progress');
    progress.src = good ? "images/yes.gif" : "images/no.gif";
    var ticker = document.getElementById('ticker');
    ticker.innerHTML = errText;
    ticker.style.fontWeight = "bold";
    ticker.style.fontStyle = "normal";
    timerID = setTimeout('getCompleted()', timeout * 1000);
}

function doPoll()
{
    var ticker = document.getElementById('ticker');
    ticker.innerHTML = "Polling...";
    ticker.style.fontStyle = "italic";
    var req = initXMLHTTP();
    var file = "/config/firmware_status";
    if(typeof(configURLRemap) == "function") {
        file = configURLRemap(file);
    }
    req.open("GET", file, true);
    req.onreadystatechange = function () {
        clearTimeout(timerID);
        try {
            if (req.readyState == 4) {
                if (req.status && req.status == 200) {
                    if (req.responseText == "idle") {
                        doCompleted(true, "Completed!", 2);
                    } else if (req.responseText.match(/^Error/)) {
                        doCompleted(false, req.responseText, 10);
                    } else {
                        doRetry(req.responseText);
                    }
                    req = null; // MSIE leak avoidance
                } else {
                    var status;
                    try{
                        status = req.statusText;
                    }
                    catch(e){
                        status = "Unknown error";
                    }
                    doRetry(status);
                }
            }
        }
        catch(err){
            doRetry("Request timed out");
        }
    };
    req.setRequestHeader("If-Modified-Since", "0"); // None cache
    req.send(null);
    currentReq = req;
    timerID = setTimeout('pollTimeout()', 2 * 1000);
}

function docLoad()
{
    parent.contents.StopUpdate(); // Stop stack selector update
    startUpdate("Waiting, please stand by...", 2 * 1000);
}

 </script>
</head>

<body class="content" onload="docLoad();">

<h1>Firmware update in progress</h1>

<div class="alert">
The uploaded firmware image is being transferred to flash.
<br>
The system will restart after the update.
<br>
Until then, do not reset or power off the device!
</div>

<p>
 <img alt="" id="progress" src="images/progress.gif">
</p>

<div id="ticker"></div>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
