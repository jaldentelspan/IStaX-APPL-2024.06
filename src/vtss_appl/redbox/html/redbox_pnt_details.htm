<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Detailed RedBox ProxyNodeTable</title>

 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="redbox_lib.js"></script>
 <script type="text/javascript">

var help_page = "/help/help_redbox_pnt_details.htm";
var proxynodeTable, globals, variables;

// Page arguments
var page_args = searchArgs(window.location.search);

var selected_inst = 1;
if (page_args["inst"]) {
    selected_inst = parseInt(page_args["inst"], 10);
}

/******************************************************************************/
// on_submit_done()
/******************************************************************************/
function on_submit_done(inst, err_msg, last)
{
    if (err_msg) {
        alert(err_msg);
    }

    if (last) {
        // Done. Refresh the page
        requestUpdate();
    }
}

/******************************************************************************/
// on_clear_button_click()
/******************************************************************************/
function on_clear_button_click()
{
    redbox_lib_json_submit("redbox.control.pntClear.set", [[selected_inst, true]], on_submit_done);
}

/******************************************************************************/
// add_header()
/******************************************************************************/
function add_header(table_rows)
{
    var row;

    // 1st row (numbers are colspan, rowspan)
    row = {fields: [
              {type: "disp_hdr", params: ["MAC Address", 1, 2, "148px"]},
              {type: "disp_hdr", params: ["Node Type",   1, 2, "97px"]},
              {type: "disp_hdr", params: ["Data",        3, 1]},
              {type: "disp_hdr", params: ["Supervision", 4, 1]}]
          };

    table_rows.push(row);

    // 2nd row
    row = {fields: [
              // Data
              {type: "disp_hdr", params: ["Rx",           1, 1, "100px"]},
              {type: "disp_hdr", params: ["Last Seen",    1, 1]},
              {type: "disp_hdr", params: ["Rx Wrong LAN", 1, 1]},

              // Supervision
              {type: "disp_hdr", params: ["Rx",        1, 1, "100px"]},
              {type: "disp_hdr", params: ["Tx",        1, 1, "100px"]},
              {type: "disp_hdr", params: ["Last Seen", 1, 1]},
              {type: "disp_hdr", params: ["Last Type", 1, 1]}]
          };

    table_rows.push(row);

}

/******************************************************************************/
// add_row()
/******************************************************************************/
function add_row(mac, val, conf, statu)
{
    var row;

    if (statu && statu.OperState == "active") {
        row = {fields: [
                  {type: "text",   params: [mac + (val.Locked ? "*" : ""), "cl mac"]},
                  {type: "text",   params: [redbox_lib_node_type_map[val.NodeType], "cl"]},
                  {type: "digit",  params: [val.PortCRxCnt]},
                  {type: "digit",  params: [val.PortCRxCnt ? val.PortCLastSeen : "-"]},
                  {type: "digit",  params: [conf.Mode == "hsrPrp" ? val.PortCRxWrongLanCnt : "-"]},
                  {type: "digit",  params: [conf.Mode == "hsrPrp" ? val.PortCSvRxCnt : "-"]},
                  {type: "digit",  params: [val.SvTxCnt]},
                  {type: "digit",  params: [conf.Mode == "hsrPrp" && val.PortCSvRxCnt ? val.PortCSvLastSeen                         : "-"]},
                  {type: "text",   params: [conf.Mode == "hsrPrp" && val.PortCSvRxCnt ? redbox_lib_sv_type_map[val.PortCSvLastType] : "-"]}]
              };
    } else {
        row = {fields: [{type: "empty_row", params: [8, statu ? "Inactive" : "Not created"]}]};
    }

    return row;
}

/******************************************************************************/
// add_rows()
/******************************************************************************/
function add_rows()
{
    var table_rows, cnt = 0, fld, show_all;

    table_rows = new Array();
    add_header(table_rows);

    fld = $('filter_select');
    show_all = fld.options[fld.selectedIndex].value == 1;

    // Update which mode this RedBox is running in.
    $("selected_mode").innerHTML = variables.conf ? " (" + redbox_lib_mode_map[variables.conf.Mode] + " mode)" : "";

    if (!variables.statu) {
        // Show a row with "Not created"
        table_rows.push(add_row("", undefined, undefined, undefined));
    } else {
        // Add data rows
        Object.each(variables.pnt_mac, function(record) {
            if (record.key[0] == selected_inst && (show_all || record.val.PortCRxWrongLanCnt !== 0)) {
                table_rows.push(add_row(record.key[1], record.val, variables.conf, variables.statu));
                cnt++;
            }
        });

        if (!cnt) {
            // No rows were added.
            if (variables.statu.OperState == "active") {
                // It is active, so it's because there are no MAC addresses in
                // the ProxyNodeTable
                table_rows.push({fields: [{type: "empty_row", params: [16, "No MAC addresses"]}]});
            } else {
                // It is inactive, so show a row with "Inactive".
                table_rows.push(add_row(undefined, undefined, undefined, variables.statu));
            }
        }
    }

    return table_rows;
}

/******************************************************************************/
// processUpdate()
/******************************************************************************/
function processUpdate()
{
    // Update which instance we are showing detailed PNT for
    $("selected_inst").innerHTML = selected_inst;

    // Add table rows
    proxynodeTable.addRows(add_rows());

    // Update this dynamic table
    proxynodeTable.update();

    // Refresh timer
    redbox_lib_autorefresh_update();
}

/******************************************************************************/
// requestUpdate()
/******************************************************************************/
function requestUpdate()
{
    variables = {conf: {}, statu: {}, pnt_mac: {}};
    redbox_lib_json_request(variables, processUpdate, selected_inst);
}

/******************************************************************************/
// on_inst_select()
/******************************************************************************/
function on_inst_select(fld)
{
    selected_inst = fld.options[fld.selectedIndex].value;
    requestUpdate();
}

/******************************************************************************/
// on_filter_select()
/******************************************************************************/
function on_filter_select(fld)
{
    processUpdate();
}

/******************************************************************************/
// on_globals_received()
/******************************************************************************/
function on_globals_received()
{
    var inst, selector, option;

    // Update instance selector combo box.
    selector = $("inst_select");
    clearChildNodes(selector);
    for (inst = 1; inst <= globals.capabilities.InstCntMax; inst++) {
        option = document.createElement("option");
        option.appendChild(document.createTextNode("Instance #" + inst));
        option.setAttribute("value", inst);
        if (inst == selected_inst) {
            option.setAttribute("selected", true);
        }

        selector.options.add(option);
    }

    requestUpdate();
}

/******************************************************************************/
// window::domready()
/******************************************************************************/
window.addEvent('domready', function() {
    // Create a form with table body for receive/transmit JSON data
    proxynodeTable = new DynamicTable("proxynodeTableContent", "display");

    redbox_lib_disable_button_add("inst_select");
    redbox_lib_disable_button_add("autorefresh");
    redbox_lib_disable_button_add("refresh_button");
    redbox_lib_disable_button_add("clear_button");

    globals = {capabilities: {}};
    redbox_lib_json_request(globals, on_globals_received);
});

 </script>
</head>

<body class="content">

<h1>Detailed RedBox ProxyNodeTable for Instance #<span id="selected_inst"></span><span id="selected_mode"></span></h1>

<div class="refreshbar">
 <form action="#">
  <select id="inst_select" onchange="on_inst_select(this);">
     <option value="1">Instance #</option>
  </select>

  <select id="filter_select" onchange="on_filter_select(this);">
     <option value="1">Show All</option>
     <option value="2">Show Rx Wrong LAN</option>
  </select>

  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" name="autorefresh" id="autorefresh" onclick="redbox_lib_on_autorefresh_click();">
  <input type="button" id="refresh_button" value="Refresh"   onClick="requestUpdate();         this.blur();">
  <input type="button" id="clear_button"   value="Clear"     onClick="on_clear_button_click(); this.blur();">
  <img id="redbox_update" alt="" src="images/updating.gif">
 </form>
</div>

<div id="proxynodeTableContent"/>

</body>
</html>

