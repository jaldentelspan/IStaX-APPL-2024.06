<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Port MAC Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/HeaderControl.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json_minimum.js"></script>
 <script type="text/javascript" language="JavaScript">

// Help page magic
var help_page = "/help/help_psec_limit_mac.htm";
var NextNewRowId = 0;

// Map between port ifIndex name and uport number
var PortNameToPortNoMap = {};
// Map between uport number and port ifIndex name
var PortNoToPortNameMap = {};

var SelectPortLabel = "Select ...";
var oTPortIds = Array(SelectPortLabel);
for (port_idx = configPortMin; port_idx <= configNormalPortMax; port_idx++) {
    oTPortIds.push(port_idx);
}

var oVPortIds = genArrayInt(0, configNormalPortMax > 8 ? configNormalPortMax : 8);
var oTMacType = Array("Static", "Sticky");
var oVMacType = Array(0, 1);

function resetNewRowId()
{
    NextNewRowId = 0;
}

function getNewRowId()
{
    return ++NextNewRowId;
}

function enableControls(enable)
{
    document.getElementById("update").style.visibility = enable ? "hidden" : "visible";
    document.getElementById("refresh").disabled = !enable;
}

function capitalize(str)
{
    if (str.length === 0) {
        return "";
    }

    return str.charAt(0).toUpperCase() + str.substr(1);
}

// Delete a new (i.e. not yet saved) address row
function deleteNewAddressRow(rowid)
{
    var row = document.getElementById(rowid);
    clearChildNodes(row);
    row.parentNode.removeChild(row);
}

function deleteAddressRow(idval)
{
    var portno = parseInt(document.getElementById("portName_" + idval).innerText, 10);
    var portname = PortNoToPortNameMap[portno];
    var vid = document.getElementById("vlanId_" + idval).innerText;
    var mac = document.getElementById("macAddress_" + idval).innerText;

    console.log("Deleting element ID: " + idval + ", " + portname + ", " + vid + ", " + mac);
    delAddressRow = [portname, vid, mac];
    requestJsonDoc("portSecurity.config.interface.mac.del", delAddressRow);
    milliSleep(500);
    refreshView();
}

function appendAddressRow(index, frag, portId, vid, mac, mtype, isNewEditRow)
{
    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    var btn = document.createElement('input');
    btn.type = "button";
    btn.value = " Delete ";

    if (isNewEditRow) {
        tr.id = "newEditRow_" + index;
        btn.onclick = function() { deleteNewAddressRow(tr.id); };
        btn.id = "delNewEntryButton_" + index;
    } else {
        btn.onclick = function() { deleteAddressRow(index); };
    }

    var td = CreateTd("c");
    addCell(tr, td, btn);

    if (isNewEditRow) {
        var edit_ctrl;

        edit_ctrl = addSelectCell(tr, oTPortIds, oVPortIds, SelectPortLabel, "cl", "newPortName_" + index);
        edit_ctrl = addInputCell(tr, 1, "cr", "newVlanId_" + index, 4, 4);
        edit_ctrl = addInputCell(tr, "00:00:00:00:00:00", "c mac", "newMacAddress_" + index, 17, 17);
        edit_ctrl = addSelectCell(tr, oTMacType, oVMacType, 0, "cl", "newMacType_" + index);
    } else {
        var roField;

        roField = addTextCell(tr, portId, "cr", 1, "portName_" + index);
        addTextCell(tr, vid, "cr", 1, "vlanId_" + index);
        addTextCell(tr, mac, "c mac", 1, "macAddress_" + index);
        addTextCell(tr, capitalize(mtype), "c");
    }

    frag.appendChild(tr);
}

function addNewEditRow()
{
    frag = document.createDocumentFragment();
    appendAddressRow(getNewRowId(), frag, "", 1, "00-00-00-00-00-00", "static", true);

    var tbody = document.getElementById("psecMacBodyData");
    if (!tbody.appendChild(frag)) { // Add Frag to table body
        alert("This browser doesn't support dynamic tables.");
    }
}

function processUpdate(recv_json, name)
{
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("processUpdate() failed: Get dynamic data failed.");
        enableControls(true);
        return;
    }

    console.log("Updating table with " + recv_json.length + " entries");

    var tbody = document.getElementById('psecMacBodyData');
    clearChildNodes(tbody);

    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();

    var index = 0;
    Object.each(recv_json, function (record) {
        var portId = PortNameToPortNoMap[record.key[0]];
        var vid = record.key[1];
        var mac = record.key[2];
        var mtype = record.val["macType"];
        appendAddressRow(index, frag, portId, vid, mac, mtype);
        index++;
    });

    if (!tbody.appendChild(frag)) { // Add Frag to table body
        alert("This browser doesn't support dynamic tables.");
    }

    enableControls(true);
}

function requestUpdate()
{
    if (SpomNavigationLoading()) {
        return; // Bail out, navigation will trigger update
    }

    enableControls(false);

    var tbody = document.getElementById('tableBodyData');
    clearChildNodes(tbody);

    requestJsonDoc("portSecurity.config.interface.mac.get", null, processUpdate, null);
};

function getIdFromElementId(elem_id)
{
    var idparts = elem_id.split("_");
    if (idparts.length != 2) {
        return NaN;
    }

    return parseInt(idparts[1], 10);
}

function handleNewAddresses()
{
    console.log("Checking for new addresses");

    var newAddressData = [];
    var errorsDetected = false;

    // Get all new rows ('tr' elements with id = 'newEditRow_<something>')
    var newrows = [].slice.call(document.querySelectorAll('[id^=newEditRow_]'));

    // <array>.some() stops the loop if anonymous element function returns true,
    // so "return false" means "continue" and "return true" means "break".
    newrows.some(function (newrow) {
        idval = getIdFromElementId(newrow.id);
        if (idval === NaN) {
            return false;
        }

        var fld = newrow.getElementById("newPortName_" + idval);
        var portno = parseInt(fld.value, 10);
        if (portno === 0) {
            GiveAlert("Please select a port", fld);
            errorsDetected = true;
            return true;
        }

        if (!isWithinRange("newVlanId_" + idval, 1, 4095, "'VLAN ID'")) {
            errorsDetected = true;
            return true;
        }

        var vid     = newrow.getElementById("newVlanId_" + idval).value;
        var mac_fld = newrow.getElementById("newMacAddress_" + idval);
        var mac     = mac_fld.value;
        var mactype = newrow.getElementById("newMacType_" + idval).value;

        if (!IsMacAddress(mac)) {
            GiveAlert("MAC address " + mac + " is invalid. The address must contain 12 hexadecimal digits, optionally separated in groups of two digits by either '.', ':' or '-'.", mac_fld);
            errorsDetected = true;
            return true;
        }

        portname = PortNoToPortNameMap[portno];
        var macTypeStr = mactype == "0" ? "static" : "sticky";

        console.log("Adding new entry:", portname, vid, mac, mactype, macTypeStr);

        var rowvalue = [portname, vid, mac];
        rowvalue.push({macType:macTypeStr});

        newAddressData.push(rowvalue);

        // go to next selected new row
        return false;
    });

    if (errorsDetected) {
        // leave users data in place
        return false;
    }

    if (newAddressData.length === 0) {
        // No new MAC addresses.
        return false;
    }

    Object.each(newAddressData, function (newAddressRow) {
        requestJsonDoc("portSecurity.config.interface.mac.add", newAddressRow);
    });

    return true;
}

function onClickSave()
{
    if (handleNewAddresses()) {
        milliSleep(500);
        refreshView();
    }

    return true;
}

function refreshView()
{
    resetNewRowId();
    requestUpdate();
}

function onClickReset()
{
    refreshView();
    return true;
}

function processPortNameMap(recv_json, name)
{
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("processPortNameMap() failed: Get dynamic data failed.");
        return;
    }

    Object.each(recv_json, function (record) {
        PortNameToPortNoMap[record.key] = record.val;
        PortNoToPortNameMap[record.val] = record.key;
    });

    requestUpdate();
}

function initPage()
{
    requestJsonDoc("port.namemap.get", null, processPortNameMap, null);
}

  </script>
</head>

<body class="content" onload="initPage();">
    <h1>Port Security Static and Sticky MAC Addresses</h1>

    <div class="refreshbar">
        <form action="#">
            <input type="button" id="refresh" value="Refresh" onclick="requestUpdate(); this.blur();">
            <img id="update" alt="" src="images/updating.gif">
        </form>
    </div>

    <div id="pageContainer">
        <table id="psecMacTable" summary="Mac Address Table" cellspacing="0" class="config">
            <thead>
                <tr class="config_header">
                    <th class="hdrc">Delete</th>
                    <th class="hdrc">Port</th>
                    <th class="hdrc">VLAN ID</th>
                    <th class="hdrc">MAC Address</th>
                    <th class="hdrc">Type</th>
                </tr>
            </thead>
          <tbody id="psecMacBodyData"></tbody>
        </table>
    </div>

    <p>
        <input type=button id="addNewEntry" value="Add New MAC Entry" onclick="addNewEditRow()">
    </p>

    <p id="psecMacButtons">
        <input type="hidden" id="submit_sid" name="sid"/>
        <input type="button" value="Save" onClick="onClickSave();">
        <input type="button" value="Reset" onclick="onClickReset();">
    </p>
</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
