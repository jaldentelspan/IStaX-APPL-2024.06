<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Limit Control Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/HeaderControl.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" language="JavaScript">

// Help page magic
var help_page = "/help/help_psec_limit.htm";

var EnaDisTyp = Array("Disabled", "Enabled");
var EnaDisVal = Array(0, 1);

var ViolationModeTyp = Array("Protect", "Restrict", "Shutdown");
var ViolationModeVal = Array(0, 1, 2);

var StateTyp  = Array("Disabled", "Ready", "Limit Reached", "Shutdown");
var StateVal  = Array(0, 1, 2, 3);

var row2port = Array();

var PARM_IDX_SYS_AGING_ENA        = 0;
var PARM_IDX_SYS_AGING_PERIOD     = 1;
var PARM_IDX_SYS_HOLD_TIME        = 2;
var PARM_SYS_CNT                  = PARM_IDX_SYS_HOLD_TIME + 1;

// Port parameters follow the system parameters. There are PARM_PORT_CNT per port.
var PARM_IDX_PORT_NUMBER          = 0;
var PARM_IDX_PORT_ENA             = 1;
var PARM_IDX_PORT_LIMIT           = 2;
var PARM_IDX_PORT_VIOLATION_LIMIT = 3;
var PARM_IDX_PORT_VIOLATION_MODE  = 4;
var PARM_IDX_PORT_STICKY          = 5;
var PARM_IDX_PORT_STATE           = 6;
var PARM_PORT_CNT                 = PARM_IDX_PORT_STATE + 1;

// Predeclaration of function to avoid JSLint warning.
var requestUpdate;

var on_aging_enable_change = function() {
  var fld = document.getElementById("aging_period");
  if (fld) {
    // May not be enabled in all cases.
    fld.disabled = !document.getElementById("aging_enabled").checked;
  }
};

function UpdateEnabledness(port_ena_select, limit_edit, violation_mode_select, violation_limit_edit)
{
  var dis = parseInt(port_ena_select[port_ena_select.selectedIndex].value, 10) === 0;

  limit_edit.disabled            = dis;
  violation_mode_select.disabled = dis;

  if (!dis) {
      // Could be we should disable Violation Limit anyway.
      var violation_mode = parseInt(violation_mode_select[violation_mode_select.selectedIndex].value, 10);

      if (violation_mode != 1) {
          // Only enable Violation Limit if mode is 'restrict'
          dis = true;
      }
  }

 violation_limit_edit.disabled  = dis;

  return true;
}

function OnEnablednessChange(port)
{
  UpdateEnabledness(document.getElementById("ena_" + port), document.getElementById("limit_" + port), document.getElementById("violation_mode_" + port), document.getElementById("violation_limit_" + port));
}

// Helper function to add the system configuration parameter table
function add_system_table(sys_values, frag)
{
  var tr, td, fld;

  // Aging Enabled
  tr = CreateStyledElement("tr", "config");
  addTypedTextCell(tr, "td", "Aging Enabled", "param_label");
  fld = addCheckBoxCell(tr, parseInt(sys_values[PARM_IDX_SYS_AGING_ENA], 10) ? true : false, "cl", "aging_enabled");
  fld.onclick= on_aging_enable_change;
  frag.appendChild(tr);

  // Aging Period
  tr = CreateStyledElement("tr", "config");
  addTypedTextCell(tr, "td", "Aging Period", "param_label");
  fld = addInputCell(tr, sys_values[PARM_IDX_SYS_AGING_PERIOD], "cl", "aging_period", 6);
  fld.parentNode.appendChild(document.createTextNode(" seconds")); // Unfortunately, I cannot use &nbsp; in place of the space.
  fld.setAttribute("maxLength", 8);
  frag.appendChild(tr);

  // Hold time
  tr = CreateStyledElement("tr", "config");
  addTypedTextCell(tr, "td", "Hold Time", "param_label");
  fld = addInputCell(tr, sys_values[PARM_IDX_SYS_HOLD_TIME], "cl", "hold_time", 6);
  fld.parentNode.appendChild(document.createTextNode(" seconds")); // Unfortunately, I cannot use &nbsp; in place of the space.
  fld.setAttribute("maxLength", 8);
  frag.appendChild(tr);
}

// Helper function to add a row of port data.
function add_port_row(row, port, port_values, frag)
{
  var tr = CreateStyledElement("tr", row % 2 ? "config_even" : "config_odd");

  // Port number
  addTextCell(tr, port, "cr");

  // Port mode
  port_ena = port_values[PARM_IDX_PORT_ENA];
  var ena_select = addSelectCell(tr, EnaDisTyp, EnaDisVal, port_values[PARM_IDX_PORT_ENA], "cl", "ena_" + port);
  ena_select.onchange = function () {OnEnablednessChange(port);};

  // Port limit
  var limit_edit = addInputCell(tr, port_values[PARM_IDX_PORT_LIMIT], "cr", "limit_" + port, 4);
  limit_edit.setAttribute("maxLength", 4);

  // Port violation mode
  var violation_mode_select = addSelectCell(tr, ViolationModeTyp, ViolationModeVal, port_values[PARM_IDX_PORT_VIOLATION_MODE], "cl", "violation_mode_" + port);
  violation_mode_select.onchange = function () {OnEnablednessChange(port);};

  // Violation limit
  var violation_limit_edit = addInputCell(tr, port_values[PARM_IDX_PORT_VIOLATION_LIMIT], "cr", "violation_limit_" + port, 4);
  violation_limit_edit.setAttribute("maxLength", 4);

  // Sticky mode. This checkbox must always be checkable, whether or not Port
  // Security is enabled on the port.
  addCheckBoxCell(tr, parseInt(port_values[PARM_IDX_PORT_STICKY], 10) ? true : false, "c", "sticky_ena_" + port);

  // Port state
  var state = port_values[PARM_IDX_PORT_STATE];
  addTextCell(tr, StateTyp[state], "cl");

  UpdateEnabledness(ena_select, limit_edit, violation_mode_select, violation_limit_edit); // Update enabled/disabled state for limits and violation mode

  frag.appendChild(tr); // Add row to fragment
}

function processUpdate(req, ref)
{
  // Format of whole string:
  // AgingEna/AgingPeriod/HoldTime#[PortConfig]
  // Format of [PortConfig]:
  // PortNumber_1/PortEna_1/Limit_1/ViolateLimit_1/ViolationMode_1/Sticky_1/State_1#PortNumber_2/PortEna_2/ViolateLimit_2/Limit_2/ViolationMode_2/Sticky_2/State_2#...#PortNumber_N/PortEna_N/Limit_N/ViolateLimit_N/ViolationMode_N/Sticky_N/State_N:
  var values = req.responseText.split("#");

  document.getElementById("update").style.visibility = "hidden";

  if (redirectOnError(req)) {
    return;
  }

  var sys_values = values[0].split("/");
  if (sys_values.length != PARM_SYS_CNT) {
    return;
  }

  // Create the system-configuration table
  var frag_sys_tbl = document.createDocumentFragment();
  add_system_table(sys_values, frag_sys_tbl);
  var sys_tbl = document.getElementById('psec_limit_sys_table');
  clearChildNodes(sys_tbl);
  sys_tbl.appendChild(frag_sys_tbl);

  // Enable/disable aging_period edit box
  on_aging_enable_change();

  // Port config:
  // Port numbers may not be consecutive, so we need to
  // create a lookup table for converting a row number to a port number
  // which can be used in getElementById() various places in this function.
  row2port.length = 0;

  var frag_port_body = document.createDocumentFragment();
  for (var row = 1; row <= values.length - 1; row++) {
    var port_values = values[row].split("/");
    if (port_values.length != PARM_PORT_CNT) {
      return;
    }

    row2port.push(port_values[PARM_IDX_PORT_NUMBER]);
    add_port_row(row, port_values[PARM_IDX_PORT_NUMBER], port_values, frag_port_body);
  }

  var tbody = document.getElementById('port_data');
  clearChildNodes(tbody);
  tbody.appendChild(frag_port_body);
  var cBar = new HeaderControlBar([{text: "*", className: "cr"}, {name: "ena_"}, {name: "limit_"}, {name: "violation_mode_"}, {name: "violation_limit_"}, {name: "sticky_ena_"}, null]);
  cBar.construct('port_data');
}

requestUpdate = function () {
  if (SpomNavigationLoading()) {
    return; // Bail out, navigation will trigger update
  }

  document.getElementById("update").style.visibility = "visible";
  loadXMLDoc(SpomAddSidArg("/config/psec_limit"), processUpdate, null);
  SpomUpdateDisplaySid("display_sid");
  SpomUpdateFormSid("submit_sid");
};

// Check if the user input is OK
function checkForm()
{
  // Since most of these fields are optional (depending on which protocols are supported)
  // we need to check for their existence before using their values.

  // Aging Period
  var fld = document.getElementById("aging_enabled");
  if (fld && fld.checked) {
    if (!isWithinRange("aging_period", psec_age_time_min, psec_age_time_max, "'Aging Period'", " seconds")) {
      return false;
    }
  }

  // Hold Time
  if (!isWithinRange("hold_time", psec_hold_time_min, psec_hold_time_max, "'Hold Time'", " seconds")) {
      return false;
  }

  // Limit and Violation Limit
  for (var row = 0; row < row2port.length; row++) {
    var port_number = row2port[row];

    // Limit
    fld = document.getElementById("limit_" + port_number);
    if (!fld.disabled) {
      // If it's disabled, no need to check further.
      if (!isWithinRange("limit_" + port_number, psec_limit_min, psec_limit_max, "'Limit'")) {
        return false;
      }
    }

    // Violation Limit
    fld = document.getElementById("violation_limit_" + port_number);
    if (!fld.disabled) {
      // If it's disabled, no need to check further.
      if (!isWithinRange("violation_limit_" + port_number, psec_violate_limit_min, psec_violate_limit_max, "'Violation Limit'")) {
        return false;
      }
    }
  }

  return true;
}

function SpomSidSelectorUpdate(sid)
{
  SpomSetCurrentSid(sid); // Save current SID
  requestUpdate();        // Update page to reflect selector
}

// Called when the user hits the reset-button.
function resetForm(form)
{
  form.reset();
  on_aging_enable_change();
  for (var row = 0; row < row2port.length; row++) {
    var port_number = row2port[row];
    OnEnablednessChange(port_number);
  }
}
  </script>
</head>

<body class="content" onload="requestUpdate();">

  <div class="refreshbar">
    <form action="#">
    <input type="button" value="Refresh" onclick="requestUpdate(); this.blur();"/>
    <img id="update" alt="" src="images/updating.gif"/>
   </form>
  </div>

  <form name="psec_limit_cfg_form" method="POST" action="/config/psec_limit" onsubmit="return checkForm();">

    <h1>Port Security Configuration</h1>
    <h2>Global Configuration <span class="SPOM_only">(Stack Global)</span></h2>

    <table summary="Port Security Global Configuration" cellspacing="0" class="config">
      <!-- Satisfy HTML validators by placing empty tr and td elements. -->
      <tbody id="psec_limit_sys_table"><tr><td></td></tr></tbody>
    </table>

    <h2>Port Configuration <span id="display_sid"></span></h2>

    <table summary="Port Security Interface Configuration" cellspacing="0" class="config">
      <thead>
        <tr class="config_header">
          <th>Port</th>
          <th>Mode</th>
          <th>Limit</th>
          <th>Violation Mode</th>
          <th>Violation Limit</th>
          <th>Sticky</th>
          <th>State</th>
        </tr>
      </thead>
      <tbody id="port_data"><tr><td></td></tr></tbody>
    </table>

    <p>
      <input type="hidden" id="submit_sid" name="sid"/>
      <input type="submit" value="Save"/>
      <input type="reset"  value="Reset" onclick="resetForm(this.form);"/>
    </p>

  </form>
</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
