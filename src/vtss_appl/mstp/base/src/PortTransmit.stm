# Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.

# Microchip is aware that some terminology used in this technical document is
# antiquated and inappropriate. As a result of the complex nature of software
# where seemingly simple changes have unpredictable, and often far-reaching
# negative results on the software's functionality (requiring extensive retesting
# and revalidation) we are unable to make the desired changes in all legacy
# systems without compromising our product or our clients' products.

# PTX - Port Transmit - 17.26 - Fig. 17-17

stm PortTransmit(PORT)

define can_send 	((txCount < TxHoldCount(bridge)) && (helloWhen != 0))

# Default transition guard qualifier (exept UCT)
>>GUARD: allTransmitReady(port)

BEGIN:
        >> TRANSMIT_INIT

# XXX This looks like a HACK. And it will make the STM spin....! XXX
#GLOBAL:
#        when !portEnabled >> TRANSMIT_INIT

TRANSMIT_INIT:
        newInfo = newInfoMsti = TRUE;
        txCount = 0;
        >> IDLE

IDLE:
        helloWhen = HelloTime;
        when helloWhen == 0 >> TRANSMIT_PERIODIC
        when !sendRSTP && newInfo && role == DesignatedPort && can_send >> TRANSMIT_CONFIG
        when !sendRSTP && newInfo && role == RootPort && can_send >> TRANSMIT_TCN
        when sendRSTP && (newInfo || (newInfoMsti && !mstiMasterPort(port))) && can_send >> TRANSMIT_RSTP

TRANSMIT_PERIODIC:
        newInfo = newInfo || (role == DesignatedPort || (role == RootPort && (tcWhile != 0)));
        newInfoMsti = newInfoMsti || mstiDesignatedOrTCpropagatingRootPort(port);
        >> IDLE

TRANSMIT_CONFIG:
        newInfo = FALSE;
        txConfig(port);
        txCount += 1;
        tcAck = FALSE;
        >> IDLE

TRANSMIT_TCN:
        newInfo = FALSE;
        txTcn(port);
        txCount += 1;
        >> IDLE

TRANSMIT_RSTP:
        newInfo = newInfoMsti = FALSE;
        txMstp(port);
        txCount += 1;
        tcAck = FALSE;
        >> IDLE

