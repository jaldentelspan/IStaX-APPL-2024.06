#
# Copyright (c) 2006-2020 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.
#

MODULE_IF_FLAG =

INCLUDE_BEGIN
#include "vtss_timer_api.h"
#include <vtss/basics/measure_scope.hxx>
INCLUDE_END

CMD_BEGIN
COMMAND = debug timer test start timer-cnt <int> duration-ms <int> period-ms <int> itr-cnt <int> prio { below-normal | default | above-normal | high | higher | highest | below-normal-rt | default-rt | above-normal-rt | high-rt | higher-rt | highest-rt }
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC


! debug
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! timer
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! test
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! start
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! timer_cnt
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! timer_cnt-val
CMD_VAR = timer_cnt
RUNTIME = 
HELP    = 
BYWORD  = 

! duration_ms
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! duration_ms-val
CMD_VAR = duration_ms
RUNTIME = 
HELP    = 
BYWORD  = 

! period_ms
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! period_ms-val
CMD_VAR = period_ms
RUNTIME = 
HELP    = 
BYWORD  = 

! itr_cnt
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! itr_cnt-val
CMD_VAR = itr_cnt
RUNTIME = 
HELP    = 
BYWORD  = 

! prio
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! below_normal
CMD_VAR = prio_below_normal
RUNTIME = 
HELP    = 
BYWORD  = 

! default
CMD_VAR = prio_default
RUNTIME = 
HELP    = 
BYWORD  = 

! above_normal
CMD_VAR = prio_above_normal
RUNTIME = 
HELP    = 
BYWORD  = 

! high
CMD_VAR = prio_high
RUNTIME = 
HELP    = 
BYWORD  = 

! higher
CMD_VAR = prio_higher
RUNTIME = 
HELP    = 
BYWORD  = 

! highest
CMD_VAR = prio_highest
RUNTIME = 
HELP    = 
BYWORD  = 

! below_normal_rt
CMD_VAR = prio_below_normal_rt
RUNTIME = 
HELP    = 
BYWORD  = 

! default_rt
CMD_VAR = prio_default_rt
RUNTIME = 
HELP    = 
BYWORD  = 

! above_normal_rt
CMD_VAR = prio_above_normal_rt
RUNTIME = 
HELP    = 
BYWORD  = 

! high_rt
CMD_VAR = prio_high_rt
RUNTIME = 
HELP    = 
BYWORD  = 

! higher_rt
CMD_VAR = prio_higher_rt
RUNTIME = 
HELP    = 
BYWORD  = 

! highest_rt
CMD_VAR = prio_highest_rt
RUNTIME = 
HELP    = 
BYWORD  = 


VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
{
    vtss_thread_prio_t prio = VTSS_THREAD_PRIO_HIGH;
    if (prio_below_normal) prio = VTSS_THREAD_PRIO_BELOW_NORMAL;
    if (prio_default) prio = VTSS_THREAD_PRIO_DEFAULT;
    if (prio_above_normal) prio = VTSS_THREAD_PRIO_ABOVE_NORMAL;
    if (prio_high) prio = VTSS_THREAD_PRIO_HIGH;
    if (prio_higher) prio = VTSS_THREAD_PRIO_HIGHER;
    if (prio_highest) prio = VTSS_THREAD_PRIO_HIGHEST;
    if (prio_below_normal_rt) prio = VTSS_THREAD_PRIO_BELOW_NORMAL_RT;
    if (prio_default_rt) prio = VTSS_THREAD_PRIO_DEFAULT_RT;
    if (prio_above_normal_rt) prio = VTSS_THREAD_PRIO_ABOVE_NORMAL_RT;
    if (prio_high_rt) prio = VTSS_THREAD_PRIO_HIGH_RT;
    if (prio_higher_rt) prio = VTSS_THREAD_PRIO_HIGHER_RT;
    if (prio_highest_rt) prio = VTSS_THREAD_PRIO_HIGHEST_RT;

    uint32_t h = vtss_timer_test_start(timer_cnt,
                                       vtss::milliseconds(duration_ms),
                                       vtss::milliseconds(period_ms),
                                       itr_cnt, prio);
    (void)icli_session_self_printf("Test started under handle: %d\n", h);

}
CODE_END
CMD_END

CMD_BEGIN
COMMAND = debug timer test status handle <int>
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC


! debug
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! timer
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! test
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! status
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! handle
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! handle-val
CMD_VAR = handle
RUNTIME = 
HELP    = 
BYWORD  = 

CODE_BEGIN
{
    auto s = vtss_timer_test_status(handle);
    (void)icli_session_self_printf("Completed:   %-8u\n", s.completed);
    (void)icli_session_self_printf("min_itr_cnt: %-8u\n", s.min_itr_cnt);
    (void)icli_session_self_printf("test-time:   %-8u\n", s.test_time);
    (void)icli_session_self_printf("period-min:  %-8u\n", s.period.min);
    (void)icli_session_self_printf("period-max:  %-8u\n", s.period.max);
    (void)icli_session_self_printf("period-mean: %-8u\n", s.period.mean);
    (void)icli_session_self_printf("period-cnt:  %-8u\n", s.period.cnt);

}
CODE_END
CMD_END

CMD_BEGIN
COMMAND = debug timer measure <int>
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! timer
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! measure
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! measure-val
CMD_VAR = id
RUNTIME = 
HELP    = 
BYWORD  = 

CODE_BEGIN
{
    auto s = vtss::get_measure_container().get_id(id);
    (void)icli_session_self_printf("Total time: " VPRI64u "\n", vtss::LinuxClock::to_microseconds(s.m_total_time).raw());
    (void)icli_session_self_printf("Nr calls: %zu\n", s.m_nr_calls);

}
CODE_END
CMD_END

CMD_BEGIN
COMMAND = debug timer clear
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! timer
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

! clear 
CMD_VAR = 
RUNTIME = 
HELP    = 
BYWORD  = 

CODE_BEGIN
{
    vtss::get_measure_container().clear();
}
CODE_END
CMD_END

!===============================================================================

CMD_BEGIN
COMMAND = debug show timers
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
PROPERTY  = ICLI_CMD_PROP_GREP

! debug
CMD_VAR =
RUNTIME =
HELP    =
BYWORD  =

! show
CMD_VAR =
RUNTIME =
HELP    =
BYWORD  =

! timers
CMD_VAR =
RUNTIME =
HELP    =
BYWORD  =

CODE_BEGIN
{
    (void)timer_debug_print(session_id);
}
CODE_END
CMD_END

