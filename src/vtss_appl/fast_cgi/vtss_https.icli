//
# Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.
//
//
// Module Segment
//   This tag value is used to decide whether all commands of this module are
//   registered or not and the generated C/H file is compiled or not.
//
MODULE_IF_FLAG = defined(VTSS_SW_OPTION_FAST_CGI)

//
// Include Segment
//   The segment contains the include files. These include files are needed
//   for the code body, that is, all other segments.
//   "icli_api.h" is the default include file that will be auto-generated
//   in C file.
//   The content will be exactly pasted to the generated C file.
//
INCLUDE_BEGIN
#include "icli_porting_util.h"
#include "vtss_https.hxx"
#include "fast_cgi_api.h"
INCLUDE_END

//
// Function Segment
//   The segment allows the designer writes the local functions that will be
//   used in the command Segment and also the global functions that can be
//   shared with other C files.
//   The content will be exactly pasted to the generated C file.
//
FUNCTION_BEGIN

#define VTSS_ALLOC_MODULE_ID VTSS_MODULE_ID_FAST_CGI

static BOOL web_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    if (ask == ICLI_ASK_PRESENT) {
        runtime->present = web_module_enabled();
        return TRUE;
   }
   return FALSE;
}

static i32 VTSS_HTTPS_ICLI_global_mode_set(u32 session_id, BOOL mode)
{
    https_conf_t conf;

    // get global configuration
    if (https_mgmt_conf_get(&conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Failed to get HTTPS configuration.\n");
        return ICLI_RC_ERROR;
    }

    conf.mode = mode;
    if (https_mgmt_conf_set(&conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Failed to set HTTPS configuration.\n");
        return ICLI_RC_ERROR;
    }
    return ICLI_RC_OK;
}

static i32 VTSS_HTTPS_ICLI_redirect_mode_set(u32 session_id, BOOL mode)
{
    https_conf_t conf;

    // get global configuration
    if (https_mgmt_conf_get(&conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Failed to get HTTPS configuration.\n");
        return ICLI_RC_ERROR;
    }

    // essential condition check
    if (mode && !conf.mode) {
        ICLI_PRINTF("%% Can not enable the secure HTTP web redirection when the secure HTTP web server is disabled.\n");
        return ICLI_RC_ERROR;
    }

    // set global configuration
    conf.redirect = mode;
    if (https_mgmt_conf_set(&conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Failed to set HTTPS configuration.\n");
        return ICLI_RC_ERROR;
    }
    return ICLI_RC_OK;
}

static BOOL VTSS_HTTPS_ICLI_runtime_url_file(u32                session_id,
                                             icli_runtime_ask_t ask,
                                             icli_runtime_t     *runtime)
{
    switch (ask) {
    case ICLI_ASK_URL: // Filter not support protocols
        runtime->url_not_support[ICLI_URL_PROTOCOL_FILE] = TRUE;
        runtime->url_not_support[ICLI_URL_PROTOCOL_FLASH] = TRUE;
        return TRUE;

    default:
        break;
    }

    return FALSE;
}
FUNCTION_END

HELP_SERVER             = HTTP web server
HELP_SECURE             = Secure
HELP_SECURE_SERVER      = Secure HTTP web server
HELP_SECURE_REDIRECT    = Secure HTTP web redirection

// =============================================================================
CMD_BEGIN
COMMAND         = ip http secure-server
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    = Use the ip http secure-server global configuration command to \
                  enable the secure HTTP web server. Use the no form of this \
                  command to disable the secure HTTP web server.
DOC_CMD_DEFAULT = The secure HTTP web server is disabled.
DOC_CMD_USAGE   = Enable the secure HTTP web server.
DOC_CMD_EXAMPLE = This example shows how to enable the secure HTTP web server:
DOC_CMD_EXAMPLE = Switch(config)# ip http secure-server
DOC_CMD_EXAMPLE = You can verify your settings by entering the show ip http privileged EXEC command.
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_https_mode
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
// IF_FLAG   =

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]
NO_FORM_DOC_CMD_DESC    = Use the no ip http secure-server global configuration command to \
                          disable the secure HTTP web server.
NO_FORM_DOC_CMD_DEFAULT = The secure HTTP web server is disabled.
NO_FORM_DOC_CMD_USAGE   = Disable the secure HTTP web server.
NO_FORM_DOC_CMD_EXAMPLE = This example shows how to disable the secure HTTP web server:
NO_FORM_DOC_CMD_EXAMPLE = Switch(config)# no ip http secure-server
NO_FORM_DOC_CMD_EXAMPLE = You can verify your settings by entering the show ip http privileged EXEC command.

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
// CMD_VAR   =

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
RUNTIME   = web_present

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =

HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_HTTP
HELP = ##HELP_SECURE_SERVER

// VARIABLE_BEGIN
// VARIABLE_END

CODE_BEGIN
    /* enable global mode */
    if (VTSS_HTTPS_ICLI_global_mode_set(session_id, TRUE) != ICLI_RC_OK) {
         return ICLI_RC_ERROR;
    }
CODE_END

// (Optional)
// The no form of this command
NO_FORM_CODE_BEGIN
    /* disable global mode */
    if (VTSS_HTTPS_ICLI_global_mode_set(session_id, FALSE) != ICLI_RC_OK) {
         return ICLI_RC_ERROR;
    }
NO_FORM_CODE_END
CMD_END

// =============================================================================

CMD_BEGIN
COMMAND         = ip http secure-redirect
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    = Use the http secure-redirect global configuration command to \
                  enable the secure HTTP web redirection. \
                  When the secure HTTP web server is enabled, the feature \
                  automatic redirect the none secure HTTP web connection to \
                  the secure HTTP web connection. \
                  Use the no form of this command to disable the secure HTTP \
                  web redirection.
DOC_CMD_DEFAULT = The secure HTTP web redirection is disabled.
DOC_CMD_USAGE   = Enable secure HTTP web redirection.
DOC_CMD_EXAMPLE = This example shows how to enable the secure HTTP web redirection:
DOC_CMD_EXAMPLE = Switch(config)# ip http secure-redirect
DOC_CMD_EXAMPLE = You can verify your settings by entering the show ip http privileged EXEC command.
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_https_redirect
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
// IF_FLAG   =

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]
NO_FORM_DOC_CMD_DESC    = Use the no ip http secure-server global configuration command to \
                          disable the secure HTTP web redirection.
NO_FORM_DOC_CMD_DEFAULT = The secure HTTP web redirection is disabled.
NO_FORM_DOC_CMD_USAGE   = Disable the secure HTTP web redirection.
NO_FORM_DOC_CMD_EXAMPLE = This example shows how to disable secure HTTP web redirection:
NO_FORM_DOC_CMD_EXAMPLE = Switch(config)# no ip http secure-redirect
NO_FORM_DOC_CMD_EXAMPLE = You can verify your settings by entering the show ip http privileged EXEC command.

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
// CMD_VAR   =

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
RUNTIME   = web_present

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =

HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_HTTP
HELP = ##HELP_SECURE_REDIRECT

// VARIABLE_BEGIN
// VARIABLE_END

CODE_BEGIN
    /* enable global mode */
    if (VTSS_HTTPS_ICLI_redirect_mode_set(session_id, TRUE) != ICLI_RC_OK) {
         return ICLI_RC_ERROR;
    }
CODE_END

// (Optional)
// The no form of this command
NO_FORM_CODE_BEGIN
    /* disable global mode */
    if (VTSS_HTTPS_ICLI_redirect_mode_set(session_id, FALSE) != ICLI_RC_OK) {
         return ICLI_RC_ERROR;
    }
NO_FORM_CODE_END
CMD_END

// ==============================================================================

CMD_BEGIN

IF_FLAG = 

COMMAND = show ip http
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    = Use the show ip http privileged EXEC \
                  command to display the secure HTTP web server status.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   = Use this command to show status information about the secure HTTP web server.
DOC_CMD_EXAMPLE = This is an example of output from the show ip http command:
DOC_CMD_EXAMPLE = Switch# show ip http
DOC_CMD_EXAMPLE = Switch secure HTTP web server is enabled
DOC_CMD_EXAMPLE = Switch secure HTTP web redirection is enabled
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_https_status
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE  = ICLI_CMD_MODE_EXEC

RUNTIME   = web_present

CMD_VAR   =
CMD_VAR   =
CMD_VAR   =
CMD_VAR   =
CMD_VAR   =
CMD_VAR   =

HELP = ##ICLI_HELP_SHOW
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_HTTP
HELP = ##HELP_SERVER
HELP = ##HELP_SECURE
HELP = ##ICLI_HELP_STATUS

VARIABLE_BEGIN
    https_conf_t conf;
VARIABLE_END

CODE_BEGIN
    if (https_mgmt_conf_get(&conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Failed to get HTTPS configuration.\n");
        return ICLI_RC_ERROR;
    }

    ICLI_PRINTF("Switch secure HTTP web server is %s\n", icli_bool_txt(conf.mode));
    ICLI_PRINTF("Switch secure HTTP web redirection is %s\n", icli_bool_txt(conf.redirect));
    ICLI_PRINTF("%s\n", https_cert_status_txt(https_mgmt_cert_status()));

CODE_END

CMD_END

// ==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = ip http secure-certificate { upload <url_file> [ pass-phrase <word64> ] | delete | generate }
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    = Use the ip http secure-certificate global configuration command \
                  to manage the HTTPS certificate(PEM format).
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   = Load the HTTPS certificate from outside server.
DOC_CMD_EXAMPLE = This example shows how to upload the HTTPS certificate from TFTP server:
DOC_CMD_EXAMPLE = (config)# ip http secure-certificate upload tftp://10.9.52.103/test_ca.pem
DOC_CMD_EXAMPLE = You can verify your settings by entering the show ip http privileged EXEC command.
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_https_cert_mgmt
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

! 1: ip
! 2: http
! 3: secure-certificate
! 4: upload
! 5: <url_file>
! 6: pass-phrase
! 7: <pass_phrase>
! 8: delete
! 9: generate

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = upload
CMD_VAR = url_file
CMD_VAR = has_pass_phrase
CMD_VAR = pass_phrase
CMD_VAR = has_delete
CMD_VAR = has_generate

RUNTIME = web_present
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME = VTSS_HTTPS_ICLI_runtime_url_file
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_HTTP
HELP = HTTPS certificate
HELP = Upload a certificate PEM file
HELP = ##ICLI_HELP_URL_FILE
HELP = Pass phrase
HELP = Privacy key pass phrase string
HELP = Delete the current certificate
HELP = Generate a new self-signed RSA certificate

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = <URL : <protocol>://[<username>[:<password>]@]<host>[:<port>][/<path>]/<file_name>>
BYWORD = 
BYWORD = <pass_phrase : Pass phrase of the certificate PEM>
BYWORD =
BYWORD =

VARIABLE_BEGIN
    https_conf_t *https_conf = NULL;
VARIABLE_END

CODE_BEGIN
    if ((VTSS_MALLOC_CAST(https_conf, sizeof(https_conf_t))) == NULL) {
        ICLI_PRINTF("%% Failed to alloc dynamic memory for HTTPS certificate generation.\n");
        return ICLI_RC_ERROR;
    }

    if (https_mgmt_conf_get(https_conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Failed to get HTTPS configuration.\n");
        VTSS_FREE(https_conf);
        return ICLI_RC_ERROR;
    }
    
    // Check HTTPS mode
    if (https_conf->mode == HTTPS_MGMT_ENABLED) {
        ICLI_PRINTF("%% Please disable HTTPS mode first.\n");
        VTSS_FREE(https_conf);
        return ICLI_RC_ERROR;
    }

    if (has_delete) {
        (void)https_mgmt_cert_del();
    } else if (has_generate) {
        if (https_mgmt_cert_gen() != VTSS_RC_OK) {
            ICLI_PRINTF("%% Failed to generate HTTPS certificate.\n");
            VTSS_FREE(https_conf);
            return ICLI_RC_ERROR;
        }
    } else if (upload) {
        mesa_rc rc = https_mgmt_cert_upload(url_file, has_pass_phrase ? pass_phrase : "");
        switch (rc) {
        case VTSS_RC_OK:
            break;
        case HTTPS_ERROR_MUST_BE_DISABLED_MODE:
            ICLI_PRINTF("%% Please disable HTTPS mode before HTTPS certificate generation.\n");
            break;
        case HTTPS_ERROR_INV_CERT:
            ICLI_PRINTF("%% File is invalid Certificate PEM file. Make sure the PEM file contains the information of certificate and private key. Don't forgete the pass phrase if it is not empty string.\n");
            break;
        case HTTPS_ERROR_INTERNAL_RESOURCE:
            ICLI_PRINTF("%% Failed to alloc dynamic memory.\n");
            break; 
        case HTTPS_ERROR_INV_URL:
            ICLI_PRINTF("%% %s is an invalid URL - Expecting something like [tftp|ftp|http|https]://<username>:<password>@<host>/<path>/<file_name>\n", url_file);
            break;
        case HTTPS_ERROR_CERT_TOO_BIG:
            ICLI_PRINTF("%% Failed to load HTTPS certificate, SSL Certificate PEM file size too big (%d bytes).\n", HTTPS_MGMT_MAX_CERT_LEN);
            break;
        default:
            ICLI_PRINTF("%% Failed to upload certificate.\n");
            break;
        }

        if (rc != VTSS_RC_OK) {
            VTSS_FREE(https_conf);
            return ICLI_RC_ERROR;
        }
    }

    VTSS_FREE(https_conf);
CODE_END

CMD_END

// ==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug show ip http secure-certificate
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    = Use the debug show ip http secure-certificate debug command \
                  to display the HTTPS certificate.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   = Display the HTTPS certificate.
DOC_CMD_EXAMPLE = This example shows how to display the HTTPS certificate:
DOC_CMD_EXAMPLE = Switch# debug ip https certificate
DOC_CMD_EXAMPLE = Information length: 308
DOC_CMD_EXAMPLE = cert. version     : 3
DOC_CMD_EXAMPLE = serial number     : 01
DOC_CMD_EXAMPLE = issuer name       : CN=CA, O=PolarSSL, C=NL
DOC_CMD_EXAMPLE = subject name      : CN=Cert, O=PolarSSL, C=NL
DOC_CMD_EXAMPLE = issued  on        : 2015-10-31 00:00:00
DOC_CMD_EXAMPLE = expires on        : 2025-10-31 23:59:59
DOC_CMD_EXAMPLE = signed using      : RSA with SHA1
DOC_CMD_EXAMPLE = RSA key size      : 2048 bits
DOC_CMD_EXAMPLE = basic constraints : CA=false
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_https_cert
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

RUNTIME = web_present

! 1: debug
! 2: show
! 3: ip
! 4: http
! 5: secure-certificate

CMD_VAR =

HELP = ##ICLI_HELP_DEBUG
HELP = ##ICLI_HELP_SHOW
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_HTTP
HELP = HTTPS certificate

BYWORD =

VARIABLE_BEGIN
    char *cert_info = NULL;
VARIABLE_END

CODE_BEGIN
    if ((cert_info = (char *)VTSS_MALLOC(HTTPS_MGMT_MAX_CERT_LEN * 2 + 1)) != NULL) {
        if (https_mgmt_cert_info_get(cert_info, (size_t)(HTTPS_MGMT_MAX_CERT_LEN * 2 + 1)) == VTSS_RC_OK && strlen(cert_info)) {
            ICLI_PRINTF("Information length: %zu\n%s", strlen(cert_info), cert_info);
        } else {
            ICLI_PRINTF("No HTTPS certificate existing.\n");
        }
        VTSS_FREE(cert_info);
    } else {
        ICLI_PRINTF("%% Failed to alloc dynamic memory for HTTPS certificate.\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

// ==============================================================================

