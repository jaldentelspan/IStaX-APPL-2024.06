# Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.

// Module Segment
//   This tag value is used to decide whether all commands of this module are
//   registered or not and the generated C/H file is compiled or not.
MODULE_IF_FLAG = defined(VTSS_SW_OPTION_FRR_OSPF6)

// Include Segment
//   The segment contains the include files. These include files are needed
//   for the code body, that is, all other segments.
//   "icli_api.h" is the default include file that will be auto-generated
//   in C file.
//   The content will be exactly pasted to the generated C file.
INCLUDE_BEGIN
#include "icli_porting_util.h"
#include "frr_ospf6_api.hxx"
#include "frr_daemon.hxx"
#include "misc_api.h"           // For misc_ipv4_txt()
#include "frr_ospf6_expose.hxx"
#include "frr_ospf6_icli_functions.hxx"
INCLUDE_END

//
// Function Segment
//   The segment allows the designer writes the local functions that will be
//   used in the command Segment and also the global functions that can be
//   shared with other C files.
//   The content will be exactly pasted to the generated C file.
//
FUNCTION_BEGIN
/* Update OSPF6 priority valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_priority(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_PRIORITY_MIN,
                     VTSS_APPL_OSPF6_PRIORITY_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_PRIORITY_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_PRIORITY_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

/* Update OSPF6 general cost valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_general_cost(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_GENERAL_COST_MIN,
                     VTSS_APPL_OSPF6_GENERAL_COST_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_GENERAL_COST_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_GENERAL_COST_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

/* Update OSPF6 interface cost valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_intf_cost(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_INTF_COST_MIN,
                     VTSS_APPL_OSPF6_INTF_COST_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_INTF_COST_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_INTF_COST_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

/* Update OSPF6 hello-interval valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_hello_interval(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_HELLO_INTERVAL_MIN,
                     VTSS_APPL_OSPF6_HELLO_INTERVAL_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_HELLO_INTERVAL_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_HELLO_INTERVAL_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

/* Update OSPF6 retransmit-interval valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_retransmit_interval(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_RETRANSMIT_INTERVAL_MIN,
                     VTSS_APPL_OSPF6_RETRANSMIT_INTERVAL_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_RETRANSMIT_INTERVAL_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_RETRANSMIT_INTERVAL_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

/* Update OSPF6 transmit-delay valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_transmit_delay(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_TRANSMIT_DELAY_MIN,
                     VTSS_APPL_OSPF6_TRANSMIT_DELAY_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_TRANSMIT_DELAY_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_TRANSMIT_DELAY_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

/* Update OSPF6 dead-interval valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_dead_interval(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_DEAD_INTERVAL_MIN,
                     VTSS_APPL_OSPF6_DEAD_INTERVAL_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_DEAD_INTERVAL_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_DEAD_INTERVAL_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

/* Update OSPF6 administrative distance valid range on runtime stage */
static BOOL OSPF6_ICLI_runtime_admin_distance(
    u32                session_id,
    icli_runtime_ask_t ask,
    icli_runtime_t     *runtime) {
    switch (ask) {
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%u-%u>",
                     VTSS_APPL_OSPF6_ADMIN_DISTANCE_MIN,
                     VTSS_APPL_OSPF6_ADMIN_DISTANCE_MAX);
        return TRUE;
    case ICLI_ASK_RANGE:
        // Notice that the CLI range type need to match the original variable type.
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.ur.cnt = 1;
        runtime->range.u.ur.range[0].min = VTSS_APPL_OSPF6_ADMIN_DISTANCE_MIN;
        runtime->range.u.ur.range[0].max = VTSS_APPL_OSPF6_ADMIN_DISTANCE_MAX;
        return TRUE;
    default:
        break;
    }

    return FALSE;
}

FUNCTION_END

HELP_NETWORK            = Configure routing on an IPv4 network
HELP_ROUTER_ID          = Router ID for the OSPF6 process (Notice that the ID is unique within the entire OSPF6 domain)
HELP_IP_ADDR            = IPv6 address
HELP_IP_ADDR_MASK       = IPv6 address mask
HELP_IP_SUBNET          = IPv6 Subnet
HELP_IP_WILDCARD_MASK   = The wildcard-mask of the IPv4 address, where 0 is a match, and 1 is a 'do not care' bit.
HELP_AREA_ID            = OSPF6 area ID
HELP_AREA_ID_FORMAT     = The OSPF6 area ID can be specified as either an IPv4 \
address format(A.B.C.D) or a decimal value from 0 to 4294967295.
HELP_REDIST             = Redistribute route information from the specific routing protocol.
HELP_REDIST_STATIC      = The OSPF6 redistributed metric type for the static routes.
HELP_REDIST_CONNECTED   = The OSPF6 redistributed metric type for the connected interfaces.
HELP_DEF_METRIC         = The OSPF6 default metric
HELP_MAX_METRIC         = OSPF6 maximum metric
HELP_ROUTER_LSA         = Advertise own Router-LSA with maximum metric
HELP_STUB_ROUTER_ON_STARTUP  = Configures OSPF6 to advertise a maximum metric during startup for a configured period of time
HELP_STUB_ROUTER_ON_SHUTDOWN = Configures OSPF6 to advertise a maximum metric during shutdown \
for a configured period of time. The device advertises a maximum metric when the OSPF6 router \
mode is disabled and notice that the mechanism also works when the device reboots but not for the \
'reload default' case.
HELP_STUB_ROUTER_ADMIN       = Configures OSPF6 stub router mode administratively applied, for an indefinite period
HELP_DEFAULT_INFORMATION     = Control distribution of default information
HELP_ORIGINATE               = Distribute a default route
HELP_ADMIN_DISTANCE          = Administrative distance

// =============================================================================
CMD_BEGIN
COMMAND         = clear ipv6 ospf process
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_clear_ospf6_process
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_EXEC
MODE_VAR  =

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_CLEAR
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_OSPF6
HELP = OSPF6 routing process

VARIABLE_BEGIN
    vtss_appl_ospf6_control_globals_t ospf6_control;
VARIABLE_END

CODE_BEGIN
    memset(&ospf6_control, 0, sizeof(ospf6_control));
    ospf6_control.reload_process = true;
    if (vtss_appl_ospf6_control_globals(&ospf6_control) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Clear ipv6 ospf process failed.\n");
         return ICLI_RC_ERROR;
    }
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = no router ospf6
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    = This command is an invisible command which is used to prevent
DOC_CMD_DESC    = user deleting the current submode accidentally.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_router_prevent_delete_myself
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
MODE_VAR  =
PROPERTY  = ICLI_CMD_PROP_INVISIBLE

CMD_VAR =
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##ICLI_HELP_ROUTER
HELP = ##ICLI_HELP_OSPF6

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    FRR_ICLI_ospf6_instance_process_del(req);
    (void)ICLI_MODE_EXIT();
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = no router ospf6
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_router_disable
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR  =
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_VAR =
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##ICLI_HELP_ROUTER
HELP = ##ICLI_HELP_OSPF6

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    FRR_ICLI_ospf6_instance_process_del(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = router-id <ipv4_addr>
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_router_id_set
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id

CMD_VAR =
CMD_VAR = router_id

RUNTIME =
RUNTIME =

HELP = ##HELP_ROUTER_ID
HELP = OSPF6 router-id in IPv6 address format

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    if (router_id < VTSS_APPL_OSPF6_ROUTER_ID_MIN ||
        router_id > VTSS_APPL_OSPF6_ROUTER_ID_MAX) {
        char ip_str_buf1[16], ip_str_buf2[16];
        ICLI_PRINTF("%% Invalid OSPF6 router ID: The allowed range is from %s to %s.\n",
                    misc_ipv4_txt(VTSS_APPL_OSPF6_ROUTER_ID_MIN, ip_str_buf1),
                    misc_ipv4_txt(VTSS_APPL_OSPF6_ROUTER_ID_MAX, ip_str_buf2));
        return ICLI_RC_ERROR;
    }
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.router_id = router_id;
    FRR_ICLI_ospf6_router_id_set(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = no router-id
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_router_id_del
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##HELP_ROUTER_ID

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    FRR_ICLI_ospf6_router_id_del(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = interface  vlan <vlan_list>  area <area_id>
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_interface_area_set
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
MODE_VAR  =

CMD_VAR =
CMD_VAR = 
CMD_VAR = vlan_list
CMD_VAR = 
CMD_VAR = area_id

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = 
HELP = 
HELP = VLAN interface
HELP = 
HELP = Area ID of the interface

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.vlan_list = vlan_list;
    req.area_id = area_id;
    req.configure_area_id = true;
    FRR_ICLI_ospf6_interface_area_set(req);
CODE_END

NO_FORM_VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
NO_FORM_VARIABLE_END

NO_FORM_CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.vlan_list = vlan_list;
    req.area_id = area_id;
    req.configure_area_id = false;
    FRR_ICLI_ospf6_interface_area_set(req);
NO_FORM_CODE_END
CMD_END

//------------------------------------------------------------------------------
//** OSPF6 route redistribution
//------------------------------------------------------------------------------
// =============================================================================
CMD_BEGIN
COMMAND         = redistribute { static | connected }
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_redist_set
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id

CMD_VAR =
CMD_VAR = has_static
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##HELP_REDIST
HELP = ##HELP_REDIST_STATIC
HELP = ##HELP_REDIST_CONNECTED

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.redist_protocol = has_static ? VTSS_APPL_OSPF6_REDIST_PROTOCOL_STATIC :
                          VTSS_APPL_OSPF6_REDIST_PROTOCOL_CONNECTED;
    req.redist_enabled = true;
    return FRR_ICLI_ospf6_redist_set(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = no redistribute { static | connected }
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_redist_del
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_VAR =
CMD_VAR =
CMD_VAR = has_static
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##HELP_REDIST
HELP = ##HELP_REDIST_STATIC
HELP = ##HELP_REDIST_CONNECTED

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.redist_protocol = has_static ? VTSS_APPL_OSPF6_REDIST_PROTOCOL_STATIC :
                          VTSS_APPL_OSPF6_REDIST_PROTOCOL_CONNECTED;
    req.redist_enabled = false;
    return FRR_ICLI_ospf6_redist_set(req);
CODE_END
CMD_END

//------------------------------------------------------------------------------
//** OSPF6 administrative distance
//------------------------------------------------------------------------------
// =============================================================================
CMD_BEGIN
COMMAND         = distance <1-255>
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/
FUNC_NAME = icli_ospf6_admin_distance_set
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id

CMD_VAR =
CMD_VAR = admin_distance

RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_admin_distance

HELP = ##HELP_ADMIN_DISTANCE
HELP = User specified administrative distnace value

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.admin_distance = admin_distance;
    return FRR_ICLI_ospf6_admin_distance_set(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = no distance
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/
FUNC_NAME = icli_ospf6_admin_distance_restore
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##HELP_ADMIN_DISTANCE

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
    vtss_appl_ospf6_router_conf_t def_conf;
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    if (frr_ospf6_router_conf_def(&req.inst_id, &def_conf) != VTSS_RC_OK)  {
        ICLI_PRINTF("%% Get OSPF6 router default configuration failed.\n");
        return ICLI_RC_ERROR;
    }
    req.admin_distance = def_conf.admin_distance;
    return FRR_ICLI_ospf6_admin_distance_set(req);
CODE_END
CMD_END

//----------------------------------------------------------------------------
//** OSPF6 Area
//----------------------------------------------------------------------------
// =============================================================================
CMD_BEGIN
COMMAND         = area <area_id> range <ipv6_subnet> [advertise [cost <0-16777215>] | not-advertise | cost <0-16777215>]
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    = FRR_ICLI_ICLI_ospf6_area_range_set
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_area_range_set
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id

CMD_VAR =
CMD_VAR = area_id
CMD_VAR =
CMD_VAR = ipv6_subnet
CMD_VAR =
CMD_VAR = has_advertise_cost
CMD_VAR = advertise_cost
CMD_VAR = has_not_advertise
CMD_VAR = has_cost
CMD_VAR = cost

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_general_cost
RUNTIME =
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_general_cost

HELP = ##HELP_AREA_ID
HELP = ##HELP_AREA_ID_FORMAT
HELP = Summarize routes matching address range (ABRs only)
HELP = ##HELP_IP_SUBNET
HELP = Summarize intra area paths from the address range in one summary-LSA (Type-3) and advertised to other areas.
HELP = User specified cost (or metric) for this summary route.
HELP = Advertised metric for this summary route.
HELP = The intra area paths from the address range are not advertised to other areas.
HELP = User specified cost (or metric) for this summary route.
HELP = Advertised metric for this summary route.

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.area_id = area_id;
    req.subnet = ipv6_subnet;
    req.area_range_advertise = has_not_advertise ? false : true;
    req.has_cost = (has_cost | has_advertise_cost) ? true: false;
    if (has_cost) {
        req.cost = cost;
    }
    if (has_advertise_cost) {
        req.cost = advertise_cost;
    }
    FRR_ICLI_ospf6_area_range_set(req);
CODE_END
CMD_END

CMD_BEGIN
COMMAND         = no area <area_id> range <ipv6_subnet> [advertise | not-advertise | cost]
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_area_range_del_restore
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id

CMD_VAR =
CMD_VAR =
CMD_VAR = area_id
CMD_VAR =
CMD_VAR = ipv6_subnet
CMD_VAR =
CMD_VAR = has_not_advertise
CMD_VAR = has_cost

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##HELP_AREA_ID
HELP = ##HELP_AREA_ID_FORMAT
HELP = Summarize routes matching address range (ABRs only)
HELP = ##HELP_IP_SUBNET
HELP = Summarize intra area paths from the address range in one summary-LSA (Type-3) and advertised to other areas. \
This option has no significance here.
HELP = The intra area paths from the address range are not advertised to other areas. This option has no significance here.
HELP = User specified cost (or metric) for this summary route.

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.area_id = area_id;
    req.subnet = ipv6_subnet;
    req.area_range_advertise = has_not_advertise ? false : true;
    req.has_cost = has_cost;

    FRR_ICLI_ospf6_area_range_del_or_restore(req);
CODE_END
CMD_END

//----------------------------------------------------------------------------
//** OSPF6 stub area
//----------------------------------------------------------------------------
// =============================================================================
CMD_BEGIN
COMMAND         = area <area_id> stub [ no-summary ]
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_area_stub_set
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_CONFIG_ROUTER_OSPF6
//MODE_VAR  = process_id

CMD_VAR =
CMD_VAR = area_id
CMD_VAR =
CMD_VAR = has_no_summary

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##HELP_AREA_ID
HELP = ##HELP_AREA_ID_FORMAT
HELP = Configure the area as a stub area.
HELP = Configure the area as a totally stub area.

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.area_id = area_id;
    req.has_no_summary = has_no_summary ? true : false;

    FRR_ICLI_ospf6_area_stub_set(req);
CODE_END

NO_FORM_VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
NO_FORM_VARIABLE_END

NO_FORM_CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.area_id = area_id;
    /* 'has_no_summary' is true means setting the area as a stub area
     * otherwise deleting the stub configuration.
     */
    req.has_no_summary = has_no_summary ? true : false;

    FRR_ICLI_ospf6_area_stub_no(req);
NO_FORM_CODE_END
CMD_END

//----------------------------------------------------------------------------
//** OSPF6 interface parameter tuning
//----------------------------------------------------------------------------
// =============================================================================
CMD_BEGIN
COMMAND         = ipv6 ospf { passive | priority <0-255> | cost <1-65535> | mtu-ignore | hello-interval <1-65535> | retransmit-interval <3-65535> | transmit-delay <1-3600> | dead-interval { <1-65535> } }
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_vlan_interface_set
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_INTERFACE_VLAN
MODE_VAR  = vlan_list

CMD_VAR =
CMD_VAR =
CMD_VAR = has_passive
CMD_VAR = has_priority
CMD_VAR = priority
CMD_VAR = has_cost
CMD_VAR = cost
CMD_VAR = has_mtu_ignore
CMD_VAR = has_hello_interval
CMD_VAR = hello_interval
CMD_VAR = has_retransmit_interval
CMD_VAR = retransmit_interval
CMD_VAR = has_transmit_delay
CMD_VAR = transmit_delay
CMD_VAR = has_dead_interval
CMD_VAR = dead_interval
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_priority
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_intf_cost
RUNTIME =
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_hello_interval
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_retransmit_interval
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_transmit_delay
RUNTIME =
RUNTIME = OSPF6_ICLI_runtime_dead_interval
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_OSPF6
HELP = Set the interface as passive
HELP = Set OSPF6 router priority for the specific interface.
HELP = User specified router priority for the interface.
HELP = Set OSPF6 link state metric for the interface. It is used for Shortest Path First (SPF) calculation.
HELP = User specified cost for the interface.
HELP = Ignore Interface MTU received in Database Description packets.
HELP = Set the hello-interval value for the specific interface.
HELP = User hello-interval value for the specific interface.
HELP = Set the retransmit-interval value for the specific interface. It's the time interval (in seconds) to \
wait before retransmitting a database description packet or a link-state request when it has not been acknowledged.
HELP = User retransmit-interval value for the specific interface.
HELP = Set the transmit-delay value for the specified interface
HELP = User transmit-delay value for the specified interface
HELP = Set the dead-interval value (number of seconds) for the specific interface.
HELP = User dead-interval value for the specific interface.
HELP =

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.vlan_list = vlan_list;

    // priority
    req.has_priority = has_priority;
    if (has_priority) {
        req.priority = priority;
    }

    // cost
    req.has_cost = has_cost;
    if (has_cost) {
        req.cost = cost;
    }

    req.has_mtu_ignore = has_mtu_ignore;
    req.mtu_ignore = true;

    // hello interval
    req.has_hello_interval = has_hello_interval;
    if (has_hello_interval) {
        req.hello_interval = hello_interval;
    }

    // retransmit interval
    req.has_retransmit_interval = has_retransmit_interval;
    if (has_retransmit_interval) {
        req.retransmit_interval = retransmit_interval;
    }

    // transmit delay
    req.has_transmit_delay = has_transmit_delay;
    if (has_transmit_delay) {
        req.transmit_delay = transmit_delay;
    }

    // dead interval
    req.has_dead_interval = has_dead_interval;
    if (has_dead_interval) {
        req.dead_interval = dead_interval;
    }

    // passive interface
    req.has_passive = has_passive;

    FRR_ICLI_ospf6_vlan_interface_set(req);
CODE_END
CMD_END

CMD_BEGIN
COMMAND         = no ipv6 ospf { priority | cost | mtu-ignore | dead-interval | hello-interval | retransmit-interval | transmit-delay | passive }
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_ospf6_vlan_interface_set_default
PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE  = ICLI_CMD_MODE_INTERFACE_VLAN
MODE_VAR  = vlan_list

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_priority
CMD_VAR = has_cost
CMD_VAR = has_mtu_ignore
CMD_VAR = has_dead_interval
CMD_VAR = has_hello_interval
CMD_VAR = has_retransmit_interval
CMD_VAR = has_transmit_delay
CMD_VAR = has_passive

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_OSPF6
HELP = Set OSPF6 router priority for the specific interface to default.
HELP = Set OSPF6 link state metric for the interface to default.
HELP = Discard received database description packets if the packets' interface MTU differs from our own (default).
HELP = Set the dead-interval value (number of seconds) for the specific interface to default.
HELP = Set the hello-interval value for the specific interface to default.
HELP = Set the retransmit-interval value for the specific interface to default.
HELP = Set the transmit-delay value for the specific interface to default.
HELP = Set the interface to no passive.

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.vlan_list = vlan_list;

    // priority, cost, dead interval, hello interval, retransmit interval
    req.has_priority = has_priority;
    req.has_cost = has_cost;
    req.has_mtu_ignore = has_mtu_ignore;
    req.has_dead_interval = has_dead_interval;
    req.has_hello_interval = has_hello_interval;
    req.has_retransmit_interval = has_retransmit_interval;
    req.has_passive = has_passive;
    req.has_transmit_delay = has_transmit_delay;

    FRR_ICLI_ospf6_vlan_interface_set_default(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = show ipv6 ospf
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_show_ip_ospf
PRIVILEGE = ICLI_PRIVILEGE_0
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR  =

CMD_VAR =
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_NO
HELP = ##ICLI_HELP_ROUTER
HELP = ##ICLI_HELP_OSPF6

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    FRR_ICLI_ospf6_show_info(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = show ipv6 ospf interface [ vlan <vlan_list> ]
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_show_ip_ospf6_interface
PRIVILEGE = ICLI_PRIVILEGE_0
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR  =

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_vlan
CMD_VAR = vlan_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_SHOW
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_OSPF6
HELP = ##ICLI_HELP_INTERFACE
HELP = VLAN interface
HELP = ##ICLI_HELP_VLAN_LIST

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.vlan_list = has_vlan ? vlan_list : NULL;
    FRR_ICLI_ospf6_show_interface(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = show ipv6 ospf neighbor [ detail ]
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_show_ip_ospf6_neighbor_detail
PRIVILEGE = ICLI_PRIVILEGE_0
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR  =

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_detail

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_SHOW
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_OSPF6
HELP = Neighbor list
HELP = Detailed neighbor information

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.has_detail = has_detail;
    FRR_ICLI_ospf6_show_neighbor(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = show ipv6 ospf route
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_show_ip_ospf6_route
PRIVILEGE = ICLI_PRIVILEGE_0
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR  =

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_SHOW
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_OSPF6
HELP = routing information

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    FRR_ICLI_ospf6_show_route(req);
CODE_END
CMD_END

// =============================================================================
CMD_BEGIN
COMMAND         = show ipv6 ospf database [ {router | network | inter-prefix | inter-router | external | link | intra-prefix } [link-state-id <ipv4_addr>]] [adv-router <ipv4_addr> | self-originate]
# /* ---------------------------------------------------------------------------
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =
# ----------------------------------------------------------------------------*/

FUNC_NAME = icli_show_ip_ospf6_db
PRIVILEGE = ICLI_PRIVILEGE_0
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR  =

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_router
CMD_VAR = has_network
CMD_VAR = has_inter_prefix
CMD_VAR = has_inter_router
CMD_VAR = has_external
CMD_VAR = has_link
CMD_VAR = has_intra_prefix
CMD_VAR =
CMD_VAR = link_state_id
CMD_VAR =
CMD_VAR = adv_router_id
CMD_VAR = has_self_originate

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_SHOW
HELP = ##ICLI_HELP_IP
HELP = ##ICLI_HELP_OSPF6
HELP = database summary
HELP = Router link states
HELP = Network link states
HELP = Inter Area Prefix link states
HELP = Inter Area Router link states
HELP = External link states
HELP = Link LSA link states
HELP = Intra Area Prefix states
HELP = Link state
HELP = Link state ID (as an IPv4 address format)
HELP = Advertising router link state
HELP = Advertising router ID (as an IPv4 address format)
HELP = Self-originated link states

VARIABLE_BEGIN
    FrrOspf6CliReq req(session_id);
VARIABLE_END

CODE_BEGIN
    req.inst_id = FRR_OSPF6_DEFAULT_INSTANCE_ID;
    req.lsdb_type = has_router ? VTSS_APPL_OSPF6_LSDB_TYPE_ROUTER :
                    has_network ? VTSS_APPL_OSPF6_LSDB_TYPE_NETWORK :
                    has_inter_prefix ? VTSS_APPL_OSPF6_LSDB_TYPE_INTER_AREA_PREFIX :
                    has_intra_prefix ? VTSS_APPL_OSPF6_LSDB_TYPE_INTRA_AREA_PREFIX :
                    has_inter_router ? VTSS_APPL_OSPF6_LSDB_TYPE_INTER_AREA_ROUTER :
                    has_external ? VTSS_APPL_OSPF6_LSDB_TYPE_EXTERNAL :
                    has_link ? VTSS_APPL_OSPF6_LSDB_TYPE_LINK :
                    VTSS_APPL_OSPF6_LSDB_TYPE_NONE /* default setting */;
    if (link_state_id) {
        req.has_link_state_id = true;
        req.link_state_id = link_state_id;
    }
    if (adv_router_id) {
        req.has_adv_router_id = true;
        req.adv_router_id = adv_router_id;
    }
    req.has_self_originate =  has_self_originate;
    if (req.lsdb_type != VTSS_APPL_OSPF6_LSDB_TYPE_NONE) {
        FRR_ICLI_ospf6_show_db_detail_info(req);
    } else {
        FRR_ICLI_ospf6_show_db_general_info(req);
    }
CODE_END
CMD_END
