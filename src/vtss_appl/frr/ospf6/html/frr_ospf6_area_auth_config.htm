<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>OSPF6 Area Authentication Configuration</title>
    <link href="lib/normal.css" rel="stylesheet" type="text/css">
    <script type="text/javascript" src="lib/mootools-core.js"></script>
    <script type="text/javascript" src="lib/dynforms.js"></script>
    <script type="text/javascript" src="lib/validate.js"></script>
    <script type="text/javascript" src="lib/json.js"></script>
    <script type="text/javascript" src="lib/HeaderControl.js"></script>
    <script type="text/javascript" src="frr_ospf6_lib.js"></script>
    <script type="text/javascript">
// Help page magic
var help_page = "/help/help_frr_ospf6_area_auth_config.htm";

// Global variables
var defSelectedInstanceId = 0; /* Display all entries by default */
var pageArgs = searchArgs(window.location.search);
var selectedOspf6InstanceId = pageArgs.InstanceId ? parseInt(pageArgs.InstanceId, 10) : defSelectedInstanceId;

var myDynamicTable, myCapabilities, ospf6InstanceIdInfo;

var oTOspf6InstanceId = oTOspf6InstanceId = Array("All"),
    oVOspf6InstanceId = genArrayInt(0, 1);

var oTAuthType = Array("Simple Password", "Message Digest");
var oVAuthType = Array("simplePasswordAuth", "md5Auth");

/* Send the HTML request */
function sendRequest() {
    ospf6InstanceIdInfo = null;
    requestJsonDoc("ospf6.status.router.get", null, requestUpdate, "ospf6InstanceIdInfo");
}

function onChangeSelectMenu(sel) {
    selectedOspf6InstanceId = parseInt(sel.options[sel.selectedIndex].value, 10);
    sendRequest();
}

/* Check if the table row key is duplicated or note */
function isDuplicatedRowKey() {
    var recv_json = myDynamicTable.getRecvJson("config");
    var new_key_prefix = myDynamicTable.getRowPrefixs("newrowKeyPrefix");
    var del_prefix = myDynamicTable.getRowPrefixs("rowDelPrefix");
    var i, j, new_key_fld;
    var addr_1, mask_1, addr_2, mask_2;

    // The new row key index start from 1
    var newrow_count = myDynamicTable.getNewrowsCnt();
    for (i = 1; i <= newrow_count; i++) {
        new_key_fld = $(new_key_prefix + i + "_AreaId");
        if (!new_key_fld) {
            continue;
        }

        // Lookup original entries
        for (j = 0; j < recv_json.length; j++) {
            // Ignore the deleted entry
            if ($(del_prefix + rowKey2Id(recv_json[j].key)).checked) {
                continue;
            }

            if ($(new_key_prefix + i + "_AreaId").value == recv_json[j].key[1]) {
                // Found duplicated key
                return GiveAlert("The entry {" +
                    $(new_key_prefix + i + "_AreaId").value + "} already exists.",
                    new_key_fld);
            }
        }

        // Lookup new entries
        for (j = i + 1; j <= newrow_count; j++) {
            if (!$(new_key_prefix + j + "_AreaId")) {
                continue;
            }

            if ($(new_key_prefix + i + "_AreaId").value == $(new_key_prefix + j + "_AreaId").value) {
                // Found duplicated key
                return GiveAlert("The new entry {" +
                    $(new_key_prefix + i + "_AreaId").value + "} is duplicated.",
                    $(new_key_prefix + j + "_AreaId"));

            }
        }
    }

    return true;
}

/* Check if duplicated row key. */
function checkForm() {
    if (!isDuplicatedRowKey()) {
        return false;
    }

    return true;
}

/* Ge the default entry of table row */
function geRowDefaultRow() {
    def_row = {
        "key": [1, "0.0.0.0"],
        "val": { "AreaAuthType": "simplePasswordAuth" }
    };

    return def_row;
}

/* Add table header */
function addHeader(table_rows) {
    var row = {
        fields: [
            { type: "disp_hdr", params: ["Delete"] },
            { type: "disp_hdr", params: ["Instance ID"], "hidden": true },
            { type: "disp_hdr", params: ["Area ID"] },
            { type: "disp_hdr", params: ["Auth. Type"] }
        ]
    };
    table_rows.push(row);
}

/* Add a single row in the dynamic table.
 * Notice:
 * Except for the general usage, this function also can be a callback function
 * which is registered by addNewRowButton().
 * In this case, the value of parameter "key" is an integer number (start from 1),
 * it identify the new row index for the entry and the value of parameter "val"
 * is null.
 */
function addRow(key, val, key_prefix) {
    var elem_id, new_row_key, is_new_row = false;

    /* When the value of parameter "val" is null, it means this function is
     * called by addNewRowButton(). It requires the default entry datas. */
    if (!val) {
        is_new_row = true;
        new_row_key = geRowDefaultRow().key;
        val = geRowDefaultRow().val;
    }

    var row_affix = (is_new_row ? key_prefix : myDynamicTable.getRowPrefixs("rowKeyPrefix")) + rowKey2Id(key);
    var row = {
        "key": is_new_row ? new_row_key : key,
        fields: [
            { type: "chkbox", params: [0, "c", key_prefix + rowKey2Id(key)] },
            { type: "text", params: [is_new_row ? new_row_key[0] : key[0], "cr"], "hidden": true },
            { type: "text", params: [is_new_row ? new_row_key[1] : key[1], "cr"] },
            { type: "select", params: [oTAuthType, oVAuthType, val.AreaAuthType, "cl", "AreaAuthType_" + row_affix, "100%"] }

        ]
    };

    /* When a new row is created, use <input> form for the entry key.
     * Notice that the element ID MUST start with the following syntax
     * newrowKey_<key_idx>_<json_name>
     * For example, "newrowKey_1_Network", "newrowKey_1_IpSubnetMaskLength".
     */
    if (is_new_row) {
        var new_row_prefix = key_prefix + key;

        // OSPF6 instance ID
        elem_id = new_row_prefix + "_InstanceId";
        row.fields[1] = {
            type: "input",
            params: [new_row_key[0], "cr", elem_id, 15, 15],
            "hidden": true
        };

        // Area ID
        elem_id = new_row_prefix + "_AreaId";
        row.fields[2] = {
            type: "input",
            params: [new_row_key[1], "cr", elem_id, 15, 15],
            validate: { func: isIpStr, params: [elem_id, false, "Area ID", 2] }
        };
    }

    return row;
}

/* Add table rows in the dynamic table */
function addRows(recv_json) {
    var row, empty_colspan = 3;
    var table_rows = new Array();

    // Add table header
    addHeader(table_rows);

    // Add single row
    Object.each(recv_json, function (record) {
        table_rows.push(addRow(record.key, record.val, myDynamicTable.getRowPrefixs("rowDelPrefix")));
        //        updateType();
    });

    // Empty row (Display "No entry exists" when empty row)
    if (!recv_json.length) {
        table_rows.push({ fields: [{ type: "empty_row", params: [empty_colspan] }] });
    }

    return table_rows;
}

/* Process the received JSON data */
function processUpdate(recv_json, name) {
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("processUpdate() failed: Get dynamic data failed.");
        return;
    }

    // Filter the records which are matched the selected OSPF6 instance ID
    // or equals the default configuration.
    var myConf = Array();
    if (selectedOspf6InstanceId == defSelectedInstanceId) { /* Display all entries */
        myConf = recv_json;
    } else {
        Object.each(recv_json, function (record) {
            if (selectedOspf6InstanceId == record.key[0]) {
                myConf.push(record);
            }
        });
    }

    // Save the received JSON data (both of the original and filted)
    myDynamicTable.saveRecvJson(name, myConf);
    myDynamicTable.saveRecvJson("original_" + name, recv_json); // For isDuplicatedRowKey()

    // Add table rows
    var table_rows = addRows(myConf);
    myDynamicTable.addRows(table_rows);

    // Update this dynamic table
    myDynamicTable.update();

    // Add buttons
    myDynamicTable.addNewRowButton(addRow, myCapabilities.MaxAreaAuthentication - recv_json.length + myConf.length);
    myDynamicTable.addSubmitButton(name, "ospf6.config.area_auth", sendRequest);
    myDynamicTable.addResetButton();

    // Add header control bar
    var cBar = new HeaderControlBar([
        { name: myDynamicTable.getRowPrefixs("rowDelPrefix") },
        { text: "*", className: "c" },
        { name: "AreaAuthType" }
    ]);
    cBar.construct($("myTableContentTbody"), 'config_odd');
}

/* Update the received HTML request */
function requestUpdate(recv_json, name) {
    // Restore table content
    myDynamicTable.restore();

    if (name == "capabilities") {
        if (recv_json) {
            // Clone a new one and save to global variable
            myCapabilities = myDynamicTable.cloneRecvJson(recv_json);

            // TODO, the maximum of table entries is not defined yet
            myCapabilities.MaxAreaAuthentication = 0xFFFFFFFF;
        } else {
            alert("requestUpdate() failed: Get dynamic data(capabilities) failed.");
            return;
        }
    } else if (name == "ospf6InstanceIdInfo") {
        if (recv_json) {
            // Clone a new one and save to global variable
            ospf6InstanceIdInfo = myDynamicTable.cloneRecvJson(recv_json);

            // Update the OPSF instance ID selected menu.
            oTOspf6InstanceId.length = oVOspf6InstanceId.length = 1; // Restore to default
            Object.each(recv_json, function (record) {
                oTOspf6InstanceId.push(record.key);
                oVOspf6InstanceId.push(record.key);
            });
        } else {
            alert("requestUpdate() failed: Get dynamic data(ospf6InstanceIdInfo) failed.");
            return;
        }
    }

    if (myCapabilities && ospf6InstanceIdInfo) {
        UpdateIdSelect("ospf6InstanceIdSelectMenu", oTOspf6InstanceId, oVOspf6InstanceId, selectedOspf6InstanceId);
        requestJsonDoc("ospf6.config.area_auth.get", null, processUpdate, "config");
    }
}

/* Initialize resources when HTML document is ready */
window.addEvent('domready', function () {
    // Create a from with table body for receive/transmit JSON data
    myDynamicTable = new DynamicTable("myTableContent", "config", "plusNewRow", { func: checkForm, params: [] });

    // This table requires three JSON data(capabilities/config/ospf6InstanceIdInfo).
    // To ensure the completed data, we request the configured data after the
    // capabilities data is received and it is requested only one time.
    requestJsonDoc("ospf6.capabilities.get", null, requestUpdate, "capabilities");
    sendRequest();
});
    </script>
</head>

<body class="content">
    <h1>OSPF6 Area Authentication Configuration</h1>
    <div class="refreshbar">
        <!-- Instance ID&nbsp; -->
        <!-- select id="ospf6InstanceIdSelectMenu" onchange="onChangeSelectMenu(this);">
            <option value="0">All</option>
        </select -->
        <img id="update" alt="" src="images/updating.gif">
    </div>
    <div id="myTableContent"></div>
</body>

</html>
