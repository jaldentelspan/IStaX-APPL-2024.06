<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>RIP Interface Configuration Help</title>
    <link href="/lib/help.css" rel="stylesheet" type="text/css">
    <script type="text/javascript" src="/lib/mootools-core.js"></script>
    <script type="text/javascript" src="/lib/dynforms.js"></script>
    <script type="text/javascript" src="/lib/ajax.js"></script>
    <script type="text/javascript" src="/lib/json.js"></script>
    <script type="text/javascript" language="JavaScript">
// Global variables
var myCapabilities;

/* Update HTML description fields */
function processTableDesc(req) {
    if (!req.responseText) {
        return;
    }

    var json_spec = JSON.decode(req.responseText);

    // Update table description
    $("TableDesc").innerHTML = getJsonSpecElement(json_spec, "groups", "rip.config.interface").description;
}

function processUpdate(recv_json) {
    // Update table description
    //$("TableDesc").innerHTML = getJsonSpecElement(recv_json, "groups", "rip.config.vlink").description;

    // Update table parameter description
    var param_names = [
        {
            "alias": "Interface",
            "type": "vtss_ifindex_t",
            "suffix": "."
        },
        {
            "alias": "Send Version",
            "type": "vtss_appl_rip_intf_conf_t",
            "name": "SendVersion"
        },
        {
            "alias": "Receive Version",
            "type": "vtss_appl_rip_intf_conf_t",
            "name": "RecvVersion"
        },
        {
            "alias": "Split Horizon Mode",
            "type": "vtss_appl_rip_intf_conf_t",
            "name": "SplitHorizonMode",
            "suffix": "<br><samp>Split Horizon<\/samp>: To omit routes learned from one neighbor in updates sent to that neighbor." +
                "<br><samp>Poisoned Reverse<\/samp>: The neighbor learned routes are included in updates sent to the neighbors but their metrics are set to infinity." +
                "<br><samp>Disabled<\/samp>: Split horizon is disabled."
        },
        {
            "alias": "Auth. Type",
            "type": "vtss_appl_rip_intf_conf_t",
            "name": "AuthType",
            "suffix": "<br><samp>Simple Password<\/samp>: It's using a plain text authentication. A password must be configured, but the password can be read by sniffer the packets." +
                "<br><samp>Message Digest<\/samp>: It's message-digest algorithm 5 (MD5) authentication. Keying material must also be configured. This is the most secure method." +
                "<br><samp>Null Authentication<\/samp>: No authentication."
        },
        {
            "alias": "Change Simple Password",
            "description": "It is used to change the simple password (fill with plain text). The allowed input length is from 1 to " + myCapabilities.SimplePwdLenMax + " printable characters excluding space character. " +
            "The null string identifies none simple password is set on the interface." +
            "<br>Notice that can not set key chain and simple password at the same time."
        },
        {
            "alias": "Change Key-Chain Name",
            "description": "It is used to change the key chain name used by MD5 authentication. The allowed input length is from 1 to " + myCapabilities.KeyChainNameLenMax +" printable characters excluding space character. " +
            "The null string identifies none key-chain name is set on the interface." +
            "<br>Notice that can not set key chain and simple password at the same time."
        }
    ];
    updateTableParamsDesc("TableParamsDesc", recv_json, "rip.config.interface.get", param_names);
}

/* Update the received HTML request */
function requestUpdate(recv_json, name) {
    if (name == "capabilities") {
        if (recv_json) {
            // Clone a new one and save to global variable
            myCapabilities = JSON.parse(JSON.stringify(recv_json));
        } else {
            alert("requestUpdate() failed: Get dynamic capabilities data failed.");
            return;
        }
    }

    if (myCapabilities) {
        requestJsonDoc("jsonRpc.status.introspection.specific.inventory.get", "rip.config.interface.get", processUpdate);
    }
}

/* Get JSON specification and capabilities */
window.addEvent('domready', function () {
    loadXMLDoc("/json_spec", processTableDesc);

    // This table requires two JSON data(capabilities/specific_inventory).
    // To ensure the completed data, we request the specific_inventory data after
    // the capabilities data is received and it is requested only one time.
    requestJsonDoc("rip.capabilities.get", null, requestUpdate, "capabilities");
});

    </script>
</head>

<body>
    <h1>RIP Interface Configuration Help</h1>
    <p id="TableDesc"></p>
    <dl id="TableParamsDesc"></dl>
    <h2>Buttons</h2>
    <p>
        <input type="button" value="Save">: Click to save changes.</p>
    <p>
        <input type="button" value="Reset">: Click to undo any changes made locally and revert to previously saved values.</p>
</body>

</html>
