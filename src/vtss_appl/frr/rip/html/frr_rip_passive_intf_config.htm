<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>RIP Passive Interface Configuration</title>
    <link href="lib/normal.css" rel="stylesheet" type="text/css">
    <script type="text/javascript" src="lib/mootools-core.js"></script>
    <script type="text/javascript" src="lib/dynforms.js"></script>
    <script type="text/javascript" src="lib/validate.js"></script>
    <script type="text/javascript" src="lib/json.js"></script>
	<script type="text/javascript" src="lib/HeaderControl.js"></script>
    <script type="text/javascript">
// Help page magic
var help_page = "/help/help_frr_rip_passive_intf_config.htm";

// Global variables
var myDynamicTable, myCapabilities, routerIntfTable;

/* Add table header */
function addHeader(table_rows) {
    var row = {
        fields: [
            { type: "disp_hdr", params: ["Interface"] },
            { type: "disp_hdr", params: ["Passive Interface"] }
        ]
    };
    table_rows.push(row);
}

/* Add a single row in the dynamic table.
 * Notice:
 * Except for the general usage, this function also can be a callback function
 * which is registered by addNewRowButton().
 * In this case, the value of parameter "key" is an integer number (start from 1),
 * it identify the new row index for the entry and the value of parameter "val"
 * is null.
 */

function addRow(key, val, key_prefix) {
    var elem_id;
    var row_affix = myDynamicTable.getRowPrefixs("rowKeyPrefix") + rowKey2Id(key);
    var row = {
        "key": key,
        fields: [
            { //Interface
                type: "text",
                params: [key, "c", 1 , row_affix]
            },
            {
                type: "chkbox",
                params: [val.PassiveInterface, "c", "PassiveInterface_" + row_affix]
            }
        ]
    };

    return row;
}

/* Add table rows in the dynamic table */
function addRows(recv_json) {
    var row, empty_colspan = 2;
    var table_rows = new Array();

    // Add table header
    addHeader(table_rows);

    // Add single row
    Object.each(recv_json, function(record) {
        table_rows.push(addRow(record.key, record.val, myDynamicTable.getRowPrefixs("rowDelPrefix")));
    });

    // Empty row (Display "No entry exists" when empty row)
    if (!recv_json.length) {
        table_rows.push({ fields: [{ type: "empty_row", params: [empty_colspan] }] });
    }

    return table_rows;
}

/* Process the received JSON data */
function processUpdate(recv_json, name) {
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("processUpdate() failed: Get dynamic data failed.");
        return;
    }

    // Filter the records which are matched the selected RIP instance ID
    // or equals the default configuration.
    var myConf = Array();
    Object.each(recv_json, function(record) {
        myConf.push(record);
    });

    // Save the received JSON data (both of the original and filtered)
    myDynamicTable.saveRecvJson(name, myConf);

    // Add table rows
    var table_rows = addRows(myConf);
    myDynamicTable.addRows(table_rows);

    // Update this dynamic table
    myDynamicTable.update();

    myDynamicTable.addSubmitButton(name, "rip.config.router_interface", requestUpdate);
    myDynamicTable.addResetButton();
	// Add header control bar
	var cBar = new HeaderControlBar([
			{ text: "*", className: "c" },
			{ name: "PassiveInterface" }
	]);
	cBar.construct($("myTableContentTbody"), 'config_odd');
}

/* Update the received HTML request */
function requestUpdate(recv_json, name) {
    // Restore table content
    myDynamicTable.restore();

    if (name == "capabilities") {
        if (recv_json) {
            // Clone a new one and save to global variable
            myCapabilities = myDynamicTable.cloneRecvJson(recv_json);

            // TODO, the maximum of table entries is not defined yet
            myCapabilities.MaxMdKey = 0xFFFFFFFF;
        } else {
            alert("requestUpdate() failed: Get dynamic data(capabilities) failed.");
            return;
        }
    }

    if (myCapabilities) {
        requestJsonDoc("rip.config.router_interface.get", null, processUpdate, "config");
    }
}

/* Initialize restores when HTML document is ready */
window.addEvent('domready', function() {
    // Create a from with table body for receive/transmit JSON data
    myDynamicTable = new DynamicTable("myTableContent", "config");

    // This table requires three JSON data(capabilities/config/ripIntfVlanInfo/routerIntfTable).
    // To ensure the completed data, we request the configured data after the
    // capabilities data is received and it is requested only one time.
    requestJsonDoc("rip.capabilities.get", null, requestUpdate, "capabilities");
});
    </script>
</head>

<body class="content">
    <h1>RIP Passive Interface Configuration</h1>
    <div class="refreshbar">
        <img id="update" alt="" src="images/updating.gif">
    </div>
    <div id="myTableContent"></div>
</body>

</html>
