<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>OSPF Global Configuration</title>
    <link href="lib/normal.css" rel="stylesheet" type="text/css">
    <script type="text/javascript" src="lib/mootools-core.js"></script>
    <script type="text/javascript" src="lib/dynforms.js"></script>
    <script type="text/javascript" src="lib/validate.js"></script>
    <script type="text/javascript" src="lib/json.js"></script>
    <script type="text/javascript" src="frr_ospf_lib.js"></script>
    <script type="text/javascript">
// Help page magic
var help_page = "/help/help_frr_ospf_global_config.htm";

// Global variables
var defSelectedInstanceId = 1,
    cur_router_id = "None";
var pageArgs = searchArgs(window.location.search);
var selectedInstanceId = pageArgs.InstanceId ? parseInt(pageArgs.InstanceId, 10) : defSelectedInstanceId;

var myDynamicTable, myCapabilities, ospfInstanceIdInfo;

var oTOspfInstanceId = Array(0),
    oVOspfInstanceId = Array(0);

var oTRouterMode = Array("Enable", "Disable");
var oVRouterMode = Array("true", "false");

var oTAdminMode = Array("Enable", "Disable");
var oVAdminMode = Array("true", "false");

var oTPassiveMode = Array("False", "True");
var oVPassiveMode = Array("false", "true");

var oTDefaultRouteAlways = Array("Enable", "Disable");
var oVDefaultRouteAlways = Array("true", "false");

var oTRedistMetricType = Array("None", "External Link Type 1", "External Link Type 2");
var oVRedistMetricType = Array("metricTypeNone", "metricType1", "metricType2");

/* Send the HTML request */
function sendRequest() {
    ospfInstanceIdInfo = null;
    requestJsonDoc("ospf.status.router.get", null, requestUpdate, "ospfInstanceIdInfo");
}

/* Clear OSPF process */
function clearOspfProcess() {
    if (confirm("OSPF process will be reset.\nDo you want to proceed anyway?")) {
        requestJsonDoc("ospf.control.globals.set", [{ "ReloadProcess": true }]);
        milliSleep(500); // Made a little bit delay here to wait the OSPF re-processing
        sendRequest();
    }
}

/* Change Instance select menu */
function onChangeSelectMenu(sel) {
    selectedInstanceId = parseInt(sel.options[sel.selectedIndex].value, 10);
    sendRequest();
}

/* Change router mode select menu */
function onClickRouterModeSave() {
    if (getSelectedOptElement("RouterMode").text == "Enable") {
        requestJsonDoc("ospf.config.process.add", [selectedInstanceId]);
        milliSleep(500); // Made a little bit delay here to wait the OSPF re-processing
        sendRequest();
    }
    return true;
}

/* Change "Router ID" radio button */
function onChangeRadioRouterId() {
    $("RouterId").disabled = (this.id == "AutoRouterId") ? true : false;
    restoreFiledValue("RouterId", "config", selectedInstanceId, "RouterId");
}

/* Change "Default Metirc" radio button */
function onChangeRadioDefMetric() {
    $("DefMetricVal").disabled = (this.id == "AutoDefMetric") ? true : false;
    restoreFiledValue("DefMetricVal", "config", selectedInstanceId, "DefMetricVal");
}

/* Change "Redistribute Static Metric" radio button */
function onChangeRadioStaticMetric() {
    $("StaticRedistMetricVal").disabled = (this.id == "AutoStaticMetric") ? true : false;
    restoreFiledValue("StaticRedistMetricVal", "config", selectedInstanceId, "StaticRedistMetricVal");
}

/* Change "Redistribute Connected Metric" radio button */
function onChangeRadioConnectedMetric() {
    $("ConnectedRedistMetricVal").disabled = (this.id == "AutoConnectedMetric") ? true : false;
    restoreFiledValue("ConnectedRedistMetricVal", "config", selectedInstanceId, "ConnectedRedistMetricVal");
}

/* Change "Redistribute RIP Metric" radio button */
function onChangeRadioRipMetric() {
    $("RipRedistMetricVal").disabled = (this.id == "AutoRipMetric") ? true : false;
    restoreFiledValue("RipRedistMetricVal", "config", selectedInstanceId, "RipRedistMetricVal");
}

/* Change "Redistribute default route" radio button */
function onChangeRadioDefaultRouteMetric() {
    $("DefaultRouteRedistMetricVal").disabled = (this.id == "AutoDefaultRouteMetric") ? true : false;
    restoreFiledValue("DefaultRouteRedistMetricVal", "config", selectedInstanceId, "DefaultRouteRedistMetricVal");
}

/* Change "Redistribute Metric Type" select menu */
function onChangeRedistMetricType(redist_type) {
    var is_metricTypeNone;
    if (redist_type == "static") {
        is_metricTypeNone = getSelectedOptElement("StaticRedistMetricType").value == "metricTypeNone";
        $("AutoStaticMetric").disabled = is_metricTypeNone;
        $("SpecificStaticMetric").disabled = is_metricTypeNone;
        if (is_metricTypeNone) {
            $("StaticRedistMetricVal").disabled = true;
        } else if ($("SpecificStaticMetric").checked) {
            $("StaticRedistMetricVal").disabled = false;
        }
        restoreFiledValue("StaticRedistMetricVal", "config", selectedInstanceId, "StaticRedistMetricVal");
    } else if (redist_type == "connected") {
        is_metricTypeNone = getSelectedOptElement("ConnectedRedistMetricType").value == "metricTypeNone";
        $("AutoConnectedMetric").disabled = is_metricTypeNone;
        $("SpecificConnectedMetric").disabled = is_metricTypeNone;
        if (is_metricTypeNone) {
            $("ConnectedRedistMetricVal").disabled = true;
        } else if ($("SpecificConnectedMetric").checked) {
            $("ConnectedRedistMetricVal").disabled = false;
        }
        restoreFiledValue("ConnectedRedistMetricVal", "config", selectedInstanceId, "ConnectedRedistMetricVal");
    } else if (redist_type == "rip") {
        is_metricTypeNone = getSelectedOptElement("RipRedistMetricType").value == "metricTypeNone";
        $("AutoRipMetric").disabled = is_metricTypeNone;
        $("SpecificRipMetric").disabled = is_metricTypeNone;
        if (is_metricTypeNone) {
            $("RipRedistMetricVal").disabled = true;
        } else if ($("SpecificRipMetric").checked) {
            $("RipRedistMetricVal").disabled = false;
        }
        restoreFiledValue("RipRedistMetricVal", "config", selectedInstanceId, "RipRedistMetricVal");
    } else if (redist_type == "default_route") {
        is_metricTypeNone = getSelectedOptElement("DefaultRouteRedistMetricType").value == "metricTypeNone";
        $("AutoDefaultRouteMetric").disabled = is_metricTypeNone;
        $("SpecificDefaultRouteMetric").disabled = is_metricTypeNone;
        $("DefaultRouteRedistAlways").disabled = is_metricTypeNone;
        if (is_metricTypeNone) {
            $("DefaultRouteRedistMetricVal").disabled = true;
        } else if ($("SpecificDefaultRouteMetric").checked) {
            $("DefaultRouteRedistMetricVal").disabled = false;
        }
        restoreFiledValue("DefaultRouteRedistMetricVal", "config", selectedInstanceId, "DefaultRouteRedistMetricVal");
    }
}
/* Change "Stub router mode" select menu */
function onChangeStubRouterMode(mode_type) {
    var is_specific;
    if (mode_type == "OnStartup") {
        mode_val = getSelectedOptElement("IsOnStartup").value == "false";
        $("OnStartupInterval").disabled = mode_val;
        restoreFiledValue("OnStartupInterval", "config", selectedInstanceId, "OnStartupInterval");
    } else if (mode_type == "OnShutdown") {
        mode_val = getSelectedOptElement("IsOnShutdown").value == "false";
        $("OnShutdownInterval").disabled = mode_val;
        restoreFiledValue("OnShutdownInterval", "config", selectedInstanceId, "OnShutdownInterval");
    }
}

/* Check function before send out the HTML request */
function checkForm() {
    if (getSelectedOptElement("NewRouterMode").text == "Disable") {
        var recv_json = myDynamicTable.getRecvJson("config");
        for (var idx = 0; idx < recv_json.length; idx++) {
              if (recv_json[idx].key != selectedInstanceId) {
                  continue;
              }
              if (recv_json[idx].val.IsOnShutdown === true) {
                if (confirm("OSPF process will be terminated when stub router advertisment is complete.\nDo you want to proceed anyway?")) {
                    requestJsonDoc("ospf.config.process.del", [selectedInstanceId], sendRequest);
                }
              } else {
                if (confirm("OSPF process will be terminated.\nDo you want to proceed anyway?")) {
                    requestJsonDoc("ospf.config.process.del", [selectedInstanceId], sendRequest);
                }
              }
              return false;
        }
    }

    // Router ID 0.0.0.0 can not be specific configured value
    if ($("SpecificRouterId").checked) {
        if (Ipv4Str2Val($("RouterId").value) < myCapabilities.MinRouterId ||
            Ipv4Str2Val($("RouterId").value) > myCapabilities.MaxRouterId) {
            return GiveAlert("Invalid OSPF router ID. The allowed range is from " +  Val2Ipv4Str(myCapabilities.MinRouterId) + " to " + Val2Ipv4Str(myCapabilities.MaxRouterId) + ".", $("RouterId"));
        }
    }

    // Apply new setting to filed "IsSpecificRouterId"
    $("IsSpecificRouterId").checked = $("SpecificRouterId").checked;

    // Apply new setting to filed "IsSpecificDefMetric"
    $("IsSpecificDefMetric").checked = $("SpecificDefMetric").checked;

    // Apply new setting to filed "StaticRedistIsSpecificMetric"
    $("StaticRedistIsSpecificMetric").checked = $("SpecificStaticMetric").checked;

    // Apply new setting to filed "ConnectedRedistIsSpecificMetric"
    $("ConnectedRedistIsSpecificMetric").checked = $("SpecificConnectedMetric").checked;

    if (myCapabilities.IsRipRedistributedSupported) {
        // Apply new setting to filed "RipRedistIsSpecificMetric"
        $("RipRedistIsSpecificMetric").checked = $("SpecificRipMetric").checked;
    }

    // Apply new setting to filed "DefaultRouteRedistIsSpecificMetric"
    $("DefaultRouteRedistIsSpecificMetric").checked = $("SpecificDefaultRouteMetric").checked;

    // Trim the unnecessary fields from the HTTP POST JSON data
    var trim_ids = Array();
    $('myTableContent').getElements('input[name^=RouterMode]').each(function (elm) {
        trim_ids.push(elm.id);
    });
    $('myTableContent').getElements('input[name^=CurRouterId]').each(function (elm) {
        trim_ids.push(elm.id);
    });
    $('myTableContent').getElements('input[name^=RadioRouterId]').each(function (elm) {
        trim_ids.push(elm.id);
    });
    $('myTableContent').getElements('input[name^=RadioDefMetric]').each(function (elm) {
        trim_ids.push(elm.id);
    });
    myDynamicTable.setTrimIds(trim_ids);

    return true;
}

/* Add column row in the dynamic table. */
function addRow(key, val) {
    var row = [
        {
            fields: [
                { type: "conf_hdr", params: ["OSPF Router Mode"], "colspan": "3" },
                {
                    type: "select",
                    params: [oTRouterMode, oVRouterMode, "true", "cr", "NewRouterMode", "100%", 4]
                  }
            ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Router ID"], "colspan": "3" },
                {
                    type: "chkbox",
                    params: [val.IsSpecificRouterId, "c", "IsSpecificRouterId"],
                    "hidden": true
                },
                {
                    type: "radio",
                    params: [val.IsSpecificRouterId ? 0 : 1, "c", "RadioRouterId", "AutoRouterId", "Auto"],
                    "onchange": onChangeRadioRouterId
                },
                { type: "input", params: [cur_router_id, "cr", "CurRouterId", 15, 15], "disabled": true },
                {
                    type: "radio",
                    params: [val.IsSpecificRouterId ? 1 : 0, "c", "RadioRouterId", "SpecificRouterId", "Specific"],
                    "onchange": onChangeRadioRouterId
                },
                {
                    type: "input",
                    params: [val.RouterId, "cr", "RouterId", 15, 15, null, null, !val.IsSpecificRouterId],
                    validate: { func: isIpStr, params: ["RouterId", false, "Router ID", 2] }
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Default Passive Mode"], "colspan": "3" },
                {
                    type: "select",
                    params: [oTPassiveMode, oVPassiveMode, val.DefPassiveInterface ? "true" : "false", "cr", "DefPassiveInterface", "100%", 4]
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Default Metric"], "colspan": "3" },
                {
                    type: "chkbox",
                    params: [val.IsSpecificDefMetric, "c", "IsSpecificDefMetric"],
                    "hidden": true
                },
                {
                    type: "radio",
                    params: [val.IsSpecificDefMetric ? 0 : 1, "c", "RadioDefMetric", "AutoDefMetric", "Auto"],
                    "onchange": onChangeRadioDefMetric
                },
                { type: "text", params: [""] },
                {
                    type: "radio",
                    params: [val.IsSpecificDefMetric ? 1 : 0, "c", "RadioDefMetric", "SpecificDefMetric", "Specific"],
                    "onchange": onChangeRadioDefMetric
                },
                {
                    type: "input",
                    params: [val.DefMetricVal, "cr", "DefMetricVal", 15, 8, null, null, !val.IsSpecificDefMetric],
                    validate: { func: isWithinRange, params: ["DefMetricVal", myCapabilities.MinRedistributeCost, myCapabilities.MaxRedistributeCost, "Default Metric"] }
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Redistribute"], "rowspan": myCapabilities.IsRipRedistributedSupported ? "6" : "4" },
                { type: "conf_hdr", params: ["Static"], "rowspan": "2" },
                { type: "conf_hdr", params: ["Metric Type"] },
                {
                    type: "select",
                    params: [oTRedistMetricType, oVRedistMetricType, val.StaticRedistMetricType, "cr", "StaticRedistMetricType", "100%", 4],
                    "onchange": function() {onChangeRedistMetricType('static');}
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Metric Value"] },
                {
                    type: "chkbox",
                    params: [val.StaticRedistIsSpecificMetric, "c", "StaticRedistIsSpecificMetric"],
                    "hidden": true
                },
                {
                    type: "radio",
                    params: [val.StaticRedistIsSpecificMetric ? 0 : 1, "c", "RadioStaticMetric", "AutoStaticMetric", "Auto"],
                    "onchange": onChangeRadioStaticMetric,
                    disabled: val.StaticRedistMetricType == "metricTypeNone"
                },
                { type: "text", params: [""] },
                {
                    type: "radio",
                    params: [val.StaticRedistIsSpecificMetric ? 1 : 0, "c", "RadioStaticMetric", "SpecificStaticMetric", "Specific"],
                    "onchange": onChangeRadioStaticMetric,
                    disabled: val.StaticRedistMetricType == "metricTypeNone"
                },
                {
                    type: "input",
                    params: [val.StaticRedistMetricVal, "cr", "StaticRedistMetricVal", 15, 8, null, null, !val.StaticRedistIsSpecificMetric],
                    validate: { func: isWithinRange, params: ["StaticRedistMetricVal", myCapabilities.MinRedistributeCost, myCapabilities.MaxRedistributeCost, "Static Redistribute Metric"] },
                    disabled: val.StaticRedistMetricType == "metricTypeNone"
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Connected"], "rowspan": "2" },
                { type: "conf_hdr", params: ["Metric Type"] },
                {
                    type: "select",
                    params: [oTRedistMetricType, oVRedistMetricType, val.ConnectedRedistMetricType, "cr", "ConnectedRedistMetricType", "100%", 4],
                    "onchange": function() {onChangeRedistMetricType('connected');}
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Metric Value"] },
                {
                    type: "chkbox",
                    params: [val.ConnectedRedistIsSpecificMetric, "c", "ConnectedRedistIsSpecificMetric"],
                    "hidden": true
                },
                {
                    type: "radio",
                    params: [val.ConnectedRedistIsSpecificMetric ? 0 : 1, "c", "RadioConnectedMetric", "AutoConnectedMetric", "Auto"],
                    "onchange": onChangeRadioConnectedMetric,
                    disabled: val.ConnectedRedistMetricType == "metricTypeNone"
                },
                { type: "text", params: [""] },
                {
                    type: "radio",
                    params: [val.ConnectedRedistIsSpecificMetric ? 1 : 0, "c", "RadioConnectedMetric", "SpecificConnectedMetric", "Specific"],
                    "onchange": onChangeRadioConnectedMetric,
                    disabled: val.ConnectedRedistMetricType == "metricTypeNone"
                },
                {
                    type: "input",
                    params: [val.ConnectedRedistMetricVal, "cr", "ConnectedRedistMetricVal", 15, 8, null, null, !val.ConnectedRedistIsSpecificMetric],
                    validate: { func: isWithinRange, params: ["ConnectedRedistMetricVal", myCapabilities.MinRedistributeCost, myCapabilities.MaxRedistributeCost, "Connected Redistribute Metric"] },
                    disabled: val.ConnectedRedistMetricType == "metricTypeNone"
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["RIP"], "rowspan": "2" },
                { type: "conf_hdr", params: ["Metric Type"] },
                {
                    type: "select",
                    params: [oTRedistMetricType, oVRedistMetricType, val.RipRedistMetricType, "cr", "RipRedistMetricType", "100%", 4],
                    "onchange": function() {onChangeRedistMetricType('rip');}
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Metric Value"] },
                {
                    type: "chkbox",
                    params: [val.RipRedistIsSpecificMetric, "c", "RipRedistIsSpecificMetric"],
                    "hidden": true
                },
                {
                    type: "radio",
                    params: [val.RipRedistIsSpecificMetric ? 0 : 1, "c", "RadioRipMetric", "AutoRipMetric", "Auto"],
                    "onchange": onChangeRadioRipMetric,
                    disabled: val.RipRedistMetricType == "metricTypeNone"
                },
                { type: "text", params: [""] },
                {
                    type: "radio",
                    params: [val.RipRedistIsSpecificMetric ? 1 : 0, "c", "RadioRipMetric", "SpecificRipMetric", "Specific"],
                    "onchange": onChangeRadioRipMetric,
                    disabled: val.RipRedistMetricType == "metricTypeNone"
                },
                {
                    type: "input",
                    params: [val.RipRedistMetricVal, "cr", "RipRedistMetricVal", 15, 8, null, null, !val.RipRedistIsSpecificMetric],
                    validate: { func: isWithinRange, params: ["RipRedistMetricVal", myCapabilities.MinRedistributeCost, myCapabilities.MaxRedistributeCost, "RIP Redistribute Metric"] },
                    disabled: val.RipRedistMetricType == "metricTypeNone"
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Stub Router"], "rowspan": "5" },
                { type: "conf_hdr", params: ["On Startup"], "rowspan": "2" },
                { type: "conf_hdr", params: ["Mode"] },
                {
                    type: "select",
                    params: [oTAdminMode, oVAdminMode, val.IsOnStartup ? "true" : "false", "cr", "IsOnStartup", "100%", 4],
                    "onchange": function() {onChangeStubRouterMode('OnStartup');}
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Interval"] },
                {
                    type: "input",
                    params: [val.OnStartupInterval, "cr", "OnStartupInterval", 8, 5, null, 4, !val.IsOnStartup],
                    validate: { func: isWithinRange, params: ["OnStartupInterval", myCapabilities.MinRouterLsaOnStartup, myCapabilities.MaxRouterLsaOnStartup, "Stub router on startup interval"] }
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["On Shutdown"], "rowspan": "2" },
                { type: "conf_hdr", params: ["Mode"] },
                {
                    type: "select",
                    params: [oTAdminMode, oVAdminMode, val.IsOnShutdown ? "true" : "false", "cr", "IsOnShutdown", "100%", 4],
                    "onchange": function() {onChangeStubRouterMode('OnShutdown');}
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Interval"] },
                {
                    type: "input",
                    params: [val.OnShutdownInterval, "cr", "OnShutdownInterval", 8, 3, null, 4, !val.IsOnShutdown],
                    validate: { func: isWithinRange, params: ["OnShutdownInterval", myCapabilities.MinRouterLsaOnShutdown, myCapabilities.MaxRouterLsaOnShutdown, "Stub router on shutdown interval"] }
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Administrative Mode"], "colspan": "2" },
                {
                    type: "select",
                    params: [oTAdminMode, oVAdminMode, val.IsAdministrative ? "true" : "false", "cr", "IsAdministrative", "100%", 4]
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Default Route Redistribution"], "rowspan": "3", "colspan": "2" },
                { type: "conf_hdr", params: ["Metric Type"]},
                {
                    type: "select",
                    params: [oTRedistMetricType, oVRedistMetricType, val.DefaultRouteRedistMetricType, "cr", "DefaultRouteRedistMetricType", "100%", 4],
                    "onchange": function() {onChangeRedistMetricType('default_route');}
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Metric Value"] },
                {
                    type: "chkbox",
                    params: [val.DefaultRouteRedistIsSpecificMetric, "c", "DefaultRouteRedistIsSpecificMetric"],
                    "hidden": true
                },
                {
                    type: "radio",
                    params: [val.DefaultRouteRedistIsSpecificMetric ? 0 : 1, "c", "RadioDefaultRouteMetric", "AutoDefaultRouteMetric", "Auto"],
                    "onchange": onChangeRadioDefaultRouteMetric,
                    disabled: val.DefaultRouteRedistMetricType == "metricTypeNone"
                },
                { type: "text", params: [""] },
                {
                    type: "radio",
                    params: [val.DefaultRouteRedistIsSpecificMetric ? 1 : 0, "c", "RadioDefaultRouteMetric", "SpecificDefaultRouteMetric", "Specific"],
                    "onchange": onChangeRadioDefaultRouteMetric,
                    disabled: val.DefaultRouteRedistMetricType == "metricTypeNone"
                },
                {
                    type: "input",
                    params: [val.DefaultRouteRedistMetricVal, "cr", "DefaultRouteRedistMetricVal", 15, 8, null, null, !val.DefaultRouteRedistIsSpecificMetric],
                    validate: { func: isWithinRange, params: ["DefaultRouteRedistMetricVal", myCapabilities.MinRedistributeCost, myCapabilities.MaxRedistributeCost, "Default route Redistribute Metric"] },
                    disabled: val.DefaultRouteRedistMetricType == "metricTypeNone"
                }
          ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Always"] },
                {
                    type: "select",
                    params: [oTDefaultRouteAlways, oVDefaultRouteAlways, val.DefaultRouteRedistAlways ? "true" : "false", "cr", "DefaultRouteRedistAlways", "100%", 4],
                    disabled: val.DefaultRouteRedistMetricType == "metricTypeNone"
                }
            ]
        },
        {
            fields: [
                { type: "conf_hdr", params: ["Administrative Distance"], "colspan": "3" },
                {
                    type: "input",
                    params: [val.AdminDistance, "cr", "AdminDistance", 15, 3, null, 4],
                    validate: { func: isWithinRange, params: ["AdminDistance", myCapabilities.MinAdminDistance, myCapabilities.MaxAdminDistance, "Administrative Distance"] }
                }
            ]
        }
    ];

    // Removed unsupported feature
    if (!myCapabilities.IsRipRedistributedSupported) {
         param_names.splice(8, 2);
    }

    return row;
}

/* Add table rows in the dynamic table */
function addRows(recv_json) {
    var table_rows = new Array();

    // Add single row
    Object.each(recv_json, function (record) {
        table_rows = table_rows.concat(addRow(record.key, record.val));
    });

    return table_rows;
}

/* Process the received JSON data */
function processUpdate(recv_json, name) {
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("processUpdate() failed: Get dynamic data failed.");
        return;
    }

    // Filter the records which are matched the selected OSPF instance ID
    // or equals the default configuration.
    var myConf = Array();
    Object.each(recv_json, function (record) {
        if (selectedInstanceId == record.key) {
            myConf.push(record);
        }
    });

    // Save the received JSON data (both of the original and filted)
    myDynamicTable.saveRecvJson(name, myConf);

    // Update visble tables
    SetVisible("myTableContent", myConf.length);
    SetVisible("RouterModeTable", !myConf.length);
    SetVisible("RouterModeButtons", !myConf.length);
    if (!myConf.length) {
        return;
    }

    // Add table rows
    var table_rows = addRows(myConf);
    myDynamicTable.addRows(table_rows);

    // Update this dynamic table
    myDynamicTable.update();

    // Add buttons
    myDynamicTable.addSubmitButton(name, "ospf.config.router", sendRequest);
    myDynamicTable.addResetButton();
}

/* Update the received HTML request */
function requestUpdate(recv_json, name) {
    // Restore table content
    myDynamicTable.restore();

    if (name == "capabilities") {
        if (recv_json) {
            // Clone a new one and save to global variable
            myCapabilities = myDynamicTable.cloneRecvJson(recv_json);
        } else {
            alert("requestUpdate() failed: Get dynamic data(capabilities) failed.");
            return;
        }
    } else if (name == "ospfInstanceIdInfo") {
        if (recv_json) {
            // Clone a new one and save to global variable
            ospfInstanceIdInfo = myDynamicTable.cloneRecvJson(recv_json);

            // Update the OPSF instance ID selected menu.
            oTOspfInstanceId.length = oVOspfInstanceId.length = 0; // Restore to default
            cur_router_id = "None";
            Object.each(recv_json, function (record) {
                oTOspfInstanceId.push(record.key);
                oVOspfInstanceId.push(record.key);
                if (selectedInstanceId == record.key) {
                    cur_router_id = record.val.RouterId;
                }
            });
            if (!recv_json.length) { // Given default instance ID 1
                oTOspfInstanceId.push(1);
                oVOspfInstanceId.push(1);
                selectedInstanceId = 1;
            }
        } else {
            alert("requestUpdate() failed: Get dynamic data(ospfInstanceIdInfo) failed.");
            return;
        }
    }

    if (myCapabilities && ospfInstanceIdInfo) {
        UpdateIdSelect("ospfInstanceIdSelectMenu", oTOspfInstanceId, oVOspfInstanceId, selectedInstanceId);
        requestJsonDoc("ospf.config.router.get", null, processUpdate, "config");
    }
}

function jsonReqSendCb(json_params) {
    json_params.unshift(selectedInstanceId);
    return true;
}

/* Initialize resources when HTML document is ready */
window.addEvent('domready', function () {
    // Create a from with table body for receive/transmit JSON data
    myDynamicTable = new DynamicTable("myTableContent", "config", "columnOrder", { func: checkForm, params: [] });
    myDynamicTable.jsonReqSendCb(jsonReqSendCb);

    // This table requires three JSON data(capabilities/config/ospfInstanceIdInfo).
    // To ensure the completed data, we request the configured data after the
    // capabilities data is received and it is requested only one time.
    requestJsonDoc("ospf.capabilities.get", null, requestUpdate, "capabilities");
    sendRequest();
});
    </script>
</head>

<body class="content">
    <h1>OSPF Global Configuration</h1>
    <table summary="Router Mode Table" id="RouterModeTable" class="config">
        <tr>
            <td class="param_label">OSPF Router Mode</td>
            <td>
                <select id="RouterMode">
                    <option value="false" selected>Disable</option>
                    <option value="true">Enable</option>
                </select>
            </td>
        </tr>
    </table>
    <p id="RouterModeButtons">
        <input type="button" value="Save" onClick="onClickRouterModeSave();">
        <input type="button" value="Reset" onclick="UpdateIdSetSelect('RouterMode', 'disable');">
    </p>
    <div class="refreshbar">
        <!-- Instance ID&nbsp; -->
        <!-- select id="ospfInstanceIdSelectMenu" onchange="onChangeSelectMenu(this);">
            <option value="0">All</option>
        </select -->
        &nbsp;&nbsp;&nbsp;&nbsp;
        <input type="button" value="Clear OSPF Process" onClick='clearOspfProcess(); this.blur();'>
        <img id="update" alt="" src="images/updating.gif">
    </div>
    <div id="myTableContent"></div>
</body>

</html>
