commit 362483fffde457385c39d84b255e16fe37c45b0b
Author: Rene Nielsen <rene.nielsen@microchip.com>
Date:   Tue Nov 3 13:56:50 2020 +0100

    1030-fix-neighbor-detail.patch

diff --git a/ospfd/ospf_vty.c b/ospfd/ospf_vty.c
index 3e2483a..42da816 100644
--- a/ospfd/ospf_vty.c
+++ b/ospfd/ospf_vty.c
@@ -5041,11 +5041,7 @@ static void show_ip_ospf_neighbor_detail_sub(struct vty *vty,
 			nbr->t_ls_upd != NULL ? "on" : "off");
 
 	if (use_json) {
-		if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
-			json_object_object_add(json, "noNbrId", json_sub);
-		else
-			json_object_object_add(json, inet_ntoa(nbr->router_id),
-					       json_sub);
+			json_object_array_add(json, json_sub);
 	}
 
 	ospf_bfd_show_info(vty, nbr->bfd_info, json, use_json, 0);
@@ -5057,11 +5053,11 @@ static int show_ip_ospf_neighbor_id_common(struct vty *vty, struct ospf *ospf,
 					   uint8_t use_json, uint8_t use_vrf)
 {
 	struct listnode *node;
-	struct ospf_neighbor *nbr;
+	struct ospf_neighbor *nbr, *prev_nbr = NULL;
 	struct ospf_interface *oi;
 	struct in_addr router_id;
 	int ret;
-	json_object *json = NULL;
+	json_object *json = NULL, *json_neigh_array = NULL;
 
 	if (use_json)
 		json = json_object_new_object();
@@ -5089,9 +5085,33 @@ static int show_ip_ospf_neighbor_id_common(struct vty *vty, struct ospf *ospf,
 
 	for (ALL_LIST_ELEMENTS_RO(ospf->oiflist, node, oi)) {
 		if ((nbr = ospf_nbr_lookup_by_routerid(oi->nbrs, &router_id))) {
-			show_ip_ospf_neighbor_detail_sub(vty, oi, nbr, json,
+			if (use_json) {
+				char neigh_str[INET_ADDRSTRLEN];
+
+				if (prev_nbr && !IPV4_ADDR_SAME(&prev_nbr->src, &nbr->src)) {
+					/* Start new neigh list */
+					json_neigh_array = NULL;
+				}
+
+				if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
+					strlcpy(neigh_str, "neighbor", sizeof(neigh_str));
+				else
+					strlcpy(neigh_str, inet_ntoa(nbr->router_id), sizeof(neigh_str));
+
+				json_object_object_get_ex(json, neigh_str, &json_neigh_array);
+
+				if (!json_neigh_array) {
+					json_neigh_array = json_object_new_array();
+					if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
+						json_object_object_add(json, "noNbrId", json_neigh_array);
+					else
+						json_object_object_add(json, inet_ntoa(nbr->router_id), json_neigh_array);
+				}
+			}
+			show_ip_ospf_neighbor_detail_sub(vty, oi, nbr, json_neigh_array,
 							 use_json);
 		}
+		prev_nbr = nbr;
 	}
 
 	if (use_json) {
@@ -5189,17 +5209,45 @@ static int show_ip_ospf_neighbor_detail_common(struct vty *vty,
 
 	for (ALL_LIST_ELEMENTS_RO(ospf->oiflist, node, oi)) {
 		struct route_node *rn;
-		struct ospf_neighbor *nbr;
+		struct ospf_neighbor *nbr, *prev_nbr = NULL;
+		json_object *json_neigh_array = NULL;
 
 		for (rn = route_top(oi->nbrs); rn; rn = route_next(rn)) {
 			if ((nbr = rn->info)) {
 				if (nbr != oi->nbr_self) {
 					if (nbr->state != NSM_Down) {
+						if (use_json) {
+							char neigh_str[INET_ADDRSTRLEN];
+
+							if (prev_nbr &&
+							    !IPV4_ADDR_SAME(&prev_nbr->src, &nbr->src)) {
+								/* Start new neigh list */
+								json_neigh_array = NULL;
+							}
+
+							if (nbr->state == NSM_Attempt &&
+							    nbr->router_id.s_addr == 0)
+								strlcpy(neigh_str, "neighbor", sizeof(neigh_str));
+							else
+								strlcpy(neigh_str, inet_ntoa(nbr->router_id), sizeof(neigh_str));
+
+							json_object_object_get_ex(json_vrf, neigh_str, &json_neigh_array);
+
+							if (!json_neigh_array) {
+								json_neigh_array = json_object_new_array();
+								if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
+									json_object_object_add(json_vrf, "noNbrId", json_neigh_array);
+								else
+									json_object_object_add(json_vrf, inet_ntoa(nbr->router_id), json_neigh_array);
+							}
+						}
+
 						show_ip_ospf_neighbor_detail_sub(
-							vty, oi, nbr, json_vrf,
+							vty, oi, nbr, json_neigh_array,
 							use_json);
 					}
 				}
+				prev_nbr = nbr;
 			}
 		}
 	}
@@ -5367,16 +5415,44 @@ static int show_ip_ospf_neighbor_detail_all_common(struct vty *vty,
 
 	for (ALL_LIST_ELEMENTS_RO(ospf->oiflist, node, oi)) {
 		struct route_node *rn;
-		struct ospf_neighbor *nbr;
+		struct ospf_neighbor *nbr, *prev_nbr = NULL;
 		struct ospf_nbr_nbma *nbr_nbma;
+        json_object *json_neigh_array = NULL;
 
 		for (rn = route_top(oi->nbrs); rn; rn = route_next(rn))
-			if ((nbr = rn->info))
+			if ((nbr = rn->info)) {
 				if (nbr != oi->nbr_self)
-					if (nbr->state != NSM_Down)
+					if (nbr->state != NSM_Down) {
+						if (use_json) {
+							char neigh_str[INET_ADDRSTRLEN];
+
+							if (prev_nbr && !IPV4_ADDR_SAME(&prev_nbr->src, &nbr->src)) {
+								/* Start new neigh list */
+								json_neigh_array = NULL;
+							}
+
+							if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
+								strlcpy(neigh_str, "neighbor", sizeof(neigh_str));
+							else
+								strlcpy(neigh_str, inet_ntoa(nbr->router_id), sizeof(neigh_str));
+
+							json_object_object_get_ex(json_vrf, neigh_str, &json_neigh_array);
+
+							if (!json_neigh_array) {
+								json_neigh_array = json_object_new_array();
+								if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
+									json_object_object_add(json_vrf, "noNbrId", json_neigh_array);
+								else
+									json_object_object_add(json_vrf, inet_ntoa(nbr->router_id), json_neigh_array);
+							}
+						}
+
 						show_ip_ospf_neighbor_detail_sub(
 							vty, oi, rn->info,
-							json_vrf, use_json);
+							json_neigh_array, use_json);
+					}
+				prev_nbr = nbr;
+			}
 
 		if (oi->type == OSPF_IFTYPE_NBMA) {
 			struct listnode *nd;
@@ -5538,8 +5614,8 @@ static int show_ip_ospf_neighbor_int_detail_common(struct vty *vty,
 	struct ospf_interface *oi;
 	struct interface *ifp;
 	struct route_node *rn, *nrn;
-	struct ospf_neighbor *nbr;
-	json_object *json = NULL;
+	struct ospf_neighbor *nbr, *prev_nbr = NULL;
+	json_object *json = NULL, *json_neigh_array = NULL;
 
 	if (use_json)
 		json = json_object_new_object();
@@ -5569,11 +5645,37 @@ static int show_ip_ospf_neighbor_int_detail_common(struct vty *vty,
 			     nrn = route_next(nrn)) {
 				if ((nbr = nrn->info)) {
 					if (nbr != oi->nbr_self) {
-						if (nbr->state != NSM_Down)
+						if (nbr->state != NSM_Down) {
+							if (use_json) {
+								char neigh_str[INET_ADDRSTRLEN];
+
+								if (prev_nbr && !IPV4_ADDR_SAME(&prev_nbr->src, &nbr->src)) {
+									/* Start new neigh list */
+									json_neigh_array = NULL;
+								}
+
+								if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
+									strlcpy(neigh_str, "neighbor", sizeof(neigh_str));
+								else
+									strlcpy(neigh_str, inet_ntoa(nbr->router_id), sizeof(neigh_str));
+
+								json_object_object_get_ex(json, neigh_str, &json_neigh_array);
+
+								if (!json_neigh_array) {
+									json_neigh_array = json_object_new_array();
+								if (nbr->state == NSM_Attempt && nbr->router_id.s_addr == 0)
+									json_object_object_add(json, "noNbrId", json_neigh_array);
+								else
+									json_object_object_add(json, inet_ntoa(nbr->router_id), json_neigh_array);
+								}
+							}
+
 							show_ip_ospf_neighbor_detail_sub(
 								vty, oi, nbr,
-								json, use_json);
+								json_neigh_array, use_json);
+						}
 					}
+					prev_nbr = nbr;
 				}
 			}
 		}
