commit 5765487e09157b9da9aafdbbf2584e5ec10c7e88
Author: Rene Nielsen <rene.nielsen@microchip.com>
Date:   Tue Oct 6 13:18:48 2020 +0200

    4.0-1210

diff --git a/ospf6d/ospf6_abr.c b/ospf6d/ospf6_abr.c
index 884761149..fed033c00 100644
--- a/ospf6d/ospf6_abr.c
+++ b/ospf6d/ospf6_abr.c
@@ -1015,25 +1015,31 @@ static char *ospf6_inter_area_prefix_lsa_get_prefix_str(struct ospf6_lsa *lsa,
 }
 
 static int ospf6_inter_area_prefix_lsa_show(struct vty *vty,
-					    struct ospf6_lsa *lsa)
+					    struct ospf6_lsa *lsa,
+					    json_object *json, u_char use_json)
 {
 	struct ospf6_inter_prefix_lsa *prefix_lsa;
 	char buf[INET6_ADDRSTRLEN];
 
 	prefix_lsa = (struct ospf6_inter_prefix_lsa *)OSPF6_LSA_HEADER_END(
 		lsa->header);
-
-	vty_out(vty, "     Metric: %lu\n",
-		(u_long)OSPF6_ABR_SUMMARY_METRIC(prefix_lsa));
-
-	ospf6_prefix_options_printbuf(prefix_lsa->prefix.prefix_options, buf,
-				      sizeof(buf));
-	vty_out(vty, "     Prefix Options: %s\n", buf);
-
-	vty_out(vty, "     Prefix: %s\n",
-		ospf6_inter_area_prefix_lsa_get_prefix_str(lsa, buf,
-							   sizeof(buf), 0));
-
+        if(use_json) {
+		json_object_int_add(json, "metric", (u_long)OSPF6_ABR_SUMMARY_METRIC(prefix_lsa));
+		ospf6_prefix_options_printbuf(prefix_lsa->prefix.prefix_options, buf,
+					      sizeof(buf));
+		json_object_string_add(json, "prefixOptions", buf);
+		json_object_string_add(json, "prefix",
+				       ospf6_inter_area_prefix_lsa_get_prefix_str(lsa, buf, sizeof(buf), 0)); 
+	} else {
+		vty_out(vty, "     Metric: %lu\n",
+			(u_long)OSPF6_ABR_SUMMARY_METRIC(prefix_lsa));
+		ospf6_prefix_options_printbuf(prefix_lsa->prefix.prefix_options, buf,
+					      sizeof(buf));
+		vty_out(vty, "     Prefix Options: %s\n", buf);
+		vty_out(vty, "     Prefix: %s\n",
+			ospf6_inter_area_prefix_lsa_get_prefix_str(lsa, buf,
+								   sizeof(buf), 0));
+	}
 	return 0;
 }
 
@@ -1057,22 +1063,29 @@ static char *ospf6_inter_area_router_lsa_get_prefix_str(struct ospf6_lsa *lsa,
 }
 
 static int ospf6_inter_area_router_lsa_show(struct vty *vty,
-					    struct ospf6_lsa *lsa)
+					    struct ospf6_lsa *lsa,
+					    json_object *json,
+					    u_char use_json)
 {
 	struct ospf6_inter_router_lsa *router_lsa;
 	char buf[64];
 
 	router_lsa = (struct ospf6_inter_router_lsa *)OSPF6_LSA_HEADER_END(
 		lsa->header);
-
-	ospf6_options_printbuf(router_lsa->options, buf, sizeof(buf));
-	vty_out(vty, "     Options: %s\n", buf);
-	vty_out(vty, "     Metric: %lu\n",
-		(u_long)OSPF6_ABR_SUMMARY_METRIC(router_lsa));
-
-	inet_ntop(AF_INET, &router_lsa->router_id, buf, sizeof(buf));
-	vty_out(vty, "     Destination Router ID: %s\n", buf);
-
+	if(use_json) {
+		json_object_int_add(json, "metric", (u_long)OSPF6_ABR_SUMMARY_METRIC(router_lsa));
+		ospf6_options_printbuf(router_lsa->options, buf, sizeof(buf));
+		json_object_string_add(json, "optionsList", buf);
+		inet_ntop(AF_INET, &router_lsa->router_id, buf, sizeof(buf));
+		json_object_string_add(json, "destination", buf);
+	} else{
+		ospf6_options_printbuf(router_lsa->options, buf, sizeof(buf));
+		vty_out(vty, "     Options: %s\n", buf);
+		vty_out(vty, "     Metric: %lu\n",
+			(u_long)OSPF6_ABR_SUMMARY_METRIC(router_lsa));
+		inet_ntop(AF_INET, &router_lsa->router_id, buf, sizeof(buf));
+		vty_out(vty, "     Destination Router ID: %s\n", buf);
+	}
 	return 0;
 }
 
diff --git a/ospf6d/ospf6_asbr.c b/ospf6d/ospf6_asbr.c
index 745b87b89..cf469baa2 100644
--- a/ospf6d/ospf6_asbr.c
+++ b/ospf6d/ospf6_asbr.c
@@ -1407,7 +1407,8 @@ static char *ospf6_as_external_lsa_get_prefix_str(struct ospf6_lsa *lsa,
 	return (buf);
 }
 
-static int ospf6_as_external_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
+static int ospf6_as_external_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,
+				      json_object *json, u_char use_json)
 {
 	struct ospf6_as_external_lsa *external;
 	char buf[64];
@@ -1424,7 +1425,19 @@ static int ospf6_as_external_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 								      : '-'),
 		 (CHECK_FLAG(external->bits_metric, OSPF6_ASBR_BIT_T) ? 'T'
 								      : '-'));
-
+	if(use_json) {
+		json_object_int_add(json, "metric",
+				    (u_long)OSPF6_ASBR_METRIC(external));
+		json_object_string_add(json, "prefix",
+		                       ospf6_as_external_lsa_get_prefix_str(lsa,
+				                          buf, sizeof(buf), 0));
+		if (CHECK_FLAG(external->bits_metric, OSPF6_ASBR_BIT_F)) {
+			json_object_string_add(json, "forwardAddress",
+			          ospf6_as_external_lsa_get_prefix_str(lsa, buf,
+							       sizeof(buf), 1));
+		}
+		return 0;
+	}
 	vty_out(vty, "     Bits: %s\n", buf);
 	vty_out(vty, "     Metric: %5lu\n",
 		(u_long)OSPF6_ASBR_METRIC(external));
diff --git a/ospf6d/ospf6_intra.c b/ospf6d/ospf6_intra.c
index 77653ea33..6f13984d7 100644
--- a/ospf6d/ospf6_intra.c
+++ b/ospf6d/ospf6_intra.c
@@ -29,6 +29,7 @@
 #include "table.h"
 #include "vty.h"
 #include "command.h"
+#include <lib/json.h>
 #include "vrf.h"
 
 #include "ospf6_proto.h"
@@ -92,12 +93,14 @@ static char *ospf6_router_lsa_get_nbr_id(struct ospf6_lsa *lsa, char *buf,
 	return buf;
 }
 
-static int ospf6_router_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
+static int ospf6_router_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,
+				 json_object *json, u_char use_json)
 {
 	char *start, *end, *current;
 	char buf[32], name[32], bits[16], options[32];
 	struct ospf6_router_lsa *router_lsa;
 	struct ospf6_router_lsdesc *lsdesc;
+	json_object *json_array_links = NULL;
 
 	router_lsa =
 		(struct ospf6_router_lsa *)((char *)lsa->header
@@ -105,7 +108,10 @@ static int ospf6_router_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 
 	ospf6_capability_printbuf(router_lsa->bits, bits, sizeof(bits));
 	ospf6_options_printbuf(router_lsa->options, options, sizeof(options));
-	vty_out(vty, "    Bits: %s Options: %s\n", bits, options);
+	if(use_json)
+		json_object_string_add(json, "optionsList", options);
+	else
+		vty_out(vty, "    Bits: %s Options: %s\n", bits, options);
 
 	start = (char *)router_lsa + sizeof(struct ospf6_router_lsa);
 	end = (char *)lsa->header + ntohs(lsa->header->length);
@@ -115,28 +121,50 @@ static int ospf6_router_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 		lsdesc = (struct ospf6_router_lsdesc *)current;
 
 		if (lsdesc->type == OSPF6_ROUTER_LSDESC_POINTTOPOINT)
-			snprintf(name, sizeof(name), "Point-To-Point");
+			snprintf(name, sizeof(name), "another Router (point-to-point)");
 		else if (lsdesc->type == OSPF6_ROUTER_LSDESC_TRANSIT_NETWORK)
-			snprintf(name, sizeof(name), "Transit-Network");
+			snprintf(name, sizeof(name), "a Transit Network");
 		else if (lsdesc->type == OSPF6_ROUTER_LSDESC_STUB_NETWORK)
-			snprintf(name, sizeof(name), "Stub-Network");
+			snprintf(name, sizeof(name), "Stub Network");
 		else if (lsdesc->type == OSPF6_ROUTER_LSDESC_VIRTUAL_LINK)
-			snprintf(name, sizeof(name), "Virtual-Link");
+			snprintf(name, sizeof(name), "a Virtual Link");
 		else
 			snprintf(name, sizeof(name), "Unknown (%#x)",
 				 lsdesc->type);
 
-		vty_out(vty, "    Type: %s Metric: %d\n", name,
-			ntohs(lsdesc->metric));
-		vty_out(vty, "    Interface ID: %s\n",
-			inet_ntop(AF_INET, &lsdesc->interface_id, buf,
-				  sizeof(buf)));
-		vty_out(vty, "    Neighbor Interface ID: %s\n",
-			inet_ntop(AF_INET, &lsdesc->neighbor_interface_id, buf,
-				  sizeof(buf)));
-		vty_out(vty, "    Neighbor Router ID: %s\n",
-			inet_ntop(AF_INET, &lsdesc->neighbor_router_id, buf,
-				  sizeof(buf)));
+		if(use_json) {
+			json_object *json_link_info = json_object_new_object();
+			json_object_int_add(json_link_info, "metric", ntohs(lsdesc->metric));
+			json_object_string_add(json_link_info, "linkConnectedTo", name);
+			json_object_string_add(json_link_info, "linkID",
+				inet_ntop(AF_INET, &lsdesc->neighbor_interface_id, buf, sizeof(buf)));
+			json_object_string_add(json_link_info, "linkData",
+				inet_ntop(AF_INET, &lsdesc->neighbor_router_id, buf,
+					  sizeof(buf)));
+			if (!json_array_links) {
+				json_array_links = json_object_new_array();
+			}
+			json_object_array_add(json_array_links, json_link_info);
+
+		} else {
+			vty_out(vty, "    Type: %s Metric: %d\n", name,
+				ntohs(lsdesc->metric));
+			vty_out(vty, "    Interface ID: %s\n",
+				inet_ntop(AF_INET, &lsdesc->interface_id, buf,
+					  sizeof(buf)));
+			vty_out(vty, "    Neighbor Interface ID: %s\n",
+				inet_ntop(AF_INET, &lsdesc->neighbor_interface_id, buf,
+					  sizeof(buf)));
+			vty_out(vty, "    Neighbor Router ID: %s\n",
+				inet_ntop(AF_INET, &lsdesc->neighbor_router_id, buf,
+					  sizeof(buf)));
+		}
+	}
+
+	if(use_json) {
+		if(json_array_links) {
+			json_object_object_add(json, "links", json_array_links);
+		}
 	}
 	return 0;
 }
@@ -420,7 +448,8 @@ static char *ospf6_network_lsa_get_ar_id(struct ospf6_lsa *lsa, char *buf,
 	return (buf);
 }
 
-static int ospf6_network_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
+static int ospf6_network_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,
+				 json_object *json, u_char use_json)
 {
 	char *start, *end, *current;
 	struct ospf6_network_lsa *network_lsa;
@@ -432,8 +461,11 @@ static int ospf6_network_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 					     + sizeof(struct ospf6_lsa_header));
 
 	ospf6_options_printbuf(network_lsa->options, options, sizeof(options));
-	vty_out(vty, "     Options: %s\n", options);
-
+	if(use_json) {
+		json_object_string_add(json, "optionsList", (options));
+	} else {
+		vty_out(vty, "     Options: %s\n", options);
+	}
 	start = (char *)network_lsa + sizeof(struct ospf6_network_lsa);
 	end = (char *)lsa->header + ntohs(lsa->header->length);
 	for (current = start;
@@ -441,7 +473,10 @@ static int ospf6_network_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 	     current += sizeof(struct ospf6_network_lsdesc)) {
 		lsdesc = (struct ospf6_network_lsdesc *)current;
 		inet_ntop(AF_INET, &lsdesc->router_id, buf, sizeof(buf));
-		vty_out(vty, "     Attached Router: %s\n", buf);
+		if(use_json)
+			json_object_string_add(json, "attachedRouter", buf);
+		else 
+			vty_out(vty, "     Attached Router: %s\n", buf);
 	}
 	return 0;
 }
@@ -625,7 +660,8 @@ static char *ospf6_link_lsa_get_prefix_str(struct ospf6_lsa *lsa, char *buf,
 	return (NULL);
 }
 
-static int ospf6_link_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
+static int ospf6_link_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,
+				 json_object *json, u_char use_json)
 {
 	char *start, *end, *current;
 	struct ospf6_link_lsa *link_lsa;
@@ -634,6 +670,7 @@ static int ospf6_link_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 	struct ospf6_prefix *prefix;
 	const char *p, *mc, *la, *nu;
 	struct in6_addr in6;
+	json_object *json_array_links = NULL;
 
 	link_lsa = (struct ospf6_link_lsa *)((caddr_t)lsa->header
 					     + sizeof(struct ospf6_lsa_header));
@@ -641,12 +678,16 @@ static int ospf6_link_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 	ospf6_options_printbuf(link_lsa->options, options, sizeof(options));
 	inet_ntop(AF_INET6, &link_lsa->linklocal_addr, buf, sizeof(buf));
 	prefixnum = ntohl(link_lsa->prefix_num);
-
-	vty_out(vty, "     Priority: %d Options: %s\n", link_lsa->priority,
-		options);
-	vty_out(vty, "     LinkLocal Address: %s\n", buf);
-	vty_out(vty, "     Number of Prefix: %d\n", prefixnum);
-
+	if(use_json) {
+		json_object_string_add(json, "optionsList", options);
+		json_object_string_add(json, "linklocal", buf);
+		json_object_int_add(json, "numPrefix", prefixnum);
+	} else {
+		vty_out(vty, "     Priority: %d Options: %s\n", link_lsa->priority,
+			options);
+		vty_out(vty, "     LinkLocal Address: %s\n", buf);
+		vty_out(vty, "     Number of Prefix: %d\n", prefixnum);
+	}
 	start = (char *)link_lsa + sizeof(struct ospf6_link_lsa);
 	end = (char *)lsa->header + ntohs(lsa->header->length);
 	for (current = start; current < end;
@@ -668,15 +709,28 @@ static int ospf6_link_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 		nu = (CHECK_FLAG(prefix->prefix_options, OSPF6_PREFIX_OPTION_NU)
 			      ? "NU"
 			      : "--");
-		vty_out(vty, "     Prefix Options: %s|%s|%s|%s\n", p, mc, la,
-			nu);
-
 		memset(&in6, 0, sizeof(in6));
 		memcpy(&in6, OSPF6_PREFIX_BODY(prefix),
 		       OSPF6_PREFIX_SPACE(prefix->prefix_length));
 		inet_ntop(AF_INET6, &in6, buf, sizeof(buf));
-		vty_out(vty, "     Prefix: %s/%d\n", buf,
-			prefix->prefix_length);
+
+		if(use_json) {
+			json_object *json_prefix = json_object_new_object();
+			json_object_string_add(json_prefix, "prefixAddr", buf);
+			json_object_int_add(json_prefix, "prefixOptions", prefix->prefix_options);
+			json_object_int_add(json_prefix, "prefixLength", prefix->prefix_length);
+			if(!json_array_links)
+				json_array_links = json_object_new_array();
+			json_object_array_add(json_array_links, json_prefix);
+		} else {
+			vty_out(vty, "     Prefix Options: %s|%s|%s|%s\n", p, mc, la,
+				nu);
+			vty_out(vty, "     Prefix: %s/%d\n", buf,
+				prefix->prefix_length);
+		}
+	}
+	if(json_array_links) {
+		json_object_object_add(json, "links", json_array_links);
 	}
 
 	return 0;
@@ -829,7 +883,8 @@ static char *ospf6_intra_prefix_lsa_get_prefix_str(struct ospf6_lsa *lsa,
 	return (buf);
 }
 
-static int ospf6_intra_prefix_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
+static int ospf6_intra_prefix_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,
+				       json_object *json, u_char use_json)
 {
 	char *start, *end, *current;
 	struct ospf6_intra_prefix_lsa *intra_prefix_lsa;
@@ -839,21 +894,24 @@ static int ospf6_intra_prefix_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 	char id[16], adv_router[16];
 	const char *p, *mc, *la, *nu;
 	struct in6_addr in6;
+	json_object *json_array_links = NULL;
 
 	intra_prefix_lsa = (struct ospf6_intra_prefix_lsa
 				    *)((caddr_t)lsa->header
 				       + sizeof(struct ospf6_lsa_header));
 
 	prefixnum = ntohs(intra_prefix_lsa->prefix_num);
-
-	vty_out(vty, "     Number of Prefix: %d\n", prefixnum);
-
 	inet_ntop(AF_INET, &intra_prefix_lsa->ref_id, id, sizeof(id));
 	inet_ntop(AF_INET, &intra_prefix_lsa->ref_adv_router, adv_router,
 		  sizeof(adv_router));
-	vty_out(vty, "     Reference: %s Id: %s Adv: %s\n",
-		ospf6_lstype_name(intra_prefix_lsa->ref_type), id, adv_router);
-
+	if(use_json) {
+		json_object_string_add(json, "advRouter", adv_router);
+		json_object_int_add(json, "numPrefix", prefixnum);
+	} else {
+		vty_out(vty, "     Number of Prefix: %d\n", prefixnum);
+		vty_out(vty, "     Reference: %s Id: %s Adv: %s\n",
+			ospf6_lstype_name(intra_prefix_lsa->ref_type), id, adv_router);
+	}
 	start = (char *)intra_prefix_lsa
 		+ sizeof(struct ospf6_intra_prefix_lsa);
 	end = (char *)lsa->header + ntohs(lsa->header->length);
@@ -876,15 +934,28 @@ static int ospf6_intra_prefix_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 		nu = (CHECK_FLAG(prefix->prefix_options, OSPF6_PREFIX_OPTION_NU)
 			      ? "NU"
 			      : "--");
-		vty_out(vty, "     Prefix Options: %s|%s|%s|%s\n", p, mc, la,
-			nu);
 
 		memset(&in6, 0, sizeof(in6));
 		memcpy(&in6, OSPF6_PREFIX_BODY(prefix),
 		       OSPF6_PREFIX_SPACE(prefix->prefix_length));
 		inet_ntop(AF_INET6, &in6, buf, sizeof(buf));
-		vty_out(vty, "     Prefix: %s/%d\n", buf,
-			prefix->prefix_length);
+		if(use_json) {
+			json_object *json_prefix = json_object_new_object();
+			json_object_string_add(json_prefix, "prefixAddr", buf);
+			json_object_int_add(json_prefix, "prefixOptions", prefix->prefix_options);
+			json_object_int_add(json_prefix, "prefixLength", prefix->prefix_length);
+			if(!json_array_links)
+				json_array_links = json_object_new_array();
+			json_object_array_add(json_array_links, json_prefix);
+		} else {
+			vty_out(vty, "     Prefix Options: %s|%s|%s|%s\n", p, mc, la,
+				nu);
+			vty_out(vty, "     Prefix: %s/%d\n", buf,
+				prefix->prefix_length);
+		}
+	}
+	if(json_array_links) {
+		json_object_object_add(json, "links", json_array_links);
 	}
 
 	return 0;
diff --git a/ospf6d/ospf6_lsa.c b/ospf6d/ospf6_lsa.c
index cca4616c1..27fc70b3f 100644
--- a/ospf6d/ospf6_lsa.c
+++ b/ospf6d/ospf6_lsa.c
@@ -29,6 +29,7 @@
 #include "memory.h"
 #include "thread.h"
 #include "checksum.h"
+#include <lib/json.h>
 
 #include "ospf6_proto.h"
 #include "ospf6_lsa.h"
@@ -45,7 +46,8 @@
 
 vector ospf6_lsa_handler_vector;
 
-static int ospf6_unknown_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
+static int ospf6_unknown_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,
+				  json_object *json, u_char use_json)
 {
 	u_char *start, *end, *current;
 	char byte[4];
@@ -371,7 +373,8 @@ void ospf6_lsa_show_summary_header(struct vty *vty)
 		"AdvRouter", "Age", "SeqNum", "Payload");
 }
 
-void ospf6_lsa_show_summary(struct vty *vty, struct ospf6_lsa *lsa)
+void ospf6_lsa_show_summary(struct vty *vty, struct ospf6_lsa *lsa,
+			    json_object *json, u_char use_json)
 {
 	char adv_router[16], id[16];
 	int type;
@@ -388,34 +391,41 @@ void ospf6_lsa_show_summary(struct vty *vty, struct ospf6_lsa *lsa)
 
 	type = ntohs(lsa->header->type);
 	handler = ospf6_get_lsa_handler(lsa->header->type);
-	if ((type == OSPF6_LSTYPE_INTER_PREFIX)
-	    || (type == OSPF6_LSTYPE_INTER_ROUTER)
-	    || (type == OSPF6_LSTYPE_AS_EXTERNAL)) {
-		vty_out(vty, "%-4s %-15s%-15s%4hu %8lx %30s\n",
-			ospf6_lstype_short_name(lsa->header->type), id,
-			adv_router, ospf6_lsa_age_current(lsa),
-			(u_long)ntohl(lsa->header->seqnum),
-			handler->lh_get_prefix_str(lsa, buf, sizeof(buf), 0));
-	} else if (type != OSPF6_LSTYPE_UNKNOWN) {
-		sprintf(tmpbuf, "%-4s %-15s%-15s%4hu %8lx",
-			ospf6_lstype_short_name(lsa->header->type), id,
-			adv_router, ospf6_lsa_age_current(lsa),
-			(u_long)ntohl(lsa->header->seqnum));
-
-		while (handler->lh_get_prefix_str(lsa, buf, sizeof(buf), cnt)
-		       != NULL) {
-			vty_out(vty, "%s %30s\n", tmpbuf, buf);
-			cnt++;
-		}
+	if(use_json) {
+		json_object_string_add(json, "id", id);
+		json_object_string_add(json, "router", adv_router);
+		json_object_int_add(json, "age", ospf6_lsa_age_current(lsa));
+		json_object_int_add(json, "seq", (u_long)ntohl(lsa->header->seqnum));
 	} else {
-		vty_out(vty, "%-4s %-15s%-15s%4hu %8lx\n",
-			ospf6_lstype_short_name(lsa->header->type), id,
-			adv_router, ospf6_lsa_age_current(lsa),
-			(u_long)ntohl(lsa->header->seqnum));
+		if ((type == OSPF6_LSTYPE_INTER_PREFIX)
+		    || (type == OSPF6_LSTYPE_INTER_ROUTER)
+		    || (type == OSPF6_LSTYPE_AS_EXTERNAL)) {
+			vty_out(vty, "%-4s %-15s%-15s%4hu %8lx %30s\n",
+				ospf6_lstype_short_name(lsa->header->type), id,
+				adv_router, ospf6_lsa_age_current(lsa),
+				(u_long)ntohl(lsa->header->seqnum),
+				handler->lh_get_prefix_str(lsa, buf, sizeof(buf), 0));
+		} else if (type != OSPF6_LSTYPE_UNKNOWN) {
+			sprintf(tmpbuf, "%-4s %-15s%-15s%4hu %8lx",
+				ospf6_lstype_short_name(lsa->header->type), id,
+				adv_router, ospf6_lsa_age_current(lsa),
+				(u_long)ntohl(lsa->header->seqnum));
+			while (handler->lh_get_prefix_str(lsa, buf, sizeof(buf), cnt)
+			       != NULL) {
+				vty_out(vty, "%s %30s\n", tmpbuf, buf);
+				cnt++;
+			}
+		} else {
+			vty_out(vty, "%-4s %-15s%-15s%4hu %8lx\n",
+				ospf6_lstype_short_name(lsa->header->type), id,
+				adv_router, ospf6_lsa_age_current(lsa),
+				(u_long)ntohl(lsa->header->seqnum));
+		}
 	}
 }
 
-void ospf6_lsa_show_dump(struct vty *vty, struct ospf6_lsa *lsa)
+void ospf6_lsa_show_dump(struct vty *vty, struct ospf6_lsa *lsa,  json_object *json,
+			 u_char use_json)
 {
 	u_char *start, *end, *current;
 	char byte[4];
@@ -440,7 +450,8 @@ void ospf6_lsa_show_dump(struct vty *vty, struct ospf6_lsa *lsa)
 	return;
 }
 
-void ospf6_lsa_show_internal(struct vty *vty, struct ospf6_lsa *lsa)
+void ospf6_lsa_show_internal(struct vty *vty, struct ospf6_lsa *lsa, json_object *json,
+			     u_char use_json)
 {
 	char adv_router[64], id[64];
 
@@ -468,7 +479,8 @@ void ospf6_lsa_show_internal(struct vty *vty, struct ospf6_lsa *lsa)
 	return;
 }
 
-void ospf6_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
+void ospf6_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,  json_object *json,
+		    u_char use_json)
 {
 	char adv_router[64], id[64];
 	const struct ospf6_lsa_handler *handler;
@@ -485,25 +497,34 @@ void ospf6_lsa_show(struct vty *vty, struct ospf6_lsa *lsa)
 	timersub(&now, &lsa->installed, &res);
 	timerstring(&res, duration, sizeof(duration));
 
-	vty_out(vty, "Age: %4hu Type: %s\n", ospf6_lsa_age_current(lsa),
-		ospf6_lstype_name(lsa->header->type));
-	vty_out(vty, "Link State ID: %s\n", id);
-	vty_out(vty, "Advertising Router: %s\n", adv_router);
-	vty_out(vty, "LS Sequence Number: %#010lx\n",
-		(u_long)ntohl(lsa->header->seqnum));
-	vty_out(vty, "CheckSum: %#06hx Length: %hu\n",
-		ntohs(lsa->header->checksum), ntohs(lsa->header->length));
-	vty_out(vty, "Duration: %s\n", duration);
-
+	if(use_json) {
+		json_object_int_add(json, "lsAge", ospf6_lsa_age_current(lsa));
+		json_object_string_add(json, "lsType", ospf6_lstype_name(lsa->header->type));
+		json_object_string_add(json, "advRouter", adv_router);
+		json_object_string_add(json, "linkStateId", id);
+		json_object_int_add(json, "sequence", (u_long)ntohl(lsa->header->seqnum));
+		json_object_int_add(json, "checksum", ntohs(lsa->header->checksum));
+		json_object_int_add(json, "length", ntohs(lsa->header->length));
+	} else {
+		vty_out(vty, "Age: %4hu Type: %s\n", ospf6_lsa_age_current(lsa),
+			ospf6_lstype_name(lsa->header->type));
+		vty_out(vty, "Link State ID: %s\n", id);
+		vty_out(vty, "Advertising Router: %s\n", adv_router);
+		vty_out(vty, "LS Sequence Number: %#010lx\n",
+			(u_long)ntohl(lsa->header->seqnum));
+		vty_out(vty, "CheckSum: %#06hx Length: %hu\n",
+			ntohs(lsa->header->checksum), ntohs(lsa->header->length));
+		vty_out(vty, "Duration: %s\n", duration);
+	}
 	handler = ospf6_get_lsa_handler(lsa->header->type);
 
 	if (handler->lh_show != NULL)
-		handler->lh_show(vty, lsa);
+		handler->lh_show(vty, lsa, json, use_json);
 	else {
 		assert(unknown_handler.lh_show != NULL);
-		unknown_handler.lh_show(vty, lsa);
+		unknown_handler.lh_show(vty, lsa, NULL, 0);
 	}
-
+	if(!use_json)
 	vty_out(vty, "\n");
 }
 
diff --git a/ospf6d/ospf6_lsa.h b/ospf6d/ospf6_lsa.h
index db446a328..88e02f37f 100644
--- a/ospf6d/ospf6_lsa.h
+++ b/ospf6d/ospf6_lsa.h
@@ -21,6 +21,8 @@
 #ifndef OSPF6_LSA_H
 #define OSPF6_LSA_H
 
+#include <lib/json.h>
+
 /* Debug option */
 #define OSPF6_LSA_DEBUG           0x01
 #define OSPF6_LSA_DEBUG_ORIGINATE 0x02
@@ -141,7 +143,7 @@ struct ospf6_lsa_handler {
 		u_int16_t type; /* host byte order */
 		const char *name;
 		const char *short_name;
-		int (*show)(struct vty *, struct ospf6_lsa *);
+		int (*show)(struct vty *, struct ospf6_lsa *, json_object *json, u_char use_json);
 		char *(*get_prefix_str)(struct ospf6_lsa *, char *buf, int buflen,
 					int pos);
 	} s;
@@ -222,10 +224,14 @@ extern char *ospf6_lsa_printbuf(struct ospf6_lsa *lsa, char *buf, int size);
 extern void ospf6_lsa_header_print_raw(struct ospf6_lsa_header *header);
 extern void ospf6_lsa_header_print(struct ospf6_lsa *lsa);
 extern void ospf6_lsa_show_summary_header(struct vty *vty);
-extern void ospf6_lsa_show_summary(struct vty *vty, struct ospf6_lsa *lsa);
-extern void ospf6_lsa_show_dump(struct vty *vty, struct ospf6_lsa *lsa);
-extern void ospf6_lsa_show_internal(struct vty *vty, struct ospf6_lsa *lsa);
-extern void ospf6_lsa_show(struct vty *vty, struct ospf6_lsa *lsa);
+extern void ospf6_lsa_show_summary(struct vty *vty, struct ospf6_lsa *lsa,
+				   json_object *json, u_char use_json);
+extern void ospf6_lsa_show_dump(struct vty *vty, struct ospf6_lsa *lsa,
+				json_object *json, u_char use_json);
+extern void ospf6_lsa_show_internal(struct vty *vty, struct ospf6_lsa *lsa,
+				    json_object *json, u_char use_json);
+extern void ospf6_lsa_show(struct vty *vty, struct ospf6_lsa *lsa,
+			   json_object *json, u_char use_json);
 
 extern struct ospf6_lsa *ospf6_lsa_create(struct ospf6_lsa_header *header);
 extern struct ospf6_lsa *
diff --git a/ospf6d/ospf6_lsdb.c b/ospf6d/ospf6_lsdb.c
index 418f858a3..3a1060926 100644
--- a/ospf6d/ospf6_lsdb.c
+++ b/ospf6d/ospf6_lsdb.c
@@ -355,12 +355,16 @@ int ospf6_lsdb_maxage_remover(struct ospf6_lsdb *lsdb)
 
 void ospf6_lsdb_show(struct vty *vty, enum ospf_lsdb_show_level level,
 		     u_int16_t *type, u_int32_t *id, u_int32_t *adv_router,
-		     struct ospf6_lsdb *lsdb)
+		     struct ospf6_lsdb *lsdb, json_object *json, u_char use_json)
 {
 	struct ospf6_lsa *lsa;
 	const struct route_node *end = NULL;
-	void (*showfunc)(struct vty *, struct ospf6_lsa *) = NULL;
+	void (*showfunc)(struct vty *, struct ospf6_lsa *, json_object *, u_char) = NULL;
+	json_object *link_array = NULL;
 
+	if(use_json) {
+		link_array = json_object_new_array();
+	}
 	switch (level) {
 	case OSPF6_LSDB_SHOW_LEVEL_DETAIL:
 		showfunc = ospf6_lsa_show;
@@ -380,14 +384,14 @@ void ospf6_lsdb_show(struct vty *vty, enum ospf_lsdb_show_level level,
 		lsa = ospf6_lsdb_lookup(*type, *id, *adv_router, lsdb);
 		if (lsa) {
 			if (level == OSPF6_LSDB_SHOW_LEVEL_NORMAL)
-				ospf6_lsa_show(vty, lsa);
+				ospf6_lsa_show(vty, lsa, json, use_json);
 			else
-				(*showfunc)(vty, lsa);
+				(*showfunc)(vty, lsa, json, use_json);
 		}
 		return;
 	}
 
-	if (level == OSPF6_LSDB_SHOW_LEVEL_NORMAL)
+	if (level == OSPF6_LSDB_SHOW_LEVEL_NORMAL && !use_json)
 		ospf6_lsa_show_summary_header(vty);
 
 	end = ospf6_lsdb_head(lsdb, !!type + !!(type && adv_router),
@@ -396,11 +400,27 @@ void ospf6_lsdb_show(struct vty *vty, enum ospf_lsdb_show_level level,
 			      &lsa);
 	while (lsa) {
 		if ((!adv_router || lsa->header->adv_router == *adv_router)
-		    && (!id || lsa->header->id == *id))
-			(*showfunc)(vty, lsa);
+		    && (!id || lsa->header->id == *id)) {
+			if(use_json) {
+				json_object *link = json_object_new_object();
+				(*showfunc)(vty, lsa, link, use_json);
+				json_object_array_add(link_array, link);
+			} else {
+				(*showfunc)(vty, lsa, NULL, 0);
+			}
+		}
 
 		lsa = ospf6_lsdb_next(end, lsa);
 	}
+	if(use_json) {
+		if(level == OSPF6_LSDB_SHOW_LEVEL_DETAIL) {
+			json_object_object_add(json, "routes", link_array);
+		} else if(level == OSPF6_LSDB_SHOW_LEVEL_NORMAL) {
+			json_object_object_add(json, "links", link_array);
+		} else {
+			json_object_free(link_array);
+		}
+	}
 }
 
 u_int32_t ospf6_new_ls_id(u_int16_t type, u_int32_t adv_router,
diff --git a/ospf6d/ospf6_lsdb.h b/ospf6d/ospf6_lsdb.h
index 41e54b5d8..b2afcd140 100644
--- a/ospf6d/ospf6_lsdb.h
+++ b/ospf6d/ospf6_lsdb.h
@@ -84,7 +84,8 @@ enum ospf_lsdb_show_level {
 
 extern void ospf6_lsdb_show(struct vty *vty, enum ospf_lsdb_show_level level,
 			    u_int16_t *type, u_int32_t *id,
-			    u_int32_t *adv_router, struct ospf6_lsdb *lsdb);
+			    u_int32_t *adv_router, struct ospf6_lsdb *lsdb,
+			    json_object *json, u_char use_json);
 
 extern u_int32_t ospf6_new_ls_id(u_int16_t type, u_int32_t adv_router,
 				 struct ospf6_lsdb *lsdb);
diff --git a/ospf6d/ospf6d.c b/ospf6d/ospf6d.c
index bbc1cc18f..dc2827c24 100644
--- a/ospf6d/ospf6d.c
+++ b/ospf6d/ospf6d.c
@@ -150,16 +150,37 @@ static u_int16_t parse_type_spec(int idx_lsa, int argc, struct cmd_token **argv)
 	return type;
 }
 
+static void json_link_array_generate(struct vty *vty, struct ospf6_area *oa,
+			      json_object *json_area_array,
+			      uint16_t *type,
+			      struct ospf6_lsdb *lsdb)
+{
+	json_object *link_array = NULL;
+	json_object *json_state = json_object_new_object();
+	json_object_int_add(json_state, "type", ntohs(*type));
+	if(oa)
+		json_object_string_add(json_state, "area", oa->name);
+	ospf6_lsdb_show(vty, OSPF6_LSDB_SHOW_LEVEL_NORMAL, type, NULL, NULL, lsdb, json_state, 1);
+	json_object_object_get_ex(json_state, "links", &link_array);
+	if(json_object_array_length(link_array)) {
+		json_object_array_add(json_area_array, json_state);
+	} else {
+		json_object_free(json_state);
+	}
+	return;
+}
+
 DEFUN (show_ipv6_ospf6_database,
        show_ipv6_ospf6_database_cmd,
-       "show ipv6 ospf6 database [<detail|dump|internal>]",
+       "show ipv6 ospf6 database [<detail|dump|internal>] [json]",
        SHOW_STR
        IPV6_STR
        OSPF6_STR
        "Display Link state database\n"
        "Display details of LSAs\n"
        "Dump LSAs\n"
-       "Display LSA's internal information\n")
+       "Display LSA's internal information\n"
+	JSON_STR)
 {
 	int idx_level = 4;
 	int level;
@@ -167,26 +188,65 @@ DEFUN (show_ipv6_ospf6_database,
 	struct ospf6 *o = ospf6;
 	struct ospf6_area *oa;
 	struct ospf6_interface *oi;
+	u_char uj = use_json(argc, argv);
+	json_object *json = NULL;
+	json_object *json_area_array = NULL;
+	uint16_t type;
 
-	OSPF6_CMD_CHECK_RUNNING();
+	if(uj)
+		argc--;
 
+	OSPF6_CMD_CHECK_RUNNING();
 	level = parse_show_level(idx_level, argc, argv);
+	if(uj) {
+		json_area_array = json_object_new_array();
+		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
+			type = htons(OSPF6_LSTYPE_ROUTER);
+			json_link_array_generate(vty, oa, json_area_array, &type, oa->lsdb);
+			type = htons(OSPF6_LSTYPE_NETWORK);
+			json_link_array_generate(vty, oa, json_area_array, &type, oa->lsdb);
+			type = htons(OSPF6_LSTYPE_INTER_ROUTER);
+			json_link_array_generate(vty, oa, json_area_array, &type, oa->lsdb);
+			type = htons(OSPF6_LSTYPE_INTER_PREFIX);
+			json_link_array_generate(vty, oa, json_area_array, &type, oa->lsdb);
+			type = htons(OSPF6_LSTYPE_INTRA_PREFIX);
+			json_link_array_generate(vty, oa, json_area_array, &type, oa->lsdb);
+
+			for (ALL_LIST_ELEMENTS_RO(oa->if_list, j, oi)) {
+				type = htons(OSPF6_LSTYPE_LINK);
+				json_link_array_generate(vty, oa, json_area_array, &type, oi->lsdb);
+			}
+		}
+		json = json_object_new_object();
+		json_object_object_add(json, "areas", json_area_array);
+		json_object *json_as_array = json_object_new_array();
+		type = htons(OSPF6_LSTYPE_AS_EXTERNAL);
+		json_link_array_generate(vty, NULL, json_as_array, &type, o->lsdb);
+		if(json_object_array_length(json_as_array)) {
+			json_object *as = json_object_get(json_object_array_get_idx(json_as_array, 0));
+			json_object_object_add(json, "AS External Link States", as);
+		}
+		json_object_free(json_as_array);
 
+		vty_out(vty, "%s\n",json_object_to_json_string_ext(json, JSON_C_TO_STRING_PRETTY));
+		json_object_free(json);
+		return CMD_SUCCESS;
+	}
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-		ospf6_lsdb_show(vty, level, NULL, NULL, NULL, oa->lsdb);
+		ospf6_lsdb_show(vty, level, NULL, NULL, NULL, oa->lsdb, NULL, 0);
 	}
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		for (ALL_LIST_ELEMENTS_RO(oa->if_list, j, oi)) {
 			vty_out(vty, IF_LSDB_TITLE_FORMAT, oi->interface->name,
 				oa->name);
-			ospf6_lsdb_show(vty, level, NULL, NULL, NULL, oi->lsdb);
+			ospf6_lsdb_show(vty, level, NULL, NULL, NULL, oi->lsdb, NULL, 0);
 		}
 	}
 
 	vty_out(vty, AS_LSDB_TITLE_FORMAT);
-	ospf6_lsdb_show(vty, level, NULL, NULL, NULL, o->lsdb);
+	ospf6_lsdb_show(vty, level, NULL, NULL, NULL, o->lsdb, NULL, 0);
 
 	vty_out(vty, "\n");
 	return CMD_SUCCESS;
@@ -194,7 +254,7 @@ DEFUN (show_ipv6_ospf6_database,
 
 DEFUN (show_ipv6_ospf6_database_type,
        show_ipv6_ospf6_database_type_cmd,
-       "show ipv6 ospf6 database <router|network|inter-prefix|inter-router|as-external|group-membership|type-7|link|intra-prefix> [<detail|dump|internal>]",
+       "show ipv6 ospf6 database <router|network|inter-prefix|inter-router|as-external|group-membership|type-7|link|intra-prefix> [<detail|dump|internal>] [json]",
        SHOW_STR
        IPV6_STR
        OSPF6_STR
@@ -211,6 +271,7 @@ DEFUN (show_ipv6_ospf6_database_type,
        "Display details of LSAs\n"
        "Dump LSAs\n"
        "Display LSA's internal information\n"
+       JSON_STR
       )
 {
 	int idx_lsa = 4;
@@ -221,7 +282,16 @@ DEFUN (show_ipv6_ospf6_database_type,
 	struct ospf6_area *oa;
 	struct ospf6_interface *oi;
 	u_int16_t type = 0;
-
+	char id[64];
+	u_char uj = use_json(argc, argv);
+	json_object *json = NULL;
+	json_object *json_area_array = NULL;
+
+	if(uj) {
+		argc--;
+		json = json_object_new_object();
+		json_area_array = json_object_new_array();
+	}
 	OSPF6_CMD_CHECK_RUNNING();
 
 	type = parse_type_spec(idx_lsa, argc, argv);
@@ -230,34 +300,83 @@ DEFUN (show_ipv6_ospf6_database_type,
 	switch (OSPF6_LSA_SCOPE(type)) {
 	case OSPF6_SCOPE_AREA:
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
-			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-			ospf6_lsdb_show(vty, level, &type, NULL, NULL,
-					oa->lsdb);
+			if(!uj) {
+				vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
+				ospf6_lsdb_show(vty, level, &type, NULL, NULL,
+						oa->lsdb, NULL, 0);
+			} else {
+				json_object *link_array = NULL;
+				json_object *json_area = json_object_new_object();
+				ospf6_lsdb_show(vty, level, &type, NULL, NULL,
+						oa->lsdb, json_area, uj);
+				json_object_object_get_ex(json_area, "routes", &link_array);
+				if(json_object_array_length(link_array)) {
+					json_object_string_add(json_area, "area", oa->name);
+					json_object_array_add(json_area_array, json_area);
+				} else {
+					json_object_free(json_area);
+				}
+			}
 		}
 		break;
 
 	case OSPF6_SCOPE_LINKLOCAL:
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			for (ALL_LIST_ELEMENTS_RO(oa->if_list, j, oi)) {
-				vty_out(vty, IF_LSDB_TITLE_FORMAT,
-					oi->interface->name, oa->name);
-				ospf6_lsdb_show(vty, level, &type, NULL, NULL,
-						oi->lsdb);
+				if(!uj) {
+					vty_out(vty, IF_LSDB_TITLE_FORMAT,
+						oi->interface->name, oa->name);
+					ospf6_lsdb_show(vty, level, &type, NULL, NULL,
+							oi->lsdb, NULL, 0);
+				} else {
+					json_object *link_array = NULL;
+					json_object *json_area = json_object_new_object();
+					ospf6_lsdb_show(vty, level, &type, NULL, NULL,
+							oi->lsdb, json_area, uj);
+					json_object_object_get_ex(json_area, "routes", &link_array);
+					if(json_object_array_length(link_array)) {
+						json_object_string_add(json_area, "area", oa->name);
+						json_object_array_add(json_area_array, json_area);
+					} else {
+						json_object_free(json_area);
+					}
+				}
 			}
 		}
+
 		break;
 
 	case OSPF6_SCOPE_AS:
-		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, NULL, NULL, o->lsdb);
+		if(!uj) {
+			vty_out(vty, AS_LSDB_TITLE_FORMAT);
+			ospf6_lsdb_show(vty, level, &type, NULL, NULL, o->lsdb, NULL, 0);
+		} else {
+			json_object *link_array = NULL;
+			json_object *json_area = json_object_new_object();
+			ospf6_lsdb_show(vty, level, &type, NULL, NULL,
+					o->lsdb, json_area, uj);
+			json_object_object_get_ex(json_area, "routes", &link_array);
+			if(json_object_array_length(link_array)) {
+				json_object_array_add(json_area_array, json_area);
+			} else {
+				json_object_free(json_area);
+			}
+		}
 		break;
 
 	default:
 		assert(0);
 		break;
 	}
-
-	vty_out(vty, "\n");
+	if(uj) {
+		inet_ntop(AF_INET, &o->router_id, id, sizeof(id));
+		json_object_string_add(json, "router_id", id);
+		json_object_object_add(json, "areas", json_area_array);
+		vty_out(vty, "%s\n",json_object_to_json_string_ext(json, JSON_C_TO_STRING_PRETTY));
+		json_object_free(json);
+	} else {
+		vty_out(vty, "\n");
+	}
 	return CMD_SUCCESS;
 }
 
@@ -293,19 +412,19 @@ DEFUN (show_ipv6_ospf6_database_id,
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-		ospf6_lsdb_show(vty, level, NULL, &id, NULL, oa->lsdb);
+		ospf6_lsdb_show(vty, level, NULL, &id, NULL, oa->lsdb, NULL, 0);
 	}
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		for (ALL_LIST_ELEMENTS_RO(oa->if_list, j, oi)) {
 			vty_out(vty, IF_LSDB_TITLE_FORMAT, oi->interface->name,
 				oa->name);
-			ospf6_lsdb_show(vty, level, NULL, &id, NULL, oi->lsdb);
+			ospf6_lsdb_show(vty, level, NULL, &id, NULL, oi->lsdb, NULL, 0);
 		}
 	}
 
 	vty_out(vty, AS_LSDB_TITLE_FORMAT);
-	ospf6_lsdb_show(vty, level, NULL, &id, NULL, o->lsdb);
+	ospf6_lsdb_show(vty, level, NULL, &id, NULL, o->lsdb, NULL, 0);
 
 	vty_out(vty, "\n");
 	return CMD_SUCCESS;
@@ -341,7 +460,7 @@ DEFUN (show_ipv6_ospf6_database_router,
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-		ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, oa->lsdb);
+		ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, oa->lsdb, NULL, 0);
 	}
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
@@ -349,12 +468,12 @@ DEFUN (show_ipv6_ospf6_database_router,
 			vty_out(vty, IF_LSDB_TITLE_FORMAT, oi->interface->name,
 				oa->name);
 			ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router,
-					oi->lsdb);
+					oi->lsdb, NULL, 0);
 		}
 	}
 
 	vty_out(vty, AS_LSDB_TITLE_FORMAT);
-	ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, o->lsdb);
+	ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, o->lsdb, NULL, 0);
 
 	vty_out(vty, "\n");
 	return CMD_SUCCESS;
@@ -393,7 +512,7 @@ DEFUN_HIDDEN (show_ipv6_ospf6_database_aggr_router,
 			return CMD_SUCCESS;
 		}
 		ospf6_lsdb_show(vty, level, &type, NULL, NULL,
-				oa->temp_router_lsa_lsdb);
+				oa->temp_router_lsa_lsdb, NULL, 0);
 		/* Remove the temp cache */
 		ospf6_remove_temp_router_lsa(oa);
 	}
@@ -447,7 +566,7 @@ DEFUN (show_ipv6_ospf6_database_type_id,
 	case OSPF6_SCOPE_AREA:
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-			ospf6_lsdb_show(vty, level, &type, &id, NULL, oa->lsdb);
+			ospf6_lsdb_show(vty, level, &type, &id, NULL, oa->lsdb, NULL, 0);
 		}
 		break;
 
@@ -457,14 +576,14 @@ DEFUN (show_ipv6_ospf6_database_type_id,
 				vty_out(vty, IF_LSDB_TITLE_FORMAT,
 					oi->interface->name, oa->name);
 				ospf6_lsdb_show(vty, level, &type, &id, NULL,
-						oi->lsdb);
+						oi->lsdb, NULL, 0);
 			}
 		}
 		break;
 
 	case OSPF6_SCOPE_AS:
 		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, &id, NULL, o->lsdb);
+		ospf6_lsdb_show(vty, level, &type, &id, NULL, o->lsdb, NULL, 0);
 		break;
 
 	default:
@@ -522,7 +641,7 @@ DEFUN (show_ipv6_ospf6_database_type_router,
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
 			ospf6_lsdb_show(vty, level, &type, NULL, &adv_router,
-					oa->lsdb);
+					oa->lsdb, NULL, 0);
 		}
 		break;
 
@@ -532,14 +651,14 @@ DEFUN (show_ipv6_ospf6_database_type_router,
 				vty_out(vty, IF_LSDB_TITLE_FORMAT,
 					oi->interface->name, oa->name);
 				ospf6_lsdb_show(vty, level, &type, NULL,
-						&adv_router, oi->lsdb);
+						&adv_router, oi->lsdb, NULL, 0);
 			}
 		}
 		break;
 
 	case OSPF6_SCOPE_AS:
 		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, NULL, &adv_router, o->lsdb);
+		ospf6_lsdb_show(vty, level, &type, NULL, &adv_router, o->lsdb, NULL, 0);
 		break;
 
 	default:
@@ -585,7 +704,7 @@ DEFUN (show_ipv6_ospf6_database_id_router,
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-		ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, oa->lsdb);
+		ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, oa->lsdb, NULL, 0);
 	}
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
@@ -593,12 +712,12 @@ DEFUN (show_ipv6_ospf6_database_id_router,
 			vty_out(vty, IF_LSDB_TITLE_FORMAT, oi->interface->name,
 				oa->name);
 			ospf6_lsdb_show(vty, level, NULL, &id, &adv_router,
-					oi->lsdb);
+					oi->lsdb, NULL, 0);
 		}
 	}
 
 	vty_out(vty, AS_LSDB_TITLE_FORMAT);
-	ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, o->lsdb);
+	ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, o->lsdb, NULL, 0);
 
 	vty_out(vty, "\n");
 	return CMD_SUCCESS;
@@ -638,7 +757,7 @@ DEFUN (show_ipv6_ospf6_database_adv_router_linkstate_id,
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-		ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, oa->lsdb);
+		ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, oa->lsdb, NULL, 0);
 	}
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
@@ -646,12 +765,12 @@ DEFUN (show_ipv6_ospf6_database_adv_router_linkstate_id,
 			vty_out(vty, IF_LSDB_TITLE_FORMAT, oi->interface->name,
 				oa->name);
 			ospf6_lsdb_show(vty, level, NULL, &id, &adv_router,
-					oi->lsdb);
+					oi->lsdb, NULL, 0);
 		}
 	}
 
 	vty_out(vty, AS_LSDB_TITLE_FORMAT);
-	ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, o->lsdb);
+	ospf6_lsdb_show(vty, level, NULL, &id, &adv_router, o->lsdb, NULL, 0);
 
 	vty_out(vty, "\n");
 	return CMD_SUCCESS;
@@ -703,7 +822,7 @@ DEFUN (show_ipv6_ospf6_database_type_id_router,
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
 			ospf6_lsdb_show(vty, level, &type, &id, &adv_router,
-					oa->lsdb);
+					oa->lsdb, NULL, 0);
 		}
 		break;
 
@@ -713,14 +832,14 @@ DEFUN (show_ipv6_ospf6_database_type_id_router,
 				vty_out(vty, IF_LSDB_TITLE_FORMAT,
 					oi->interface->name, oa->name);
 				ospf6_lsdb_show(vty, level, &type, &id,
-						&adv_router, oi->lsdb);
+						&adv_router, oi->lsdb, NULL, 0);
 			}
 		}
 		break;
 
 	case OSPF6_SCOPE_AS:
 		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb);
+		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb, NULL, 0);
 		break;
 
 	default:
@@ -781,7 +900,7 @@ DEFUN (show_ipv6_ospf6_database_type_adv_router_linkstate_id,
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
 			ospf6_lsdb_show(vty, level, &type, &id, &adv_router,
-					oa->lsdb);
+					oa->lsdb, NULL, 0);
 		}
 		break;
 
@@ -791,14 +910,15 @@ DEFUN (show_ipv6_ospf6_database_type_adv_router_linkstate_id,
 				vty_out(vty, IF_LSDB_TITLE_FORMAT,
 					oi->interface->name, oa->name);
 				ospf6_lsdb_show(vty, level, &type, &id,
-						&adv_router, oi->lsdb);
+						&adv_router, oi->lsdb, NULL, 0);
 			}
 		}
 		break;
 
 	case OSPF6_SCOPE_AS:
 		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb);
+		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb,
+				NULL, 0);
 		break;
 
 	default:
@@ -836,7 +956,7 @@ DEFUN (show_ipv6_ospf6_database_self_originated,
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 		vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
-		ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, oa->lsdb);
+		ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, oa->lsdb, NULL, 0);
 	}
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
@@ -844,12 +964,12 @@ DEFUN (show_ipv6_ospf6_database_self_originated,
 			vty_out(vty, IF_LSDB_TITLE_FORMAT, oi->interface->name,
 				oa->name);
 			ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router,
-					oi->lsdb);
+					oi->lsdb, NULL, 0);
 		}
 	}
 
 	vty_out(vty, AS_LSDB_TITLE_FORMAT);
-	ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, o->lsdb);
+	ospf6_lsdb_show(vty, level, NULL, NULL, &adv_router, o->lsdb, NULL, 0);
 
 	vty_out(vty, "\n");
 	return CMD_SUCCESS;
@@ -899,7 +1019,7 @@ DEFUN (show_ipv6_ospf6_database_type_self_originated,
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
 			ospf6_lsdb_show(vty, level, &type, NULL, &adv_router,
-					oa->lsdb);
+					oa->lsdb, NULL, 0);
 		}
 		break;
 
@@ -909,14 +1029,15 @@ DEFUN (show_ipv6_ospf6_database_type_self_originated,
 				vty_out(vty, IF_LSDB_TITLE_FORMAT,
 					oi->interface->name, oa->name);
 				ospf6_lsdb_show(vty, level, &type, NULL,
-						&adv_router, oi->lsdb);
+						&adv_router, oi->lsdb, NULL, 0);
 			}
 		}
 		break;
 
 	case OSPF6_SCOPE_AS:
 		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, NULL, &adv_router, o->lsdb);
+		ospf6_lsdb_show(vty, level, &type, NULL, &adv_router, o->lsdb,
+				NULL, 0);
 		break;
 
 	default:
@@ -975,7 +1096,7 @@ DEFUN (show_ipv6_ospf6_database_type_self_originated_linkstate_id,
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
 			ospf6_lsdb_show(vty, level, &type, &id, &adv_router,
-					oa->lsdb);
+					oa->lsdb, NULL, 0);
 		}
 		break;
 
@@ -985,14 +1106,14 @@ DEFUN (show_ipv6_ospf6_database_type_self_originated_linkstate_id,
 				vty_out(vty, IF_LSDB_TITLE_FORMAT,
 					oi->interface->name, oa->name);
 				ospf6_lsdb_show(vty, level, &type, &id,
-						&adv_router, oi->lsdb);
+						&adv_router, oi->lsdb, NULL, 0);
 			}
 		}
 		break;
 
 	case OSPF6_SCOPE_AS:
 		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb);
+		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb, NULL, 0);
 		break;
 
 	default:
@@ -1050,7 +1171,7 @@ DEFUN (show_ipv6_ospf6_database_type_id_self_originated,
 		for (ALL_LIST_ELEMENTS_RO(o->area_list, i, oa)) {
 			vty_out(vty, AREA_LSDB_TITLE_FORMAT, oa->name);
 			ospf6_lsdb_show(vty, level, &type, &id, &adv_router,
-					oa->lsdb);
+					oa->lsdb, NULL, 0);
 		}
 		break;
 
@@ -1060,14 +1181,14 @@ DEFUN (show_ipv6_ospf6_database_type_id_self_originated,
 				vty_out(vty, IF_LSDB_TITLE_FORMAT,
 					oi->interface->name, oa->name);
 				ospf6_lsdb_show(vty, level, &type, &id,
-						&adv_router, oi->lsdb);
+						&adv_router, oi->lsdb, NULL, 0);
 			}
 		}
 		break;
 
 	case OSPF6_SCOPE_AS:
 		vty_out(vty, AS_LSDB_TITLE_FORMAT);
-		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb);
+		ospf6_lsdb_show(vty, level, &type, &id, &adv_router, o->lsdb, NULL, 0);
 		break;
 
 	default:
