commit 8c84c710c7d80f88a364d8701b9990985c9909b3
Author: Rene Nielsen <rene.nielsen@microchip.com>
Date:   Tue Oct 6 13:18:32 2020 +0200

    4.0-1200

diff --git a/ospf6d/ospf6_area.c b/ospf6d/ospf6_area.c
index ed624c6ae..9ceddc698 100644
--- a/ospf6d/ospf6_area.c
+++ b/ospf6d/ospf6_area.c
@@ -25,6 +25,7 @@
 #include "linklist.h"
 #include "thread.h"
 #include "vty.h"
+#include <lib/json.h>
 #include "command.h"
 #include "if.h"
 #include "prefix.h"
@@ -343,40 +344,74 @@ void ospf6_area_disable(struct ospf6_area *oa)
 }
 
 
-void ospf6_area_show(struct vty *vty, struct ospf6_area *oa)
+void ospf6_area_show(struct vty *vty, struct ospf6_area *oa,
+		     json_object *json_areas, u_char use_json)
 {
 	struct listnode *i;
 	struct ospf6_interface *oi;
 	unsigned long result;
+	json_object *json_area = NULL;
 
-	if (!IS_AREA_STUB(oa))
-		vty_out(vty, " Area %s\n", oa->name);
-	else {
+	if (use_json)
+		json_area = json_object_new_object();
+
+	if(use_json) {
+		if(oa->area_id == OSPF_AREA_BACKBONE)
+			json_object_boolean_true_add(json_area, "backbone");
+	}
+ 
+	if (!IS_AREA_STUB(oa)) {
+		if(!use_json)
+			vty_out(vty, " Area %s\n", oa->name);
+	} else {
 		if (oa->no_summary) {
-			vty_out(vty, " Area %s[Stub, No Summary]\n", oa->name);
+			if(use_json)
+				json_object_boolean_true_add(
+					json_area, "stubNoSummary");
+			else 
+				vty_out(vty, " Area %s[Stub, No Summary]\n", oa->name);
 		} else {
-			vty_out(vty, " Area %s[Stub]\n", oa->name);
+			if(!use_json)
+				vty_out(vty, " Area %s[Stub]\n", oa->name);
 		}
 	}
-	vty_out(vty, "     Number of Area scoped LSAs is %u\n",
+
+	if(use_json)
+		json_object_int_add(json_area, "lsaNumber", oa->lsdb->count);
+	else
+		vty_out(vty, "     Number of Area scoped LSAs is %u\n",
 		oa->lsdb->count);
 
-	vty_out(vty, "     Interface attached to this area:");
-	for (ALL_LIST_ELEMENTS_RO(oa->if_list, i, oi))
-		vty_out(vty, " %s", oi->interface->name);
-	vty_out(vty, "\n");
-
-	if (oa->ts_spf.tv_sec || oa->ts_spf.tv_usec) {
-		result = monotime_since(&oa->ts_spf, NULL);
-		if (result / TIMER_SECOND_MICRO > 0) {
-			vty_out(vty, "SPF last executed %ld.%lds ago\n",
-				result / TIMER_SECOND_MICRO,
-				result % TIMER_SECOND_MICRO);
-		} else {
-			vty_out(vty, "SPF last executed %ldus ago\n", result);
-		}
-	} else
-		vty_out(vty, "SPF has not been run\n");
+	if(use_json) {
+		json_object_int_add(json_area, "areaIfTotalCounter",
+				    listcount(oa->if_list));
+	} else {
+		vty_out(vty, "     Interface attached to this area:");
+		for (ALL_LIST_ELEMENTS_RO(oa->if_list, i, oi))
+			vty_out(vty, " %s", oi->interface->name);
+		vty_out(vty, "\n");
+	}
+	if(!use_json) {
+		if (oa->ts_spf.tv_sec || oa->ts_spf.tv_usec) {
+			result = monotime_since(&oa->ts_spf, NULL);
+			if (result / TIMER_SECOND_MICRO > 0) {
+				vty_out(vty, "SPF last executed %ld.%lds ago\n",
+					result / TIMER_SECOND_MICRO,
+					result % TIMER_SECOND_MICRO);
+			} else {
+				vty_out(vty, "SPF last executed %ldus ago\n", result);
+			}
+		} else
+			vty_out(vty, "SPF has not been run\n");
+	} else {
+		json_object_int_add(json_area, "spfExecutedCounter",
+		    oa->spf_calculation);
+
+	}
+	if (use_json)
+		json_object_object_add(json_areas, oa->name,
+				       json_area);
+
 }
 
 
diff --git a/ospf6d/ospf6_area.h b/ospf6d/ospf6_area.h
index b7cd9b4b0..a57db6d3d 100644
--- a/ospf6d/ospf6_area.h
+++ b/ospf6d/ospf6_area.h
@@ -22,6 +22,7 @@
 #define OSPF_AREA_H
 
 #include "ospf6_top.h"
+#include <lib/json.h>
 
 struct ospf6_area {
 	/* Reference to Top data structure */
@@ -121,7 +122,8 @@ extern struct ospf6_area *ospf6_area_lookup(u_int32_t, struct ospf6 *);
 extern void ospf6_area_enable(struct ospf6_area *);
 extern void ospf6_area_disable(struct ospf6_area *);
 
-extern void ospf6_area_show(struct vty *, struct ospf6_area *);
+extern void ospf6_area_show(struct vty *, struct ospf6_area *, json_object *json,
+			    u_char use_json);
 
 extern void ospf6_area_plist_update(struct prefix_list *plist, int add);
 extern void ospf6_area_config_write(struct vty *vty);
diff --git a/ospf6d/ospf6_top.c b/ospf6d/ospf6_top.c
index 5d1144335..2948de6b3 100644
--- a/ospf6d/ospf6_top.c
+++ b/ospf6d/ospf6_top.c
@@ -27,6 +27,7 @@
 #include "prefix.h"
 #include "table.h"
 #include "thread.h"
+#include <lib/json.h>
 #include "command.h"
 #include "defaults.h"
 
@@ -803,88 +804,182 @@ DEFUN (no_ospf6_stub_router_shutdown,
 }
 #endif
 
-static void ospf6_show(struct vty *vty, struct ospf6 *o)
+static void ospf6_show(struct vty *vty, struct ospf6 *o, json_object *json)
 {
 	struct listnode *n;
 	struct ospf6_area *oa;
 	char router_id[16], duration[32];
 	struct timeval now, running, result;
 	char buf[32], rbuf[32];
+	json_object *json_areas = NULL;
+
+	if(json)
+		json_areas = json_object_new_object();
 
 	/* process id, router id */
 	inet_ntop(AF_INET, &o->router_id, router_id, sizeof(router_id));
-	vty_out(vty, " OSPFv3 Routing Process (0) with Router-ID %s\n",
-		router_id);
-
+	if(json) {
+		json_object_string_add(json, "routerId", router_id);
+	} else {
+		vty_out(vty, " OSPFv3 Routing Process (0) with Router-ID %s\n",
+			router_id);
+	}
 	/* running time */
 	monotime(&now);
 	timersub(&now, &o->starttime, &running);
 	timerstring(&running, duration, sizeof(duration));
-	vty_out(vty, " Running %s\n", duration);
+	if(!json) {
+		vty_out(vty, " Running %s\n", duration);
+	}
 
 	/* Redistribute configuration */
 	/* XXX */
-
-	vty_out(vty, " LSA minimum arrival %d msecs\n", o->lsa_minarrival);
+	if(json) {
+		json_object_int_add(json, "lsaMinArrivalMsecs", o->lsa_minarrival);
+	} else {
+		vty_out(vty, " LSA minimum arrival %d msecs\n", o->lsa_minarrival);
+	}
 
 	/* Show SPF parameters */
-	vty_out(vty,
-		" Initial SPF scheduling delay %d millisec(s)\n"
-		" Minimum hold time between consecutive SPFs %d millsecond(s)\n"
-		" Maximum hold time between consecutive SPFs %d millsecond(s)\n"
-		" Hold time multiplier is currently %d\n",
-		o->spf_delay, o->spf_holdtime, o->spf_max_holdtime,
-		o->spf_hold_multiplier);
-
-	vty_out(vty, " SPF algorithm ");
-	if (o->ts_spf.tv_sec || o->ts_spf.tv_usec) {
-		timersub(&now, &o->ts_spf, &result);
-		timerstring(&result, buf, sizeof(buf));
-		ospf6_spf_reason_string(o->last_spf_reason, rbuf, sizeof(rbuf));
-		vty_out(vty, "last executed %s ago, reason %s\n", buf, rbuf);
-		vty_out(vty, " Last SPF duration %lld sec %lld usec\n",
-			(long long)o->ts_spf_duration.tv_sec,
-			(long long)o->ts_spf_duration.tv_usec);
-	} else
-		vty_out(vty, "has not been run\n");
-	threadtimer_string(now, o->t_spf_calc, buf, sizeof(buf));
-	vty_out(vty, " SPF timer %s%s\n", (o->t_spf_calc ? "due in " : "is "),
-		buf);
-
-	if (CHECK_FLAG(o->flag, OSPF6_STUB_ROUTER))
-		vty_out(vty, " Router Is Stub Router\n");
+	if(json) {
+		json_object_int_add(json, "spfScheduleDelayMsecs",
+				    o->spf_delay);
+		json_object_int_add(json, "holdtimeMinMsecs",
+				    o->spf_holdtime);
+		json_object_int_add(json, "holdtimeMaxMsecs",
+				    o->spf_max_holdtime);
+		json_object_int_add(json, "holdtimeMultplier",
+				    o->spf_hold_multiplier);
+	} else {
+		vty_out(vty,
+			" Initial SPF scheduling delay %d millisec(s)\n"
+			" Minimum hold time between consecutive SPFs %d millsecond(s)\n"
+			" Maximum hold time between consecutive SPFs %d millsecond(s)\n"
+			" Hold time multiplier is currently %d\n",
+			o->spf_delay, o->spf_holdtime, o->spf_max_holdtime,
+			o->spf_hold_multiplier);
+	}
+	if(json) {
+		if (o->ts_spf.tv_sec || o->ts_spf.tv_usec) {
+			long time_store = 0;
+
+			time_store =
+				monotime_since(&o->ts_spf, NULL) / 1000LL;
+			json_object_int_add(json, "spfLastExecutedMsecs",
+					    time_store);
+
+			time_store = (1000 * o->ts_spf_duration.tv_sec)
+				     + (o->ts_spf_duration.tv_usec / 1000);
+			json_object_int_add(json, "spfLastDurationMsecs",
+					    time_store);
+		} else
+			json_object_boolean_true_add(json, "spfHasNotRun");
+	} else {
+		vty_out(vty, " SPF algorithm ");
+		if (o->ts_spf.tv_sec || o->ts_spf.tv_usec) {
+			timersub(&now, &o->ts_spf, &result);
+			timerstring(&result, buf, sizeof(buf));
+			ospf6_spf_reason_string(o->last_spf_reason, rbuf, sizeof(rbuf));
+			vty_out(vty, "last executed %s ago, reason %s\n", buf, rbuf);
+			vty_out(vty, " Last SPF duration %lld sec %lld usec\n",
+				(long long)o->ts_spf_duration.tv_sec,
+				(long long)o->ts_spf_duration.tv_usec);
+		} else
+			vty_out(vty, "has not been run\n");
+	}
+
+	if(json) {
+		if (o->t_spf_calc) {
+			long time_store;
+			time_store =
+				monotime_until(&o->t_spf_calc->u.sands, NULL)
+				/ 1000LL;
+			json_object_int_add(json, "spfTimerDueInMsecs",
+					    time_store);
+		}
+
+	} else {
+		threadtimer_string(now, o->t_spf_calc, buf, sizeof(buf));
+		vty_out(vty, " SPF timer %s%s\n", (o->t_spf_calc ? "due in " : "is "),
+			buf);
+	}
+
+	if (CHECK_FLAG(o->flag, OSPF6_STUB_ROUTER)) {
+		if(json) {
+			json_object_boolean_true_add(json,
+						     "stubAdvertisement");
+		} else {
+			vty_out(vty, " Router Is Stub Router\n");
+		}
+	}
 
 	/* LSAs */
-	vty_out(vty, " Number of AS scoped LSAs is %u\n", o->lsdb->count);
+	if (json) {
+		json_object_int_add(
+			json, "lsaExternalCounter",
+			o->lsdb->count);
+	} else {
+		vty_out(vty, " Number of AS scoped LSAs is %u\n", o->lsdb->count);
+	}
 
 	/* Areas */
-	vty_out(vty, " Number of areas in this router is %u\n",
-		listcount(o->area_list));
+	if (json)
+		json_object_int_add(json, "attachedAreaCounter",
+				    listcount(o->area_list));
+	else
+		vty_out(vty, " Number of areas in this router is %u\n",
+			listcount(o->area_list));
 
 	if (CHECK_FLAG(o->config_flags, OSPF6_LOG_ADJACENCY_CHANGES)) {
-		if (CHECK_FLAG(o->config_flags, OSPF6_LOG_ADJACENCY_DETAIL))
-			vty_out(vty, " All adjacency changes are logged\n");
-		else
-			vty_out(vty, " Adjacency changes are logged\n");
+		if (CHECK_FLAG(o->config_flags, OSPF6_LOG_ADJACENCY_DETAIL)) {
+			if (json)
+				json_object_boolean_true_add(
+					json, "adjacencyChangesLoggedAll");
+			else
+				vty_out(vty, " All adjacency changes are logged\n");
+		} else {
+			if (json)
+				json_object_boolean_true_add(
+					json, "adjacencyChangesLogged");
+			else
+				vty_out(vty, " Adjacency changes are logged\n");
+		}
 	}
 
-	vty_out(vty, "\n");
+	if(!json)
+		vty_out(vty, "\n");
 
 	for (ALL_LIST_ELEMENTS_RO(o->area_list, n, oa))
-		ospf6_area_show(vty, oa);
+		ospf6_area_show(vty, oa, json_areas, json ? 1: 0);
+
+	if(json) {
+		json_object_object_add(json, "areas", json_areas);
+	}
 }
 
 /* show top level structures */
 DEFUN (show_ipv6_ospf6,
        show_ipv6_ospf6_cmd,
-       "show ipv6 ospf6",
+       "show ipv6 ospf6 [json]",
        SHOW_STR
        IP6_STR
-       OSPF6_STR)
+       OSPF6_STR
+       JSON_STR)
 {
 	OSPF6_CMD_CHECK_RUNNING();
+	json_object *json = NULL;
+	u_char uj = use_json(argc, argv);
+
+	if(uj)
+		json = json_object_new_object();
+
+	ospf6_show(vty, ospf6, json);
+	if (uj)
+		vty_out(vty, "%s\n", json_object_to_json_string_ext(
+				     json, JSON_C_TO_STRING_PRETTY));
+	if (uj)
+		json_object_free(json);
 
-	ospf6_show(vty, ospf6);
 	return CMD_SUCCESS;
 }
 
