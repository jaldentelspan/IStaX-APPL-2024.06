commit 337d5017fa5bfe442af215b68b4d165267308dd2
Author: Rene Nielsen <rene.nielsen@microchip.com>
Date:   Tue Oct 6 13:19:19 2020 +0200

    4.0-1220

diff --git a/ospf6d/ospf6_interface.c b/ospf6d/ospf6_interface.c
index e917d72e1..743c6b433 100644
--- a/ospf6d/ospf6_interface.c
+++ b/ospf6d/ospf6_interface.c
@@ -1276,7 +1276,7 @@ DEFUN (show_ipv6_ospf6_interface_ifname_prefix,
 	}
 
 	ospf6_route_table_show(vty, idx_prefix, argc, argv,
-			       oi->route_connected);
+			       oi->route_connected, NULL, 0);
 
 	return CMD_SUCCESS;
 }
@@ -1305,7 +1305,7 @@ DEFUN (show_ipv6_ospf6_interface_prefix,
 			continue;
 
 		ospf6_route_table_show(vty, idx_prefix, argc, argv,
-				       oi->route_connected);
+				       oi->route_connected, NULL, 0);
 	}
 
 	return CMD_SUCCESS;
diff --git a/ospf6d/ospf6_route.c b/ospf6d/ospf6_route.c
index 735b28a69..3ce66c4a8 100644
--- a/ospf6d/ospf6_route.c
+++ b/ospf6d/ospf6_route.c
@@ -1047,17 +1047,23 @@ void ospf6_route_show(struct vty *vty, struct ospf6_route *route)
 	}
 }
 
-void ospf6_route_show_detail(struct vty *vty, struct ospf6_route *route)
+void ospf6_route_show_detail(struct vty *vty, struct ospf6_route *route, json_object *json, u_char use_json)
 {
 	const char *ifname;
 	char destination[PREFIX2STR_BUFFER], nexthop[64];
-	char area_id[16], id[16], adv_router[16], capa[16], options[16];
+	char area_id[16], id[16], adv_router[16], capa[16], options[16], buf[20];
 	struct timeval now, res;
 	char duration[64];
 	struct listnode *node;
 	struct ospf6_nexthop *nh;
+	json_object *json_route = NULL;
+	json_object *json_route_array = NULL;
+	json_object *json_next_hop_array = NULL;
 
 	monotime(&now);
+	if(use_json) {
+		json_route = json_object_new_object();
+	}
 
 	/* destination */
 	if (route->type == OSPF6_DEST_TYPE_LINKSTATE)
@@ -1068,73 +1074,99 @@ void ospf6_route_show_detail(struct vty *vty, struct ospf6_route *route)
 			  destination, sizeof(destination));
 	else
 		prefix2str(&route->prefix, destination, sizeof(destination));
-	vty_out(vty, "Destination: %s\n", destination);
-
-	/* destination type */
-	vty_out(vty, "Destination type: %s\n",
+	if(use_json) {
+		snprintf(buf, sizeof(buf), "%s %s", OSPF6_DEST_TYPE_SUBSTR(route->type), OSPF6_PATH_TYPE_SUBSTR(route->path.type));
+		json_object_string_add(json_route, "routeType", buf);
+	} else {
+		vty_out(vty, "Destination: %s\n", destination);
+		/* destination type */
+		vty_out(vty, "Destination type: %s\n",
 		OSPF6_DEST_TYPE_NAME(route->type));
-
-	/* Time */
-	timersub(&now, &route->installed, &res);
-	timerstring(&res, duration, sizeof(duration));
-	vty_out(vty, "Installed Time: %s ago\n", duration);
-
-	timersub(&now, &route->changed, &res);
-	timerstring(&res, duration, sizeof(duration));
-	vty_out(vty, "  Changed Time: %s ago\n", duration);
-
-	/* Debugging info */
-	vty_out(vty, "Lock: %d Flags: %s%s%s%s\n", route->lock,
-		(CHECK_FLAG(route->flag, OSPF6_ROUTE_BEST) ? "B" : "-"),
-		(CHECK_FLAG(route->flag, OSPF6_ROUTE_ADD) ? "A" : "-"),
-		(CHECK_FLAG(route->flag, OSPF6_ROUTE_REMOVE) ? "R" : "-"),
-		(CHECK_FLAG(route->flag, OSPF6_ROUTE_CHANGE) ? "C" : "-"));
-	vty_out(vty, "Memory: prev: %p this: %p next: %p\n",
-		(void *)route->prev, (void *)route, (void *)route->next);
-
+	}
+	if(!use_json) {
+		/* Time */
+		timersub(&now, &route->installed, &res);
+		timerstring(&res, duration, sizeof(duration));
+		vty_out(vty, "Installed Time: %s ago\n", duration);
+
+		timersub(&now, &route->changed, &res);
+		timerstring(&res, duration, sizeof(duration));
+		vty_out(vty, "  Changed Time: %s ago\n", duration);
+
+		/* Debugging info */
+		vty_out(vty, "Lock: %d Flags: %s%s%s%s\n", route->lock,
+			(CHECK_FLAG(route->flag, OSPF6_ROUTE_BEST) ? "B" : "-"),
+			(CHECK_FLAG(route->flag, OSPF6_ROUTE_ADD) ? "A" : "-"),
+			(CHECK_FLAG(route->flag, OSPF6_ROUTE_REMOVE) ? "R" : "-"),
+			(CHECK_FLAG(route->flag, OSPF6_ROUTE_CHANGE) ? "C" : "-"));
+		vty_out(vty, "Memory: prev: %p this: %p next: %p\n",
+			(void *)route->prev, (void *)route, (void *)route->next);
+	}
 	/* Path section */
 
 	/* Area-ID */
 	inet_ntop(AF_INET, &route->path.area_id, area_id, sizeof(area_id));
-	vty_out(vty, "Associated Area: %s\n", area_id);
-
-	/* Path type */
-	vty_out(vty, "Path Type: %s\n", OSPF6_PATH_TYPE_NAME(route->path.type));
-
-	/* LS Origin */
-	inet_ntop(AF_INET, &route->path.origin.id, id, sizeof(id));
-	inet_ntop(AF_INET, &route->path.origin.adv_router, adv_router,
-		  sizeof(adv_router));
-	vty_out(vty, "LS Origin: %s Id: %s Adv: %s\n",
-		ospf6_lstype_name(route->path.origin.type), id, adv_router);
-
-	/* Options */
-	ospf6_options_printbuf(route->path.options, options, sizeof(options));
-	vty_out(vty, "Options: %s\n", options);
-
-	/* Router Bits */
-	ospf6_capability_printbuf(route->path.router_bits, capa, sizeof(capa));
-	vty_out(vty, "Router Bits: %s\n", capa);
-
-	/* Prefix Options */
-	vty_out(vty, "Prefix Options: xxx\n");
-
-	/* Metrics */
-	vty_out(vty, "Metric Type: %d\n", route->path.metric_type);
-	vty_out(vty, "Metric: %d (%d)\n", route->path.cost,
-		route->path.u.cost_e2);
-
-	vty_out(vty, "Paths count: %u\n", route->paths->count);
-	vty_out(vty, "Nexthop count: %u\n", route->nh_list->count);
-	/* Nexthops */
-	vty_out(vty, "Nexthop:\n");
+	if(use_json) {
+		json_object_string_add(json_route, "area", area_id);
+		json_object_int_add(json_route, "cost", route->path.cost);
+	} else {
+		vty_out(vty, "Associated Area: %s\n", area_id);
+	}
+	if(!use_json) {
+		/* Path type */
+		vty_out(vty, "Path Type: %s\n", OSPF6_PATH_TYPE_NAME(route->path.type));
+
+		/* LS Origin */
+		inet_ntop(AF_INET, &route->path.origin.id, id, sizeof(id));
+		inet_ntop(AF_INET, &route->path.origin.adv_router, adv_router,
+			  sizeof(adv_router));
+		vty_out(vty, "LS Origin: %s Id: %s Adv: %s\n",
+			ospf6_lstype_name(route->path.origin.type), id, adv_router);
+
+		/* Options */
+		ospf6_options_printbuf(route->path.options, options, sizeof(options));
+		vty_out(vty, "Options: %s\n", options);
+
+		/* Router Bits */
+		ospf6_capability_printbuf(route->path.router_bits, capa, sizeof(capa));
+		vty_out(vty, "Router Bits: %s\n", capa);
+
+		/* Prefix Options */
+		vty_out(vty, "Prefix Options: xxx\n");
+		/* Metrics */
+		vty_out(vty, "Metric Type: %d\n", route->path.metric_type);
+		vty_out(vty, "Metric: %d (%d)\n", route->path.cost,
+			route->path.u.cost_e2);
+ 
+		vty_out(vty, "Paths count: %u\n", route->paths->count);
+		vty_out(vty, "Nexthop count: %u\n", route->nh_list->count);
+		/* Nexthops */
+		vty_out(vty, "Nexthop:\n");
+	}
 	for (ALL_LIST_ELEMENTS_RO(route->nh_list, node, nh)) {
 		/* nexthop */
 		inet_ntop(AF_INET6, &nh->address, nexthop, sizeof(nexthop));
 		ifname = ifindex2ifname(nh->ifindex, VRF_DEFAULT);
-		vty_out(vty, "  %s %.*s\n", nexthop, IFNAMSIZ, ifname);
+		if(use_json) {
+			json_object *json_next_hop = json_object_new_object();
+			json_object_string_add(json_next_hop, "ip", nexthop);
+			json_object_string_add(json_next_hop, "directly attached to", ifname);
+			if(!json_next_hop_array)
+				json_next_hop_array = json_object_new_array();
+			json_object_array_add(json_next_hop_array, json_next_hop);
+		} else {
+			vty_out(vty, "  %s %.*s\n", nexthop, IFNAMSIZ, ifname);
+		}
+	}
+	if(use_json) {
+		if(json_next_hop_array)
+			json_object_object_add(json_route, "nexthops", json_next_hop_array);
+		json_route_array = json_object_new_array();
+		json_object_array_add(json_route_array, json_route);
+		json_object_object_add(json, destination, json_route_array);
+	} else {
+		vty_out(vty, "\n");
 	}
-	vty_out(vty, "\n");
 }
 
 static void ospf6_route_show_table_summary(struct vty *vty,
@@ -1191,7 +1223,7 @@ static void ospf6_route_show_table_prefix(struct vty *vty,
 	ospf6_route_lock(route);
 	while (route && ospf6_route_is_prefix(prefix, route)) {
 		/* Specifying a prefix will always display details */
-		ospf6_route_show_detail(vty, route);
+		ospf6_route_show_detail(vty, route, NULL, 0);
 		route = ospf6_route_next(route);
 	}
 	if (route)
@@ -1212,7 +1244,7 @@ static void ospf6_route_show_table_address(struct vty *vty,
 	ospf6_route_lock(route);
 	while (route && ospf6_route_is_prefix(prefix, route)) {
 		/* Specifying a prefix will always display details */
-		ospf6_route_show_detail(vty, route);
+		ospf6_route_show_detail(vty, route, NULL, 0);
 		route = ospf6_route_next(route);
 	}
 	if (route)
@@ -1229,7 +1261,7 @@ static void ospf6_route_show_table_match(struct vty *vty, int detail,
 	route = ospf6_route_match_head(prefix, table);
 	while (route) {
 		if (detail)
-			ospf6_route_show_detail(vty, route);
+			ospf6_route_show_detail(vty, route, NULL, 0);
 		else
 			ospf6_route_show(vty, route);
 		route = ospf6_route_match_next(prefix, route);
@@ -1246,7 +1278,7 @@ static void ospf6_route_show_table_type(struct vty *vty, int detail,
 	while (route) {
 		if (route->path.type == type) {
 			if (detail)
-				ospf6_route_show_detail(vty, route);
+				ospf6_route_show_detail(vty, route, NULL, 0);
 			else
 				ospf6_route_show(vty, route);
 		}
@@ -1255,14 +1287,14 @@ static void ospf6_route_show_table_type(struct vty *vty, int detail,
 }
 
 static void ospf6_route_show_table(struct vty *vty, int detail,
-				   struct ospf6_route_table *table)
+				   struct ospf6_route_table *table, json_object *json, u_char use_json)
 {
 	struct ospf6_route *route;
 
 	route = ospf6_route_head(table);
 	while (route) {
 		if (detail)
-			ospf6_route_show_detail(vty, route);
+			ospf6_route_show_detail(vty, route, json, use_json);
 		else
 			ospf6_route_show(vty, route);
 		route = ospf6_route_next(route);
@@ -1271,7 +1303,7 @@ static void ospf6_route_show_table(struct vty *vty, int detail,
 
 int ospf6_route_table_show(struct vty *vty, int argc_start, int argc,
 			   struct cmd_token **argv,
-			   struct ospf6_route_table *table)
+			   struct ospf6_route_table *table, json_object *json, u_char use_json)
 {
 	int summary = 0;
 	int match = 0;
@@ -1320,6 +1352,11 @@ int ospf6_route_table_show(struct vty *vty, int argc_start, int argc,
 			continue;
 		}
 
+		if (strmatch(argv[i]->text, "json")) {
+			continue;
+		}
+
+
 		ret = str2prefix(argv[i]->arg, &prefix);
 		if (ret == 1 && prefix.family == AF_INET6) {
 			isprefix++;
@@ -1327,8 +1364,8 @@ int ospf6_route_table_show(struct vty *vty, int argc_start, int argc,
 				slash++;
 			continue;
 		}
-
-		vty_out(vty, "Malformed argument: %s\n", argv[i]->arg);
+		if(!use_json)
+			vty_out(vty, "Malformed argument: %s\n", argv[i]->arg);
 		return CMD_SUCCESS;
 	}
 
@@ -1354,7 +1391,7 @@ int ospf6_route_table_show(struct vty *vty, int argc_start, int argc,
 	else if (type)
 		ospf6_route_show_table_type(vty, detail, type, table);
 	else
-		ospf6_route_show_table(vty, detail, table);
+		ospf6_route_show_table(vty, detail, table, json, use_json);
 
 	return CMD_SUCCESS;
 }
@@ -1403,7 +1440,7 @@ static void ospf6_linkstate_show_table_exact(struct vty *vty,
 	ospf6_route_lock(route);
 	while (route && ospf6_route_is_prefix(prefix, route)) {
 		/* Specifying a prefix will always display details */
-		ospf6_route_show_detail(vty, route);
+		ospf6_route_show_detail(vty, route, NULL, 0);
 		route = ospf6_route_next(route);
 	}
 	if (route)
@@ -1421,7 +1458,7 @@ static void ospf6_linkstate_show_table(struct vty *vty, int detail,
 	route = ospf6_route_head(table);
 	while (route) {
 		if (detail)
-			ospf6_route_show_detail(vty, route);
+			ospf6_route_show_detail(vty, route, NULL, 0);
 		else
 			ospf6_linkstate_show(vty, route);
 		route = ospf6_route_next(route);
diff --git a/ospf6d/ospf6_route.h b/ospf6d/ospf6_route.h
index b759828c3..d0f48aaa5 100644
--- a/ospf6d/ospf6_route.h
+++ b/ospf6d/ospf6_route.h
@@ -116,6 +116,7 @@ struct ospf6_path {
 #include "prefix.h"
 #include "table.h"
 #include "bitfield.h"
+#include <lib/json.h>
 
 struct ospf6_route {
 	struct route_node *rnode;
@@ -323,10 +324,10 @@ extern void ospf6_route_dump(struct ospf6_route_table *table);
 
 
 extern void ospf6_route_show(struct vty *vty, struct ospf6_route *route);
-extern void ospf6_route_show_detail(struct vty *vty, struct ospf6_route *route);
+extern void ospf6_route_show_detail(struct vty *vty, struct ospf6_route *route, json_object *json, u_char uj);
 
 extern int ospf6_route_table_show(struct vty *, int, int, struct cmd_token **,
-				  struct ospf6_route_table *);
+				  struct ospf6_route_table *, json_object *json, u_char uj);
 extern int ospf6_linkstate_table_show(struct vty *vty, int idx_ipv4, int argc,
 				      struct cmd_token **argv,
 				      struct ospf6_route_table *table);
diff --git a/ospf6d/ospf6_top.c b/ospf6d/ospf6_top.c
index 2948de6b3..f0317acba 100644
--- a/ospf6d/ospf6_top.c
+++ b/ospf6d/ospf6_top.c
@@ -985,7 +985,7 @@ DEFUN (show_ipv6_ospf6,
 
 DEFUN (show_ipv6_ospf6_route,
        show_ipv6_ospf6_route_cmd,
-       "show ipv6 ospf6 route [<intra-area|inter-area|external-1|external-2|X:X::X:X|X:X::X:X/M|detail|summary>]",
+       "show ipv6 ospf6 route [<intra-area|inter-area|external-1|external-2|X:X::X:X|X:X::X:X/M|detail|summary>] [json]",
        SHOW_STR
        IP6_STR
        OSPF6_STR
@@ -997,11 +997,22 @@ DEFUN (show_ipv6_ospf6_route,
        "Specify IPv6 address\n"
        "Specify IPv6 prefix\n"
        "Detailed information\n"
-       "Summary of route table\n")
+       "Summary of route table\n"
+	JSON_STR)
 {
+	json_object *json = NULL;
+	u_char uj = use_json(argc, argv);
 	OSPF6_CMD_CHECK_RUNNING();
 
-	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table);
+	if(uj) {
+		json = json_object_new_object();
+	}
+	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table, json, uj);
+	if(uj) {
+		vty_out(vty, "%s\n", json_object_to_json_string_ext(
+				   json, JSON_C_TO_STRING_PRETTY));
+		json_object_free(json);
+	}
 	return CMD_SUCCESS;
 }
 
@@ -1018,7 +1029,7 @@ DEFUN (show_ipv6_ospf6_route_match,
 {
 	OSPF6_CMD_CHECK_RUNNING();
 
-	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table);
+	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table, NULL, 0);
 	return CMD_SUCCESS;
 }
 
@@ -1036,7 +1047,7 @@ DEFUN (show_ipv6_ospf6_route_match_detail,
 {
 	OSPF6_CMD_CHECK_RUNNING();
 
-	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table);
+	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table, NULL, 0);
 	return CMD_SUCCESS;
 }
 
@@ -1057,7 +1068,7 @@ DEFUN (show_ipv6_ospf6_route_type_detail,
 {
 	OSPF6_CMD_CHECK_RUNNING();
 
-	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table);
+	ospf6_route_table_show(vty, 4, argc, argv, ospf6->route_table, NULL, 0);
 	return CMD_SUCCESS;
 }
 
diff --git a/ospf6d/ospf6d.c b/ospf6d/ospf6d.c
index dc2827c24..6fa034f53 100644
--- a/ospf6d/ospf6d.c
+++ b/ospf6d/ospf6d.c
@@ -1221,7 +1221,7 @@ DEFUN (show_ipv6_ospf6_border_routers,
 		if (strmatch(argv[idx_ipv4]->text, "detail")) {
 			for (ro = ospf6_route_head(ospf6->brouter_table); ro;
 			     ro = ospf6_route_next(ro))
-				ospf6_route_show_detail(vty, ro);
+				ospf6_route_show_detail(vty, ro, NULL, 0);
 		} else {
 			inet_pton(AF_INET, argv[idx_ipv4]->arg, &adv_router);
 
@@ -1234,7 +1234,7 @@ DEFUN (show_ipv6_ospf6_border_routers,
 				return CMD_SUCCESS;
 			}
 
-			ospf6_route_show_detail(vty, ro);
+			ospf6_route_show_detail(vty, ro, NULL, 0);
 			return CMD_SUCCESS;
 		}
 	} else {
