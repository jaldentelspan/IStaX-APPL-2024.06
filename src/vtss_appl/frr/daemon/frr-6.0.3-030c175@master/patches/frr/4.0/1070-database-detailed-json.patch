commit eaadbd484b1fdebb431a0784a1904ea73b4e7f26
Author: Rene Nielsen <rene.nielsen@microchip.com>
Date:   Tue Oct 6 13:04:45 2020 +0200

    4.0-1070

diff --git a/ospfd/ospf_vty.c b/ospfd/ospf_vty.c
index 258262f59..53865ac7e 100644
--- a/ospfd/ospf_vty.c
+++ b/ospfd/ospf_vty.c
@@ -5971,41 +5971,52 @@ static const char *show_database_header[] = {
 	"Opaque-Type/Id  ADV Router      Age  Seq#       CkSum",
 };
 
-static void show_ip_ospf_database_header(struct vty *vty, struct ospf_lsa *lsa)
+static void show_ip_ospf_database_header(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	struct router_lsa *rlsa = (struct router_lsa *)lsa->data;
 
-	vty_out(vty, "  LS age: %d\n", LS_AGE(lsa));
-	vty_out(vty, "  Options: 0x%-2x : %s\n", lsa->data->options,
-		ospf_options_dump(lsa->data->options));
-	vty_out(vty, "  LS Flags: 0x%-2x %s\n", lsa->flags,
-		((lsa->flags & OSPF_LSA_LOCAL_XLT) ? "(Translated from Type-7)"
-						   : ""));
-
-	if (lsa->data->type == OSPF_ROUTER_LSA) {
-		vty_out(vty, "  Flags: 0x%x", rlsa->flags);
-
-		if (rlsa->flags)
-			vty_out(vty, " :%s%s%s%s",
-				IS_ROUTER_LSA_BORDER(rlsa) ? " ABR" : "",
-				IS_ROUTER_LSA_EXTERNAL(rlsa) ? " ASBR" : "",
-				IS_ROUTER_LSA_VIRTUAL(rlsa) ? " VL-endpoint"
-							    : "",
-				IS_ROUTER_LSA_SHORTCUT(rlsa) ? " Shortcut"
-							     : "");
+	if (use_json) {
+		json_object_int_add(json, "lsAge", LS_AGE(lsa));
+		json_object_string_add(json, "optionsList", ospf_options_dump(lsa->data->options));
+		json_object_string_add(json, "lsType", lookup_msg(ospf_lsa_type_msg, lsa->data->type, NULL));
+		json_object_string_add(json, "linkStateId", inet_ntoa(lsa->data->id));
+		json_object_string_add(json, "advRouter", inet_ntoa(lsa->data->adv_router));
+		json_object_int_add(json, "sequence", (u_long)ntohl(lsa->data->ls_seqnum));
+		json_object_int_add(json, "checksum", ntohs(lsa->data->checksum));
+		json_object_int_add(json, "length", ntohs(lsa->data->length));
+	} else {
+		vty_out(vty, "  LS age: %d\n", LS_AGE(lsa));
+		vty_out(vty, "  Options: 0x%-2x : %s\n", lsa->data->options,
+			ospf_options_dump(lsa->data->options));
+		vty_out(vty, "  LS Flags: 0x%-2x %s\n", lsa->flags,
+			((lsa->flags & OSPF_LSA_LOCAL_XLT) ? "(Translated from Type-7)"
+							   : ""));
+
+		if (lsa->data->type == OSPF_ROUTER_LSA) {
+			vty_out(vty, "  Flags: 0x%x", rlsa->flags);
+
+			if (rlsa->flags)
+				vty_out(vty, " :%s%s%s%s",
+					IS_ROUTER_LSA_BORDER(rlsa) ? " ABR" : "",
+					IS_ROUTER_LSA_EXTERNAL(rlsa) ? " ASBR" : "",
+					IS_ROUTER_LSA_VIRTUAL(rlsa) ? " VL-endpoint"
+								    : "",
+					IS_ROUTER_LSA_SHORTCUT(rlsa) ? " Shortcut"
+								     : "");
 
-		vty_out(vty, "\n");
+			vty_out(vty, "\n");
+		}
+		vty_out(vty, "  LS Type: %s\n",
+			lookup_msg(ospf_lsa_type_msg, lsa->data->type, NULL));
+		vty_out(vty, "  Link State ID: %s %s\n", inet_ntoa(lsa->data->id),
+			lookup_msg(ospf_link_state_id_type_msg, lsa->data->type, NULL));
+		vty_out(vty, "  Advertising Router: %s\n",
+			inet_ntoa(lsa->data->adv_router));
+		vty_out(vty, "  LS Seq Number: %08lx\n",
+			(u_long)ntohl(lsa->data->ls_seqnum));
+		vty_out(vty, "  Checksum: 0x%04x\n", ntohs(lsa->data->checksum));
+		vty_out(vty, "  Length: %d\n\n", ntohs(lsa->data->length));
 	}
-	vty_out(vty, "  LS Type: %s\n",
-		lookup_msg(ospf_lsa_type_msg, lsa->data->type, NULL));
-	vty_out(vty, "  Link State ID: %s %s\n", inet_ntoa(lsa->data->id),
-		lookup_msg(ospf_link_state_id_type_msg, lsa->data->type, NULL));
-	vty_out(vty, "  Advertising Router: %s\n",
-		inet_ntoa(lsa->data->adv_router));
-	vty_out(vty, "  LS Seq Number: %08lx\n",
-		(u_long)ntohl(lsa->data->ls_seqnum));
-	vty_out(vty, "  Checksum: 0x%04x\n", ntohs(lsa->data->checksum));
-	vty_out(vty, "  Length: %d\n\n", ntohs(lsa->data->length));
 }
 
 const char *link_type_desc[] = {
@@ -6028,126 +6039,181 @@ const char *link_data_desc[] = {
 
 /* Show router-LSA each Link information. */
 static void show_ip_ospf_database_router_links(struct vty *vty,
-					       struct router_lsa *rl)
+					       struct router_lsa *rl, json_object *json, u_char use_json)
 {
 	int len, type;
 	unsigned int i;
+	json_object *json_array_links = NULL;
 
 	len = ntohs(rl->header.length) - 4;
 	for (i = 0; i < ntohs(rl->links) && len > 0; len -= 12, i++) {
+		json_object *json_link_info = NULL;
+
 		type = rl->link[i].type;
 
-		vty_out(vty, "    Link connected to: %s\n",
-			link_type_desc[type]);
-		vty_out(vty, "     (Link ID) %s: %s\n", link_id_desc[type],
-			inet_ntoa(rl->link[i].link_id));
-		vty_out(vty, "     (Link Data) %s: %s\n", link_data_desc[type],
-			inet_ntoa(rl->link[i].link_data));
-		vty_out(vty, "      Number of TOS metrics: 0\n");
-		vty_out(vty, "       TOS 0 Metric: %d\n",
-			ntohs(rl->link[i].metric));
-		vty_out(vty, "\n");
+		if (use_json) {
+			json_link_info = json_object_new_object();
+
+			json_object_string_add(json_link_info, "linkConnectedTo", link_type_desc[type]);
+			json_object_string_add(json_link_info, "linkID", inet_ntoa(rl->link[i].link_id));
+			json_object_string_add(json_link_info, "linkData", inet_ntoa(rl->link[i].link_data));
+			json_object_int_add(json_link_info, "metric", ntohs(rl->link[i].metric));
+			if (!json_array_links) {
+				json_array_links = json_object_new_array();
+			}
+			json_object_array_add(json_array_links, json_link_info);
+		} else {
+			vty_out(vty, "    Link connected to: %s\n",
+				link_type_desc[type]);
+			vty_out(vty, "     (Link ID) %s: %s\n", link_id_desc[type],
+				inet_ntoa(rl->link[i].link_id));
+			vty_out(vty, "     (Link Data) %s: %s\n", link_data_desc[type],
+				inet_ntoa(rl->link[i].link_data));
+			vty_out(vty, "      Number of TOS metrics: 0\n");
+			vty_out(vty, "       TOS 0 Metric: %d\n",
+				ntohs(rl->link[i].metric));
+			vty_out(vty, "\n");
+		}
+	}
+
+	if (use_json) {
+		if (json_array_links) {
+			json_object_object_add(json, "links", json_array_links);
+		}
 	}
 }
 
 /* Show router-LSA detail information. */
-static int show_router_lsa_detail(struct vty *vty, struct ospf_lsa *lsa)
+static int show_router_lsa_detail(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	if (lsa != NULL) {
 		struct router_lsa *rl = (struct router_lsa *)lsa->data;
 
-		show_ip_ospf_database_header(vty, lsa);
+		show_ip_ospf_database_header(vty, lsa, json, use_json);
 
-		vty_out(vty, "   Number of Links: %d\n\n", ntohs(rl->links));
+		if (use_json) {
+		} else {
+			vty_out(vty, "   Number of Links: %d\n\n", ntohs(rl->links));
+		}
 
-		show_ip_ospf_database_router_links(vty, rl);
-		vty_out(vty, "\n");
+		show_ip_ospf_database_router_links(vty, rl, json, use_json);
+
+		if (!use_json) {
+			vty_out(vty, "\n");
+		}
 	}
 
 	return 0;
 }
 
 /* Show network-LSA detail information. */
-static int show_network_lsa_detail(struct vty *vty, struct ospf_lsa *lsa)
+static int show_network_lsa_detail(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	int length, i;
 
 	if (lsa != NULL) {
 		struct network_lsa *nl = (struct network_lsa *)lsa->data;
 
-		show_ip_ospf_database_header(vty, lsa);
+		show_ip_ospf_database_header(vty, lsa, json, use_json);
 
-		vty_out(vty, "  Network Mask: /%d\n", ip_masklen(nl->mask));
+		if (use_json) {
+			json_object_int_add(json, "networkMask", ip_masklen(nl->mask));
 
-		length = ntohs(lsa->data->length) - OSPF_LSA_HEADER_SIZE - 4;
+			length = ntohs(lsa->data->length) - OSPF_LSA_HEADER_SIZE - 4;
+			for (i = 0; length > 0; i++, length -= 4) {
+				json_object_string_add(json, "attachedRouter", inet_ntoa(nl->routers[i]));
+			}
 
-		for (i = 0; length > 0; i++, length -= 4)
-			vty_out(vty, "        Attached Router: %s\n",
-				inet_ntoa(nl->routers[i]));
+		} else {
+			vty_out(vty, "  Network Mask: /%d\n", ip_masklen(nl->mask));
 
-		vty_out(vty, "\n");
+			length = ntohs(lsa->data->length) - OSPF_LSA_HEADER_SIZE - 4;
+
+			for (i = 0; length > 0; i++, length -= 4)
+				vty_out(vty, "        Attached Router: %s\n",
+					inet_ntoa(nl->routers[i]));
+
+			vty_out(vty, "\n");
+		}
 	}
 
 	return 0;
 }
 
 /* Show summary-LSA detail information. */
-static int show_summary_lsa_detail(struct vty *vty, struct ospf_lsa *lsa)
+static int show_summary_lsa_detail(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	if (lsa != NULL) {
 		struct summary_lsa *sl = (struct summary_lsa *)lsa->data;
 
-		show_ip_ospf_database_header(vty, lsa);
+		show_ip_ospf_database_header(vty, lsa, json, use_json);
 
-		vty_out(vty, "  Network Mask: /%d\n", ip_masklen(sl->mask));
-		vty_out(vty, "        TOS: 0  Metric: %d\n",
-			GET_METRIC(sl->metric));
-		vty_out(vty, "\n");
+		if (use_json) {
+			json_object_int_add(json, "networkMask", ip_masklen(sl->mask));
+			json_object_int_add(json, "metric", GET_METRIC(sl->metric));
+		} else {
+			vty_out(vty, "	Network Mask: /%d\n", ip_masklen(sl->mask));
+			vty_out(vty, "		  TOS: 0  Metric: %d\n",
+				GET_METRIC(sl->metric));
+			vty_out(vty, "\n");
+		}
 	}
 
 	return 0;
 }
 
 /* Show summary-ASBR-LSA detail information. */
-static int show_summary_asbr_lsa_detail(struct vty *vty, struct ospf_lsa *lsa)
+static int show_summary_asbr_lsa_detail(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	if (lsa != NULL) {
 		struct summary_lsa *sl = (struct summary_lsa *)lsa->data;
 
-		show_ip_ospf_database_header(vty, lsa);
+		show_ip_ospf_database_header(vty, lsa, json, use_json);
 
-		vty_out(vty, "  Network Mask: /%d\n", ip_masklen(sl->mask));
-		vty_out(vty, "        TOS: 0  Metric: %d\n",
-			GET_METRIC(sl->metric));
-		vty_out(vty, "\n");
+		if (use_json) {
+			json_object_int_add(json, "networkMask", ip_masklen(sl->mask));
+			json_object_int_add(json, "metric", GET_METRIC(sl->metric));
+		} else {
+			vty_out(vty, "	Network Mask: /%d\n", ip_masklen(sl->mask));
+			vty_out(vty, "		  TOS: 0  Metric: %d\n",
+				GET_METRIC(sl->metric));
+			vty_out(vty, "\n");
+		}
 	}
 
 	return 0;
 }
 
 /* Show AS-external-LSA detail information. */
-static int show_as_external_lsa_detail(struct vty *vty, struct ospf_lsa *lsa)
+static int show_as_external_lsa_detail(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	if (lsa != NULL) {
 		struct as_external_lsa *al =
 			(struct as_external_lsa *)lsa->data;
 
-		show_ip_ospf_database_header(vty, lsa);
+		show_ip_ospf_database_header(vty, lsa, json, use_json);
 
-		vty_out(vty, "  Network Mask: /%d\n", ip_masklen(al->mask));
-		vty_out(vty, "        Metric Type: %s\n",
-			IS_EXTERNAL_METRIC(al->e[0].tos)
-				? "2 (Larger than any link state path)"
-				: "1");
-		vty_out(vty, "        TOS: 0\n");
-		vty_out(vty, "        Metric: %d\n",
-			GET_METRIC(al->e[0].metric));
-		vty_out(vty, "        Forward Address: %s\n",
-			inet_ntoa(al->e[0].fwd_addr));
+		if (use_json) {
+			json_object_int_add(json, "networkMask", ip_masklen(al->mask));
+			json_object_int_add(json, "type", IS_EXTERNAL_METRIC(al->e[0].tos) ? 2 : 1);
+			json_object_int_add(json, "metric", GET_METRIC(al->e[0].metric));
+			json_object_string_add(json, "forwardAddress", inet_ntoa(al->e[0].fwd_addr));
+		} else {
+			vty_out(vty, "  Network Mask: /%d\n", ip_masklen(al->mask));
+			vty_out(vty, "        Metric Type: %s\n",
+				IS_EXTERNAL_METRIC(al->e[0].tos)
+					? "2 (Larger than any link state path)"
+					: "1");
+			vty_out(vty, "        TOS: 0\n");
+			vty_out(vty, "        Metric: %d\n",
+				GET_METRIC(al->e[0].metric));
+			vty_out(vty, "        Forward Address: %s\n",
+				inet_ntoa(al->e[0].fwd_addr));
 
-		vty_out(vty,
-			"        External Route Tag: %" ROUTE_TAG_PRI "\n\n",
-			(route_tag_t)ntohl(al->e[0].route_tag));
+			vty_out(vty,
+				"        External Route Tag: %" ROUTE_TAG_PRI "\n\n",
+				(route_tag_t)ntohl(al->e[0].route_tag));
+		}
 	}
 
 	return 0;
@@ -6178,50 +6244,60 @@ show_as_external_lsa_stdvty (struct ospf_lsa *lsa)
 }
 #endif
 /* Show AS-NSSA-LSA detail information. */
-static int show_as_nssa_lsa_detail(struct vty *vty, struct ospf_lsa *lsa)
+static int show_as_nssa_lsa_detail(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	if (lsa != NULL) {
 		struct as_external_lsa *al =
 			(struct as_external_lsa *)lsa->data;
 
-		show_ip_ospf_database_header(vty, lsa);
+		show_ip_ospf_database_header(vty, lsa, json, use_json);
 
-		vty_out(vty, "  Network Mask: /%d\n", ip_masklen(al->mask));
-		vty_out(vty, "        Metric Type: %s\n",
-			IS_EXTERNAL_METRIC(al->e[0].tos)
-				? "2 (Larger than any link state path)"
-				: "1");
-		vty_out(vty, "        TOS: 0\n");
-		vty_out(vty, "        Metric: %d\n",
-			GET_METRIC(al->e[0].metric));
-		vty_out(vty, "        NSSA: Forward Address: %s\n",
-			inet_ntoa(al->e[0].fwd_addr));
+		if (use_json) {
+			json_object_int_add(json, "networkMask", ip_masklen(al->mask));
+			json_object_int_add(json, "type", IS_EXTERNAL_METRIC(al->e[0].tos) ? 2 : 1);
+			json_object_int_add(json, "metric", GET_METRIC(al->e[0].metric));
+			json_object_string_add(json, "forwardAddress", inet_ntoa(al->e[0].fwd_addr));
+		} else {
 
-		vty_out(vty,
-			"        External Route Tag: %" ROUTE_TAG_PRI "\n\n",
-			(route_tag_t)ntohl(al->e[0].route_tag));
+			vty_out(vty, "  Network Mask: /%d\n", ip_masklen(al->mask));
+			vty_out(vty, "        Metric Type: %s\n",
+				IS_EXTERNAL_METRIC(al->e[0].tos)
+					? "2 (Larger than any link state path)"
+					: "1");
+			vty_out(vty, "        TOS: 0\n");
+			vty_out(vty, "        Metric: %d\n",
+				GET_METRIC(al->e[0].metric));
+			vty_out(vty, "        NSSA: Forward Address: %s\n",
+				inet_ntoa(al->e[0].fwd_addr));
+
+			vty_out(vty,
+				"        External Route Tag: %" ROUTE_TAG_PRI "\n\n",
+				(route_tag_t)ntohl(al->e[0].route_tag));
+		}
 	}
 
 	return 0;
 }
 
-static int show_func_dummy(struct vty *vty, struct ospf_lsa *lsa)
+static int show_func_dummy(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	return 0;
 }
 
-static int show_opaque_lsa_detail(struct vty *vty, struct ospf_lsa *lsa)
+static int show_opaque_lsa_detail(struct vty *vty, struct ospf_lsa *lsa, json_object *json, u_char use_json)
 {
 	if (lsa != NULL) {
-		show_ip_ospf_database_header(vty, lsa);
-		show_opaque_info_detail(vty, lsa);
+		show_ip_ospf_database_header(vty, lsa, json, use_json);
 
-		vty_out(vty, "\n");
+		if (!json) {
+			show_opaque_info_detail(vty, lsa);
+			vty_out(vty, "\n");
+		}
 	}
 	return 0;
 }
 
-int (*show_function[])(struct vty *, struct ospf_lsa *) = {
+int (*show_function[])(struct vty *, struct ospf_lsa *, json_object *json, u_char use_json) = {
 	NULL,
 	show_router_lsa_detail,
 	show_network_lsa_detail,
@@ -6254,48 +6330,107 @@ static void show_lsa_prefix_set(struct vty *vty, struct prefix_ls *lp,
 }
 
 static void show_lsa_detail_proc(struct vty *vty, struct route_table *rt,
-				 struct in_addr *id, struct in_addr *adv_router)
+				 struct in_addr *id, struct in_addr *adv_router, json_object *json, u_char use_json)
 {
 	struct prefix_ls lp;
 	struct route_node *rn, *start;
 	struct ospf_lsa *lsa;
+	json_object *json_route_array = NULL;
 
 	show_lsa_prefix_set(vty, &lp, id, adv_router);
 	start = route_node_get(rt, (struct prefix *)&lp);
 	if (start) {
 		route_lock_node(start);
-		for (rn = start; rn; rn = route_next_until(rn, start))
+		for (rn = start; rn; rn = route_next_until(rn, start)) {
+			json_object *json_general_header = NULL;
+
 			if ((lsa = rn->info)) {
-				if (show_function[lsa->data->type] != NULL)
+
+				if (show_function[lsa->data->type] != NULL) {
+
+					if (use_json) {
+						json_general_header = json_object_new_object();
+					}
+
 					show_function[lsa->data->type](vty,
-								       lsa);
+								       lsa, json_general_header, use_json);
+
+					if (use_json) {
+						if (!json_route_array) {
+							json_route_array = json_object_new_array();
+						}
+						json_object_array_add(json_route_array, json_general_header);
+					}
+				}
 			}
+		}
 		route_unlock_node(start);
+
+		if (use_json) {
+			if (json_route_array) {
+				json_object_object_add(json, "routes", json_route_array);
+			}
+		}
 	}
 }
 
 /* Show detail LSA information
    -- if id is NULL then show all LSAs. */
 static void show_lsa_detail(struct vty *vty, struct ospf *ospf, int type,
-			    struct in_addr *id, struct in_addr *adv_router)
+			    struct in_addr *id, struct in_addr *adv_router, json_object *json, u_char use_json)
 {
 	struct listnode *node;
 	struct ospf_area *area;
+	json_object *json_area_array = NULL;
+	json_object *json_header = NULL;
 
 	switch (type) {
 	case OSPF_AS_EXTERNAL_LSA:
 	case OSPF_OPAQUE_AS_LSA:
-		vty_out(vty, "                %s \n\n",
-			show_database_desc[type]);
-		show_lsa_detail_proc(vty, AS_LSDB(ospf, type), id, adv_router);
+
+		if (use_json) {
+			json_area_array = json_object_new_array();
+			json_header = json_object_new_object();
+		} else {
+			vty_out(vty, "                %s \n\n",
+				show_database_desc[type]);
+		}
+		show_lsa_detail_proc(vty, AS_LSDB(ospf, type), id, adv_router, json_header, use_json);
+
+		if (use_json) {
+			json_object_array_add(json_area_array, json_header);
+			json_object_object_add(json, show_database_desc[type], json_area_array);
+		}
+
 		break;
 	default:
 		for (ALL_LIST_ELEMENTS_RO(ospf->areas, node, area)) {
-			vty_out(vty, "\n                %s (Area %s)\n\n",
-				show_database_desc[type],
-				ospf_area_desc_string(area));
+			json_object *json_ls_header = NULL;
+
+			if (use_json) {
+				json_ls_header = json_object_new_object();
+				json_object_string_add(json_ls_header, "area", ospf_area_desc_string(area));
+			} else {
+				vty_out(vty, "\n                %s (Area %s)\n\n",
+					show_database_desc[type],
+					ospf_area_desc_string(area));
+			}
+
 			show_lsa_detail_proc(vty, AREA_LSDB(area, type), id,
-					     adv_router);
+					     adv_router, json_ls_header, use_json);
+
+			if (use_json) {
+				if (!json_area_array) {
+					json_area_array = json_object_new_array();
+				}
+				json_object_array_add(json_area_array, json_ls_header);
+			}
+		}
+
+		if (use_json) {
+			if (json_area_array) {
+				json_object_object_add(json, "areas", json_area_array);
+			}
 		}
 		break;
 	}
@@ -6303,7 +6438,7 @@ static void show_lsa_detail(struct vty *vty, struct ospf *ospf, int type,
 
 static void show_lsa_detail_adv_router_proc(struct vty *vty,
 					    struct route_table *rt,
-					    struct in_addr *adv_router)
+					    struct in_addr *adv_router, json_object *json, u_char use_json)
 {
 	struct route_node *rn;
 	struct ospf_lsa *lsa;
@@ -6316,13 +6451,13 @@ static void show_lsa_detail_adv_router_proc(struct vty *vty,
 					continue;
 				if (show_function[lsa->data->type] != NULL)
 					show_function[lsa->data->type](vty,
-								       lsa);
+								       lsa, json, use_json);
 			}
 }
 
 /* Show detail LSA information. */
 static void show_lsa_detail_adv_router(struct vty *vty, struct ospf *ospf,
-				       int type, struct in_addr *adv_router)
+				       int type, struct in_addr *adv_router, json_object *json, u_char use_json)
 {
 	struct listnode *node;
 	struct ospf_area *area;
@@ -6333,7 +6468,7 @@ static void show_lsa_detail_adv_router(struct vty *vty, struct ospf *ospf,
 		vty_out(vty, "                %s \n\n",
 			show_database_desc[type]);
 		show_lsa_detail_adv_router_proc(vty, AS_LSDB(ospf, type),
-						adv_router);
+						adv_router, json, use_json);
 		break;
 	default:
 		for (ALL_LIST_ELEMENTS_RO(ospf->areas, node, area)) {
@@ -6341,7 +6476,7 @@ static void show_lsa_detail_adv_router(struct vty *vty, struct ospf *ospf,
 				show_database_desc[type],
 				ospf_area_desc_string(area));
 			show_lsa_detail_adv_router_proc(
-				vty, AREA_LSDB(area, type), adv_router);
+				vty, AREA_LSDB(area, type), adv_router, json, use_json);
 		}
 		break;
 	}
@@ -6584,16 +6719,32 @@ static int show_ip_ospf_database_common(struct vty *vty, struct ospf *ospf,
 	}
 
 	/* `show ip ospf database LSA'. */
-	if (argc == arg_base + 5)
-		show_lsa_detail(vty, ospf, type, NULL, NULL);
+	if (argc == arg_base + 5) {
+		show_lsa_detail(vty, ospf, type, NULL, NULL, json, use_json);
+		if (use_json) {
+			vty_out(vty, "%s\n", json_object_to_json_string_ext(
+							json, JSON_C_TO_STRING_PRETTY));
+			json_object_free(json);
+		}
+	}
 	else if (argc >= arg_base + 6) {
 		ret = inet_aton(argv[arg_base + 5]->arg, &id);
-		if (!ret)
+		if (!ret) {
+			if (use_json) {
+				json_object_free(json);
+			}
 			return CMD_WARNING;
+		}
 
 		/* `show ip ospf database LSA ID'. */
-		if (argc == arg_base + 6)
-			show_lsa_detail(vty, ospf, type, &id, NULL);
+		if (argc == arg_base + 6) {
+			show_lsa_detail(vty, ospf, type, &id, NULL, json, use_json);
+			if (use_json) {
+				vty_out(vty, "%s\n", json_object_to_json_string_ext(
+								json, JSON_C_TO_STRING_PRETTY));
+				json_object_free(json);
+			}
+		}
 		/* `show ip ospf database LSA ID adv-router ADV_ROUTER'. */
 		else if (argc == arg_base + 7) {
 			if (strncmp(argv[arg_base + 6]->text, "s", 1) == 0)
@@ -6601,10 +6752,27 @@ static int show_ip_ospf_database_common(struct vty *vty, struct ospf *ospf,
 			else {
 				ret = inet_aton(argv[arg_base + 7]->arg,
 						&adv_router);
-				if (!ret)
+				if (!ret) {
+					if (use_json) {
+						json_object_free(json);
+					}
 					return CMD_WARNING;
+				}
 			}
-			show_lsa_detail(vty, ospf, type, &id, &adv_router);
+			show_lsa_detail(vty, ospf, type, &id, &adv_router, json, use_json);
+			if (use_json) {
+				vty_out(vty, "%s\n", json_object_to_json_string_ext(
+								json, JSON_C_TO_STRING_PRETTY));
+				json_object_free(json);
+			}
+		} else { // if (argc >= arg_base + 8)
+			if (use_json) {
+				json_object_free(json);
+			}
+		}
+	} else { // if (argc < arg_base + 5)
+		if (use_json) {
+			json_object_free(json);
 		}
 	}
 
@@ -6779,19 +6947,33 @@ static int show_ip_ospf_database_type_adv_router_common(struct vty *vty,
 							struct ospf *ospf,
 							int arg_base, int argc,
 							struct cmd_token **argv,
-							u_char use_vrf)
+							u_char use_vrf, u_char use_json)
 {
 	int idx_type = 4;
 	int type, ret;
 	struct in_addr adv_router;
+	json_object *json = NULL;
 
-	if (ospf->instance)
-		vty_out(vty, "\nOSPF Instance: %d\n", ospf->instance);
+	if (use_json) {
+		json = json_object_new_object();
+	}
+
+	if (ospf->instance) {
+		if (use_json) {
+			json_object_int_add(json, "ospfInstance", ospf->instance);
+		} else {
+			vty_out(vty, "\nOSPF Instance: %d\n", ospf->instance);
+		}
+	}
 
 	ospf_show_vrf_name(ospf, vty, NULL, use_vrf);
 
-	vty_out(vty, "\n       OSPF Router with ID (%s)\n\n",
-		inet_ntoa(ospf->router_id));
+	if (use_json) {
+		json_object_string_add(json, "routerId", inet_ntoa(ospf->router_id));
+	} else {
+		vty_out(vty, "\n       OSPF Router with ID (%s)\n\n",
+			inet_ntoa(ospf->router_id));
+	}
 
 	/* Set database type to show. */
 	if (strncmp(argv[arg_base + idx_type]->text, "r", 1) == 0)
@@ -6812,26 +6994,38 @@ static int show_ip_ospf_database_type_adv_router_common(struct vty *vty,
 		type = OSPF_OPAQUE_AREA_LSA;
 	else if (strncmp(argv[arg_base + idx_type]->text, "opaque-as", 9) == 0)
 		type = OSPF_OPAQUE_AS_LSA;
-	else
+	else {
+		if (use_json) {
+			json_object_free(json);
+		}
 		return CMD_WARNING;
+	}
 
 	/* `show ip ospf database LSA adv-router ADV_ROUTER'. */
 	if (strncmp(argv[arg_base + 5]->text, "s", 1) == 0)
 		adv_router = ospf->router_id;
 	else {
 		ret = inet_aton(argv[arg_base + 6]->arg, &adv_router);
-		if (!ret)
+		if (!ret) {
+			if (use_json) {
+				json_object_free(json);
+			}
 			return CMD_WARNING;
+		}
 	}
 
-	show_lsa_detail_adv_router(vty, ospf, type, &adv_router);
+	show_lsa_detail_adv_router(vty, ospf, type, &adv_router, json, use_json);
+
+	if (use_json) {
+		json_object_free(json);
+	}
 
 	return CMD_SUCCESS;
 }
 
 DEFUN (show_ip_ospf_instance_database_type_adv_router,
        show_ip_ospf_instance_database_type_adv_router_cmd,
-       "show ip ospf [{(1-65535)|vrf NAME}] database <asbr-summary|external|network|router|summary|nssa-external|opaque-link|opaque-area|opaque-as> <adv-router A.B.C.D|self-originate>",
+       "show ip ospf [{(1-65535)|vrf NAME}] database <asbr-summary|external|network|router|summary|nssa-external|opaque-link|opaque-area|opaque-as> <adv-router A.B.C.D|self-originate> [json]",
        SHOW_STR
        IP_STR
        "OSPF information\n"
@@ -6841,7 +7035,8 @@ DEFUN (show_ip_ospf_instance_database_type_adv_router,
        OSPF_LSA_TYPES_DESC
        "Advertising Router link states\n"
        "Advertising Router (as an IP address)\n"
-       "Self-originated link states\n")
+       "Self-originated link states\n"
+       JSON_STR)
 {
 	struct ospf *ospf = NULL;
 	u_short instance = 0;
@@ -6853,6 +7048,12 @@ DEFUN (show_ip_ospf_instance_database_type_adv_router,
 	int idx = 0, idx_vrf = 0;
 	u_char use_vrf = 0;
 
+	u_char uj = use_json(argc, argv);
+
+	if (uj) {
+		--argc;
+	}
+
 	if (argv_find(argv, argc, "(1-65535)", &idx)) {
 		instance = strtoul(argv[idx]->arg, NULL, 10);
 		ospf = ospf_lookup_instance(instance);
@@ -6864,7 +7065,8 @@ DEFUN (show_ip_ospf_instance_database_type_adv_router,
 								     idx ? 1 : 0,
 								     argc,
 								     argv,
-								     use_vrf));
+								     use_vrf,
+								     uj));
 	}
 
 	OSPF_FIND_VRF_ARGS(argv, argc, idx_vrf, vrf_name, all_vrf);
@@ -6877,7 +7079,7 @@ DEFUN (show_ip_ospf_instance_database_type_adv_router,
 					continue;
 				ret = show_ip_ospf_database_type_adv_router_common(vty,
 						ospf, idx ? 1 : 0, argc, argv,
-						use_vrf);
+						use_vrf, uj);
 			}
 		} else {
 			ospf = ospf_lookup_by_inst_name(inst, vrf_name);
@@ -6885,7 +7087,7 @@ DEFUN (show_ip_ospf_instance_database_type_adv_router,
 				return CMD_SUCCESS;
 			ret = show_ip_ospf_database_type_adv_router_common(vty,
 						ospf, idx ? 1 : 0, argc, argv,
-						use_vrf);
+						use_vrf, uj);
 		}
 	} else {
 		/* Display default ospf (instance 0) info */
@@ -6895,7 +7097,7 @@ DEFUN (show_ip_ospf_instance_database_type_adv_router,
 		ret = show_ip_ospf_database_type_adv_router_common(vty, ospf,
 								   idx ? 1 : 0,
 								   argc, argv,
-								   use_vrf);
+								   use_vrf, uj);
 	}
 	return ret;
 	/*return (show_ip_ospf_database_type_adv_router_common(
