commit 2ad6a3ae66fe9b34f69dfa4d336327a1426bb50d
Author: Rene Nielsen <rene.nielsen@microchip.com>
Date:   Thu Oct 29 10:30:14 2020 +0100

    1190-ospfv3-show-neighbor-json.patch

diff --git a/ospf6d/ospf6_neighbor.c b/ospf6d/ospf6_neighbor.c
index 14a290c..82950cd 100644
--- a/ospf6d/ospf6_neighbor.c
+++ b/ospf6d/ospf6_neighbor.c
@@ -25,6 +25,7 @@
 #include "thread.h"
 #include "linklist.h"
 #include "vty.h"
+#include <lib/json.h>
 #include "command.h"
 
 #include "ospf6_proto.h"
@@ -610,7 +611,8 @@ int inactivity_timer(struct thread *thread)
 
 /* vty functions */
 /* show neighbor structure */
-static void ospf6_neighbor_show(struct vty *vty, struct ospf6_neighbor *on)
+static void ospf6_neighbor_show(struct vty *vty, struct ospf6_neighbor *on,
+				json_object *json, bool use_json)
 {
 	char router_id[16];
 	char duration[64];
@@ -618,6 +620,12 @@ static void ospf6_neighbor_show(struct vty *vty, struct ospf6_neighbor *on)
 	char nstate[16];
 	char deadtime[64];
 	long h, m, s;
+	json_object *json_sub = NULL;
+	json_object *json_neigh_array = NULL;
+
+	if (use_json) {
+		json_sub = json_object_new_object();
+	}
 
 	/* Router-ID (Name) */
 	inet_ntop(AF_INET, &on->router_id, router_id, sizeof(router_id));
@@ -659,15 +667,49 @@ static void ospf6_neighbor_show(struct vty *vty, struct ospf6_neighbor *on)
 		 "Neighbor ID", "Pri", "DeadTime", "State", "", "Duration",
 		 "I/F", "State");
 	*/
+	if (!use_json) {
+		vty_out(vty, "%-15s %3d %11s %8s/%-12s %11s %s[%s]\n",
+			router_id, on->priority, deadtime,
+			ospf6_neighbor_state_str[on->state], nstate, duration,
+			on->ospf6_if->interface->name,
+			ospf6_interface_state_str[on->ospf6_if->state]);
+	} else {
+		json_object_int_add(json_sub, "routerDeadIntervalTimerDueMsec",
+				    s);
+		json_object_int_add(json_sub, "nbrPriority", on->priority);
+		json_object_string_add(json_sub, "nbrState",
+				       ospf6_neighbor_state_str[on->state]);
+		json_object_string_add(json_sub, "nbrId", router_id);
+		json_object_string_add(json_sub, "ifaceName",
+				       on->ospf6_if->interface->name);
+	}
 
-	vty_out(vty, "%-15s %3d %11s %8s/%-12s %11s %s[%s]\n", router_id,
-		on->priority, deadtime, ospf6_neighbor_state_str[on->state],
-		nstate, duration, on->ospf6_if->interface->name,
-		ospf6_interface_state_str[on->ospf6_if->state]);
+	if (use_json) {
+		if (on->router_id == 0) {
+			json_object_object_get_ex(json, "neighbor",
+						  &json_neigh_array);
+		} else {
+			json_object_object_get_ex(json, router_id,
+						  &json_neigh_array);
+		}
+
+		if (!json_neigh_array)
+			json_neigh_array = json_object_new_array();
+
+		json_object_array_add(json_neigh_array, json_sub);
+		if (on->router_id == 0) {
+			json_object_object_add(json, "noNbrId",
+					       json_neigh_array);
+		} else {
+			json_object_object_add(json, router_id,
+					       json_neigh_array);
+		}
+	}
 }
 
 static void ospf6_neighbor_show_drchoice(struct vty *vty,
-					 struct ospf6_neighbor *on)
+					 struct ospf6_neighbor *on,
+					 json_object *json, bool use_json)
 {
 	char router_id[16];
 	char drouter[16], bdrouter[16];
@@ -695,135 +737,219 @@ static void ospf6_neighbor_show_drchoice(struct vty *vty,
 }
 
 static void ospf6_neighbor_show_detail(struct vty *vty,
-				       struct ospf6_neighbor *on)
+				       struct ospf6_neighbor *on,
+				       json_object *json, bool use_json)
 {
-	char drouter[16], bdrouter[16];
+	char drouter[16], bdrouter[16], router_id[16];
 	char linklocal_addr[64], duration[32];
 	struct timeval now, res;
 	struct ospf6_lsa *lsa;
+	json_object *json_sub = NULL;
+	json_object *json_neigh_array = NULL;
+	long s = 0;
+
+	if (use_json) {
+		json_sub = json_object_new_object();
+	}
 
 	inet_ntop(AF_INET6, &on->linklocal_addr, linklocal_addr,
 		  sizeof(linklocal_addr));
 	inet_ntop(AF_INET, &on->drouter, drouter, sizeof(drouter));
 	inet_ntop(AF_INET, &on->bdrouter, bdrouter, sizeof(bdrouter));
+	inet_ntop(AF_INET, &on->router_id, router_id, sizeof(router_id));
+
+	s = monotime_until(&on->inactivity_timer->u.sands, NULL) / 1000000LL;
 
 	monotime(&now);
 	timersub(&now, &on->last_changed, &res);
 	timerstring(&res, duration, sizeof(duration));
+	if (use_json) {
+		json_object_string_add(json_sub, "areaId",
+				       on->ospf6_if->area->name);
+		json_object_string_add(json_sub, "ifaceName",
+				       on->ospf6_if->interface->name);
+		json_object_string_add(json_sub, "ifaceAddress",
+				       linklocal_addr);
+		json_object_string_add(json_sub, "nbrState",
+				       ospf6_neighbor_state_str[on->state]);
+		json_object_int_add(json_sub, "routerDeadIntervalTimerDueMsec",
+				    s);
+		json_object_string_add(json_sub, "routerDesignatedId", drouter);
+		json_object_string_add(json_sub, "routerDesignatedBackupId",
+				       bdrouter);
+		json_object_int_add(json_sub, "nbrPriority", on->priority);
+		json_object_int_add(json_sub, "databaseSummaryListCounter",
+				    on->summary_list->count);
+		json_object_int_add(json_sub, "linkStateRequestListCounter",
+				    on->request_list->count);
+		json_object_int_add(json_sub,
+				    "linkStateRetransmissionListCounter",
+				    on->retrans_list->count);
+
+	} else {
+		vty_out(vty, " Neighbor %s\n", on->name);
+		vty_out(vty, "    Area %s via interface %s (ifindex %d)\n",
+			on->ospf6_if->area->name, on->ospf6_if->interface->name,
+			on->ospf6_if->interface->ifindex);
+		vty_out(vty, "    His IfIndex: %d Link-local address: %s\n",
+			on->ifindex, linklocal_addr);
+		vty_out(vty, "    State %s for a duration of %s\n",
+			ospf6_neighbor_state_str[on->state], duration);
+		vty_out(vty, "    His choice of DR/BDR %s/%s, Priority %d\n",
+			drouter, bdrouter, on->priority);
+		vty_out(vty, "    DbDesc status: %s%s%s SeqNum: %#lx\n",
+			(CHECK_FLAG(on->dbdesc_bits, OSPF6_DBDESC_IBIT)
+				 ? "Initial "
+				 : ""),
+			(CHECK_FLAG(on->dbdesc_bits, OSPF6_DBDESC_MBIT)
+				 ? "More "
+				 : ""),
+			(CHECK_FLAG(on->dbdesc_bits, OSPF6_DBDESC_MSBIT)
+				 ? "Master"
+				 : "Slave"),
+			(unsigned long)ntohl(on->dbdesc_seqnum));
+
+		vty_out(vty, "    Summary-List: %d LSAs\n",
+			on->summary_list->count);
+		for (ALL_LSDB(on->summary_list, lsa))
+			vty_out(vty, "      %s\n", lsa->name);
+
+		vty_out(vty, "    Request-List: %d LSAs\n",
+			on->request_list->count);
+		for (ALL_LSDB(on->request_list, lsa))
+			vty_out(vty, "      %s\n", lsa->name);
+
+		vty_out(vty, "    Retrans-List: %d LSAs\n",
+			on->retrans_list->count);
+		for (ALL_LSDB(on->retrans_list, lsa))
+			vty_out(vty, "      %s\n", lsa->name);
+
+		timerclear(&res);
+		if (on->thread_send_dbdesc)
+			timersub(&on->thread_send_dbdesc->u.sands, &now, &res);
+		timerstring(&res, duration, sizeof(duration));
+		vty_out(vty,
+			"    %d Pending LSAs for DbDesc in Time %s [thread %s]\n",
+			on->dbdesc_list->count, duration,
+			(on->thread_send_dbdesc ? "on" : "off"));
+		for (ALL_LSDB(on->dbdesc_list, lsa))
+			vty_out(vty, "      %s\n", lsa->name);
+
+		timerclear(&res);
+		if (on->thread_send_lsreq)
+			timersub(&on->thread_send_lsreq->u.sands, &now, &res);
+		timerstring(&res, duration, sizeof(duration));
+		vty_out(vty,
+			"    %d Pending LSAs for LSReq in Time %s [thread %s]\n",
+			on->request_list->count, duration,
+			(on->thread_send_lsreq ? "on" : "off"));
+		for (ALL_LSDB(on->request_list, lsa))
+			vty_out(vty, "      %s\n", lsa->name);
+
+		timerclear(&res);
+		if (on->thread_send_lsupdate)
+			timersub(&on->thread_send_lsupdate->u.sands, &now,
+				 &res);
+		timerstring(&res, duration, sizeof(duration));
+		vty_out(vty,
+			"    %d Pending LSAs for LSUpdate in Time %s [thread %s]\n",
+			on->lsupdate_list->count, duration,
+			(on->thread_send_lsupdate ? "on" : "off"));
+		for (ALL_LSDB(on->lsupdate_list, lsa))
+			vty_out(vty, "      %s\n", lsa->name);
+
+		timerclear(&res);
+		if (on->thread_send_lsack)
+			timersub(&on->thread_send_lsack->u.sands, &now, &res);
+		timerstring(&res, duration, sizeof(duration));
+		vty_out(vty,
+			"    %d Pending LSAs for LSAck in Time %s [thread %s]\n",
+			on->lsack_list->count, duration,
+			(on->thread_send_lsack ? "on" : "off"));
+		for (ALL_LSDB(on->lsack_list, lsa))
+			vty_out(vty, "      %s\n", lsa->name);
+	}
+	if (use_json) {
+		if (on->router_id == 0) {
+			json_object_object_get_ex(json, "neighbor",
+						  &json_neigh_array);
+		} else {
+			json_object_object_get_ex(json, router_id,
+						  &json_neigh_array);
+		}
 
-	vty_out(vty, " Neighbor %s\n", on->name);
-	vty_out(vty, "    Area %s via interface %s (ifindex %d)\n",
-		on->ospf6_if->area->name, on->ospf6_if->interface->name,
-		on->ospf6_if->interface->ifindex);
-	vty_out(vty, "    His IfIndex: %d Link-local address: %s\n",
-		on->ifindex, linklocal_addr);
-	vty_out(vty, "    State %s for a duration of %s\n",
-		ospf6_neighbor_state_str[on->state], duration);
-	vty_out(vty, "    His choice of DR/BDR %s/%s, Priority %d\n", drouter,
-		bdrouter, on->priority);
-	vty_out(vty, "    DbDesc status: %s%s%s SeqNum: %#lx\n",
-		(CHECK_FLAG(on->dbdesc_bits, OSPF6_DBDESC_IBIT) ? "Initial "
-								: ""),
-		(CHECK_FLAG(on->dbdesc_bits, OSPF6_DBDESC_MBIT) ? "More " : ""),
-		(CHECK_FLAG(on->dbdesc_bits, OSPF6_DBDESC_MSBIT) ? "Master"
-								 : "Slave"),
-		(unsigned long)ntohl(on->dbdesc_seqnum));
-
-	vty_out(vty, "    Summary-List: %d LSAs\n", on->summary_list->count);
-	for (ALL_LSDB(on->summary_list, lsa))
-		vty_out(vty, "      %s\n", lsa->name);
-
-	vty_out(vty, "    Request-List: %d LSAs\n", on->request_list->count);
-	for (ALL_LSDB(on->request_list, lsa))
-		vty_out(vty, "      %s\n", lsa->name);
-
-	vty_out(vty, "    Retrans-List: %d LSAs\n", on->retrans_list->count);
-	for (ALL_LSDB(on->retrans_list, lsa))
-		vty_out(vty, "      %s\n", lsa->name);
-
-	timerclear(&res);
-	if (on->thread_send_dbdesc)
-		timersub(&on->thread_send_dbdesc->u.sands, &now, &res);
-	timerstring(&res, duration, sizeof(duration));
-	vty_out(vty, "    %d Pending LSAs for DbDesc in Time %s [thread %s]\n",
-		on->dbdesc_list->count, duration,
-		(on->thread_send_dbdesc ? "on" : "off"));
-	for (ALL_LSDB(on->dbdesc_list, lsa))
-		vty_out(vty, "      %s\n", lsa->name);
-
-	timerclear(&res);
-	if (on->thread_send_lsreq)
-		timersub(&on->thread_send_lsreq->u.sands, &now, &res);
-	timerstring(&res, duration, sizeof(duration));
-	vty_out(vty, "    %d Pending LSAs for LSReq in Time %s [thread %s]\n",
-		on->request_list->count, duration,
-		(on->thread_send_lsreq ? "on" : "off"));
-	for (ALL_LSDB(on->request_list, lsa))
-		vty_out(vty, "      %s\n", lsa->name);
-
-	timerclear(&res);
-	if (on->thread_send_lsupdate)
-		timersub(&on->thread_send_lsupdate->u.sands, &now, &res);
-	timerstring(&res, duration, sizeof(duration));
-	vty_out(vty,
-		"    %d Pending LSAs for LSUpdate in Time %s [thread %s]\n",
-		on->lsupdate_list->count, duration,
-		(on->thread_send_lsupdate ? "on" : "off"));
-	for (ALL_LSDB(on->lsupdate_list, lsa))
-		vty_out(vty, "      %s\n", lsa->name);
-
-	timerclear(&res);
-	if (on->thread_send_lsack)
-		timersub(&on->thread_send_lsack->u.sands, &now, &res);
-	timerstring(&res, duration, sizeof(duration));
-	vty_out(vty, "    %d Pending LSAs for LSAck in Time %s [thread %s]\n",
-		on->lsack_list->count, duration,
-		(on->thread_send_lsack ? "on" : "off"));
-	for (ALL_LSDB(on->lsack_list, lsa))
-		vty_out(vty, "      %s\n", lsa->name);
+		if (!json_neigh_array)
+			json_neigh_array = json_object_new_array();
+
+		json_object_array_add(json_neigh_array, json_sub);
+		if (on->router_id == 0) {
+			json_object_object_add(json, "noNbrId",
+					       json_neigh_array);
+		} else {
+			json_object_object_add(json, router_id,
+					       json_neigh_array);
+		}
+	}
 
 	ospf6_bfd_show_info(vty, on->bfd_info, 0, 0, NULL);
 }
 
-DEFUN (show_ipv6_ospf6_neighbor,
-       show_ipv6_ospf6_neighbor_cmd,
-       "show ipv6 ospf6 neighbor [<detail|drchoice>]",
-       SHOW_STR
-       IP6_STR
-       OSPF6_STR
-       "Neighbor list\n"
-       "Display details\n"
-       "Display DR choices\n")
+DEFUN(show_ipv6_ospf6_neighbor, show_ipv6_ospf6_neighbor_cmd,
+      "show ipv6 ospf6 neighbor [<detail|drchoice>] [json]",
+      SHOW_STR IP6_STR OSPF6_STR
+      "Neighbor list\n"
+      "Display details\n"
+      "Display DR choices\n" JSON_STR)
 {
 	int idx_type = 4;
+	bool uj = use_json(argc, argv);
 	struct ospf6_neighbor *on;
 	struct ospf6_interface *oi;
 	struct ospf6_area *oa;
 	struct listnode *i, *j, *k;
-	void (*showfunc)(struct vty *, struct ospf6_neighbor *);
+	void (*showfunc)(struct vty *, struct ospf6_neighbor *, json_object *,
+			 bool);
+	json_object *json = NULL;
 
 	OSPF6_CMD_CHECK_RUNNING();
 	showfunc = ospf6_neighbor_show;
 
-	if (argc == 5) {
+	if (uj) {
+		json = json_object_new_object();
+	}
+
+	if (argc == 6) {
 		if (!strncmp(argv[idx_type]->arg, "de", 2))
 			showfunc = ospf6_neighbor_show_detail;
 		else if (!strncmp(argv[idx_type]->arg, "dr", 2))
 			showfunc = ospf6_neighbor_show_drchoice;
 	}
 
-	if (showfunc == ospf6_neighbor_show)
-		vty_out(vty, "%-15s %3s %11s %8s/%-12s %11s %s[%s]\n",
-			"Neighbor ID", "Pri", "DeadTime", "State", "IfState",
-			"Duration", "I/F", "State");
-	else if (showfunc == ospf6_neighbor_show_drchoice)
-		vty_out(vty, "%-15s %8s/%-11s %-15s %-15s %s[%s]\n", "RouterID",
-			"State", "Duration", "DR", "BDR", "I/F", "State");
+	if (!uj) {
+		if (showfunc == ospf6_neighbor_show) {
+			vty_out(vty, "%-15s %3s %11s %8s/%-12s %11s %s[%s]\n",
+				"Neighbor ID", "Pri", "DeadTime", "State",
+				"IfState", "Duration", "I/F", "State");
+		} else if (showfunc == ospf6_neighbor_show_drchoice) {
+			vty_out(vty, "%-15s %8s/%-11s %-15s %-15s %s[%s]\n",
+				"RouterID", "State", "Duration", "DR", "BDR",
+				"I/F", "State");
+		}
+	}
 
 	for (ALL_LIST_ELEMENTS_RO(ospf6->area_list, i, oa))
 		for (ALL_LIST_ELEMENTS_RO(oa->if_list, j, oi))
 			for (ALL_LIST_ELEMENTS_RO(oi->neighbor_list, k, on))
-				(*showfunc)(vty, on);
+				(*showfunc)(vty, on, json, uj);
+	if (uj) {
+		vty_out(vty, "%s\n",
+			json_object_to_json_string_ext(
+				json, JSON_C_TO_STRING_PRETTY));
+	}
+
+	if (uj)
+		json_object_free(json);
+
 
 	return CMD_SUCCESS;
 }
@@ -844,7 +970,8 @@ DEFUN (show_ipv6_ospf6_neighbor_one,
 	struct ospf6_interface *oi;
 	struct ospf6_area *oa;
 	struct listnode *i, *j, *k;
-	void (*showfunc)(struct vty *, struct ospf6_neighbor *);
+	void (*showfunc)(struct vty *, struct ospf6_neighbor *, json_object *,
+			 bool);
 	uint32_t router_id;
 
 	OSPF6_CMD_CHECK_RUNNING();
@@ -859,7 +986,7 @@ DEFUN (show_ipv6_ospf6_neighbor_one,
 	for (ALL_LIST_ELEMENTS_RO(ospf6->area_list, i, oa))
 		for (ALL_LIST_ELEMENTS_RO(oa->if_list, j, oi))
 			for (ALL_LIST_ELEMENTS_RO(oi->neighbor_list, k, on))
-				(*showfunc)(vty, on);
+				(*showfunc)(vty, on, NULL, 0);
 
 	return CMD_SUCCESS;
 }
