commit 66ffb583fad1168753ee3401895084758b89d1d4
Author: Rene Nielsen <rene.nielsen@microchip.com>
Date:   Thu Oct 29 10:30:13 2020 +0100

    1120-rip-show-status-json.patch

diff --git a/babeld/babel_interface.c b/babeld/babel_interface.c
index 772aec1..24afbfd 100644
--- a/babeld/babel_interface.c
+++ b/babeld/babel_interface.c
@@ -1230,7 +1230,7 @@ DEFUN (show_babel_parameters,
     babel_ctx = babel_lookup();
     if (babel_ctx) {
         vty_out (vty, "    -- distribution lists --\n");
-        config_show_distribute(vty, babel_ctx->distribute_ctx);
+	config_show_distribute(vty, babel_ctx->distribute_ctx, NULL, false);
     }
     return CMD_SUCCESS;
 }
diff --git a/lib/distribute.c b/lib/distribute.c
index 3ea60c8..5f2f620 100644
--- a/lib/distribute.c
+++ b/lib/distribute.c
@@ -27,6 +27,8 @@
 #include "distribute.h"
 #include "memory.h"
 
+#include <lib/json.h>
+
 DEFINE_MTYPE_STATIC(LIB, DISTRIBUTE_CTX, "Distribute ctx")
 DEFINE_MTYPE_STATIC(LIB, DISTRIBUTE, "Distribute list")
 DEFINE_MTYPE_STATIC(LIB, DISTRIBUTE_IFNAME, "Dist-list ifname")
@@ -388,113 +390,214 @@ DEFUN (no_ipv6_distribute_list,
 }
 
 static int distribute_print(struct vty *vty, char *tab[], int is_prefix,
-			    enum distribute_type type, int has_print)
+			    enum distribute_type type, int has_print,
+			    const char *json_obj_name, json_object *json,
+			    bool use_json)
 {
 	if (tab[type]) {
-		vty_out(vty, "%s %s%s", has_print ? "," : "",
-			is_prefix ? "(prefix-list) " : "", tab[type]);
+		if (use_json) {
+			char str_buf[32];
+
+			snprintf(str_buf, sizeof(str_buf) - 1, "%sPrefixList",
+				 json_obj_name ? json_obj_name : "");
+			if (is_prefix) {
+				json_object_boolean_true_add(json, str_buf);
+			} else {
+				json_object_boolean_false_add(json, str_buf);
+			}
+
+			snprintf(str_buf, sizeof(str_buf) - 1,
+				 "%sAccessListName",
+				 json_obj_name ? json_obj_name : "");
+			json_object_string_add(json, str_buf, tab[type]);
+		} else {
+			vty_out(vty, "%s %s%s", has_print ? "," : "",
+				is_prefix ? "(prefix-list) " : "", tab[type]);
+		}
 		return 1;
 	}
 	return has_print;
 }
 
-int config_show_distribute(struct vty *vty, struct distribute_ctx *dist_ctxt)
+int config_show_distribute(struct vty *vty, struct distribute_ctx *dist_ctxt,
+			   json_object *json, bool use_json)
 {
 	unsigned int i;
 	int has_print = 0;
 	struct hash_bucket *mp;
 	struct distribute *dist;
+	json_object *json_array_dist_in = NULL, *json_dist_in = NULL;
+	json_object *json_array_dist_out = NULL, *json_dist_out = NULL;
 
 	/* Output filter configuration. */
 	dist = distribute_lookup(dist_ctxt, NULL);
-	vty_out(vty, "  Outgoing update filter list for all interface is");
+	if (!use_json) {
+		vty_out(vty,
+			"  Outgoing update filter list for all interface is");
+	}
 	has_print = 0;
 	if (dist) {
 		has_print = distribute_print(vty, dist->list, 0,
-					     DISTRIBUTE_V4_OUT, has_print);
+					     DISTRIBUTE_V4_OUT, has_print,
+					     "v4OutDist", json, use_json);
 		has_print = distribute_print(vty, dist->prefix, 1,
-					     DISTRIBUTE_V4_OUT, has_print);
+					     DISTRIBUTE_V4_OUT, has_print,
+					     "v4OutDist", json, use_json);
 		has_print = distribute_print(vty, dist->list, 0,
-					     DISTRIBUTE_V6_OUT, has_print);
+					     DISTRIBUTE_V6_OUT, has_print,
+					     "v6OutDist", json, use_json);
 		has_print = distribute_print(vty, dist->prefix, 1,
-					     DISTRIBUTE_V6_OUT, has_print);
+					     DISTRIBUTE_V6_OUT, has_print,
+					     "v6OutDist", json, use_json);
+	}
+	if (!use_json) {
+		if (has_print)
+			vty_out(vty, "\n");
+		else
+			vty_out(vty, " not set\n");
 	}
-	if (has_print)
-		vty_out(vty, "\n");
-	else
-		vty_out(vty, " not set\n");
 
-	for (i = 0; i < dist_ctxt->disthash->size; i++)
+	if (use_json) {
+		json_array_dist_out = json_object_new_array();
+	}
+
+	for (i = 0; i < dist_ctxt->disthash->size; i++) {
 		for (mp = dist_ctxt->disthash->index[i]; mp; mp = mp->next) {
 			dist = mp->data;
 			if (dist->ifname) {
-				vty_out(vty, "    %s filtered by",
-					dist->ifname);
+				if (use_json) {
+					json_dist_out =
+						json_object_new_object();
+					json_object_int_add(json_dist_out,
+							    "hashSize", i);
+					json_object_string_add(json_dist_out,
+							       "ifName",
+							       dist->ifname);
+				} else {
+					vty_out(vty, "    %s filtered by",
+						dist->ifname);
+				}
+
 				has_print = 0;
-				has_print = distribute_print(vty, dist->list, 0,
-							     DISTRIBUTE_V4_OUT,
-							     has_print);
+				has_print = distribute_print(
+					vty, dist->list, 0, DISTRIBUTE_V4_OUT,
+					has_print, "v4", json_dist_out,
+					use_json);
 				has_print = distribute_print(
 					vty, dist->prefix, 1, DISTRIBUTE_V4_OUT,
-					has_print);
-				has_print = distribute_print(vty, dist->list, 0,
-							     DISTRIBUTE_V6_OUT,
-							     has_print);
+					has_print, "v4", json_dist_out,
+					use_json);
+				has_print = distribute_print(
+					vty, dist->list, 0, DISTRIBUTE_V6_OUT,
+					has_print, "v6", json_dist_out,
+					use_json);
 				has_print = distribute_print(
 					vty, dist->prefix, 1, DISTRIBUTE_V6_OUT,
-					has_print);
-				if (has_print)
-					vty_out(vty, "\n");
-				else
-					vty_out(vty, " nothing\n");
+					has_print, "v4", json_dist_out,
+					use_json);
+
+				if (use_json) {
+					json_object_array_add(
+						json_array_dist_out,
+						json_dist_out);
+				} else {
+					if (has_print)
+						vty_out(vty, "\n");
+					else
+						vty_out(vty, " nothing\n");
+				}
 			}
 		}
+	}
 
+	if (use_json) {
+		json_object_object_add(json, "outDistributeList",
+				       json_array_dist_out);
+	}
 
 	/* Input filter configuration. */
 	dist = distribute_lookup(dist_ctxt, NULL);
-	vty_out(vty, "  Incoming update filter list for all interface is");
+	if (!use_json) {
+		vty_out(vty,
+			"  Incoming update filter list for all interface is");
+	}
 	has_print = 0;
 	if (dist) {
-		has_print = distribute_print(vty, dist->list, 0,
-					     DISTRIBUTE_V4_IN, has_print);
-		has_print = distribute_print(vty, dist->prefix, 1,
-					     DISTRIBUTE_V4_IN, has_print);
-		has_print = distribute_print(vty, dist->list, 0,
-					     DISTRIBUTE_V6_IN, has_print);
-		has_print = distribute_print(vty, dist->prefix, 1,
-					     DISTRIBUTE_V6_IN, has_print);
+		has_print =
+			distribute_print(vty, dist->list, 0, DISTRIBUTE_V4_IN,
+					 has_print, "v4InDist", json, use_json);
+		has_print =
+			distribute_print(vty, dist->prefix, 1, DISTRIBUTE_V4_IN,
+					 has_print, "v4InDist", json, use_json);
+		has_print =
+			distribute_print(vty, dist->list, 0, DISTRIBUTE_V6_IN,
+					 has_print, "v6InDist", json, use_json);
+		has_print =
+			distribute_print(vty, dist->prefix, 1, DISTRIBUTE_V6_IN,
+					 has_print, "v6InDist", json, use_json);
+	}
+	if (!use_json) {
+		if (has_print)
+			vty_out(vty, "\n");
+		else
+			vty_out(vty, " not set\n");
 	}
-	if (has_print)
-		vty_out(vty, "\n");
-	else
-		vty_out(vty, " not set\n");
 
-	for (i = 0; i < dist_ctxt->disthash->size; i++)
+	if (use_json) {
+		json_array_dist_in = json_object_new_array();
+	}
+
+	for (i = 0; i < dist_ctxt->disthash->size; i++) {
 		for (mp = dist_ctxt->disthash->index[i]; mp; mp = mp->next) {
 			dist = mp->data;
 			if (dist->ifname) {
-				vty_out(vty, "    %s filtered by",
-					dist->ifname);
+				if (use_json) {
+					json_dist_in = json_object_new_object();
+					json_object_int_add(json_dist_in,
+							    "hashSize", i);
+					json_object_string_add(json_dist_in,
+							       "ifName",
+							       dist->ifname);
+				} else {
+					vty_out(vty, "    %s filtered by",
+						dist->ifname);
+				}
 				has_print = 0;
-				has_print = distribute_print(vty, dist->list, 0,
-							     DISTRIBUTE_V4_IN,
-							     has_print);
+				has_print = distribute_print(
+					vty, dist->list, 0, DISTRIBUTE_V4_IN,
+					has_print, "v4", json_dist_in,
+					use_json);
 				has_print = distribute_print(
 					vty, dist->prefix, 1, DISTRIBUTE_V4_IN,
-					has_print);
-				has_print = distribute_print(vty, dist->list, 0,
-							     DISTRIBUTE_V6_IN,
-							     has_print);
+					has_print, "v4", json_dist_in,
+					use_json);
+				has_print = distribute_print(
+					vty, dist->list, 0, DISTRIBUTE_V6_IN,
+					has_print, "v6", json_dist_in,
+					use_json);
 				has_print = distribute_print(
 					vty, dist->prefix, 1, DISTRIBUTE_V6_IN,
-					has_print);
-				if (has_print)
-					vty_out(vty, "\n");
-				else
-					vty_out(vty, " nothing\n");
+					has_print, "v6", json_dist_in,
+					use_json);
+				if (use_json) {
+					json_object_array_add(
+						json_array_dist_in,
+						json_dist_in);
+				} else {
+					if (has_print)
+						vty_out(vty, "\n");
+					else
+						vty_out(vty, " nothing\n");
+				}
 			}
 		}
+	}
+
+	if (use_json) {
+		json_object_object_add(json, "inDistributeList",
+				       json_array_dist_in);
+	}
+
 	return 0;
 }
 
diff --git a/lib/distribute.h b/lib/distribute.h
index 4016d3b..dcb7862 100644
--- a/lib/distribute.h
+++ b/lib/distribute.h
@@ -29,6 +29,8 @@
 extern "C" {
 #endif
 
+#include <lib/json.h>
+
 /* Disctirubte list types. */
 enum distribute_type {
 	DISTRIBUTE_V4_IN,
@@ -77,8 +79,8 @@ extern struct distribute *distribute_lookup(struct distribute_ctx *ctx,
 					    const char *ifname);
 extern int config_write_distribute(struct vty *vty,
 				   struct distribute_ctx *ctx);
-extern int config_show_distribute(struct vty *vty,
-				  struct distribute_ctx *ctx);
+extern int config_show_distribute(struct vty *vty, struct distribute_ctx *ctx,
+				  json_object *, bool use_json);
 
 extern enum filter_type distribute_apply_in(struct interface *,
 					    struct prefix *);
diff --git a/ripd/rip_interface.c b/ripd/rip_interface.c
index 177f53d..4b57c04 100644
--- a/ripd/rip_interface.c
+++ b/ripd/rip_interface.c
@@ -43,6 +43,8 @@
 #include "ripd/rip_debug.h"
 #include "ripd/rip_interface.h"
 
+#include <lib/json.h>
+
 DEFINE_MTYPE_STATIC(RIPD, RIP_INTERFACE, "RIP interface")
 DEFINE_MTYPE(RIPD, RIP_INTERFACE_STRING, "RIP Interface String")
 DEFINE_HOOK(rip_ifaddr_add, (struct connected * ifc), (ifc))
@@ -1166,29 +1168,87 @@ static int rip_interface_config_write(struct vty *vty)
 	return write;
 }
 
-int rip_show_network_config(struct vty *vty, struct rip *rip)
+int rip_show_network_config(struct vty *vty, struct rip *rip, json_object *json,
+			    bool use_json)
 {
 	unsigned int i;
 	char *ifname;
 	struct route_node *node;
+	json_object *json_array_addr = NULL, *json_addr = NULL;
+	json_object *json_array_intf = NULL, *json_intf = NULL;
+	json_object *json_array_neighbor = NULL, *json_neighbor = NULL;
 
 	/* Network type RIP enable interface statement. */
+	if (use_json) {
+		json_array_addr = json_object_new_array();
+	}
+
 	for (node = route_top(rip->enable_network); node;
-	     node = route_next(node))
-		if (node->info)
-			vty_out(vty, "    %s/%u\n",
-				inet_ntoa(node->p.u.prefix4),
-				node->p.prefixlen);
+	     node = route_next(node)) {
+		if (node->info) {
+			if (use_json) {
+				json_addr = json_object_new_object();
+				json_object_string_add(
+					json_addr, "address",
+					inet_ntoa(node->p.u.prefix4));
+				json_object_int_add(json_addr,
+						    "addressPrefixlen",
+						    node->p.prefixlen);
+				json_object_array_add(json_array_addr,
+						      json_addr);
+			} else {
+				vty_out(vty, "    %s/%u\n",
+					inet_ntoa(node->p.u.prefix4),
+					node->p.prefixlen);
+			}
+		}
+	}
+
+	if (use_json) {
+		json_object_object_add(json, "networkAddresses",
+				       json_array_addr);
+	}
 
 	/* Interface name RIP enable statement. */
-	for (i = 0; i < vector_active(rip->enable_interface); i++)
-		if ((ifname = vector_slot(rip->enable_interface, i)) != NULL)
-			vty_out(vty, "    %s\n", ifname);
+	if (use_json) {
+		json_array_intf = json_object_new_array();
+	}
+
+	for (i = 0; i < vector_active(rip->enable_interface); i++) {
+		if ((ifname = vector_slot(rip->enable_interface, i)) != NULL) {
+			if (use_json) {
+				json_intf = json_object_new_object();
+				json_object_string_add(json_intf, "ifName",
+						       ifname);
+				json_object_array_add(json_array_intf,
+						      json_intf);
+			} else {
+				vty_out(vty, "    %s\n", ifname);
+			}
+		}
+	}
 
 	/* RIP neighbors listing. */
-	for (node = route_top(rip->neighbor); node; node = route_next(node))
-		if (node->info)
-			vty_out(vty, "    %s\n", inet_ntoa(node->p.u.prefix4));
+	for (node = route_top(rip->neighbor); node; node = route_next(node)) {
+		if (node->info) {
+			if (use_json) {
+				json_neighbor = json_object_new_object();
+				json_object_string_add(
+					json_neighbor, "address",
+					inet_ntoa(node->p.u.prefix4));
+				json_object_array_add(json_array_neighbor,
+						      json_neighbor);
+			} else {
+				vty_out(vty, "    %s\n",
+					inet_ntoa(node->p.u.prefix4));
+			}
+		}
+	}
+
+	if (use_json) {
+		json_object_object_add(json, "networkNeighbors",
+				       json_array_neighbor);
+	}
 
 	return 0;
 }
diff --git a/ripd/rip_peer.c b/ripd/rip_peer.c
index 77c73ab..12bb386 100644
--- a/ripd/rip_peer.c
+++ b/ripd/rip_peer.c
@@ -29,6 +29,8 @@
 
 #include "ripd/ripd.h"
 
+#include <lib/json.h>
+
 DEFINE_MTYPE_STATIC(RIPD, RIP_PEER, "RIP peer")
 
 static struct rip_peer *rip_peer_new(void)
@@ -147,18 +149,48 @@ static char *rip_peer_uptime(struct rip_peer *peer, char *buf, size_t len)
 	return buf;
 }
 
-void rip_peer_display(struct vty *vty, struct rip *rip)
+void rip_peer_display(struct vty *vty, struct rip *rip, json_object *json,
+		      bool use_json)
 {
 	struct rip_peer *peer;
 	struct listnode *node, *nnode;
 #define RIP_UPTIME_LEN 25
 	char timebuf[RIP_UPTIME_LEN];
+	json_object *json_array = NULL;
+
+	if (use_json) {
+		json_array = json_object_new_array();
+	}
 
 	for (ALL_LIST_ELEMENTS(rip->peer_list, node, nnode, peer)) {
-		vty_out(vty, "    %-16s %9d %9d %9d   %s\n",
-			inet_ntoa(peer->addr), peer->recv_badpackets,
-			peer->recv_badroutes, ZEBRA_RIP_DISTANCE_DEFAULT,
-			rip_peer_uptime(peer, timebuf, RIP_UPTIME_LEN));
+		if (use_json) {
+			json_object *json_peer = json_object_new_object();
+			json_object *json_peer_entry = json_object_new_object();
+			json_object_int_add(json_peer, "recvBadPackets",
+					    peer->recv_badpackets);
+			json_object_int_add(json_peer, "recvBadRoutes",
+					    peer->recv_badroutes);
+			json_object_string_add(
+				json_peer, "lastUpdate",
+				rip_peer_uptime(peer, timebuf, RIP_UPTIME_LEN));
+			json_object_int_add(json_peer, "domain", peer->domain);
+			json_object_int_add(json_peer, "version",
+					    peer->version);
+			json_object_object_add(json_peer_entry,
+					       inet_ntoa(peer->addr),
+					       json_peer);
+			json_object_array_add(json_array, json_peer_entry);
+		} else {
+			vty_out(vty, "    %-16s %9d %9d %9d   %s\n",
+				inet_ntoa(peer->addr), peer->recv_badpackets,
+				peer->recv_badroutes,
+				ZEBRA_RIP_DISTANCE_DEFAULT,
+				rip_peer_uptime(peer, timebuf, RIP_UPTIME_LEN));
+		}
+	}
+
+	if (use_json) {
+		json_object_object_add(json, "peers", json_array);
 	}
 }
 
diff --git a/ripd/rip_zebra.c b/ripd/rip_zebra.c
index e07d218..b860d54 100644
--- a/ripd/rip_zebra.c
+++ b/ripd/rip_zebra.c
@@ -32,6 +32,8 @@
 #include "ripd/rip_debug.h"
 #include "ripd/rip_interface.h"
 
+#include <lib/json.h>
+
 /* All information about zebra. */
 struct zclient *zclient = NULL;
 
@@ -192,14 +194,32 @@ void rip_redistribute_disable(struct rip *rip)
 	}
 }
 
-void rip_show_redistribute_config(struct vty *vty, struct rip *rip)
+void rip_show_redistribute_config(struct vty *vty, struct rip *rip,
+				  json_object *json, bool use_json)
 {
+	json_object *json_array = NULL, *json_redist = NULL;
+
+	if (use_json) {
+		json_array = json_object_new_array();
+	}
+
 	for (int i = 0; i < ZEBRA_ROUTE_MAX; i++) {
 		if (i == zclient->redist_default
 		    || !rip_redistribute_check(rip, i))
 			continue;
 
-		vty_out(vty, " %s", zebra_route_string(i));
+		if (use_json) {
+			json_redist = json_object_new_object();
+			json_object_string_add(json_redist, "protocolType",
+					       zebra_route_string(i));
+			json_object_array_add(json_array, json_redist);
+		} else {
+			vty_out(vty, " %s", zebra_route_string(i));
+		}
+	}
+
+	if (use_json) {
+		json_object_object_add(json, "redistributes", json_array);
 	}
 }
 
diff --git a/ripd/ripd.c b/ripd/ripd.c
index fc53796..1b615f8 100644
--- a/ripd/ripd.c
+++ b/ripd/ripd.c
@@ -52,6 +52,8 @@
 #include "ripd/rip_errors.h"
 #include "ripd/rip_interface.h"
 
+#include <lib/json.h>
+
 /* UDP receive buffer size */
 #define RIP_UDP_RCV_BUF 41600
 
@@ -2957,30 +2959,62 @@ uint8_t rip_distance_apply(struct rip *rip, struct rip_info *rinfo)
 	return 0;
 }
 
-static void rip_distance_show(struct vty *vty, struct rip *rip)
+static void rip_distance_show(struct vty *vty, struct rip *rip,
+			      json_object *json, bool use_json)
 {
 	struct route_node *rn;
 	struct rip_distance *rdistance;
 	int header = 1;
 	char buf[BUFSIZ];
+	json_object *json_array = NULL;
 
-	vty_out(vty, "  Distance: (default is %u)\n",
-		rip->distance ? rip->distance : ZEBRA_RIP_DISTANCE_DEFAULT);
+	if (use_json) {
+		json_array = json_object_new_array();
+	}
 
-	for (rn = route_top(rip->distance_table); rn; rn = route_next(rn))
+	for (rn = route_top(rip->distance_table); rn; rn = route_next(rn)) {
 		if ((rdistance = rn->info) != NULL) {
-			if (header) {
+			if (!use_json && header) {
 				vty_out(vty,
 					"    Address           Distance  List\n");
 				header = 0;
 			}
-			snprintf(buf, sizeof(buf), "%s/%d",
-				 inet_ntoa(rn->p.u.prefix4), rn->p.prefixlen);
-			vty_out(vty, "    %-20s  %4d  %s\n", buf,
-				rdistance->distance,
-				rdistance->access_list ? rdistance->access_list
-						       : "");
+
+			if (use_json) {
+				json_object *json_distance =
+					json_object_new_object();
+				json_object *json_rn = json_object_new_object();
+				char ipaddr_str_buf[BUFSIZ];
+				json_object_int_add(json_rn, "distance",
+						    rdistance->distance);
+				json_object_string_add(
+					json_rn, "accessList",
+					rdistance->access_list
+						? rdistance->access_list
+						: "");
+				sprintf(ipaddr_str_buf, "%s/%d",
+					inet_ntoa(rn->p.u.prefix4),
+					rn->p.prefixlen);
+				json_object_object_add(json_distance,
+						       ipaddr_str_buf, json_rn);
+				json_object_array_add(json_array,
+						      json_distance);
+			} else {
+				snprintf(buf, sizeof(buf), "%s/%d",
+					 inet_ntoa(rn->p.u.prefix4),
+					 rn->p.prefixlen);
+				vty_out(vty, "    %-20s  %4d  %s\n", buf,
+					rdistance->distance,
+					rdistance->access_list
+						? rdistance->access_list
+						: "");
+			}
 		}
+	}
+
+	if (use_json) {
+		json_object_object_add(json, "distances", json_array);
+	}
 }
 
 /* Update ECMP routes to zebra when ECMP is disabled. */
@@ -3177,14 +3211,18 @@ DEFUN (show_ip_rip,
 }
 
 /* Vincent: formerly, it was show_ip_protocols_rip: "show ip protocols" */
-DEFUN (show_ip_rip_status,
-       show_ip_rip_status_cmd,
-       "show ip rip [vrf NAME] status",
-       SHOW_STR
-       IP_STR
-       "Show RIP routes\n"
-       VRF_CMD_HELP_STR
-       "IP routing protocol process parameters and statistics\n")
+DEFUN(show_ip_rip_status, show_ip_rip_status_cmd,
+      "show ip rip [vrf NAME] status [{global|distribute|redistribute|interface|network|passive|peer|distance}] [json]",
+      SHOW_STR IP_STR "Show RIP routes\n" VRF_CMD_HELP_STR
+		      "IP routing protocol process parameters and statistics\n"
+		      "Show RIP global information only\n"
+		      "Show RIP distribute list information only\n"
+		      "Show RIP redistribute list information only\n"
+		      "Show RIP interface information only\n"
+		      "Show RIP network information only\n"
+		      "Show RIP passive interface information only\n"
+		      "Show RIP peer information only\n"
+		      "Show RIP distance information only\n" JSON_STR)
 {
 	struct rip *rip;
 	struct interface *ifp;
@@ -3194,6 +3232,13 @@ DEFUN (show_ip_rip_status,
 	const char *receive_version;
 	const char *vrf_name;
 	int idx = 0;
+	bool uj = use_json(argc, argv);
+	json_object *json = NULL;
+	json_object *json_array_intf = NULL, *json_intf = NULL,
+		    *json_intf_entry = NULL;
+	int show_global = 0, show_dist_list = 0, show_redistribute = 0,
+	    show_interface = 0, show_network = 0, show_passive = 0,
+	    show_peer = 0, show_distance = 0;
 
 	if (argv_find(argv, argc, "vrf", &idx))
 		vrf_name = argv[idx + 1]->arg;
@@ -3202,99 +3247,288 @@ DEFUN (show_ip_rip_status,
 
 	rip = rip_lookup_by_vrf_name(vrf_name);
 	if (!rip) {
-		vty_out(vty, "%% RIP instance not found\n");
+		if (!uj)
+			vty_out(vty, "%% RIP instance not found\n");
 		return CMD_SUCCESS;
 	}
 	if (!rip->enabled) {
-		vty_out(vty, "%% RIP instance is disabled\n");
+		if (!uj)
+			vty_out(vty, "%% RIP instance is disabled\n");
 		return CMD_SUCCESS;
 	}
 
-	vty_out(vty, "Routing Protocol is \"rip\"\n");
-	vty_out(vty, "  Sending updates every %u seconds with +/-50%%,",
-		rip->update_time);
-	vty_out(vty, " next due in %lu seconds\n",
-		thread_timer_remain_second(rip->t_update));
-	vty_out(vty, "  Timeout after %u seconds,", rip->timeout_time);
-	vty_out(vty, " garbage collect after %u seconds\n", rip->garbage_time);
+	/* Check if the optional command is typed */
+	if (argv_find(argv, argc, "global", &idx)) {
+		show_global = 1;
+	} else if (argv_find(argv, argc, "distribute", &idx)) {
+		show_dist_list = 1;
+	} else if (argv_find(argv, argc, "redistribute", &idx)) {
+		show_redistribute = 1;
+	} else if (argv_find(argv, argc, "interface", &idx)) {
+		show_interface = 1;
+	} else if (argv_find(argv, argc, "network", &idx)) {
+		show_network = 1;
+	} else if (argv_find(argv, argc, "passive", &idx)) {
+		show_passive = 1;
+	} else if (argv_find(argv, argc, "peer", &idx)) {
+		show_peer = 1;
+	} else if (argv_find(argv, argc, "distance", &idx)) {
+		show_distance = 1;
+	} else {
+		show_global = show_dist_list = show_redistribute =
+			show_interface = show_network = show_passive =
+				show_peer = show_distance = 1;
+	}
+
+	if (uj) {
+		json = json_object_new_object();
+	}
+
+	if (show_global) {
+		if (uj) {
+			json_object_string_add(json, "routingProtocol", "rip");
+			json_object_int_add(json, "updateTime",
+					    rip->update_time);
+			json_object_int_add(
+				json, "updateRemainTime",
+				thread_timer_remain_second(rip->t_update));
+			json_object_int_add(json, "timeoutTime",
+					    rip->timeout_time);
+			json_object_int_add(json, "garbageTime",
+					    rip->garbage_time);
+			json_object_int_add(json, "globalRouteChanges",
+					    rip->counters.route_changes);
+			json_object_int_add(json, "globalQueries",
+					    rip->counters.queries);
+		} else {
+			vty_out(vty, "Routing Protocol is \"rip\"\n");
+			vty_out(vty,
+				"  Sending updates every %u seconds with +/-50%%,",
+				rip->update_time);
+			vty_out(vty, " next due in %lu seconds\n",
+				thread_timer_remain_second(rip->t_update));
+			vty_out(vty, "  Timeout after %u seconds,",
+				rip->timeout_time);
+			vty_out(vty, " garbage collect after %u seconds\n",
+				rip->garbage_time);
+		}
+	}
 
 	/* Filtering status show. */
-	config_show_distribute(vty, rip->distribute_ctx);
+	if (show_dist_list) {
+		config_show_distribute(vty, rip->distribute_ctx, json, uj);
+	}
 
 	/* Default metric information. */
-	vty_out(vty, "  Default redistribution metric is %u\n",
-		rip->default_metric);
+	if (show_global) {
+		if (uj) {
+			json_object_int_add(json, "defaultMetric",
+					    rip->default_metric);
+		} else {
+			vty_out(vty, "  Default redistribution metric is %u\n",
+				rip->default_metric);
+		}
+	}
 
 	/* Redistribute information. */
-	vty_out(vty, "  Redistributing:");
-	rip_show_redistribute_config(vty, rip);
-	vty_out(vty, "\n");
-
-	vty_out(vty, "  Default version control: send version %s,",
-		lookup_msg(ri_version_msg, rip->version_send, NULL));
-	if (rip->version_recv == RI_RIP_VERSION_1_AND_2)
-		vty_out(vty, " receive any version \n");
-	else
-		vty_out(vty, " receive version %s \n",
-			lookup_msg(ri_version_msg, rip->version_recv, NULL));
+	if (show_redistribute) {
+		if (!uj) {
+			vty_out(vty, "  Redistributing:");
+		}
+		rip_show_redistribute_config(vty, rip, json, uj);
+		if (!uj) {
+			vty_out(vty, "\n");
+		}
+	}
 
-	vty_out(vty, "    Interface        Send  Recv   Key-chain\n");
+	if (show_global) {
+		if (uj) {
+			json_object_int_add(json, "versionSend",
+					    rip->version_send);
+			json_object_int_add(json, "versionRecv",
+					    rip->version_recv);
+		} else {
+			vty_out(vty,
+				"  Default version control: send version %s,",
+				lookup_msg(ri_version_msg, rip->version_send,
+					   NULL));
+			if (rip->version_recv == RI_RIP_VERSION_1_AND_2)
+				vty_out(vty, " receive any version \n");
+			else
+				vty_out(vty, " receive version %s \n",
+					lookup_msg(ri_version_msg,
+						   rip->version_recv, NULL));
+		}
+	}
 
-	FOR_ALL_INTERFACES (rip->vrf, ifp) {
-		ri = ifp->info;
+	if (show_interface) {
+		if (uj) {
+			json_array_intf = json_object_new_array();
+		} else {
+			vty_out(vty,
+				"    Interface        Send  Recv   Key-chain\n");
+		}
 
-		if (!ri->running)
-			continue;
+		FOR_ALL_INTERFACES (rip->vrf, ifp) {
+			ri = ifp->info;
 
-		if (ri->enable_network || ri->enable_interface) {
-			if (ri->ri_send == RI_RIP_UNSPEC)
-				send_version =
-					lookup_msg(ri_version_msg,
-						   rip->version_send, NULL);
-			else
-				send_version = lookup_msg(ri_version_msg,
-							  ri->ri_send, NULL);
+			if (!ri->running)
+				continue;
 
-			if (ri->ri_receive == RI_RIP_UNSPEC)
-				receive_version =
-					lookup_msg(ri_version_msg,
-						   rip->version_recv, NULL);
-			else
-				receive_version = lookup_msg(
-					ri_version_msg, ri->ri_receive, NULL);
+			if (ri->enable_network || ri->enable_interface) {
+				if (ri->ri_send == RI_RIP_UNSPEC)
+					send_version = lookup_msg(
+						ri_version_msg,
+						rip->version_send, NULL);
+				else
+					send_version =
+						lookup_msg(ri_version_msg,
+							   ri->ri_send, NULL);
+
+				if (ri->ri_receive == RI_RIP_UNSPEC)
+					receive_version = lookup_msg(
+						ri_version_msg,
+						rip->version_recv, NULL);
+				else
+					receive_version = lookup_msg(
+						ri_version_msg, ri->ri_receive,
+						NULL);
+
+				if (uj) {
+					json_intf = json_object_new_object();
+					json_intf_entry =
+						json_object_new_object();
+					json_object_string_add(json_intf,
+							       "sendVersion",
+							       send_version);
+					json_object_string_add(json_intf,
+							       "receiveVersion",
+							       receive_version);
+					json_object_string_add(
+						json_intf, "keychain",
+						ri->key_chain ? ri->key_chain
+							      : "");
+					json_object_int_add(
+						json_intf,
+						"ifStatRcvBadPackets",
+						ri->recv_badpackets);
+					json_object_int_add(
+						json_intf, "ifStatRcvBadRoutes",
+						ri->recv_badroutes);
+					json_object_int_add(json_intf,
+							    "ifStatSentUpdates",
+							    ri->sent_updates);
+					json_object_int_add(json_intf,
+							    "passive",
+							    ri->passive);
+					json_object_int_add(json_intf,
+							    "authType",
+							    ri->auth_type);
+					json_object_object_add(json_intf_entry,
+							       ifp->name,
+							       json_intf);
+					json_object_array_add(json_array_intf,
+							      json_intf_entry);
+				} else {
+					vty_out(vty,
+						"    %-17s%-3s   %-3s    %s\n",
+						ifp->name, send_version,
+						receive_version,
+						ri->key_chain ? ri->key_chain
+							      : "");
+				}
+			}
+		}
 
-			vty_out(vty, "    %-17s%-3s   %-3s    %s\n", ifp->name,
-				send_version, receive_version,
-				ri->key_chain ? ri->key_chain : "");
+		if (uj) {
+			json_object_object_add(json, "activeInterfaces",
+					       json_array_intf);
 		}
 	}
 
-	vty_out(vty, "  Routing for Networks:\n");
-	rip_show_network_config(vty, rip);
+	if (show_network) {
+		if (!uj) {
+			vty_out(vty, "  Routing for Networks:\n");
+		}
+		rip_show_network_config(vty, rip, json, uj);
+	}
 
-	{
+	if (show_passive) {
 		int found_passive = 0;
+		json_object *json_array_pass_intf = NULL,
+			    *json_pass_intf = NULL;
+
+		if (uj) {
+			json_array_pass_intf = json_object_new_array();
+		}
+
 		FOR_ALL_INTERFACES (rip->vrf, ifp) {
 			ri = ifp->info;
 
 			if ((ri->enable_network || ri->enable_interface)
 			    && ri->passive) {
 				if (!found_passive) {
-					vty_out(vty,
-						"  Passive Interface(s):\n");
+					if (!uj) {
+						vty_out(vty,
+							"  Passive Interface(s):\n");
+					}
 					found_passive = 1;
 				}
-				vty_out(vty, "    %s\n", ifp->name);
+				if (uj) {
+					json_pass_intf =
+						json_object_new_object();
+					json_object_string_add(json_pass_intf,
+							       "ifName",
+							       ifp->name);
+					json_object_array_add(
+						json_array_pass_intf,
+						json_pass_intf);
+				} else {
+					vty_out(vty, "    %s\n", ifp->name);
+				}
 			}
 		}
+
+		if (uj) {
+			json_object_object_add(json, "activePassiveInterfaces",
+					       json_array_pass_intf);
+		}
 	}
 
-	vty_out(vty, "  Routing Information Sources:\n");
-	vty_out(vty,
-		"    Gateway          BadPackets BadRoutes  Distance Last Update\n");
-	rip_peer_display(vty, rip);
+	if (!uj) {
+		vty_out(vty, "  Routing Information Sources:\n");
+		vty_out(vty,
+			"    Gateway          BadPackets BadRoutes  Distance Last Update\n");
+	}
 
-	rip_distance_show(vty, rip);
+	if (show_peer) {
+		rip_peer_display(vty, rip, json, uj);
+	}
+
+	/* Default distance information. */
+	if (show_global) {
+		if (uj) {
+			json_object_int_add(
+				json, "distanceDefault",
+				rip->distance ? rip->distance
+					      : ZEBRA_RIP_DISTANCE_DEFAULT);
+		} else {
+			vty_out(vty, "  Distance: (default is %d)\n",
+				rip->distance ? rip->distance
+					      : ZEBRA_RIP_DISTANCE_DEFAULT);
+		}
+	}
+
+	if (show_distance) {
+		rip_distance_show(vty, rip, json, uj);
+	}
+
+	if (uj) {
+		vty_out(vty, "%s\n",
+			json_object_to_json_string_ext(
+				json, JSON_C_TO_STRING_PRETTY));
+		json_object_free(json);
+	}
 
 	return CMD_SUCCESS;
 }
diff --git a/ripd/ripd.h b/ripd/ripd.h
index 417bd5b..65d6192 100644
--- a/ripd/ripd.h
+++ b/ripd/ripd.h
@@ -26,6 +26,8 @@
 #include "distribute.h"
 #include "memory.h"
 
+#include <lib/json.h>
+
 /* RIP version number. */
 #define RIPv1                            1
 #define RIPv2                            2
@@ -476,14 +478,17 @@ extern void rip_interface_multicast_set(int, struct connected *);
 extern void rip_distribute_update_interface(struct interface *);
 extern void rip_if_rmap_update_interface(struct interface *ifp);
 
-extern int rip_show_network_config(struct vty *vty, struct rip *rip);
-extern void rip_show_redistribute_config(struct vty *vty, struct rip *rip);
+extern int rip_show_network_config(struct vty *vty, struct rip *rip,
+				   json_object *, bool);
+extern void rip_show_redistribute_config(struct vty *vty, struct rip *rip,
+					 json_object *, bool);
 
 extern void rip_peer_update(struct rip *rip, struct sockaddr_in *from,
 			    uint8_t version);
 extern void rip_peer_bad_route(struct rip *rip, struct sockaddr_in *from);
 extern void rip_peer_bad_packet(struct rip *rip, struct sockaddr_in *from);
-extern void rip_peer_display(struct vty *vty, struct rip *rip);
+extern void rip_peer_display(struct vty *vty, struct rip *rip, json_object *,
+			     bool);
 extern struct rip_peer *rip_peer_lookup(struct rip *rip, struct in_addr *addr);
 extern struct rip_peer *rip_peer_lookup_next(struct rip *rip,
 					     struct in_addr *addr);
diff --git a/ripngd/ripngd.c b/ripngd/ripngd.c
index 625adca..7136a49 100644
--- a/ripngd/ripngd.c
+++ b/ripngd/ripngd.c
@@ -2199,7 +2199,7 @@ DEFUN (show_ipv6_ripng_status,
 		ripng->garbage_time);
 
 	/* Filtering status show. */
-	config_show_distribute(vty, ripng->distribute_ctx);
+	config_show_distribute(vty, ripng->distribute_ctx, NULL, false);
 
 	/* Default metric information. */
 	vty_out(vty, "  Default redistribution metric is %d\n",
