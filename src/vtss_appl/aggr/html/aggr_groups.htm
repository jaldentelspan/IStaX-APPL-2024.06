<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable format
 (e.g. HEX file) and only in or with products utilizing the Microsemi switch and
 PHY products.  The source code of the software may not be disclosed, transmitted
 or distributed without the prior written permission of Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all ownership,
 copyright, trade secret and proprietary rights in the software and its source code,
 including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL WARRANTIES
 OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES ARE EXPRESS,
 IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION, WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Aggregation Groups</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

// Help page macic
var help_page = "/help/help_aggr_groups.htm";

var aggrconfig = Array();
var gGroup;
var glag_count = Array();

var modeT = Array("Disabled", "Static", "LACP (Active)", "LACP (Passive)");
var modeV = Array(0, 2, 3, 4);


function addRow(frag, group, pval) {
    var tr = CreateStyledElement("tr", group % 2 ? "config_odd" : "config_even");

    if (SpomStackPortCount() > 0){
        if (group == 0){
            addTextCell(tr, " ", "c");
            addTextCell(tr, "Normal", "c");
        } else {
            if ((group == 1 || group == 2) || configArchJaguar_1){
                addTextCell(tr, "Global", "hdrc");
                addTextCell(tr, group, "c");
            }else{
                addTextCell(tr, "Local", "c");
                addTextCell(tr, group-2, "c"); // Restart LLAG from 1.
            }
        }
    } else {
	if (group == 0){
	    addTextCell(tr, "Normal", "c");
	} else {
	    addTextCell(tr, group, "c");
	}
    }

    var port_count = SpomCurrentPorts();
    var value;
    for (var port = 0; port < port_count; port++) {
        if (isStackPort(port+1)) {
            continue;
        }
        if (parseInt(pval[port]) == 2) {
            value = 0;
        } else {
            value = parseInt(pval[port]);
        }
        var chk = addRadioCell(tr, value, "c", "aggr_port_" + port, "aggr_" + group + "_port_" + port);

        if (parseInt(pval[port]) == 2) {
            chk.disabled = true;
        }
    }

    if (group == 0) {
        addTextCell(tr, " ", "c");
        addTextCell(tr, " ", "c");
        addTextCell(tr, " ", "c");
    } else {
        var modeval = parseInt(pval[port_count]);
        var revertval = parseInt(pval[port_count + 1]);
        var maxbundleval = parseInt(pval[port_count + 2]);

        var mode_sel = addSelectCell(tr, modeT, modeV, modeval, "cr", "groupmode_" + group);
        var rev_chk = addCheckBoxCell(tr, revertval, "c", "revertive_" + group);
        var maxb_in = addInputCell(tr, maxbundleval, "cr", "maxbundle_" + group, 5);
        maxb_in.setAttribute("maxLength", 5);
        maxb_in.onchange = function () {
            if (maxb_in.value < 1) maxb_in.value = 1;
        }

        mode_sel.onchange = function () {
            rev_chk.disabled = (mode_sel.selectedIndex < 2);
            maxb_in.disabled = (mode_sel.selectedIndex < 2);
        };

        if (modeval < 3) {
            rev_chk.disabled = true;
            maxb_in.disabled = true;
        }
    }

    frag.appendChild(tr);       // Add row to fragment
}

function processUpdate(req, ref) {
    // Format:
    // 1/1/1/0/0/..../1/0| Group Normal
    // 1/1/1/0/0/..../1/0| Group 1
    // 1/1/1/0/0/..../1/0| Group 2
    //..................................
    // 0/1 GLGA1 member count(not include this unit)/GLAG2 member count(not include this unit)

    if (redirectOnError(req))
        return;

    if (req.responseText) {
        aggrconfig = req.responseText.split("|");
        //aggrconfig = req.split("|");

        // create holder for accumulated tbody elements and text nodes
        var frag = document.createDocumentFragment();
        gGroup = aggrconfig.length-1;

        for (var i = 0; i < gGroup; i++) {
            if (aggrconfig[i]){
                var pval = aggrconfig[i].split("/");
                addRow(frag,i,pval);
            }
        }
        var pmode = aggrconfig[i].split("/");
        glag_count[1] = parseInt(pmode[0]);  /* exclude the switch itself */
        glag_count[2] = parseInt(pmode[1]);  /* exclude the switch itself */

        var tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
    } else {
        SpomHandleError();
    }
}

function checkForm(form)
{
    var count = Array();
    var no_of_ports = 16;

    if (SpomCurrentPorts() < no_of_ports) {
        no_of_ports = SpomCurrentPorts();
    }

    for(var group = 0; group < gGroup; group++) {
        count[group]=0;
        for(var port = 0; port < SpomCurrentPorts(); port++) {
            if (isStackPort(port+1)) {
                continue;
            }
            var id = "aggr_"+group+"_port_"+port;
            if (document.getElementById(id).checked ) {
                count[group]++;
            }
        }
    }

    for (var group = 1 ; group < gGroup; group++) {
        if ( (SpomStackPortCount() > 0) && configArchJaguar_1)  {
            if ( count[group] > 8 ){
                alert("Global aggregation in the stack must include 1-8 ports");
                return false;
            }
        } else if ((SpomStackPortCount() == 0) && configArchJaguar_1 && (SpomCurrentPorts() > 32)) { /* Dual JR system */
            if (count[group] == 1 || count[group] > 8 ) {
                alert("The aggregation must include 2-8 ports");
                return false;
            }
        } else if (configArchJaguar_1) { /* Single JR system */
            if (count[group] == 1 || count[group] > 8 ) {
                alert("The aggregation must include 2-8 ports");
                return false;
            }
        } else if ( (SpomStackPortCount() > 0) && ((group == 1 || group == 2)) ) {
            if ( (count[group] + glag_count[group])> 8 ){
                error_count = count[group] + glag_count[group];
                alert("Group " + group + " member counts ("+error_count+") error! Global aggregation in the stack must include 1-8 ports");
                return false;
            }
        } else  if ( count[group] == 1 || count[group] > 16 ){
            alert("Group "+group+" member counts error!! Local aggregation must include 2-"+no_of_ports+" ports");
            return false;
        }
    }

    return true;
}

function GenerateHeader(header_id) {
    var thead = document.getElementById(header_id);
    var frag = document.createDocumentFragment();
    var tr;
    var stackport;

    clearChildNodes(thead);
    tr = CreateStyledElement("tr", "config_header");
    if (SpomStackPortCount() > 0) {
	addTextHeaderCell(tr, " ", "cl", "2");
    } else {
	addTextHeaderCell(tr, " ", "cl", "1");
    }

    addTextHeaderCell(tr, "Port Members", "hdrc", SpomCurrentPorts());
    addTextHeaderCell(tr, "Group Configuration", "hdrc", 3);
    frag.appendChild(tr);       // Add row to fragment

    tr = CreateStyledElement("tr", "config_header");
    if (SpomStackPortCount() > 0)
        addTextHeaderCell(tr, "Locality", "cl");
    addTextHeaderCell(tr, "Group ID", "cl");
    for (var i = configPortMin; i <= SpomCurrentPorts(); i++ ) {
        if (isStackPort(i)) {
            continue;
        }
        addTextHeaderCell(tr, i, "portno");
    }

    addTextHeaderCell(tr, "Mode", "cl");
    addTextHeaderCell(tr, "Revertive", "cl");
    addTextHeaderCell(tr, "Max Bundle", "cl");

    frag.appendChild(tr);       // Add row to fragment
    thead.appendChild(frag);
}

function requestUpdate() {

    if (SpomNavigationLoading())
        return;                 // Bail out, navigation will trigger update

    GenerateHeader('aggr_group_header');
    loadXMLDoc(SpomAddSidArg("/config/aggr_groups"), processUpdate, 'aggr_group_data');
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<form name="AggrGroupsForm" method="POST" action="/config/aggr_groups" onsubmit="return checkForm(this);">

<h1>Aggregation Group Configuration <span id="display_sid"></span></h1>

<table id="aggr_group_table" summary="Aggregation Group Configuration" cellspacing="0" class="config">
 <thead id="aggr_group_header"></thead>
 <tbody id="aggr_group_data"></tbody>
</table>

<p>
<input type="hidden" id="submit_sid" name="sid">
<input type="submit" value="Save">
<input type="reset" value="Reset">
</p>

</form>
</body>
</html>
