#
# Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.
#

MODULE_IF_FLAG = defined(VTSS_SW_OPTION_AGGR)

INCLUDE_BEGIN
#include "aggr_api.h"
#include "lacp_api.h"
#include "mgmt_api.h"
#include "icli_api.h"
#include "icli_porting_util.h"
#define PRINTF (void)icli_session_self_printf
#define AGGR_PORT_BUF_SIZE 500
INCLUDE_END

FUNCTION_BEGIN
static BOOL aggr_icli_group_runtime(u32                session_id,
                                    icli_runtime_ask_t ask,
                                    icli_runtime_t     *runtime)
{
    aggr_mgmt_group_no_t aggr_mgmt_group_end = aggr_mgmt_group_no_end();

    switch (ask) {
    case ICLI_ASK_PRESENT:
        runtime->present = TRUE;
        return TRUE;
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<%d-%d>", AGGR_MGMT_GROUP_NO_START, aggr_mgmt_group_end - 1);
        return TRUE;
    case ICLI_ASK_RANGE:
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.sr.cnt = 1;
        runtime->range.u.sr.range[0].min = AGGR_MGMT_GROUP_NO_START;
        runtime->range.u.sr.range[0].max = aggr_mgmt_group_end - 1;
        return TRUE;
    default :
        return FALSE;
    }
}

static void icli_cmd_usid_print(switch_iter_t *sit)
{
    if ((sit->first && sit->last) == 0) {
        PRINTF("\nSwitch:%u\n",sit->usid);
        PRINTF("--------\n");
    }
}

static BOOL icli_cmd_aggr_add(u32 session_id, icli_stack_port_range_t *plist, aggr_mgmt_group_no_t group_id,
       BOOL has_active ,BOOL has_on, BOOL has_passive, BOOL no)
{
    switch_iter_t            sit;
    port_iter_t              pit;
    mesa_rc                  rc;
    vtss_ifindex_t           ifindex;
    vtss_appl_aggr_group_conf_t conf;
    u32                      iport;
    BOOL                     members = FALSE;

    if (!AGGR_MGMT_GROUP_IS_AGGR(group_id)) {
        ICLI_PRINTF("%% Error: group_id id not supported\n");
        return 0;
    }
    // Loop over all configurable switches in usid order...
    (void)icli_switch_iter_init(&sit);

    // ... provided they're also in the plist.
    while (icli_switch_iter_getnext(&sit, plist)) {
        VTSS_RC(vtss_ifindex_from_llag(sit.isid, group_id, &ifindex));

        if ((rc = vtss_appl_aggregation_group_get(ifindex, &conf)) != VTSS_RC_OK) {
            ICLI_PRINTF("Error: %s\n", aggr_error_txt(rc));
            return 0;
        }
        if (no) {
            // Loop over all ports in uport order...
            (void)icli_port_iter_init(&pit, sit.isid, PORT_ITER_FLAGS_NORMAL);
            // ... provided they're also in the plist.
            while (icli_port_iter_getnext(&pit, plist)) {
                (void)portlist_state_clr(sit.isid, pit.iport, &conf.cfg_ports.member);
            }
            for (iport = VTSS_PORT_NO_START ; iport < fast_cap(MEBA_CAP_BOARD_PORT_MAP_COUNT); iport++) {
                if (portlist_state_get(sit.isid, iport, &conf.cfg_ports.member)) {
                  members = TRUE;
                  break;
                }
            }
            if (!members) {
                conf.mode = VTSS_APPL_AGGR_GROUP_MODE_DISABLED;
            }
            if ((rc = vtss_appl_aggregation_group_set(ifindex, &conf)) != VTSS_RC_OK) {
                ICLI_PRINTF("Error: %s\n", aggr_error_txt(rc));
                return 0;
            }
        } else {
            if (conf.mode == VTSS_APPL_AGGR_GROUP_MODE_DISABLED || conf.mode == VTSS_APPL_AGGR_GROUP_MODE_RESERVED) {
                if (has_active) {
                    conf.mode = VTSS_APPL_AGGR_GROUP_MODE_LACP_ACTIVE;
                } else if (has_passive) {
                    conf.mode = VTSS_APPL_AGGR_GROUP_MODE_LACP_PASSIVE;
                } else {
                    conf.mode = VTSS_APPL_AGGR_GROUP_MODE_STATIC_ON;
                }
            } else {
                if (has_active) {
                    if (conf.mode != VTSS_APPL_AGGR_GROUP_MODE_LACP_ACTIVE) {
                        ICLI_PRINTF("Error: The group mode is %s\n",conf.mode == VTSS_APPL_AGGR_GROUP_MODE_LACP_PASSIVE ? "'passive'(lacp)":"'on'");
                        return 0;
                    }
                } else if (has_passive) {
                    if (conf.mode != VTSS_APPL_AGGR_GROUP_MODE_LACP_PASSIVE) {
                        ICLI_PRINTF("Error: The group mode is %s\n",conf.mode == VTSS_APPL_AGGR_GROUP_MODE_LACP_ACTIVE ? "'active'(lacp)":"'on'");
                        return 0;
                    }
                } else {
                    if (conf.mode != VTSS_APPL_AGGR_GROUP_MODE_STATIC_ON) {
                        ICLI_PRINTF("Error: The group mode is %s\n",conf.mode == VTSS_APPL_AGGR_GROUP_MODE_LACP_ACTIVE ? "'active'(lacp)":"'passive'(lacp)");
                        return 0;
                    }
                }
            }
            (void)icli_port_iter_init(&pit, sit.isid, PORT_ITER_FLAGS_NORMAL);
            // Convert ICLI ports to type vtss_port_list_stackable_t
            while (icli_port_iter_getnext(&pit, plist)) {
                (void)portlist_state_set(sit.isid, pit.iport, &conf.cfg_ports.member);
            }
            if ((rc = vtss_appl_aggregation_group_set(ifindex, &conf)) != VTSS_RC_OK) {
                ICLI_PRINTF("Error: %s\n", aggr_error_txt(rc));
                return 0;
            }
        }
    }
    return TRUE;
}

static BOOL icli_cmd_aggr_mode(u32 session_id,  BOOL ip, BOOL ipport, BOOL smac, BOOL dmac, BOOL show, BOOL no)
{
    mesa_aggr_mode_t mode;
    mesa_rc          rc;

    if (show) {
        if ((rc=aggr_mgmt_aggr_mode_get(&mode)) != VTSS_RC_OK) {
            ICLI_PRINTF("Error:%s\n",aggr_error_txt(rc));
            return 0;
        }
        ICLI_PRINTF("Aggregation Mode:\n\n");
        ICLI_PRINTF("SMAC  : %s\n", mode.smac_enable ? "Enabled":"Disabled");
        ICLI_PRINTF("DMAC  : %s\n", mode.dmac_enable ? "Enabled":"Disabled");
        ICLI_PRINTF("IP    : %s\n", mode.sip_dip_enable ? "Enabled":"Disabled");
        ICLI_PRINTF("Port  : %s\n", mode.sport_dport_enable ? "Enabled":"Disabled");
        return 1;
    }

    if (no) {
        mode.smac_enable        = 1;
        mode.dmac_enable        = 0;
        mode.sip_dip_enable     = 1;
        mode.sport_dport_enable = 1;
    } else {
        mode.smac_enable        = smac;
        mode.dmac_enable        = dmac;
        mode.sip_dip_enable     = ip;
        mode.sport_dport_enable = ipport;
    }

    if ((rc=aggr_mgmt_aggr_mode_set(&mode)) != VTSS_RC_OK) {
        ICLI_PRINTF("Error:%s\n",aggr_error_txt(rc));
        return 0;
    }
    return 1;
}

static BOOL icli_cmd_aggr_dump(u32 session_id)
{
    switch_iter_t            sit;
    aggr_mgmt_group_no_t     aggr_no;
    char                     buf[AGGR_PORT_BUF_SIZE],*p;
    char                     buf2[AGGR_PORT_BUF_SIZE];
    vtss_ifindex_t           ifindex;
    mesa_port_no_t           port_no;
    mesa_port_list_t         cfg_ports, aggr_ports;
    BOOL                     first;
    vtss_appl_aggr_group_status_t grp_status;

    // Loop over all existing (not configurable) switches in usid order...
    (void)switch_iter_init(&sit, VTSS_ISID_GLOBAL, SWITCH_ITER_SORT_ORDER_USID);
    while (switch_iter_getnext(&sit)) {
        first=1;
        for (aggr_no = AGGR_MGMT_GROUP_NO_START; aggr_no < AGGR_MGMT_GROUP_NO_END_; aggr_no++) {
            VTSS_RC(vtss_ifindex_from_llag(sit.isid, aggr_no, &ifindex));
            if (vtss_appl_aggregation_status_get(ifindex, &grp_status) != VTSS_RC_OK) {
                continue;
            }
            for (port_no = VTSS_PORT_NO_START; port_no < fast_cap(MEBA_CAP_BOARD_PORT_MAP_COUNT); port_no++) {
                cfg_ports[port_no]  = portlist_state_get(sit.isid, port_no, &grp_status.cfg_ports.member);
                aggr_ports[port_no] = portlist_state_get(sit.isid, port_no, &grp_status.aggr_ports.member);
            }
            if (first) {
                (void)icli_cmd_usid_print(&sit);
                first = 0;
                p = &buf[0];
                p += sprintf(p, "%-9s","Aggr ID");
                p += sprintf(p, "%-8s","Name");
                p += sprintf(p, "%-15s","Type");
                p += sprintf(p, "%-10s","Speed");
                p += sprintf(p, "%-75s","Configured Ports");
                p += sprintf(p, "%-65s","Aggregated Ports  ");
                icli_table_header(session_id, buf);
            }
            p = &buf[0];
            p += sprintf(p,"%-9u",aggr_no);
            sprintf(buf2,"%s%u",AGGR_MGMT_GROUP_IS_LAG(aggr_no)?"LLAG":"GLAG",AGGR_MGMT_NO_TO_ID(aggr_no));
            p += snprintf(p,sizeof(buf)-(p-buf),"%-8s",buf2);
            p += sprintf(p,"%-15s",grp_status.type);
            p += sprintf(p,"%-10s",
                         grp_status.speed == MESA_SPEED_10M   ? "10M":
                         grp_status.speed == MESA_SPEED_100M  ? "100M" :
                         grp_status.speed == MESA_SPEED_1G    ? "1G" :
                         grp_status.speed == MESA_SPEED_5G    ? "5G" :
                         grp_status.speed == MESA_SPEED_2500M ? "2G5" :
                         grp_status.speed == MESA_SPEED_10G   ? "10G" :
                         grp_status.speed == MESA_SPEED_12G   ? "12G" : "Undefined");

            p += snprintf(p,sizeof(buf)-(p-buf),"%-75s", strlen(icli_port_list_info_txt(sit.isid, cfg_ports, buf2, FALSE)) ? buf2 : "none");
            p += snprintf(p,sizeof(buf)-(p-buf),"%-65s", strlen(icli_port_list_info_txt(sit.isid,aggr_ports, buf2, FALSE)) ? buf2 : "none");
            ICLI_PRINTF("%s\n", buf);
        }
    }
    return TRUE;
}

static BOOL icli_debug_cmd_show_aggr(u32 session_id)
{
    (void)aggr_mgmt_dump(printf);
    return 1;
}

FUNCTION_END

EXPORT_BEGIN
EXPORT_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = show aggregation [ mode ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

RUNTIME =

! 1: show
! 2: aggregation
! 3: mode

CMD_VAR =
CMD_VAR =
CMD_VAR = has_mode

HELP = Aggregation configuration
HELP = Aggregation port configuration
HELP = Traffic distribution mode

BYWORD =
BYWORD =
BYWORD = <Mode : option>

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    if (has_mode) {
        if (!icli_cmd_aggr_mode(session_id, 0, 0, 0, 0, 1, 0)) {
            ICLI_PRINTF("Could not show aggregation mode\n");
            return ICLI_RC_ERROR;
        }
    } else {
        if (!icli_cmd_aggr_dump(session_id)) {
            ICLI_PRINTF("Could not show aggregation(s)\n");
            return ICLI_RC_ERROR;
        }
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug show aggregation

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC

! 1: debug
! 2: show
! 3: aggregation

HELP =
HELP =
HELP = Show Aggregation Details

CODE_BEGIN
    if (!icli_debug_cmd_show_aggr(session_id)) {
        ICLI_PRINTF("Could not show aggregation Details\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = aggregation mode { [ smac ] [ dmac ] [ ip ] [ port ] }*1

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: aggregation
! 2: mode
! 3: smac
! 4: dmac
! 5: ip
! 6: port

CMD_VAR =
CMD_VAR =
CMD_VAR = has_smac
CMD_VAR = has_dmac
CMD_VAR = has_ip
CMD_VAR = has_port

HELP = Aggregation mode
HELP = Traffic distribution mode
HELP = Source MAC affects the distribution
HELP = Destination MAC affects the distribution
HELP = IP address affects the distribution
HELP = IP port affects the distribution

BYWORD =
BYWORD =
BYWORD = <Smac : option>
BYWORD = <Dmac : option>
BYWORD = <Ip : option>
BYWORD = <Port : option>

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    //static BOOL icli_cmd_aggr_mode(u32 session_id,  BOOL ip, BOOL ipport, BOOL smac, BOOL dmac, BOOL show, BOOL no)
    if (!icli_cmd_aggr_mode(session_id, has_ip, has_port, has_smac, has_dmac, 0, 0)) {
        ICLI_PRINTF("Could not set aggregation mode\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = no aggregation mode

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_GLOBAL_CONFIG
MODE_VAR =

RUNTIME =

! 1: no
! 2: aggregation
! 3: mode

CMD_VAR =
CMD_VAR =
CMD_VAR =

HELP = ##ICLI_HELP_NO
HELP = Aggregation mode
HELP = Traffic distribution mode

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    //static BOOL icli_cmd_aggr_mode(u32 session_id,  BOOL ip, BOOL ipport, BOOL smac, BOOL dmac, BOOL show, BOOL no)
    if (!icli_cmd_aggr_mode(session_id, 0, 0, 0, 0, 0, 1)) {
        ICLI_PRINTF("Could not reset aggregation mode\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END


!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = aggregation group <uint> mode { [ active | on | passive ] }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

NO_FORM_DOC_CMD_DESC    =
NO_FORM_DOC_CMD_DEFAULT =
NO_FORM_DOC_CMD_USAGE   =
NO_FORM_DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist

RUNTIME = icli_is_switchport_runtime
RUNTIME =
RUNTIME = aggr_icli_group_runtime
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

! 1: aggregation
! 2: group
! 3: <uint>
! 4: mode
! 5: active
! 6: on
! 7: passive

CMD_VAR =
CMD_VAR =
CMD_VAR = v_uint
CMD_VAR =
CMD_VAR = has_active
CMD_VAR = has_on
CMD_VAR = has_passive

HELP = Create an aggregation
HELP = Create an aggregation group
HELP = The aggregation group id
HELP = The mode of the aggregation
HELP = Active LACP
HELP = Static aggregation
HELP = Passive LACP

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
VARIABLE_BEGIN
    u32  i;
VARIABLE_END

NO_FORM_VARIABLE_BEGIN
NO_FORM_VARIABLE_END

CODE_BEGIN
    for (i = 0; i < plist->cnt; i++) {
        if (plist->switch_range[i].port_cnt > AGGR_MGMT_LAG_PORTS_MAX_) {
        ICLI_PRINTF("The aggregation cannot include more than %d ports\n",AGGR_MGMT_LAG_PORTS_MAX_);
        return ICLI_RC_ERROR;
        }
    }
    if (!icli_cmd_aggr_add(session_id, plist, v_uint, has_active, has_on, has_passive, 0)) {
        ICLI_PRINTF("Could not add port(s) to aggregation\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = no aggregation group <uint>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_LOOSELY

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist

RUNTIME =
RUNTIME = icli_is_switchport_runtime
RUNTIME = aggr_icli_group_runtime

! 1: no
! 2: aggregation
! 3: group
! 3: <uint>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_uint

HELP = ##ICLI_HELP_NO
HELP = Aggregation keyword
HELP = Aggregation group

BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    if (!icli_cmd_aggr_add(session_id, plist, v_uint, 0, 0, 0, 1)) {
        ICLI_PRINTF("Could not remove port(s) from aggregation\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
!==============================================================================

