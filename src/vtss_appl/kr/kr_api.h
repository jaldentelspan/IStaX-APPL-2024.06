/*
 Copyright (c) 2006-2023 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
*/

#ifndef _KR_API_H_
#define _KR_API_H_

#include "main_types.h"
#include "main.h"
#include "microchip/ethernet/switch/api.h"
#include "main_types.h"

// Error codes that may be generated by this module
enum {
    VTSS_APPL_KR_RC_INVALID_PARAMETER = MODULE_ERROR_START(VTSS_MODULE_ID_KR), /**< Invalid parameter                              */
    VTSS_APPL_KR_RC_INTERNAL_ERROR,                                            /**< Internal error. Check console                  */
    VTSS_APPL_KR_RC_PORT_NOT_CAPABLE,                                          /**< Port does not have KR capabilities             */
    VTSS_APPL_KR_RC_ADV_25G,                                                   /**< Unable to advertise  25G on this port/platform */
    VTSS_APPL_KR_RC_ADV_10G,                                                   /**< Unable to advertise  10G on this port          */
    VTSS_APPL_KR_RC_ADV_5G,                                                    /**< Unable to advertise   5G on this port/platform */
    VTSS_APPL_KR_RC_ADV_2G5,                                                   /**< Unable to advertise 2.5G on this port/platform */
    VTSS_APPL_KR_RC_ADV_1G,                                                    /**< Unable to advertise   1G on this port/platform */
    VTSS_APPL_KR_RC_ADV_NONE_SELECTED,                                         /**< No speeds are selected for advertisement       */
    VTSS_APPL_KR_RC_R_FEC,                                                     /**< When R-FEC is advertised, so must 10G or 25G   */
    VTSS_APPL_KR_RC_RS_FEC,                                                    /**< When RS-FEC is advertised, so must 25G         */
    VTSS_APPL_KR_RC_TRAIN_NO_REMOTE,                                           /**< No-remote is only supported on v3              */
    VTSS_APPL_KR_RC_TRAIN_BER_CNT,                                             /**< Using BER count is only supported on v3        */
    VTSS_APPL_KR_RC_TRAIN_TEST_MODE,                                           /**< Test mode is only supported on v3              */
    VTSS_APPL_KR_RC_TRAIN_TEST_REPEAT,                                         /**< Test repeat is only supported on v3            */
};

const char *kr_util_irq_to_txt(uint32_t irq);
char       *kr_util_irq_mask_to_txt(uint32_t irq_mask, char *buf);
void        kr_util_raw_coef_to_txt(uint32_t frm_in, char *tap_out, char *action_out);
const char *kr_util_aneg_rate_to_txt(uint32_t reg);
const char *kr_util_spd_to_txt(mesa_port_speed_t speed);
const char *kr_util_tap_to_txt(mesa_kr_tap_t st);
const char *kr_util_state_to_txt(mesa_train_state_t st);
const char *kr_util_ber_to_txt(mesa_ber_stage_t st);
const char *kr_util_aneg_sm_to_txt(uint32_t reg);
void        kr_util_raw_status_to_txt(uint32_t frm_in, char *tap_out, char *action_out);

typedef enum {
    CM1,
    C0,
    CP1,
} kr_tap_t;

/* KR state and status info */
typedef struct {
    mesa_port_kr_status_t status;
    mesa_port_kr_state_t state;
    uint32_t time_ld;
    uint32_t time_lp;
    uint32_t time_since_restart;
    uint16_t eye_height;
    mesa_port_ctle_t ctle;
} kr_mgmt_status_t;

// Is the chip KR capable?
// The function takes an optional argument, which - when passed - is filled with
// false if it's v2 (JR2) and true if it's v3 (SparX-5).
bool kr_mgmt_capable(bool *v3 = NULL);

// Is the port KR capable?
bool kr_mgmt_port_capable(mesa_port_no_t port_no);

// Function for checking the KR configuration given a particular port prior to
// applying the configuration. This function is required, because of the way
// the port module works: It overwrites its internal configuration BEFORE
// actually attempting to apply the configuration.
mesa_rc kr_mgmt_port_conf_check(mesa_port_no_t port_no, const mesa_port_kr_conf_t *conf);

// Function for getting default configuration for a particular port.
mesa_rc kr_mgmt_port_conf_default_get(mesa_port_no_t port_no, mesa_port_kr_conf_t *conf);

// Function for getting KR port configuration
mesa_rc kr_mgmt_port_conf_get(mesa_port_no_t port_no, mesa_port_kr_conf_t *conf);

// Function for setting KR port configuration
mesa_rc kr_mgmt_port_conf_set(mesa_port_no_t port_no, const mesa_port_kr_conf_t *conf);

// Function for getting KR port status
mesa_rc kr_mgmt_port_status_get(mesa_port_no_t port_no, kr_mgmt_status_t *status);

// The following structures and functions are for debugging purposes
typedef struct {
    mesa_kr_status_results_t res;
    uint32_t time;
} kr_coef_t;

typedef struct {
    mesa_ber_stage_t ber_training_stage;
    uint16_t ber_coef_frm;
    uint16_t ber_status_frm;
    uint32_t time;
    uint32_t irq;
} kr_ber_t;

typedef struct {
    uint32_t time;
    uint32_t irq;
    uint32_t port;
    uint32_t sm;
    uint16_t lp_bp0;
    uint16_t lp_bp1;
    uint16_t lp_bp2;
    uint16_t lp_np0;
    uint16_t lp_np1;
    uint16_t lp_np2;
} kr_irq_t;

void kr_debug_set(bool enable);
void kr_debug_pd_set(mesa_port_no_t port_no, bool enable);
void kr_debug_pcs_flap_set(mesa_port_no_t port_no, bool enable);
mesa_rc kr_debug_state_ber_hist_get( mesa_port_no_t port_no, kr_ber_t  *ber,  uint32_t index);
mesa_rc kr_debug_state_eq_hist_get( mesa_port_no_t port_no, kr_coef_t *coef, uint32_t index);
mesa_rc kr_debug_state_irq_hist_get(mesa_port_no_t port_no, kr_irq_t  *irq,  uint32_t index);

mesa_rc kr_init(vtss_init_data_t *data);
const char *kr_error_txt(mesa_rc rc);

#endif /* _KR_API_H_ */

