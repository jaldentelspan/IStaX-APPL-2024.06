<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>

<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>APS Detailed Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="aps_lib.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_aps_status_instance.htm";

var timerID;

// Page Argument
var pageArgs = searchArgs(window.location.search);

var pageApsId = 0;
if (pageArgs["apsid"]) {
    pageApsId = parseInt(pageArgs["apsid"], 10);
}

var sourceLink = "aps_status.htm";

if (pageArgs["source"]) { 
    if ( pageArgs["source"] == "status" ) {
        sourceLink = "aps_status.htm";
    } else if (pageArgs["source"] == "config" ) {
        sourceLink = "aps_config.htm";
    }
}

// Global variables
var configDynamicTable, commandDynamicTable, statusDynamicTable, myCapabilities, myPortInfo;
var oTPort = Array(), oVPort = Array();

var oTCommand = Array("noRequest", "lockout", "forceSwitch", "manualSwitchToWorking", "manualSwitchToProtecting", "exercise", "clear", "freeze", "freezeClear");
var oVCommand = Array("noRequest", "lockout", "forceSwitch", "manualSwitchToWorking", "manualSwitchToProtecting", "exercise", "clear", "freeze", "freezeClear");
var oTMode    = Array("1:1", "1+1 Uni", "1+1 Bi");
var oVMode    = Array("oneForOne", "onePlusOneUniDir", "onePlusOneBiDir");

function redirectPage(recv_json)
{
    document.location.href = sourceLink;
}

function addHeader(table_rows, name)
{
    var row;

    if (name == "config") {
        row = {fields:[
             {type:"disp_hdr", params:["APS #", 1, 2]},
             {type:"disp_hdr", params:["Working", 3]},
             {type:"disp_hdr", params:["Protecting", 3]},
             {type:"disp_hdr", params:["Mode", 1, 2]},
             {type:"disp_hdr", params:["Level", 1, 2]},
             {type:"disp_hdr", params:["VLAN", 1, 2]},
             {type:"disp_hdr", params:["PCP", 1, 2]},
             {type:"disp_hdr", params:["Rev", 1, 2]},
             {type:"disp_hdr", params:["TxAps", 1, 2]},
             {type:"disp_hdr", params:["WTR", 1, 2]},
             {type:"disp_hdr", params:["HoldOff", 1, 2]},
             {type:"disp_hdr", params:["Enable", 1, 2]}
            ]
          };
        table_rows.push(row);

        // 2nd row
        row = {fields:[
             {type:"disp_hdr", params:["Port"]},
             {type:"disp_hdr", params:["SF Trigger"]},
             {type:"disp_hdr", params:["SF MEP"]},
             {type:"disp_hdr", params:["Port"]},
             {type:"disp_hdr", params:["SF Trigger"]},
             {type:"disp_hdr", params:["SF MEP"]}
            ]
          };
        table_rows.push(row);

    } else if (name == "status") {
        // 1st row
        row = {fields:[
                {type:"disp_hdr",  params:["State", 3]},
                {type:"disp_hdr",  params:["Defect state", 2]},
                {type:"disp_hdr",  params:["TxAps", 3]},
                {type:"disp_hdr",  params:["RxAps", 3]},
                {type:"disp_hdr",  params:["Dfop",  4]},
                {type:"disp_hdr",  params:["SMAC",  1,2]},
                {type:"disp_hdr",  params:["TxCnt", 1,2]},
                {type:"disp_hdr",  params:["RxCnt", 2]}
                ]
              };
        table_rows.push(row);

        // 2nd row
        row = {fields:[
                {type:"disp_hdr",  params:["Operational"]},
                {type:"disp_hdr",  params:["Warning"]},
                {type:"disp_hdr",  params:["Protection"]},
                {type:"disp_hdr",  params:["Working"]},
                {type:"disp_hdr",  params:["Protecting"]},
                {type:"disp_hdr",  params:["Request"]},
                {type:"disp_hdr",  params:["ReSignal"]},
                {type:"disp_hdr",  params:["BrSignal"]},
                {type:"disp_hdr",  params:["Request"]},
                {type:"disp_hdr",  params:["ReSignal"]},
                {type:"disp_hdr",  params:["BrSignal"]},
                {type:"disp_hdr",  params:["CM"]},
                {type:"disp_hdr",  params:["PM"]},
                {type:"disp_hdr",  params:["NR"]},
                {type:"disp_hdr",  params:["TO"]},
                {type:"disp_hdr",  params:["Valid"]},
                {type:"disp_hdr",  params:["Invalid"]}
                ]
              };
        table_rows.push(row);

    } else { //command
        // 1st row
        row = {fields:[
                 {type:"disp_hdr", params:["Command"]}
                ]
              };
        table_rows.push(row);
    }

}

function addConfigRow(key, val)
{
    var row = {
        "key":key,
        fields:[
            {type:"text",       params:[key, "cr"]},
            {type:"text",       params:[oTPort[oVPort.indexOf(val.WorkingIfIndex)], "cr"]},
            {type:"text",       params:[oTSfTrigger[oVSfTrigger.indexOf(val.WorkingSfTrigger)], "c"]},
            {type:"text",       params:[val.WorkingSfTrigger == "link" ? "" : val.WorkingMEPDomain + "::" + val.WorkingMEPService + "::" + val.WorkingMEPId, "c"]},
            {type:"text",       params:[oTPort[oVPort.indexOf(val.ProtectingIfIndex)], "cr"]},
            {type:"text",       params:[oTSfTrigger[oVSfTrigger.indexOf(val.ProtectingSfTrigger)], "c"]},
            {type:"text",       params:[val.ProtectingSfTrigger == "link" ? "" : val.ProtectingMEPDomain + "::" + val.ProtectingMEPService + "::" + val.ProtectingMEPId, "c"]},
            {type:"text",       params:[oTMode[oVMode.indexOf(val.Mode)], "c"]},
            {type:"text",       params:[val.Level, "cr"]},
            {type:"text",       params:[val.Vid, "cr"]},
            {type:"text",       params:[val.Pcp, "cr"]},
            {type:"image",      params:["c", val.Revertive  ? "images/yes.gif" : "images/no.gif"]},
            {type:"image",      params:["c", val.TxApsEnable ? "images/yes.gif" : "images/no.gif"]},
            {type:"text",       params:[val.WaitToRestoreSecs, "cr"]},
            {type:"text",       params:[val.HoldOffTimerMSecs, "cr"]},
            {type:"image",      params:["c", val.AdminActive ? "images/yes.gif" : "images/no.gif"]}
           ]
    };

    return row;
}

function addStatusRow(key, val)
{
    // If OperationalState is not "active", mmost of the other parameters are not valid, and should not be displayed
    var v = val.OperationalState == "active" ? true : false;
    var operWarning = val.OperationalWarning == "none" ? false : true;

    var row = {
        "key":key,
        fields:[
            {type:"text",   params:[operState2Text(val.OperationalState), "c"]},
            {type:"image",  params:["c", operWarning ? "images/led-yellow.gif" : "images/led-off.gif",  apsWarning2Text(val.OperationalWarning)]},
            {type:"text",   params:[v ? protState2Text(val.ProtectionState) : "-" , "c"]},
            {type:"text",   params:[v ? val.WorkingState    : "-" , "c"]},
            {type:"text",   params:[v ? val.ProtectingState : "-" , "c"]},
            {type:"text",   params:[v ? val.TxApsRequest    : "-" , "c"]},
            {type:"text",   params:[v ? val.TxApsReSignal   : "-" , "c"]},
            {type:"text",   params:[v ? val.TxApsBrSignal   : "-" , "c"]},
            {type:"text",   params:[v ? val.RxApsRequest    : "-" , "c"]},
            {type:"text",   params:[v ? val.RxApsReSignal   : "-" , "c"]},
            {type:"text",   params:[v ? val.RxApsBrSignal   : "-" , "c"]},
            {type:"image",  params:["c", v ? (val.DfopCM ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"image",  params:["c", v ? (val.DfopPM ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"image",  params:["c", v ? (val.DfopNR ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"image",  params:["c", v ? (val.DfopTO ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"text",   params:[v ? val.Smac            : "-" , "c"]},
            {type:"digit",  params:[v ? val.TxCnt           : "-"]},
            {type:"digit",  params:[v ? val.RxValidCnt      : "-"]},
            {type:"digit",  params:[v ? val.RxInvalidCnt    : "-"]}
        ]
    };
    return row;
}

function addCommandRow(key, val)
{
    var row = {
        "key":key,
        fields:[
            {type:"select", params:[oTCommand, oVCommand, val.Command, "c", "Command"]}
           ]
    };

    return row;
}

function addRows(recv_json, name, idx)
{
    var table_rows = new Array();

    // Add table header
    addHeader(table_rows, name);

    // Add single row
    if (name == "config") {
        table_rows.push(addConfigRow(recv_json.key, recv_json.val));
    } else if (name == "status") {
        table_rows.push(addStatusRow(recv_json.key, recv_json.val));
    } else { //oamConfig
        table_rows.push(addCommandRow(recv_json.key, recv_json.val));
    }

    return table_rows;
}

function processUpdate(recv_json, name)
{
    var record = null;
    var i;
    var table_rows;

    if (pageApsId) {
        for (i = 0; i < recv_json.length; i++) {
            if (pageApsId == recv_json[i].key) {
                record = recv_json[i];
                break;
            }
        }
        // Redirect page if this ID doesn't exist.
        if (!record) {
            alert("Aps #" + pageApsId + " no data found");
            redirectPage();
            return;
        }
    } else {
        // Redirect page if this ID doesn't exist.
        alert("Aps #" + pageApsId + " does not exist.");
        redirectPage();
        return;
    }

    if (name == "config") {
        table_rows = addRows(record, name);
        configDynamicTable.addRows(table_rows);
        configDynamicTable.update();
    } else if (name == "command") {
        table_rows = addRows(record, name, i);
        commandDynamicTable.addRows(table_rows);
        commandDynamicTable.update();
    } else {
        table_rows = addRows(record, name, i);
        statusDynamicTable.addRows(table_rows);
        statusDynamicTable.update();
    }

    var autorefresh = $('autorefresh');
    if (autorefresh && autorefresh.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = setTimeout('requestUpdateStatus()', settingsRefreshInterval());
    }
}

function requestUpdateStatus(recv_json, name)
{
    // Restore status table content 
    statusDynamicTable.restore();

    // This table requires one JSON data.
    requestJsonDoc("aps.status.get", null, processUpdate, "status");
}

function requestUpdate(recv_json, name)
{
    // Restore table content 
    configDynamicTable.restore();
    commandDynamicTable.restore();
    statusDynamicTable.restore();

    // This table requires one JSON data.
    requestJsonDoc("aps.config.get", null, processUpdate, "config");
    requestJsonDoc("aps.control.command.get", null, processUpdate, "command");
    requestJsonDoc("aps.status.get", null, processUpdate, "status");
}

function chkRefresh(fld)
{
  if (!fld.checked) {
    if (timerID) {
      clearTimeout(timerID);
    }
    timerID = null;
  } else {
    requestUpdate(null, "refresh");
  }
}

function submitConfig()
{
    var trim_ids = Array();
    // Convert HTML object to JSON
    var json_obj = html2Json(configTableContent, trim_ids);

    // Submit data with JSON format
    var key = pageApsId;
    var submit_json = [key, json_obj];
    requestJsonDoc("aps.config.set", submit_json, requestUpdate );
}

function submitCommand()
{
    var trim_ids = Array();
    var json_obj = html2Json(commandTableContent, trim_ids);

    // if command is "Command":"noRequest" the do not send json command
    if (json_obj.Command != "noRequest") {
        // Submit data with JSON format
        var key = pageApsId;
        var submit_json = [key, json_obj];
        requestJsonDoc("aps.control.command.set", submit_json, requestUpdate);
    }
}

function resetCounters()
{
    var val = true;
    var submit_json = [pageApsId, val ];

    requestJsonDoc("aps.control.statisticsClear.set", submit_json, requestUpdateStatus);
}

function resetForms()
{
    //configDynamicTable.resetEvent();
    commandDynamicTable.resetEvent();
    //statusDynamicTable.resetEvent();
}

function clickBack()
{
    document.location.href = sourceLink;
}

function requestUpdateGlobals(recv_json, name)
{
    if (name == "capabilities") {
        if (recv_json) {
            // Clone a new one and save to global variable
            myCapabilities = configDynamicTable.cloneRecvJson(recv_json);
        } else {
            alert("Get dynamic data failed.");
            return;
        }
    } else if (name == "portInfo") {
        if (recv_json && recv_json.length) {
            // Clone a new one and save to global variable
            myPortInfo = true;
            oTPort.length = 0;
            oVPort.length = 0;
            Object.each(recv_json, function(record, idx) {
                oTPort.push(record.val);
                oVPort.push(record.key);
            });
        } else {
            alert("Get port info failed.");
            return;
        }
    }
     // This table requires two JSON data.
    if (myCapabilities && myPortInfo) {
        requestUpdate();
    }

}


window.addEvent('domready', function() {
    // Create a from with table body for receive/transmit JSON data
    configDynamicTable = new DynamicTable("configTableContent", "display");
    commandDynamicTable = new DynamicTable("commandTableContent", "config");
    statusDynamicTable = new DynamicTable("statusTableContent", "display");

    // This table requires two JSON data(capabilities/config).
    // To ensure the completed data, we request the configured data after the
    // capabilities data is received and it is requrested only one time.
    requestJsonDoc("aps.capabilities.get", null, requestUpdateGlobals, "capabilities");
    requestJsonDoc("port.namemap.get", null, requestUpdateGlobals, "portInfo");
});
 </script>
</head>

<body class="content">
<h1>APS Status</h1>


<form id="myTablesForm" action="">

<h2>Configuration</h2>
<div id="configTableContent"></div>
  
    
<h2>Status</h2>
<div class="refreshbar">
    <label for="autorefresh">Auto-refresh</label>
    <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
    <input type="button" value="Refresh" onClick='requestUpdate(); this.blur();'>
    <img id="update" alt="" src="images/updating.gif">
</div>
<div id="statusTableContent"></div>

<p>
  <input type="button" value="Reset Counters" onclick="resetCounters();">
</p>

<h2>Command</h2>
<div id="commandTableContent"></div>

<p>
  <input type="button" value="Save" onclick="submitCommand();">
  <input type="button" value="Reset" onclick="resetForms();">
  <input type="button" value="Back" onclick="clickBack();">
</p>

</form>


</body>
</html>
