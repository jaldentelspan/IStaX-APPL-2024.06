<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>

<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>APS Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/json.js"></script>
 <script type="text/javascript" src="aps_lib.js"></script>
<script type="text/javascript">

// Help page magic
var help_page = "/help/help_aps_status.htm";

// Global variables
var myDynamicTable, myCapabilities, myApsInfo, timerID;


function checkForm()
{
    return true;
}

function chkRefresh(fld)
{
  if (!fld.checked) {
    if (timerID) {
      clearTimeout(timerID);
    }
    timerID = null;
  } else {
    requestUpdate(null, "refresh");
  }
}

function addHeader(table_rows)
{
    var row;
    row = {fields:[
        {type:"disp_hdr",  params:["APS #", 1,2]},
        {type:"disp_hdr",  params:["State", 3]},
        {type:"disp_hdr",  params:["Defect state", 2]},
        {type:"disp_hdr",  params:["TxAps", 3]},
        {type:"disp_hdr",  params:["RxAps", 3]},
        {type:"disp_hdr",  params:["Dfop",  4]},
        {type:"disp_hdr",  params:["SMAC",  1,2]},
        {type:"disp_hdr",  params:["TxCnt", 1,2]},
        {type:"disp_hdr",  params:["RxCnt", 2]}
        ]
    };
        
    table_rows.push(row);

// 2nd row
    row = {fields:[
        {type:"disp_hdr",  params:["Operational"]},
        {type:"disp_hdr",  params:["Warning"]},
        {type:"disp_hdr",  params:["Protection"]},
        {type:"disp_hdr",  params:["Working"]},
        {type:"disp_hdr",  params:["Protecting"]},
        {type:"disp_hdr",  params:["Request"]},
        {type:"disp_hdr",  params:["ReSignal"]},
        {type:"disp_hdr",  params:["BrSignal"]},
        {type:"disp_hdr",  params:["Request"]},
        {type:"disp_hdr",  params:["ReSignal"]},
        {type:"disp_hdr",  params:["BrSignal"]},
        {type:"disp_hdr",  params:["CM"]},
        {type:"disp_hdr",  params:["PM"]},
        {type:"disp_hdr",  params:["NR"]},
        {type:"disp_hdr",  params:["TO"]},
        {type:"disp_hdr",  params:["Valid"]},
        {type:"disp_hdr",  params:["Invalid"]}
        ]
    };

    table_rows.push(row);
}

function addRow(key, val, key_prefix)
{
    // If OperationalState is not "active", mmost of the other parameters are not valid, and should not be displayed
    var v = val.OperationalState == "active" ? true : false;
    var operWarning = val.OperationalWarning == "none" ? false : true;

    var row = {
        "key":key,
        fields:[
            {type:"link",   params:["cr", "aps_status_instance.htm?source=status&apsid=" + key, key]},
            {type:"text",   params:[operState2Text(val.OperationalState), "c"]},
            {type:"image",  params:["c", operWarning ? "images/led-yellow.gif" : "images/led-off.gif", apsWarning2Text(val.OperationalWarning)]},
            {type:"text",   params:[v ? protState2Text(val.ProtectionState) : "-" , "c"]},
            {type:"text",   params:[v ? val.WorkingState    : "-" , "c"]},
            {type:"text",   params:[v ? val.ProtectingState : "-" , "c"]},
            {type:"text",   params:[v ? val.TxApsRequest    : "-" , "c"]},
            {type:"text",   params:[v ? val.TxApsReSignal   : "-" , "c"]},
            {type:"text",   params:[v ? val.TxApsBrSignal   : "-" , "c"]},
            {type:"text",   params:[v ? val.RxApsRequest    : "-" , "c"]},
            {type:"text",   params:[v ? val.RxApsReSignal   : "-" , "c"]},
            {type:"text",   params:[v ? val.RxApsBrSignal   : "-" , "c"]},
            {type:"image",  params:["c", v ? (val.DfopCM ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"image",  params:["c", v ? (val.DfopPM ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"image",  params:["c", v ? (val.DfopNR ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"image",  params:["c", v ? (val.DfopTO ? "images/led-down.gif" : "images/led-up.gif") : "images/led-off.gif"]},
            {type:"text",   params:[v ? val.Smac            : "-" , "c"]},
            {type:"digit",  params:[v ? val.TxCnt           : "-"]},
            {type:"digit",  params:[v ? val.RxValidCnt      : "-"]},
            {type:"digit",  params:[v ? val.RxInvalidCnt    : "-"]}
        ]
    };

    return row;
}

function addRows(recv_json)
{
    var row, empty_colspan = 20;
    var table_rows = new Array();

    // Add table header
    addHeader(table_rows);

    // Add single row
    Object.each(recv_json, function(record, idx) {
        table_rows.push(addRow(record.key, record.val, idx));
    });

    // Empty row
    if (!recv_json.length) {
        table_rows.push({fields:[{type:"empty_row", params:[empty_colspan]}]});
    }

    return table_rows;
}

function processUpdate(recv_json, name)
{
    // Ignore the process if no data is received
    if (!recv_json) {
        alert("Get dynamic data failed.");
        return;
    }

    // Save the received JSON data
    myDynamicTable.saveRecvJson(name, recv_json);

    // Add table rows
    var table_rows = addRows(recv_json);
    myDynamicTable.addRows(table_rows);

    // Update this dynamic table
    myDynamicTable.update();

    // Refresh timer
    var autorefresh = document.getElementById("autorefresh");
    if (autorefresh && autorefresh.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
    }
}

function requestUpdate(recv_json, name)
{
    myDynamicTable.restore(); // Reset myDynamicTable to default

    if (name == "capabilities") {
        if (recv_json) {
            // Clone a new one and save to global variable
            myCapabilities = myDynamicTable.cloneRecvJson(recv_json);
            // Adjust configurable values for CCM interval based on capabilities
        } else {
            alert("Get capabilities failed.");
            return;
        }
    } else if (name == "configAps") {
        if (recv_json) {
            myApsInfo = true;
        }
    }

    if (myCapabilities && myApsInfo) {
        requestJsonDoc("aps.status.get", null, processUpdate, "status");
    }
}

window.addEvent('domready', function() {
    // Create a from with table body for receive/transmit JSON data
    myDynamicTable = new DynamicTable("myTableContent", "display");

    // This table requires two JSON data(capabilities/config).
    // To ensure the completed data, we request the configured data after the
    // capabilities data is received and it is requrested only one time.
    requestJsonDoc("aps.capabilities.get", null, requestUpdate, "capabilities");
    requestJsonDoc("aps.status.get", null, requestUpdate, "configAps");
});
 </script>
</head>

<body class="content">
<h1>APS Status</h1>

<div class="refreshbar">
    <label for="autorefresh">Auto-refresh</label>
    <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
    <input type="button" value="Refresh" onClick='requestUpdate(); this.blur();'>
    <img id="update" alt="" src="images/updating.gif">
</div>

<div id="myTableContent"></div>

</body>
</html>

