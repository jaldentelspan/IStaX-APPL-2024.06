/*

 Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

*/

#if defined(VKTBD)

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40
//       Revise the "FIXME" parts to make it as a completed code.

//#include <ucd-snmp/config.h>    /* For HAVE_STDLIB_H, etc.       */
//#include <ucd-snmp/mibincl.h>   /* Standard set of SNMP includes */
#include "main.h"
#include "vtss_snmp_api.h"
#include "ieee8021PSFPMib.h"
#include "ucd_snmp_ieee8021PSFPMib.h"
#include "mibContextTable.h" // mibContextTable_register()
// FIXME: Remove the include file if your implementation don't need to redefine the standard standard MIB objects
#include "snmp_mib_redefine.h"  // snmp_mib_redefine_register()
#include <vtss_module_id.h>
#include <vtss_trace_lvl_api.h>
#include <qos_api.h>
#include "vtss_rowStatus.h"

// Trace module ID
#define VTSS_TRACE_MODULE_ID    VTSS_MODULE_ID_SNMP
#define IEEE8021BRIDGECOMPONENTID       1
#define IEEE8021BRIDGECOMPONENT_CNT     1

/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-PSFP-MIB:ieee8021PSFPMib.
  **/
void ieee8021PSFPMib_init(void)
{
    T_D("enter");
    ucd_snmp_init_ieee8021PSFPMib();

    /* Register snmpMibRedefineTable */


    // ieee8021PSFPStreamHandleSpec
    oid ieee8021PSFPStreamHandleSpec_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 2 };
    snmp_mib_redefine_register(ieee8021PSFPStreamHandleSpec_variables_oid,
                               sizeof(ieee8021PSFPStreamHandleSpec_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPStreamHandleSpec",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{-1 2147483647}");

    // ieee8021PSFPPrioritySpec
    oid ieee8021PSFPPrioritySpec_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 3 };
    snmp_mib_redefine_register(ieee8021PSFPPrioritySpec_variables_oid,
                               sizeof(ieee8021PSFPPrioritySpec_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPPrioritySpec",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{-1 2147483647}");

    // ieee8021PSFPStreamGateInstanceID
    oid ieee8021PSFPStreamGateInstanceID_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 4 };
    snmp_mib_redefine_register(ieee8021PSFPStreamGateInstanceID_variables_oid,
                               sizeof(ieee8021PSFPStreamGateInstanceID_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPStreamGateInstanceID",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPFilterSpecificationList
    oid ieee8021PSFPFilterSpecificationList_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 5 };
    snmp_mib_redefine_register(ieee8021PSFPFilterSpecificationList_variables_oid,
                               sizeof(ieee8021PSFPFilterSpecificationList_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFilterSpecificationList",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPMatchingFramesCount
    oid ieee8021PSFPMatchingFramesCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 6 };
    snmp_mib_redefine_register(ieee8021PSFPMatchingFramesCount_variables_oid,
                               sizeof(ieee8021PSFPMatchingFramesCount_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPMatchingFramesCount",
                               "COUNTER64",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPPassingFramesCount
    oid ieee8021PSFPPassingFramesCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 7 };
    snmp_mib_redefine_register(ieee8021PSFPPassingFramesCount_variables_oid,
                               sizeof(ieee8021PSFPPassingFramesCount_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPPassingFramesCount",
                               "COUNTER64",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPNotPassingFramesCount
    oid ieee8021PSFPNotPassingFramesCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 8 };
    snmp_mib_redefine_register(ieee8021PSFPNotPassingFramesCount_variables_oid,
                               sizeof(ieee8021PSFPNotPassingFramesCount_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPNotPassingFramesCount",
                               "COUNTER64",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPPassingSDUCount
    oid ieee8021PSFPPassingSDUCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 9 };
    snmp_mib_redefine_register(ieee8021PSFPPassingSDUCount_variables_oid,
                               sizeof(ieee8021PSFPPassingSDUCount_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPPassingSDUCount",
                               "COUNTER64",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPNotPassingSDUCount
    oid ieee8021PSFPNotPassingSDUCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 10 };
    snmp_mib_redefine_register(ieee8021PSFPNotPassingSDUCount_variables_oid,
                               sizeof(ieee8021PSFPNotPassingSDUCount_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPNotPassingSDUCount",
                               "COUNTER64",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPREDFramesCount
    oid ieee8021PSFPREDFramesCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 11 };
    snmp_mib_redefine_register(ieee8021PSFPREDFramesCount_variables_oid,
                               sizeof(ieee8021PSFPREDFramesCount_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPREDFramesCount",
                               "COUNTER64",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPStreamBlockedDueToOversizeFrameEnable
    oid ieee8021PSFPStreamBlockedDueToOversizeFrameEnable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 12 };
    snmp_mib_redefine_register(ieee8021PSFPStreamBlockedDueToOversizeFrameEnable_variables_oid,
                               sizeof(ieee8021PSFPStreamBlockedDueToOversizeFrameEnable_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPStreamBlockedDueToOversizeFrameEnable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPStreamBlockedDueToOversizeFrame
    oid ieee8021PSFPStreamBlockedDueToOversizeFrame_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 13 };
    snmp_mib_redefine_register(ieee8021PSFPStreamBlockedDueToOversizeFrame_variables_oid,
                               sizeof(ieee8021PSFPStreamBlockedDueToOversizeFrame_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPStreamBlockedDueToOversizeFrame",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPStreamFilterEntryRowStatus
    oid ieee8021PSFPStreamFilterEntryRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 1, 1, 1, 14 };
    snmp_mib_redefine_register(ieee8021PSFPStreamFilterEntryRowStatus_variables_oid,
                               sizeof(ieee8021PSFPStreamFilterEntryRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPStreamFilterEntryRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
");

    // ieee8021PSFPGateEnabled
    oid ieee8021PSFPGateEnabled_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 2 };
    snmp_mib_redefine_register(ieee8021PSFPGateEnabled_variables_oid,
                               sizeof(ieee8021PSFPGateEnabled_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPGateEnabled",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPAdminGateStates
    oid ieee8021PSFPAdminGateStates_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 3 };
    snmp_mib_redefine_register(ieee8021PSFPAdminGateStates_variables_oid,
                               sizeof(ieee8021PSFPAdminGateStates_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminGateStates",
                               "INTEGER",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 open} \
{2 closed} \
");

    // ieee8021PSFPOperGateStates
    oid ieee8021PSFPOperGateStates_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 4 };
    snmp_mib_redefine_register(ieee8021PSFPOperGateStates_variables_oid,
                               sizeof(ieee8021PSFPOperGateStates_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperGateStates",
                               "INTEGER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 open} \
{2 closed} \
");

    // ieee8021PSFPAdminControlListLength
    oid ieee8021PSFPAdminControlListLength_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 5 };
    snmp_mib_redefine_register(ieee8021PSFPAdminControlListLength_variables_oid,
                               sizeof(ieee8021PSFPAdminControlListLength_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminControlListLength",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPOperControlListLength
    oid ieee8021PSFPOperControlListLength_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 6 };
    snmp_mib_redefine_register(ieee8021PSFPOperControlListLength_variables_oid,
                               sizeof(ieee8021PSFPOperControlListLength_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperControlListLength",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPAdminControlList
    oid ieee8021PSFPAdminControlList_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 7 };
    snmp_mib_redefine_register(ieee8021PSFPAdminControlList_variables_oid,
                               sizeof(ieee8021PSFPAdminControlList_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminControlList",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPOperControlList
    oid ieee8021PSFPOperControlList_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 8 };
    snmp_mib_redefine_register(ieee8021PSFPOperControlList_variables_oid,
                               sizeof(ieee8021PSFPOperControlList_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperControlList",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPAdminCycleTimeNumerator
    oid ieee8021PSFPAdminCycleTimeNumerator_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 9 };
    snmp_mib_redefine_register(ieee8021PSFPAdminCycleTimeNumerator_variables_oid,
                               sizeof(ieee8021PSFPAdminCycleTimeNumerator_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminCycleTimeNumerator",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPAdminCycleTimeDenominator
    oid ieee8021PSFPAdminCycleTimeDenominator_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 10 };
    snmp_mib_redefine_register(ieee8021PSFPAdminCycleTimeDenominator_variables_oid,
                               sizeof(ieee8021PSFPAdminCycleTimeDenominator_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminCycleTimeDenominator",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPOperCycleTimeNumerator
    oid ieee8021PSFPOperCycleTimeNumerator_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 11 };
    snmp_mib_redefine_register(ieee8021PSFPOperCycleTimeNumerator_variables_oid,
                               sizeof(ieee8021PSFPOperCycleTimeNumerator_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperCycleTimeNumerator",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPOperCycleTimeDenominator
    oid ieee8021PSFPOperCycleTimeDenominator_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 12 };
    snmp_mib_redefine_register(ieee8021PSFPOperCycleTimeDenominator_variables_oid,
                               sizeof(ieee8021PSFPOperCycleTimeDenominator_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperCycleTimeDenominator",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPAdminCycleTimeExtension
    oid ieee8021PSFPAdminCycleTimeExtension_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 13 };
    snmp_mib_redefine_register(ieee8021PSFPAdminCycleTimeExtension_variables_oid,
                               sizeof(ieee8021PSFPAdminCycleTimeExtension_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminCycleTimeExtension",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPOperCycleTimeExtension
    oid ieee8021PSFPOperCycleTimeExtension_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 14 };
    snmp_mib_redefine_register(ieee8021PSFPOperCycleTimeExtension_variables_oid,
                               sizeof(ieee8021PSFPOperCycleTimeExtension_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperCycleTimeExtension",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPAdminBaseTime
    oid ieee8021PSFPAdminBaseTime_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 15 };
    snmp_mib_redefine_register(ieee8021PSFPAdminBaseTime_variables_oid,
                               sizeof(ieee8021PSFPAdminBaseTime_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminBaseTime",
                               "IEEE8021STPTPtimeValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{10 10}");

    // ieee8021PSFPOperBaseTime
    oid ieee8021PSFPOperBaseTime_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 16 };
    snmp_mib_redefine_register(ieee8021PSFPOperBaseTime_variables_oid,
                               sizeof(ieee8021PSFPOperBaseTime_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperBaseTime",
                               "IEEE8021STPTPtimeValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{10 10}");

    // ieee8021PSFPConfigChange
    oid ieee8021PSFPConfigChange_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 17 };
    snmp_mib_redefine_register(ieee8021PSFPConfigChange_variables_oid,
                               sizeof(ieee8021PSFPConfigChange_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPConfigChange",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPConfigChangeTime
    oid ieee8021PSFPConfigChangeTime_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 18 };
    snmp_mib_redefine_register(ieee8021PSFPConfigChangeTime_variables_oid,
                               sizeof(ieee8021PSFPConfigChangeTime_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPConfigChangeTime",
                               "IEEE8021STPTPtimeValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{10 10}");

    // ieee8021PSFPTickGranularity
    oid ieee8021PSFPTickGranularity_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 19 };
    snmp_mib_redefine_register(ieee8021PSFPTickGranularity_variables_oid,
                               sizeof(ieee8021PSFPTickGranularity_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPTickGranularity",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPCurrentTime
    oid ieee8021PSFPCurrentTime_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 20 };
    snmp_mib_redefine_register(ieee8021PSFPCurrentTime_variables_oid,
                               sizeof(ieee8021PSFPCurrentTime_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPCurrentTime",
                               "IEEE8021STPTPtimeValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{10 10}");

    // ieee8021PSFPConfigPending
    oid ieee8021PSFPConfigPending_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 21 };
    snmp_mib_redefine_register(ieee8021PSFPConfigPending_variables_oid,
                               sizeof(ieee8021PSFPConfigPending_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPConfigPending",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPConfigChangeError
    oid ieee8021PSFPConfigChangeError_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 23 };
    snmp_mib_redefine_register(ieee8021PSFPConfigChangeError_variables_oid,
                               sizeof(ieee8021PSFPConfigChangeError_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPConfigChangeError",
                               "COUNTER64",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPAdminIPV
    oid ieee8021PSFPAdminIPV_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 24 };
    snmp_mib_redefine_register(ieee8021PSFPAdminIPV_variables_oid,
                               sizeof(ieee8021PSFPAdminIPV_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPAdminIPV",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{-1 2147483647}");

    // ieee8021PSFPOperIPV
    oid ieee8021PSFPOperIPV_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 25 };
    snmp_mib_redefine_register(ieee8021PSFPOperIPV_variables_oid,
                               sizeof(ieee8021PSFPOperIPV_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPOperIPV",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{-1 2147483647}");

    // ieee8021PSFPGateClosedDueToInvalidRxEnable
    oid ieee8021PSFPGateClosedDueToInvalidRxEnable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 26 };
    snmp_mib_redefine_register(ieee8021PSFPGateClosedDueToInvalidRxEnable_variables_oid,
                               sizeof(ieee8021PSFPGateClosedDueToInvalidRxEnable_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPGateClosedDueToInvalidRxEnable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPGateClosedDueToInvalidRx
    oid ieee8021PSFPGateClosedDueToInvalidRx_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 27 };
    snmp_mib_redefine_register(ieee8021PSFPGateClosedDueToInvalidRx_variables_oid,
                               sizeof(ieee8021PSFPGateClosedDueToInvalidRx_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPGateClosedDueToInvalidRx",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPGateClosedDueToOctetsExceededEnable
    oid ieee8021PSFPGateClosedDueToOctetsExceededEnable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 28 };
    snmp_mib_redefine_register(ieee8021PSFPGateClosedDueToOctetsExceededEnable_variables_oid,
                               sizeof(ieee8021PSFPGateClosedDueToOctetsExceededEnable_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPGateClosedDueToOctetsExceededEnable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPGateClosedDueToOctetsExceeded
    oid ieee8021PSFPGateClosedDueToOctetsExceeded_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 29 };
    snmp_mib_redefine_register(ieee8021PSFPGateClosedDueToOctetsExceeded_variables_oid,
                               sizeof(ieee8021PSFPGateClosedDueToOctetsExceeded_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPGateClosedDueToOctetsExceeded",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPStreamGateEntryRowStatus
    oid ieee8021PSFPStreamGateEntryRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 2, 1, 1, 30 };
    snmp_mib_redefine_register(ieee8021PSFPStreamGateEntryRowStatus_variables_oid,
                               sizeof(ieee8021PSFPStreamGateEntryRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPStreamGateEntryRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
");

    // ieee8021PSFPFlowMeterCIR
    oid ieee8021PSFPFlowMeterCIR_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 2 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterCIR_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterCIR_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterCIR",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPFlowMeterCBS
    oid ieee8021PSFPFlowMeterCBS_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 3 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterCBS_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterCBS_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterCBS",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPFlowMeterEIR
    oid ieee8021PSFPFlowMeterEIR_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 4 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterEIR_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterEIR_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterEIR",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPFlowMeterEBS
    oid ieee8021PSFPFlowMeterEBS_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 5 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterEBS_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterEBS_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterEBS",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "");

    // ieee8021PSFPFlowMeterCF
    oid ieee8021PSFPFlowMeterCF_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 6 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterCF_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterCF_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterCF",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{0 1}");

    // ieee8021PSFPFlowMeterCM
    oid ieee8021PSFPFlowMeterCM_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 7 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterCM_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterCM_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterCM",
                               "INTEGER",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 colorBlind} \
{2 colorAware} \
");

    // ieee8021PSFPFlowMeterDropOnYellow
    oid ieee8021PSFPFlowMeterDropOnYellow_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 8 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterDropOnYellow_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterDropOnYellow_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterDropOnYellow",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPFlowMeterMarkAllFramesRedEnable
    oid ieee8021PSFPFlowMeterMarkAllFramesRedEnable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 9 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterMarkAllFramesRedEnable_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterMarkAllFramesRedEnable_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterMarkAllFramesRedEnable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPFlowMeterMarkAllFramesRed
    oid ieee8021PSFPFlowMeterMarkAllFramesRed_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 10 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterMarkAllFramesRed_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterMarkAllFramesRed_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterMarkAllFramesRed",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021PSFPFlowMeterEntryRowStatus
    oid ieee8021PSFPFlowMeterEntryRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 3, 1, 1, 11 };
    snmp_mib_redefine_register(ieee8021PSFPFlowMeterEntryRowStatus_variables_oid,
                               sizeof(ieee8021PSFPFlowMeterEntryRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPFlowMeterEntryRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
");

    // ieee8021PSFPMaxStreamFilterInstances
    oid ieee8021PSFPMaxStreamFilterInstances_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 1 };
    snmp_mib_redefine_register(ieee8021PSFPMaxStreamFilterInstances_variables_oid,
                               sizeof(ieee8021PSFPMaxStreamFilterInstances_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPMaxStreamFilterInstances",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPMaxStreamGateInstances
    oid ieee8021PSFPMaxStreamGateInstances_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 2 };
    snmp_mib_redefine_register(ieee8021PSFPMaxStreamGateInstances_variables_oid,
                               sizeof(ieee8021PSFPMaxStreamGateInstances_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPMaxStreamGateInstances",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPMaxFlowMeterInstances
    oid ieee8021PSFPMaxFlowMeterInstances_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 3 };
    snmp_mib_redefine_register(ieee8021PSFPMaxFlowMeterInstances_variables_oid,
                               sizeof(ieee8021PSFPMaxFlowMeterInstances_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPMaxFlowMeterInstances",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021PSFPSupportedListMax
    oid ieee8021PSFPSupportedListMax_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31, 1, 4, 1, 1, 4 };
    snmp_mib_redefine_register(ieee8021PSFPSupportedListMax_variables_oid,
                               sizeof(ieee8021PSFPSupportedListMax_variables_oid) / sizeof(oid),
                               "IEEE8021-PSFP-MIB : ieee8021PSFPSupportedListMax",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");


    /* Register mibContextTable */
    oid ieee8021PSFPMib_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 31 };
    mibContextTable_register(ieee8021PSFPMib_variables_oid,
                             sizeof(ieee8021PSFPMib_variables_oid) / sizeof(oid),
                             "IEEE8021-PSFP-MIB");

    T_D("exit");
}


/******************************************************************************/
//
// Scalar access functions
//
/******************************************************************************/

static BOOL IEEE8021_PSFP_StreamParam_TableEntry_get(ieee8021PSFPStreamParameterTable_entry_t *table_entry)
{
    vtss_appl_qos_psfp_spt_t status;
    mesa_rc                  rc;

    if ((rc = vtss_appl_qos_psfp_spt_get(&status)) != VTSS_RC_OK) {
        T_W("Cannot get the ieee8021PSFP Stream parameter: %s\n", error_txt(rc));
        return FALSE;
    }

    table_entry->ieee8021PSFPMaxStreamFilterInstances = status.max_filter_instances;
    table_entry->ieee8021PSFPMaxStreamGateInstances   = status.max_gate_instances;
    table_entry->ieee8021PSFPMaxFlowMeterInstances    = status.max_flow_meter_instances;
    table_entry->ieee8021PSFPSupportedListMax         = status.gate_control_list_cnt_max;

    return TRUE;
}

static BOOL IEEE8021_PSFP_StreamFilter_TableEntry_get(ieee8021PSFPStreamFilterTable_entry_t *table_entry, int getnext)
{
    mesa_qos_psfp_sfi_id_t id;
    mesa_qos_psfp_sfi_id_t next_id = 0;
    vtss_appl_qos_psfp_sfi_t cfg;
    mesa_qos_psfp_sfi_counters_t counters;
    BOOL rc = FALSE;
    int i = 0;

    id = table_entry->ieee8021PSFPStreamFilterInstance;

    if (table_entry->ieee8021PSFPStreamFilterInstance == 0) {
        // get the first table entry index
        vtss_appl_qos_psfp_sfi_itr(NULL, &id);
    }

    if (getnext) {
        // get the next table entry index
        if (vtss_appl_qos_psfp_sfi_itr(&id, &next_id) != VTSS_RC_OK) {
            T_D("Next-Id is not found");
            return FALSE;
        }
        id = next_id;
    }
    rc = (vtss_appl_qos_psfp_sfi_get(id, &cfg) == VTSS_RC_OK);

    if (vtss_appl_qos_psfp_sfi_get(id, &cfg) != VTSS_RC_OK) {
        T_D("Cannot get the ieee8021PSFP SFI parameter: %s\n", error_txt(rc));
        return FALSE;
    }

    memset(&counters, 0, sizeof(counters));
    VTSS_RC(vtss_appl_qos_psfp_sfi_counters_get(id, &counters));

    table_entry->ieee8021PSFPStreamFilterInstance = id;
    table_entry->ieee8021PSFPStreamHandleSpec = cfg.stream_handle_spec;
    table_entry->ieee8021PSFPPrioritySpec     = cfg.priority_spec;
    table_entry->ieee8021PSFPStreamGateInstanceID = cfg.stream_gate_instance_id;
    /*   "The FilterSpecificationList parameter contains a list of
         filter specifications associated with this stream filter.
         The octet string value represents the contents of the list as
         an ordered list of entries, each encoded as a TLV, as follows.
         The first octet  of each TLV is interpreted as an
         unsigned integer representing a filter specification type:
             0: Maximum SDU Size.
             1: Flow meter instance identifier.
             2-255: Reserved for future gate operations

         The second and third octets of the TLV are the length field,
         interpreted as an unsigned integer, indicating the number of
         octets of the value that follows the length. A length of
         zero indicates that there is no value
         (i.e., the filter specification has no parameters).
         The fourth through (4 + length -1)th octets encode the
         parameters of the filter specification, as defined for each
         filter specification type.
    */
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = PSFP_CONTROL_FILTER_SPECIFICATION_TYPE_SDU; // TLV filter specification type
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = 0;
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = PSFP_SET_SDU_TLV_LENGTH; // TLV length in octets
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = 0; // Max SDU is two octets, MIB defines it as four octets. So assigning zeros to first 2 octets of value field
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = 0;
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = cfg.maximum_sdu_size >> 8;
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = (cfg.maximum_sdu_size) & 0xff;
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = PSFP_CONTROL_FILTER_SPECIFICATION_TYPE_FMI; // TLV filter specification type
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = 0;
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = PSFP_SET_FMI_TLV_LENGTH; // TLV length in octets
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = 0; // FMI ID is two octets, MIB defines it as four octets. So assigning zeros to first 2 octets of value field
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = 0;
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = cfg.flow_meter_id >> 8;
    table_entry->ieee8021PSFPFilterSpecificationList[i++] = (cfg.flow_meter_id) & 0xff;

    table_entry->ieee8021PSFPFilterSpecificationList_len = i;
    vtss_snmp_u64_to_counter64(&table_entry->ieee8021PSFPMatchingFramesCount,   counters.matching_frames_count);
    vtss_snmp_u64_to_counter64(&table_entry->ieee8021PSFPPassingFramesCount,    counters.passing_frames_count);
    vtss_snmp_u64_to_counter64(&table_entry->ieee8021PSFPNotPassingFramesCount, counters.not_passing_frames_count);
    vtss_snmp_u64_to_counter64(&table_entry->ieee8021PSFPPassingSDUCount,       counters.passing_sdu_count);
    vtss_snmp_u64_to_counter64(&table_entry->ieee8021PSFPNotPassingSDUCount,    counters.not_passing_sdu_count);
    vtss_snmp_u64_to_counter64(&table_entry->ieee8021PSFPREDFramesCount,        counters.red_frames_count);

    table_entry->ieee8021PSFPStreamBlockedDueToOversizeFrameEnable = cfg.block_oversize_enable ? IEEE8021_PSFP_BO_ENABLED : IEEE8021_PSFP_BO_DISABLED;
    table_entry->ieee8021PSFPStreamBlockedDueToOversizeFrame = cfg.block_oversize ? IEEE8021_PSFP_BO_DISCARDED : IEEE8021_PSFP_BO_NOT_DISCARDED;
    table_entry->ieee8021PSFPStreamFilterEntryRowStatus = rc == TRUE ? RFC2579_STATE_ACTIVE : RFC2579_STATE_NOT_IN_SERVICE;

    return TRUE;
}

static BOOL IEEE8021_PSFP_StreamGate_TableEntry_get(ieee8021PSFPStreamGateTable_entry_t *table_entry, int getnext)
{
    mesa_qos_psfp_sgi_id_t id;
    mesa_qos_psfp_sgi_id_t next_id;
    mesa_qos_psfp_sgi_t cfg;
    vtss_gcl_index_t gcl_index = 0;
    vtss_gcl_index_t next_gcl_index;
    mesa_qos_psfp_gcl_t gcl;
    mesa_qos_psfp_sgi_status_t status;
    BOOL rc = FALSE;
    int i = 0;
    int j = 0;

    id = table_entry->ieee8021PSFPStreamGateInstance;

    if (table_entry->ieee8021PSFPStreamGateInstance == 0) {
        // get the first table entry index
        vtss_appl_qos_psfp_sgi_itr(NULL, &id);
    }

    if (getnext) {
        // get the next table entry index
        if ( vtss_appl_qos_psfp_sgi_itr(&id, &next_id) != VTSS_RC_OK) {
            T_D("Next-Id is not found");
            return FALSE;
        }
        id = next_id;
    }
    rc = (vtss_appl_qos_psfp_sgi_get(id, &cfg) == VTSS_RC_OK);

    if (vtss_appl_qos_psfp_sgi_get(id, &cfg) != VTSS_RC_OK) {
        T_D("Cannot get the ieee8021PSFP SGI parameter: %s\n", error_txt(rc));
        return FALSE;
    }
    memset(&status, 0, sizeof(status));
    VTSS_RC(vtss_appl_qos_psfp_sgi_status_get(id, &status));

    table_entry->ieee8021PSFPStreamGateInstance       = id;
    table_entry->ieee8021PSFPGateEnabled                  = cfg.gate_enabled ? IEEE8021_STREAM_GATE_ACTIVE : IEEE8021_STREAM_GATE_INACTIVE;
    table_entry->ieee8021PSFPAdminGateStates           = cfg.admin_gate_states ? IEEE8021_ADMIN_GATE_OPEN : IEEE8021_ADMIN_GATE_CLOSED;
    table_entry->ieee8021PSFPAdminControlList_len = 1;
    table_entry->ieee8021PSFPOperGateStates               = status.oper_gate_states ? IEEE8021_OPER_GATE_OPEN : IEEE8021_OPER_GATE_CLOSED;
    table_entry->ieee8021PSFPOperControlList_len = 1;
    table_entry->ieee8021PSFPAdminControlListLength       = cfg.admin_control_list_length;
    table_entry->ieee8021PSFPOperControlListLength        = status.oper_control_list_length;
    /* \The ieee8021PSFPAdminControlList is administrative value of the ControlList parameter for the Port.
           The octet string value represents the contents of the control list as
           an ordered list of entries, each encoded as a TLV, as follows.
           The first octet of each TLV is interpreted as an
           unsigned integer representing a gate operation name:
           0: SetGateStates
           1-255: Reserved for future gate operations
           The second octet of the TLV is the length field,
           interpreted as an unsigned integer, indicating the number of
           octets of the value that follows the length. A length of
           zero indicates that there is no value
           (i.e., the gate operation has no parameters).
        */
    mesa_qos_psfp_gco_t type = MESA_QOS_PSFP_GCO_SET_GATE_AND_IPV; // the TLV type
    if (vtss_appl_qos_psfp_gcl_itr(&id, &next_id, &gcl_index, &next_gcl_index) != VTSS_RC_OK) {
        return FALSE;
    }
    if (vtss_appl_qos_psfp_gcl_admin_get(id, next_gcl_index, &gcl) != VTSS_RC_OK) {
        return FALSE;
    }
    table_entry->ieee8021PSFPAdminControlList[i++] = type; // TLV type Set StreamGateState and InternalPriorityValue
    table_entry->ieee8021PSFPAdminControlList[i++] = PSFP_SET_ADMIN_TLV_LENGTH; // TLV length in octets
    table_entry->ieee8021PSFPAdminControlList[i++] = gcl.gate_state;
    table_entry->ieee8021PSFPAdminControlList[i++] = 0; // IPV is one octet, MIB defines it as four octets. So assigning zeros to first 3 octets of value field
    table_entry->ieee8021PSFPAdminControlList[i++] = 0;
    table_entry->ieee8021PSFPAdminControlList[i++] = 0;
    table_entry->ieee8021PSFPAdminControlList[i++] = gcl.ipv;
    table_entry->ieee8021PSFPAdminControlList[i++] = (gcl.time_interval >> 24) & 0xff;
    table_entry->ieee8021PSFPAdminControlList[i++] = (gcl.time_interval >> 16) & 0xff;
    table_entry->ieee8021PSFPAdminControlList[i++] = (gcl.time_interval >> 8) & 0xff;
    table_entry->ieee8021PSFPAdminControlList[i++] = gcl.time_interval & 0xff;
    table_entry->ieee8021PSFPAdminControlList[i++] = (gcl.octet_max >> 24) & 0xff;
    table_entry->ieee8021PSFPAdminControlList[i++] = (gcl.octet_max >> 16) & 0xff;
    table_entry->ieee8021PSFPAdminControlList[i++] = (gcl.octet_max >> 8) & 0xff;
    table_entry->ieee8021PSFPAdminControlList[i++] = gcl.octet_max & 0xff;

    table_entry->ieee8021PSFPAdminControlList_len = i;

    table_entry->ieee8021PSFPOperControlList[j++] = type; // TLV type Set StreamGateState and InternalPriorityValue
    table_entry->ieee8021PSFPOperControlList[j++] = PSFP_SET_OPER_TLV_LENGTH; // TLV length in octets
    table_entry->ieee8021PSFPOperControlList[j++] = gcl.gate_state;
    table_entry->ieee8021PSFPOperControlList[j++] = 0;
    table_entry->ieee8021PSFPOperControlList[j++] = 0;
    table_entry->ieee8021PSFPOperControlList[j++] = 0;
    table_entry->ieee8021PSFPOperControlList[j++] = gcl.ipv;
    table_entry->ieee8021PSFPOperControlList[j++] = (gcl.time_interval >> 24) & 0xff;
    table_entry->ieee8021PSFPOperControlList[j++] = (gcl.time_interval >> 16) & 0xff;
    table_entry->ieee8021PSFPOperControlList[j++] = (gcl.time_interval >> 8) & 0xff;
    table_entry->ieee8021PSFPOperControlList[j++] = gcl.time_interval & 0xff;
    table_entry->ieee8021PSFPOperControlList[j++] = (gcl.octet_max >> 24) & 0xff;
    table_entry->ieee8021PSFPOperControlList[j++] = (gcl.octet_max >> 16) & 0xff;
    table_entry->ieee8021PSFPOperControlList[j++] = (gcl.octet_max >> 8) & 0xff;
    table_entry->ieee8021PSFPOperControlList[j++] = gcl.octet_max & 0xff;

    table_entry->ieee8021PSFPOperControlList_len = j;
    table_entry->ieee8021PSFPAdminCycleTimeNumerator      = cfg.admin_cycle_time_numerator;
    table_entry->ieee8021PSFPOperCycleTimeNumerator       = status.oper_cycle_time_numerator;
    table_entry->ieee8021PSFPAdminCycleTimeDenominator    = cfg.admin_cycle_time_denominator;
    table_entry->ieee8021PSFPOperCycleTimeDenominator     = status.oper_cycle_time_denominator;
    table_entry->ieee8021PSFPAdminCycleTimeExtension      = cfg.admin_cycle_time_extension;
    table_entry->ieee8021PSFPOperCycleTimeExtension       = status.oper_cycle_time_extension;

    memcpy(table_entry->ieee8021PSFPAdminBaseTime, &cfg.admin_base_time, 10);

    table_entry->ieee8021PSFPAdminBaseTime_len          = 10;

    memcpy(table_entry->ieee8021PSFPOperBaseTime, &status.oper_base_time, 10);

    table_entry->ieee8021PSFPOperBaseTime_len          = 10;

    table_entry->ieee8021PSFPAdminIPV                     = cfg.admin_ipv;
    table_entry->ieee8021PSFPOperIPV                      = status.oper_ipv;
    table_entry->ieee8021PSFPConfigChange                 = cfg.config_change ? 1 : 2;

    memcpy(table_entry->ieee8021PSFPConfigChangeTime, &status.config_change_time, 10);

    table_entry->ieee8021PSFPConfigChangeTime_len = 10;
    table_entry->ieee8021PSFPTickGranularity = status.tick_granularity;

    memcpy(table_entry->ieee8021PSFPCurrentTime, &status.current_time, 10);

    table_entry->ieee8021PSFPCurrentTime_len = 10;

    table_entry->ieee8021PSFPConfigPending                = status.config_pending ?  1 : 2;
    vtss_snmp_u64_to_counter64(&table_entry->ieee8021PSFPConfigChangeError, status.config_change_error);
    table_entry->ieee8021PSFPGateClosedDueToInvalidRxEnable = cfg.block_invalid_rx_enable ? IEEE8021_GATE_CLOSED_INVALID_RX_ENABLED : IEEE8021_GATE_CLOSED_INVALID_RX_DISABLED;
    table_entry->ieee8021PSFPGateClosedDueToInvalidRx       = cfg.block_invalid_rx ? 1 : 2;
    table_entry->ieee8021PSFPGateClosedDueToOctetsExceededEnable = cfg.block_octets_exceeded_enable ? IEEE8021_GATE_CLOSED_OCTET_EXCEED_ENABLED : IEEE8021_GATE_CLOSED_OCTET_EXCEED_DISABLED;
    table_entry->ieee8021PSFPGateClosedDueToOctetsExceeded  = cfg.block_octets_exceeded ? 1 : 2;
    table_entry->ieee8021PSFPStreamGateEntryRowStatus = rc == TRUE ? RFC2579_STATE_ACTIVE : RFC2579_STATE_NOT_IN_SERVICE;
    return TRUE;
}

static BOOL IEEE8021_PSFP_FlowMeter_TableEntry_get(ieee8021PSFPFlowMeterTable_entry_t *table_entry, int getnext)
{
    mesa_qos_psfp_fmi_id_t id;
    mesa_qos_psfp_fmi_id_t next_id;
    mesa_qos_psfp_fmi_t cfg;
    BOOL rc = FALSE;

    id = table_entry->ieee8021PSFPFlowMeterInstance;
    if (table_entry->ieee8021PSFPFlowMeterInstance == 0) {
        // get the first table entry index
        vtss_appl_qos_psfp_fmi_itr(NULL, &id);
    }

    if (getnext) {
        // get the next table entry index
        if ( vtss_appl_qos_psfp_fmi_itr(&id, &next_id) != VTSS_RC_OK) {
            T_D("Next-Id not Found");
            return FALSE;
        }
        id = next_id;
    }
    rc = (vtss_appl_qos_psfp_fmi_get(id, &cfg) == VTSS_RC_OK);

    if (vtss_appl_qos_psfp_fmi_get(id, &cfg) != VTSS_RC_OK) {
        T_D("Cannot get the ieee8021PSFP FMI parameter: %s\n", error_txt(rc));
        return FALSE;
    }


    table_entry->ieee8021PSFPFlowMeterInstance          = id;
    table_entry->ieee8021PSFPFlowMeterCIR              = cfg.cir;
    table_entry->ieee8021PSFPFlowMeterCBS              = cfg.cbs;
    table_entry->ieee8021PSFPFlowMeterEIR              = cfg.eir;
    table_entry->ieee8021PSFPFlowMeterEBS              = cfg.ebs;
    table_entry->ieee8021PSFPFlowMeterCF               = cfg.cf;
    table_entry->ieee8021PSFPFlowMeterCM               = cfg.cm ? IEEE8021_FMI_COLORBLIND : IEEE8021_FMI_COLORAWARE;
    table_entry->ieee8021PSFPFlowMeterDropOnYellow     = cfg.drop_on_yellow ? 1 : 2;
    table_entry->ieee8021PSFPFlowMeterMarkAllFramesRedEnable = cfg.mark_red_enable ?  IEEE8021_FMI_RED_ENABLED : IEEE8021_FMI_RED_DISABLED;
    table_entry->ieee8021PSFPFlowMeterMarkAllFramesRed = cfg.mark_red ? IEEE8021_FMI_FRAMES_DISCARDED : IEEE8021_FMI_FRAMES_NOT_DISCARDED;
    table_entry->ieee8021PSFPFlowMeterEntryRowStatus = rc == TRUE ? RFC2579_STATE_ACTIVE : RFC2579_STATE_NOT_IN_SERVICE;
    return TRUE;
}
/******************************************************************************/
//
// Table entry access functions
//
/******************************************************************************/
/**
  * \brief Get first table entry of ieee8021PSFPStreamFilterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamFilterTableEntry_getfirst(ieee8021PSFPStreamFilterTable_entry_t *table_entry)
{
    T_D("enter");
    ieee8021PSFPStreamFilterTable_entry_t buf;
    memset(&buf, 0, sizeof(buf));

    buf.ieee8021BridgeBaseComponentId = IEEE8021BRIDGECOMPONENTID;

    if (!IEEE8021_PSFP_StreamFilter_TableEntry_get(&buf, 0)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021PSFPStreamFilterTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Get/Getnext table entry of ieee8021PSFPStreamFilterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamFilterTableEntry_get(ieee8021PSFPStreamFilterTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    ieee8021PSFPStreamFilterTable_entry_t buf;
    memset(&buf, 0, sizeof(buf));

    buf.ieee8021BridgeBaseComponentId = table_entry->ieee8021BridgeBaseComponentId;
    buf.ieee8021PSFPStreamFilterInstance = table_entry->ieee8021PSFPStreamFilterInstance;

    if (!IEEE8021_PSFP_StreamFilter_TableEntry_get(&buf, getnext)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021PSFPStreamFilterTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Set table entry of ieee8021PSFPStreamFilterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamFilterTableEntry_set(ieee8021PSFPStreamFilterTable_entry_t *table_entry)
{
    T_D("enter");
    mesa_qos_psfp_sfi_id_t id;
    vtss_appl_qos_psfp_sfi_t cfg;
    mesa_rc rc;
    memset(&cfg, 0, sizeof(cfg));
    if (table_entry == NULL) {
        return -1;
    }
    id = table_entry->ieee8021PSFPStreamFilterInstance;
    if ((rc = vtss_appl_qos_psfp_sfi_get(id, &cfg)) != VTSS_RC_OK) {
        T_D("Cannot get the ieee8021PSFP SFI parameter: %s\n", error_txt(rc));
        return -1;
    }
    cfg.stream_handle_spec = table_entry->ieee8021PSFPStreamHandleSpec;
    cfg.priority_spec = table_entry->ieee8021PSFPPrioritySpec;
    cfg.stream_gate_instance_id = table_entry->ieee8021PSFPStreamGateInstanceID;
    cfg.block_oversize_enable = (table_entry->ieee8021PSFPStreamBlockedDueToOversizeFrameEnable == IEEE8021_PSFP_BO_ENABLED) ? TRUE : FALSE;
    cfg.block_oversize = (table_entry->ieee8021PSFPStreamBlockedDueToOversizeFrame == IEEE8021_PSFP_BO_DISCARDED) ? TRUE : FALSE;

    int index = 0, type = 0, sdu_len = 0, fmi_len = 0;

    if ((table_entry->ieee8021PSFPFilterSpecificationList_len) > FILTER_SPECIFICATION_LIST_MAX) {
        return -1;
    }
    while (index < table_entry->ieee8021PSFPFilterSpecificationList_len) {
        type = table_entry->ieee8021PSFPFilterSpecificationList[index];
        if (type == PSFP_CONTROL_FILTER_SPECIFICATION_TYPE_SDU) {
            if ((table_entry->ieee8021PSFPFilterSpecificationList_len - index) < FILTER_SPECIFICATION_LIST_MIN) {
                return -1;
            }
            sdu_len = table_entry->ieee8021PSFPFilterSpecificationList[index + 2];
            cfg.maximum_sdu_size = ((table_entry->ieee8021PSFPFilterSpecificationList[index + 5] & 0xff)  << 8) | (table_entry->ieee8021PSFPFilterSpecificationList[index + 6] & 0xff);
            index += 7;
        } else if (type == PSFP_CONTROL_FILTER_SPECIFICATION_TYPE_FMI) {
            if ((table_entry->ieee8021PSFPFilterSpecificationList_len - index) < FILTER_SPECIFICATION_LIST_MIN) {
                return -1;
            }
            fmi_len = table_entry->ieee8021PSFPFilterSpecificationList[index + 2];
            cfg.flow_meter_id = ((table_entry->ieee8021PSFPFilterSpecificationList[index + 5] & 0xff) << 8) | (table_entry->ieee8021PSFPFilterSpecificationList[index + 6] & 0xff);
            index += 7;
        } else {
            T_D("Invalid type in PSFP Control Specification list %s\n", error_txt(rc));
            return -1;
        }
    }

    if (vtss_appl_qos_psfp_sfi_add(id, &cfg) != VTSS_RC_OK) {
        T_W("Cannot set the ieee8021PSFP SGI configuration parameters: %s\n", error_txt(rc));
        return -1;
    }

    T_D("exit");
    return 0;
}

/**
  * \brief Get first table entry of ieee8021PSFPStreamGateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamGateTableEntry_getfirst(ieee8021PSFPStreamGateTable_entry_t *table_entry)
{
    ieee8021PSFPStreamGateTable_entry_t buf;

    memset(&buf, 0, sizeof(buf));

    T_D("enter");
    buf.ieee8021BridgeBaseComponentId = IEEE8021BRIDGECOMPONENTID;

    if (!IEEE8021_PSFP_StreamGate_TableEntry_get(&buf, 0)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021PSFPStreamGateTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Get/Getnext table entry of ieee8021PSFPStreamGateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamGateTableEntry_get(ieee8021PSFPStreamGateTable_entry_t *table_entry, int getnext)
{
    ieee8021PSFPStreamGateTable_entry_t buf;

    memset(&buf, 0, sizeof(buf));

    T_D("enter");
    buf.ieee8021BridgeBaseComponentId = table_entry->ieee8021BridgeBaseComponentId;
    buf.ieee8021PSFPStreamGateInstance = table_entry->ieee8021PSFPStreamGateInstance;

    if (!IEEE8021_PSFP_StreamGate_TableEntry_get(&buf, getnext)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021PSFPStreamGateTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Set table entry of ieee8021PSFPStreamGateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamGateTableEntry_set(ieee8021PSFPStreamGateTable_entry_t *table_entry)
{
    mesa_qos_psfp_sgi_id_t id, next_id;
    vtss_gcl_index_t gcl_index;
    mesa_qos_psfp_sgi_t cfg;
    mesa_qos_psfp_gcl_t gcl;
    mesa_rc rc;
    T_D("enter");
    memset(&cfg, 0, sizeof(cfg));
    id = table_entry->ieee8021PSFPStreamGateInstance;

    if ((rc = vtss_appl_qos_psfp_sgi_get(id, &cfg)) != VTSS_RC_OK) {
        T_D("Cannot get the ieee8021PSFP SGI parameter: %s\n", error_txt(rc));
        return -1;
    }
    cfg.gate_enabled                  = (table_entry->ieee8021PSFPGateEnabled == IEEE8021_STREAM_GATE_ACTIVE) ? TRUE : FALSE;
    cfg.admin_gate_states             = (table_entry->ieee8021PSFPAdminGateStates == IEEE8021_ADMIN_GATE_OPEN) ? TRUE : FALSE;
    cfg.admin_control_list_length     = table_entry->ieee8021PSFPAdminControlListLength;

    int index = 0, length_tlv = 0, type_tlv = 0;
    if ((rc = vtss_appl_qos_psfp_gcl_itr(&id, &next_id, NULL, &gcl_index)) != VTSS_RC_OK) {
        T_W("Cannot get the first GCL index number: %s\n", error_txt(rc));
        return FALSE;
    }
    memset(&gcl, 0, sizeof(gcl));

    if ((rc = vtss_appl_qos_psfp_gcl_admin_get(id, gcl_index, &gcl)) != VTSS_RC_OK) {
        T_W("Cannot get the per TLV setting : %s\n", error_txt(rc));
        return FALSE;
    }

    //read each TLV type and length value
    type_tlv = table_entry->ieee8021PSFPAdminControlList[index];
    length_tlv = table_entry->ieee8021PSFPAdminControlList[index + 1];
    gcl.gate_state = table_entry->ieee8021PSFPAdminControlList[index + 2];
    gcl.ipv = table_entry->ieee8021PSFPAdminControlList[index + 6];
    gcl.time_interval = ((table_entry->ieee8021PSFPAdminControlList[index + 7] & 0xff) << 24) | ((table_entry->ieee8021PSFPAdminControlList[index + 8] & 0xff) << 16) | ((table_entry->ieee8021PSFPAdminControlList[index + 9] & 0xff) << 8) | (table_entry->ieee8021PSFPAdminControlList[index + 10] & 0xff);
    gcl.octet_max = ((table_entry->ieee8021PSFPAdminControlList[index + 11] & 0xff) << 24) | ((table_entry->ieee8021PSFPAdminControlList[index + 12] & 0xff) << 16) | ((table_entry->ieee8021PSFPAdminControlList[index + 13] & 0xff) << 8) | (table_entry->ieee8021PSFPAdminControlList[index + 14] & 0xff);

    if ((rc = vtss_appl_qos_psfp_gcl_admin_set(id, gcl_index, &gcl)) != VTSS_RC_OK) {
        T_W("Cannot set the per TLV setting : %s\n", error_txt(rc));
        return FALSE;
    }
    cfg.admin_cycle_time_numerator    = table_entry->ieee8021PSFPAdminCycleTimeNumerator;
    cfg.admin_cycle_time_denominator  = table_entry->ieee8021PSFPAdminCycleTimeDenominator;
    cfg.admin_cycle_time_extension    = table_entry->ieee8021PSFPAdminCycleTimeExtension;

    memcpy(&cfg.admin_base_time, table_entry->ieee8021PSFPAdminBaseTime, 10);
    cfg.admin_ipv                     = table_entry->ieee8021PSFPAdminIPV;
    cfg.config_change                 = table_entry->ieee8021PSFPConfigChange;
    cfg.block_invalid_rx_enable       = (table_entry->ieee8021PSFPGateClosedDueToInvalidRxEnable == IEEE8021_GATE_CLOSED_INVALID_RX_ENABLED) ? TRUE : FALSE;
    cfg.block_invalid_rx              = (table_entry->ieee8021PSFPGateClosedDueToInvalidRx == 1) ? TRUE : FALSE;
    cfg.block_octets_exceeded_enable  = (table_entry->ieee8021PSFPGateClosedDueToOctetsExceededEnable == IEEE8021_GATE_CLOSED_OCTET_EXCEED_ENABLED) ? TRUE : FALSE;
    cfg.block_octets_exceeded         = (table_entry->ieee8021PSFPGateClosedDueToOctetsExceeded == 1) ? TRUE : FALSE;


    if ((rc = vtss_appl_qos_psfp_sgi_add(id, &cfg)) != VTSS_RC_OK) {
        T_W("Cannot set the ieee8021PSFP SGI configuration parameters: %s\n", error_txt(rc));
        return -1;
    }

    T_D("exit");
    return 0;
}

/**
  * \brief Get first table entry of ieee8021PSFPFlowMeterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPFlowMeterTableEntry_getfirst(ieee8021PSFPFlowMeterTable_entry_t *table_entry)
{
    ieee8021PSFPFlowMeterTable_entry_t buf;

    memset(&buf, 0, sizeof(buf));

    T_D("enter");

    buf.ieee8021BridgeBaseComponentId = IEEE8021BRIDGECOMPONENTID;

    if (!IEEE8021_PSFP_FlowMeter_TableEntry_get(&buf, 0)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021PSFPFlowMeterTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Get/Getnext table entry of ieee8021PSFPFlowMeterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPFlowMeterTableEntry_get(ieee8021PSFPFlowMeterTable_entry_t *table_entry, int getnext)
{
    ieee8021PSFPFlowMeterTable_entry_t buf;

    memset(&buf, 0, sizeof(buf));

    T_D("enter");

    buf.ieee8021BridgeBaseComponentId  = table_entry->ieee8021BridgeBaseComponentId;
    buf.ieee8021PSFPFlowMeterInstance = table_entry->ieee8021PSFPFlowMeterInstance;

    if (!IEEE8021_PSFP_FlowMeter_TableEntry_get(&buf, getnext)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021PSFPFlowMeterTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Set table entry of ieee8021PSFPFlowMeterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPFlowMeterTableEntry_set(ieee8021PSFPFlowMeterTable_entry_t *table_entry)
{
    T_D("enter");
    mesa_qos_psfp_fmi_id_t id;
    mesa_qos_psfp_fmi_t cfg;
    mesa_rc rc;

    id = table_entry->ieee8021PSFPFlowMeterInstance;
    if ((rc = vtss_appl_qos_psfp_fmi_get(id, &cfg)) != VTSS_RC_OK) {
        T_D("Cannot get the ieee8021PSFP FMI parameter: %s\n", error_txt(rc));
        return -1;
    }
    cfg.cir                  = table_entry->ieee8021PSFPFlowMeterCIR;
    cfg.cbs                  = table_entry->ieee8021PSFPFlowMeterCBS;
    cfg.eir                  = table_entry->ieee8021PSFPFlowMeterEIR;
    cfg.ebs                  = table_entry->ieee8021PSFPFlowMeterEBS;
    cfg.cf                   = table_entry->ieee8021PSFPFlowMeterCF;
    cfg.cm                   = (table_entry->ieee8021PSFPFlowMeterCM == IEEE8021_FMI_COLORBLIND) ? TRUE : FALSE;
    cfg.drop_on_yellow       = (table_entry->ieee8021PSFPFlowMeterDropOnYellow == 1) ? TRUE : FALSE;
    cfg.mark_red_enable      = (table_entry->ieee8021PSFPFlowMeterMarkAllFramesRedEnable == IEEE8021_FMI_RED_ENABLED) ? TRUE : FALSE;
    cfg.mark_red             = (table_entry->ieee8021PSFPFlowMeterMarkAllFramesRed == IEEE8021_FMI_FRAMES_DISCARDED) ? TRUE : FALSE;

    if (vtss_appl_qos_psfp_fmi_set(id, &cfg) != VTSS_RC_OK) {
        return -1;
    }

    T_D("exit");
    return 0;
}

/**
  * \brief Get first table entry of ieee8021PSFPStreamParameterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamParameterTableEntry_getfirst(ieee8021PSFPStreamParameterTable_entry_t *table_entry)
{
    T_D("enter");

    table_entry->ieee8021BridgeBaseComponentId = IEEE8021BRIDGECOMPONENTID;

    if (!IEEE8021_PSFP_StreamParam_TableEntry_get(table_entry)) {
        return -1;
    }

    T_D("exit");
    return 0;

}

/**
  * \brief Get/Getnext table entry of ieee8021PSFPStreamParameterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamParameterTableEntry_get(ieee8021PSFPStreamParameterTable_entry_t *table_entry, int getnext)
{
    ieee8021PSFPStreamParameterTable_entry_t buf;
    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    if (getnext) {
        if (table_entry->ieee8021BridgeBaseComponentId >= IEEE8021BRIDGECOMPONENT_CNT) {
            return -1;
        }
        buf.ieee8021BridgeBaseComponentId = IEEE8021BRIDGECOMPONENTID;
    } else {
        if (table_entry->ieee8021BridgeBaseComponentId != IEEE8021BRIDGECOMPONENTID) {
            return -1;
        }
        buf.ieee8021BridgeBaseComponentId = table_entry->ieee8021BridgeBaseComponentId;
    }

    if (!IEEE8021_PSFP_StreamParam_TableEntry_get(table_entry)) {
        return -1;
    }

    memcpy(table_entry, &buf, sizeof(ieee8021PSFPStreamParameterTable_entry_t));

    T_D("exit");
    return 0;
}

#endif /* defined(VKTBD) */

