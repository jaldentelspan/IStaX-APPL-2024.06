/*

 Copyright (c) 2006-2017 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

*/

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40

#ifndef _IEEE8021PREEMPTIONMIB_H_
#define _IEEE8021PREEMPTIONMIB_H_


#define IEEE8021PREEMPTIONMIB_STR_LEN_MAX    63  // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021PREEMPTIONMIB_OID_LEN_MAX    16  // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021PREEMPTIONMIB_BITS_LEN_MAX   4   // FIXME: Redefine a sufficient value for saving the memory

/* Syntax of ieee8021FramePreemptionAdminStatus
*  "The value of the framePreemptionAdminStatus parameter for the traffic class. The default value of the framePreemptionAdminStatus parameter is express (1).
*   The value of this object MUST be retained across reinitializations of the management system."
*/
enum {
    IEEE8021_FP_ADMIN_EXPRESS    = 1,
    IEEE8021_FP_ADMIN_PREEMTABLE = 2
};

/* Syntax of ieee8021FramePreemptionActive
*  "The value is active (2) when preemption is operationally active for the Port, and idle (1) otherwise."
*/
enum {
    IEEE8021_PREEMPTION_IDLE   = 1,
    IEEE8021_PREEMPTION_ACTIVE = 2
};

/* Syntax of ieee8021FramePreemptionHoldRequest
*  "The value is hold (1) when the sequence of gate operations for the Port has executed a Set-And-Hold-MAC operation, and release (2) when the sequence of gate operations has
*   executed a Set-And-Release-MAC operation. The value of this object is release (2) on system initialization."
*/
enum {
    IEEE8021_PREEMPTION_HOLD     = 1,
    IEEE8021_PREEMPTION_RELEASE  = 2

};

/******************************************************************************/
//
// Data structure declarations
//
/******************************************************************************/


// The table entry data structure for ieee8021PreemptionParameterTable
typedef struct {
    // Entry keys
    u_long   ieee8021BridgeBaseComponentId;
    u_long   ieee8021BridgeBasePort;
    u_long   ieee8021PreemptionPriority;

    // Entry columns
    long ieee8021FramePreemptionAdminStatus;
} ieee8021PreemptionParameterTable_entry_t;

// The table entry data structure for ieee8021PreemptionConfigTable
typedef struct {
    // Entry keys
    u_long   ieee8021BridgeBaseComponentId;
    u_long   ieee8021BridgeBasePort;

    // Entry columns
    u_long ieee8021FramePreemptionHoldAdvance;
    u_long ieee8021FramePreemptionReleaseAdvance;
    long ieee8021FramePreemptionActive;
    long ieee8021FramePreemptionHoldRequest;
} ieee8021PreemptionConfigTable_entry_t;


/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-Preemption-MIB:ieee8021PreemptionMib.
  **/
void ieee8021PreemptionMib_init(void);


/******************************************************************************/
//
// Scalar access function declarations
//
/******************************************************************************/


/******************************************************************************/
//
// Table entry access function declarations
//
/******************************************************************************/
/**
  * \brief Get first table entry of ieee8021PreemptionParameterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PreemptionParameterTableEntry_getfirst(ieee8021PreemptionParameterTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021PreemptionParameterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PreemptionParameterTableEntry_get(ieee8021PreemptionParameterTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021PreemptionParameterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PreemptionParameterTableEntry_set(ieee8021PreemptionParameterTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021PreemptionConfigTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PreemptionConfigTableEntry_getfirst(ieee8021PreemptionConfigTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021PreemptionConfigTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PreemptionConfigTableEntry_get(ieee8021PreemptionConfigTable_entry_t *table_entry, int getnext);


#endif /* _IEEE8021PREEMPTIONMIB_H_ */

