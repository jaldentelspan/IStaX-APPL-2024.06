/*
 *
 Copyright (c) 2006-2019 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
 *
 */

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40
//       Revise the "FIXME" parts to make it as a completed code.
#include <main.h>
#include <sys/param.h>

#if HAVE_STDLIB_H
#include <stdlib.h>
#endif                          /* HAVE_STDLIB_H */
#if HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif                          /* HAVE_STRING_H */

#include "vtss_os_wrapper_snmp.h"

#include "vtss_snmp_api.h"
#include "sysORTable.h"
#include "ucd_snmp_sysORTable.h"

#include "vtss_avl_tree_api.h"

/* Trace module */
#include <vtss_module_id.h>
#include <vtss_trace_lvl_api.h>
#define VTSS_TRACE_MODULE_ID VTSS_MODULE_ID_SNMP

/* mutex for global protection */
#include "critd_api.h"
static critd_t sysORTable_global_critd_mutex;

#define SYSORTABLE_CRIT_ENTER() critd_enter(&sysORTable_global_critd_mutex, __FILE__, __LINE__)
#define SYSORTABLE_CRIT_EXIT()  critd_exit( &sysORTable_global_critd_mutex, __FILE__, __LINE__)

static BOOL sysORTable_global_init_flag = FALSE;

/* AVL Tree utility library */
static u32 SYSORTABLE_global_tbl_idx = 1, SYSORTABLE_global_last_change = 0;
static i32 SYSORTABLE_entry_compare_func(void *elm1, void *elm2);

// Create two ACL tree to maintain the same database(sysORTable) with different entry key
VTSS_AVL_TREE(SYSORTABLE_global_table, "SNMP_SYSORTABLE", VTSS_MODULE_ID_SNMP, SYSORTABLE_entry_compare_func, SYSORTABLE_MAX_ENTRY_CNT)

#define VTSS_ALLOC_MODULE_ID VTSS_MODULE_ID_SNMP    // VTSS_MALLOC()

/******************************************************************************/
//
// Local functions
//
/******************************************************************************/
static i32 SYSORTABLE_entry_compare_func(void *element1, void *element2)
{
    sysORTable_entry_t *elm1 = (sysORTable_entry_t *)element1;
    sysORTable_entry_t *elm2 = (sysORTable_entry_t *)element2;

    if (elm1->sysORIndex == elm2->sysORIndex) {
        return 0;
    } else {
        return ((elm1->sysORIndex > elm2->sysORIndex) ? 1 : -1);
    }
}


/******************************************************************************/
// Initial function
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the SNMPv2-MIB:sysORTable.
  **/
void
sysORTable_init(void)
{
    T_D("enter");

    if (sysORTable_global_init_flag) {
        return;
    }
    sysORTable_global_init_flag = TRUE;

    ucd_snmp_init_sysORTable();

    /* Create mutex for critical regions */
    critd_init(&sysORTable_global_critd_mutex, "snmp.sysORTable", VTSS_MODULE_ID_SNMP, CRITD_TYPE_MUTEX);

    SYSORTABLE_CRIT_ENTER();

    if (vtss_avl_tree_init(&SYSORTABLE_global_table) != TRUE) {
        T_E("sysORTable - Initialize fail");
    }

    SYSORTABLE_CRIT_EXIT();

    T_D("exit");
}

/******************************************************************************/
//
// SysORTable entry register
//
/******************************************************************************/
/**
  * \brief Register table entry of sysORTable
  *
  * \param oidin  [IN]: The MIB OID which will register to sysORTable
  * \param oidlen [IN]: The OID length of input parameter "oidin"
  * \param descr  [IN]: The desciption of MIB node. Format: <MIB_File_Name> : <Scalar_or_Table_Name>
  **/
void sysORTable_register(oid *oidin, size_t oidlen, const char *descr)
{
    sysORTable_entry_t *entry_p;
    struct timeval      now;
    struct timespec     now_n;
    char                mib_name[SYSORTABLE_STR_LEN_MAX + 1];
    const char          *delimit = ":", *ch_p;

    /* Check input parameters */
    SYSORTABLE_CRIT_ENTER();
    if (SYSORTABLE_global_tbl_idx > SYSORTABLE_MAX_ENTRY_CNT ||
        oidlen > SYSORTABLE_OID_LEN_MAX ||
        strlen(descr) >= SYSORTABLE_STR_LEN_MAX) {
        T_E("sysORTable - Input parameter out of valid range");
        SYSORTABLE_CRIT_EXIT();
        return;
    }

    /* Allocate memory for table entry */
    if ((entry_p = (sysORTable_entry_t *)VTSS_MALLOC(sizeof(*entry_p))) == NULL) {
        T_E("sysORTable - Memory allocated fail");
        SYSORTABLE_CRIT_EXIT();
        return;
    }

    /* Fill table entry elements */
    memset(entry_p, 0, sizeof(*entry_p));
    entry_p->sysORIndex = SYSORTABLE_global_tbl_idx++;
    memcpy(entry_p->sysORID, oidin, sizeof(oid) * oidlen);
    entry_p->sysORID_len = oidlen;
    strcpy(entry_p->sysORDescr, descr);
    entry_p->sysORDescr_len = strlen(descr);

    memset(&now_n, 0, sizeof(now_n));
    (void) clock_gettime(CLOCK_MONOTONIC, &now_n);
    now.tv_sec = now_n.tv_sec;
    now.tv_usec = now_n.tv_nsec / 1000;
    entry_p->sysORUpTime = (now.tv_sec * 100) + (now.tv_usec / 10000);

    strcpy(mib_name, descr);
    char *saveptr; // Local strtok_r() context
    if ((ch_p = strtok_r(mib_name, delimit, &saveptr)) != NULL) {
        strcpy(entry_p->mib_name, ch_p);
    }

    /* Add to AVL tree */
    if (vtss_avl_tree_add(&SYSORTABLE_global_table, entry_p) != TRUE) {
        T_W("Register sysORTable failed");
        VTSS_FREE(entry_p);
        SYSORTABLE_CRIT_EXIT();
        return;
    }
    SYSORTABLE_global_last_change = entry_p->sysORUpTime;
    SYSORTABLE_CRIT_EXIT();
}

/**
  * \brief Get the value of sysUpTime at the time of the most recent change in state or value of any instance of sysORID.
  *
  * \param last_change  [OUT]: The last change time of sysORTable entry
  **/
void sysORTable_LastChange_get(u_long *last_change)
{
    SYSORTABLE_CRIT_ENTER();
    *last_change = SYSORTABLE_global_last_change;
    SYSORTABLE_CRIT_EXIT();
}


/******************************************************************************/
//
// Table entry access functions
//
/******************************************************************************/
/**
  * \brief Get first table entry of sysORTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
sysORTableEntry_getfirst(sysORTable_entry_t *table_entry)
{
    int                 rc = -1;
    sysORTable_entry_t  *entry_p = table_entry;

    T_D("enter");

    SYSORTABLE_CRIT_ENTER();
    if (vtss_avl_tree_get(&SYSORTABLE_global_table, (void **) &entry_p, VTSS_AVL_TREE_GET_FIRST) == TRUE) {
        rc = 0;
        *table_entry = *entry_p;
    }
    SYSORTABLE_CRIT_EXIT();

    T_D("exit");
    return rc;
}

/**
  * \brief Get/Getnext table entry of sysORTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
sysORTableEntry_get(sysORTable_entry_t *table_entry, int getnext)
{
    int                 rc = -1;
    sysORTable_entry_t  *entry_p = table_entry;

    T_D("enter");

    SYSORTABLE_CRIT_ENTER();
    if (vtss_avl_tree_get(&SYSORTABLE_global_table, (void **) &entry_p, getnext ? VTSS_AVL_TREE_GET_NEXT : VTSS_AVL_TREE_GET) == TRUE) {
        rc = 0;
        *table_entry = *entry_p;
    }
    SYSORTABLE_CRIT_EXIT();

    T_D("exit");
    return rc;
}
