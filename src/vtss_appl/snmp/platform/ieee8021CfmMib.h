/*

 Copyright (c) 2006-2019 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

*/

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40

#ifndef _IEEE8021CFMMIB_H_
#define _IEEE8021CFMMIB_H_


#define IEEE8021CFMMIB_STR_LEN_MAX    63  // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021CFMMIB_OID_LEN_MAX    16  // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021CFMMIB_BITS_LEN_MAX   4   // FIXME: Redefine a sufficient value for saving the memory


/******************************************************************************/
//
// Data structure declarations
//
/******************************************************************************/

// The scalar data structure for dot1agCfmDefaultMdDefLevel
typedef struct {
    long dot1agCfmDefaultMdDefLevel;
    long dot1agCfmDefaultMdDefMhfCreation;
    long dot1agCfmDefaultMdDefIdPermission;
} dot1agCfmDefaultMd_scalar_t;

// The scalar data structure for dot1agCfmMdTableNextIndex
typedef struct {
    u_long dot1agCfmMdTableNextIndex;
} dot1agCfmMd_scalar_t;


// The table entry data structure for dot1agCfmStackTable
typedef struct {
    // Entry keys
    long   dot1agCfmStackifIndex;
    long   dot1agCfmStackVlanIdOrNone;
    long   dot1agCfmStackMdLevel;
    long   dot1agCfmStackDirection;

    // Entry columns
    u_long dot1agCfmStackMdIndex;
    u_long dot1agCfmStackMaIndex;
    u_long dot1agCfmStackMepId;
    char dot1agCfmStackMacAddress[6];
    size_t  dot1agCfmStackMacAddress_len;
} dot1agCfmStackTable_entry_t;

// The table entry data structure for dot1agCfmDefaultMdTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmDefaultMdComponentId;
    long   dot1agCfmDefaultMdPrimaryVid;

    // Entry columns
    long dot1agCfmDefaultMdStatus;
    long dot1agCfmDefaultMdLevel;
    long dot1agCfmDefaultMdMhfCreation;
    long dot1agCfmDefaultMdIdPermission;
} dot1agCfmDefaultMdTable_entry_t;

// The table entry data structure for dot1agCfmVlanTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmVlanComponentId;
    long   dot1agCfmVlanVid;

    // Entry columns
    long dot1agCfmVlanPrimaryVid;
    long dot1agCfmVlanRowStatus;
} dot1agCfmVlanTable_entry_t;

// The table entry data structure for dot1agCfmConfigErrorListTable
typedef struct {
    // Entry keys
    long   dot1agCfmConfigErrorListVid;
    long   dot1agCfmConfigErrorListIfIndex;

    // Entry columns
    char dot1agCfmConfigErrorListErrorType[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmConfigErrorListErrorType_len;
} dot1agCfmConfigErrorListTable_entry_t;

// The table entry data structure for dot1agCfmMdTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmMdIndex;

    // Entry columns
    long dot1agCfmMdFormat;
    char dot1agCfmMdName[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMdName_len;
    long dot1agCfmMdMdLevel;
    long dot1agCfmMdMhfCreation;
    long dot1agCfmMdMhfIdPermission;
    u_long dot1agCfmMdMaNextIndex;
    long dot1agCfmMdRowStatus;
} dot1agCfmMdTable_entry_t;

// The table entry data structure for dot1agCfmMaNetTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmMdIndex;
    u_long   dot1agCfmMaIndex;

    // Entry columns
    long dot1agCfmMaNetFormat;
    char dot1agCfmMaNetName[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMaNetName_len;
    long dot1agCfmMaNetCcmInterval;
    long dot1agCfmMaNetRowStatus;
} dot1agCfmMaNetTable_entry_t;

// The table entry data structure for dot1agCfmMaCompTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmMaComponentId;
    u_long   dot1agCfmMdIndex;
    u_long   dot1agCfmMaIndex;

    // Entry columns
    long dot1agCfmMaCompPrimaryVlanId;
    long dot1agCfmMaCompMhfCreation;
    long dot1agCfmMaCompIdPermission;
    u_long dot1agCfmMaCompNumberOfVids;
    long dot1agCfmMaCompRowStatus;
} dot1agCfmMaCompTable_entry_t;

// The table entry data structure for dot1agCfmMaMepListTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmMdIndex;
    u_long   dot1agCfmMaIndex;
    u_long   dot1agCfmMaMepListIdentifier;

    // Entry columns
    long dot1agCfmMaMepListRowStatus;
} dot1agCfmMaMepListTable_entry_t;

// The table entry data structure for dot1agCfmMepTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmMdIndex;
    u_long   dot1agCfmMaIndex;
    u_long   dot1agCfmMepIdentifier;

    // Entry columns
    long dot1agCfmMepIfIndex;
    long dot1agCfmMepDirection;
    u_long dot1agCfmMepPrimaryVid;
    long dot1agCfmMepActive;
    long dot1agCfmMepFngState;
    long dot1agCfmMepCciEnabled;
    u_long dot1agCfmMepCcmLtmPriority;
    char dot1agCfmMepMacAddress[6];
    size_t  dot1agCfmMepMacAddress_len;
    long dot1agCfmMepLowPrDef;
    long dot1agCfmMepFngAlarmTime;
    long dot1agCfmMepFngResetTime;
    long dot1agCfmMepHighestPrDefect;
    char dot1agCfmMepDefects[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMepDefects_len;
    char dot1agCfmMepErrorCcmLastFailure[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMepErrorCcmLastFailure_len;
    char dot1agCfmMepXconCcmLastFailure[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMepXconCcmLastFailure_len;
    u_long dot1agCfmMepCcmSequenceErrors;
    u_long dot1agCfmMepCciSentCcms;
    u_long dot1agCfmMepNextLbmTransId;
    u_long dot1agCfmMepLbrIn;
    u_long dot1agCfmMepLbrInOutOfOrder;
    u_long dot1agCfmMepLbrBadMsdu;
    u_long dot1agCfmMepLtmNextSeqNumber;
    u_long dot1agCfmMepUnexpLtrIn;
    u_long dot1agCfmMepLbrOut;
    long dot1agCfmMepTransmitLbmStatus;
    char dot1agCfmMepTransmitLbmDestMacAddress[6];
    size_t  dot1agCfmMepTransmitLbmDestMacAddress_len;
    u_long dot1agCfmMepTransmitLbmDestMepId;
    long dot1agCfmMepTransmitLbmDestIsMepId;
    long dot1agCfmMepTransmitLbmMessages;
    char dot1agCfmMepTransmitLbmDataTlv[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMepTransmitLbmDataTlv_len;
    long dot1agCfmMepTransmitLbmVlanPriority;
    long dot1agCfmMepTransmitLbmVlanDropEnable;
    long dot1agCfmMepTransmitLbmResultOK;
    u_long dot1agCfmMepTransmitLbmSeqNumber;
    long dot1agCfmMepTransmitLtmStatus;
    char dot1agCfmMepTransmitLtmFlags[IEEE8021CFMMIB_BITS_LEN_MAX];
    size_t  dot1agCfmMepTransmitLtmFlags_len;
    char dot1agCfmMepTransmitLtmTargetMacAddress[6];
    size_t  dot1agCfmMepTransmitLtmTargetMacAddress_len;
    u_long dot1agCfmMepTransmitLtmTargetMepId;
    long dot1agCfmMepTransmitLtmTargetIsMepId;
    u_long dot1agCfmMepTransmitLtmTtl;
    long dot1agCfmMepTransmitLtmResult;
    u_long dot1agCfmMepTransmitLtmSeqNumber;
    char dot1agCfmMepTransmitLtmEgressIdentifier[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMepTransmitLtmEgressIdentifier_len;
    long dot1agCfmMepRowStatus;
} dot1agCfmMepTable_entry_t;

// The table entry data structure for dot1agCfmLtrTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmMdIndex;
    u_long   dot1agCfmMaIndex;
    u_long   dot1agCfmMepIdentifier;
    u_long   dot1agCfmLtrSeqNumber;
    u_long   dot1agCfmLtrReceiveOrder;

    // Entry columns
    u_long dot1agCfmLtrTtl;
    long dot1agCfmLtrForwarded;
    long dot1agCfmLtrTerminalMep;
    char dot1agCfmLtrLastEgressIdentifier[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmLtrLastEgressIdentifier_len;
    char dot1agCfmLtrNextEgressIdentifier[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmLtrNextEgressIdentifier_len;
    long dot1agCfmLtrRelay;
    long dot1agCfmLtrChassisIdSubtype;
    char dot1agCfmLtrChassisId[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmLtrChassisId_len;
    oid dot1agCfmLtrManAddressDomain[IEEE8021CFMMIB_OID_LEN_MAX + 1];
    size_t  dot1agCfmLtrManAddressDomain_len;
    char dot1agCfmLtrManAddress[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmLtrManAddress_len;
    long dot1agCfmLtrIngress;
    char dot1agCfmLtrIngressMac[6];
    size_t  dot1agCfmLtrIngressMac_len;
    long dot1agCfmLtrIngressPortIdSubtype;
    char dot1agCfmLtrIngressPortId[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmLtrIngressPortId_len;
    long dot1agCfmLtrEgress;
    char dot1agCfmLtrEgressMac[6];
    size_t  dot1agCfmLtrEgressMac_len;
    long dot1agCfmLtrEgressPortIdSubtype;
    char dot1agCfmLtrEgressPortId[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmLtrEgressPortId_len;
    char dot1agCfmLtrOrganizationSpecificTlv[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmLtrOrganizationSpecificTlv_len;
} dot1agCfmLtrTable_entry_t;

// The table entry data structure for dot1agCfmMepDbTable
typedef struct {
    // Entry keys
    u_long   dot1agCfmMdIndex;
    u_long   dot1agCfmMaIndex;
    u_long   dot1agCfmMepIdentifier;
    u_long   dot1agCfmMepDbRMepIdentifier;

    // Entry columns
    long dot1agCfmMepDbRMepState;
    u_long dot1agCfmMepDbRMepFailedOkTime;
    char dot1agCfmMepDbMacAddress[6];
    size_t  dot1agCfmMepDbMacAddress_len;
    long dot1agCfmMepDbRdi;
    long dot1agCfmMepDbPortStatusTlv;
    long dot1agCfmMepDbInterfaceStatusTlv;
    long dot1agCfmMepDbChassisIdSubtype;
    char dot1agCfmMepDbChassisId[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMepDbChassisId_len;
    oid dot1agCfmMepDbManAddressDomain[IEEE8021CFMMIB_OID_LEN_MAX + 1];
    size_t  dot1agCfmMepDbManAddressDomain_len;
    char dot1agCfmMepDbManAddress[IEEE8021CFMMIB_STR_LEN_MAX + 1];
    size_t  dot1agCfmMepDbManAddress_len;
} dot1agCfmMepDbTable_entry_t;


/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-CFM-MIB:ieee8021CfmMib.
  **/
void ieee8021CfmMib_init(void);


/******************************************************************************/
//
// Scalar access function declarations
//
/******************************************************************************/
/**
  * \brief Get scalar data of dot1agCfmDefaultMdScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdScalar_get(dot1agCfmDefaultMd_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of dot1agCfmDefaultMdScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdScalar_set(dot1agCfmDefaultMd_scalar_t *scalar_entry);
/**
  * \brief Get scalar data of dot1agCfmMdScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdScalar_get(dot1agCfmMd_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of dot1agCfmMdScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdScalar_set(dot1agCfmMd_scalar_t *scalar_entry);


/******************************************************************************/
//
// Table entry access function declarations
//
/******************************************************************************/
/**
  * \brief Get first table entry of dot1agCfmStackTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmStackTableEntry_getfirst(dot1agCfmStackTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmStackTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmStackTableEntry_get(dot1agCfmStackTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of dot1agCfmDefaultMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdTableEntry_getfirst(dot1agCfmDefaultMdTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmDefaultMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdTableEntry_get(dot1agCfmDefaultMdTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of dot1agCfmDefaultMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdTableEntry_set(dot1agCfmDefaultMdTable_entry_t *table_entry);
/**
  * \brief Get first table entry of dot1agCfmVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmVlanTableEntry_getfirst(dot1agCfmVlanTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmVlanTableEntry_get(dot1agCfmVlanTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of dot1agCfmVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmVlanTableEntry_set(dot1agCfmVlanTable_entry_t *table_entry);
/**
  * \brief Get first table entry of dot1agCfmConfigErrorListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmConfigErrorListTableEntry_getfirst(dot1agCfmConfigErrorListTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmConfigErrorListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmConfigErrorListTableEntry_get(dot1agCfmConfigErrorListTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of dot1agCfmMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdTableEntry_getfirst(dot1agCfmMdTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdTableEntry_get(dot1agCfmMdTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of dot1agCfmMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdTableEntry_set(dot1agCfmMdTable_entry_t *table_entry);
/**
  * \brief Get first table entry of dot1agCfmMaNetTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaNetTableEntry_getfirst(dot1agCfmMaNetTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmMaNetTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaNetTableEntry_get(dot1agCfmMaNetTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of dot1agCfmMaNetTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaNetTableEntry_set(dot1agCfmMaNetTable_entry_t *table_entry);
/**
  * \brief Get first table entry of dot1agCfmMaCompTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaCompTableEntry_getfirst(dot1agCfmMaCompTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmMaCompTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaCompTableEntry_get(dot1agCfmMaCompTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of dot1agCfmMaCompTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaCompTableEntry_set(dot1agCfmMaCompTable_entry_t *table_entry);
/**
  * \brief Get first table entry of dot1agCfmMaMepListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaMepListTableEntry_getfirst(dot1agCfmMaMepListTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmMaMepListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaMepListTableEntry_get(dot1agCfmMaMepListTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of dot1agCfmMaMepListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaMepListTableEntry_set(dot1agCfmMaMepListTable_entry_t *table_entry);
/**
  * \brief Get first table entry of dot1agCfmMepTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepTableEntry_getfirst(dot1agCfmMepTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmMepTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepTableEntry_get(dot1agCfmMepTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of dot1agCfmMepTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepTableEntry_set(dot1agCfmMepTable_entry_t *table_entry);
/**
  * \brief Get first table entry of dot1agCfmLtrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmLtrTableEntry_getfirst(dot1agCfmLtrTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmLtrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmLtrTableEntry_get(dot1agCfmLtrTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of dot1agCfmMepDbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepDbTableEntry_getfirst(dot1agCfmMepDbTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of dot1agCfmMepDbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepDbTableEntry_get(dot1agCfmMepDbTable_entry_t *table_entry, int getnext);


#endif /* _IEEE8021CFMMIB_H_ */

