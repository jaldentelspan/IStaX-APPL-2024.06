/*

 Copyright (c) 2006-2019 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

*/

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40
//       Revise the "FIXME" parts to make it as a completed code.

#include <main.h>
#include <sys/param.h>

#if HAVE_STDLIB_H
#include <stdlib.h>
#endif /* HAVE_STDLIB_H */
#if HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif /* HAVE_STRING_H */

#include "vtss_os_wrapper_snmp.h"
#include "vtss_snmp_api.h"
#include "ieee8021CfmMib.h"
#include "ucd_snmp_ieee8021CfmMib.h"
#include "mibContextTable.h" // mibContextTable_register()
// FIXME: Remove the include file if your implementation don't need to redefine the standard standard MIB objects
#include "snmp_mib_redefine.h"  // snmp_mib_redefine_register()
#include <vtss_module_id.h>
#include <vtss_trace_lvl_api.h>

// Trace module ID
#define VTSS_TRACE_MODULE_ID    VTSS_MODULE_ID_SNMP


/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-CFM-MIB:ieee8021CfmMib.
  **/
void ieee8021CfmMib_init(void)
{
    T_D("enter");
    ucd_snmp_init_ieee8021CfmMib();

#if 0 // FIXME: Remove whole block(#if0 - #endif) if your implementation don't need to redefine the standard MIB objects
    /* Register snmpMibRedefineTable */

    // dot1agCfmDefaultMdDefLevel
    oid dot1agCfmDefaultMdDefLevel_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 1 };
    snmp_mib_redefine_register(dot1agCfmDefaultMdDefLevel_variables_oid,
                               sizeof(dot1agCfmDefaultMdDefLevel_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmDefaultMdDefLevel",
                               "Dot1agCfmMDLevel",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 7}" /* redefine_descr */);

    // dot1agCfmDefaultMdDefMhfCreation
    oid dot1agCfmDefaultMdDefMhfCreation_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 2 };
    snmp_mib_redefine_register(dot1agCfmDefaultMdDefMhfCreation_variables_oid,
                               sizeof(dot1agCfmDefaultMdDefMhfCreation_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmDefaultMdDefMhfCreation",
                               "Dot1agCfmMhfCreation",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 defMHFnone} \
{2 defMHFdefault} \
{3 defMHFexplicit} \
{4 defMHFdefer} \
" /* redefine_descr */);

    // dot1agCfmDefaultMdDefIdPermission
    oid dot1agCfmDefaultMdDefIdPermission_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 3 };
    snmp_mib_redefine_register(dot1agCfmDefaultMdDefIdPermission_variables_oid,
                               sizeof(dot1agCfmDefaultMdDefIdPermission_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmDefaultMdDefIdPermission",
                               "Dot1agCfmIdPermission",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 sendIdNone} \
{2 sendIdChassis} \
{3 sendIdManage} \
{4 sendIdChassisManage} \
{5 sendIdDefer} \
" /* redefine_descr */);

    // dot1agCfmMdTableNextIndex
    oid dot1agCfmMdTableNextIndex_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 1 };
    snmp_mib_redefine_register(dot1agCfmMdTableNextIndex_variables_oid,
                               sizeof(dot1agCfmMdTableNextIndex_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdTableNextIndex",
                               "Dot1afCfmIndexIntegerNextFree",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 -1}" /* redefine_descr */);


    // dot1agCfmStackMdIndex
    oid dot1agCfmStackMdIndex_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 1, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmStackMdIndex_variables_oid,
                               sizeof(dot1agCfmStackMdIndex_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmStackMdIndex",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmStackMaIndex
    oid dot1agCfmStackMaIndex_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 1, 1, 6 };
    snmp_mib_redefine_register(dot1agCfmStackMaIndex_variables_oid,
                               sizeof(dot1agCfmStackMaIndex_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmStackMaIndex",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmStackMepId
    oid dot1agCfmStackMepId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 1, 1, 7 };
    snmp_mib_redefine_register(dot1agCfmStackMepId_variables_oid,
                               sizeof(dot1agCfmStackMepId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmStackMepId",
                               "Dot1agCfmMepIdOrZero",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 0}" /* redefine_descr */);
    "{1 8191}" /* redefine_descr */);

    // dot1agCfmStackMacAddress
    oid dot1agCfmStackMacAddress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 1, 1, 1, 8 };
    snmp_mib_redefine_register(dot1agCfmStackMacAddress_variables_oid,
                               sizeof(dot1agCfmStackMacAddress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmStackMacAddress",
                               "MacAddress",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{6 6}" /* redefine_descr */);

    // dot1agCfmDefaultMdStatus
    oid dot1agCfmDefaultMdStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 4, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmDefaultMdStatus_variables_oid,
                               sizeof(dot1agCfmDefaultMdStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmDefaultMdStatus",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmDefaultMdLevel
    oid dot1agCfmDefaultMdLevel_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 4, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmDefaultMdLevel_variables_oid,
                               sizeof(dot1agCfmDefaultMdLevel_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmDefaultMdLevel",
                               "Dot1agCfmMDLevelOrNone",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{-1 -1}" /* redefine_descr */);
    "{0 7}" /* redefine_descr */);

    // dot1agCfmDefaultMdMhfCreation
    oid dot1agCfmDefaultMdMhfCreation_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 4, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmDefaultMdMhfCreation_variables_oid,
                               sizeof(dot1agCfmDefaultMdMhfCreation_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmDefaultMdMhfCreation",
                               "Dot1agCfmMhfCreation",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 defMHFnone} \
{2 defMHFdefault} \
{3 defMHFexplicit} \
{4 defMHFdefer} \
" /* redefine_descr */);

    // dot1agCfmDefaultMdIdPermission
    oid dot1agCfmDefaultMdIdPermission_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 2, 4, 1, 6 };
    snmp_mib_redefine_register(dot1agCfmDefaultMdIdPermission_variables_oid,
                               sizeof(dot1agCfmDefaultMdIdPermission_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmDefaultMdIdPermission",
                               "Dot1agCfmIdPermission",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 sendIdNone} \
{2 sendIdChassis} \
{3 sendIdManage} \
{4 sendIdChassisManage} \
{5 sendIdDefer} \
" /* redefine_descr */);

    // dot1agCfmVlanPrimaryVid
    oid dot1agCfmVlanPrimaryVid_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 1, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmVlanPrimaryVid_variables_oid,
                               sizeof(dot1agCfmVlanPrimaryVid_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmVlanPrimaryVid",
                               "VlanId",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 4094}" /* redefine_descr */);

    // dot1agCfmVlanRowStatus
    oid dot1agCfmVlanRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 3, 1, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmVlanRowStatus_variables_oid,
                               sizeof(dot1agCfmVlanRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmVlanRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
" /* redefine_descr */);

    // dot1agCfmConfigErrorListErrorType
    oid dot1agCfmConfigErrorListErrorType_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 4, 1, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmConfigErrorListErrorType_variables_oid,
                               sizeof(dot1agCfmConfigErrorListErrorType_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmConfigErrorListErrorType",
                               "Dot1agCfmConfigErrors",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 cfmLeak} \
{1 conflictingVids} \
{2 excessiveLevels} \
{3 overlappedLevels} \
" /* redefine_descr */);

    // dot1agCfmMdFormat
    oid dot1agCfmMdFormat_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 2, 1, 2 };
    snmp_mib_redefine_register(dot1agCfmMdFormat_variables_oid,
                               sizeof(dot1agCfmMdFormat_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdFormat",
                               "Dot1agCfmMaintDomainNameType",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 none} \
{2 dnsLikeName} \
{3 macAddressAndUint} \
{4 charString} \
" /* redefine_descr */);

    // dot1agCfmMdName
    oid dot1agCfmMdName_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 2, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmMdName_variables_oid,
                               sizeof(dot1agCfmMdName_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdName",
                               "Dot1agCfmMaintDomainName",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 43}" /* redefine_descr */);

    // dot1agCfmMdMdLevel
    oid dot1agCfmMdMdLevel_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 2, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmMdMdLevel_variables_oid,
                               sizeof(dot1agCfmMdMdLevel_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdMdLevel",
                               "Dot1agCfmMDLevel",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 7}" /* redefine_descr */);

    // dot1agCfmMdMhfCreation
    oid dot1agCfmMdMhfCreation_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 2, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmMdMhfCreation_variables_oid,
                               sizeof(dot1agCfmMdMhfCreation_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdMhfCreation",
                               "Dot1agCfmMhfCreation",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 defMHFnone} \
{2 defMHFdefault} \
{3 defMHFexplicit} \
{4 defMHFdefer} \
" /* redefine_descr */);

    // dot1agCfmMdMhfIdPermission
    oid dot1agCfmMdMhfIdPermission_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 2, 1, 6 };
    snmp_mib_redefine_register(dot1agCfmMdMhfIdPermission_variables_oid,
                               sizeof(dot1agCfmMdMhfIdPermission_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdMhfIdPermission",
                               "Dot1agCfmIdPermission",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 sendIdNone} \
{2 sendIdChassis} \
{3 sendIdManage} \
{4 sendIdChassisManage} \
{5 sendIdDefer} \
" /* redefine_descr */);

    // dot1agCfmMdMaNextIndex
    oid dot1agCfmMdMaNextIndex_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 2, 1, 7 };
    snmp_mib_redefine_register(dot1agCfmMdMaNextIndex_variables_oid,
                               sizeof(dot1agCfmMdMaNextIndex_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdMaNextIndex",
                               "Dot1afCfmIndexIntegerNextFree",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 -1}" /* redefine_descr */);

    // dot1agCfmMdRowStatus
    oid dot1agCfmMdRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 5, 2, 1, 8 };
    snmp_mib_redefine_register(dot1agCfmMdRowStatus_variables_oid,
                               sizeof(dot1agCfmMdRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMdRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
" /* redefine_descr */);

    // dot1agCfmMaNetFormat
    oid dot1agCfmMaNetFormat_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 1, 1, 2 };
    snmp_mib_redefine_register(dot1agCfmMaNetFormat_variables_oid,
                               sizeof(dot1agCfmMaNetFormat_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaNetFormat",
                               "Dot1agCfmMaintAssocNameType",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 primaryVid} \
{2 charString} \
{3 unsignedInt16} \
{4 rfc2865VpnId} \
" /* redefine_descr */);

    // dot1agCfmMaNetName
    oid dot1agCfmMaNetName_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 1, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmMaNetName_variables_oid,
                               sizeof(dot1agCfmMaNetName_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaNetName",
                               "Dot1agCfmMaintAssocName",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 45}" /* redefine_descr */);

    // dot1agCfmMaNetCcmInterval
    oid dot1agCfmMaNetCcmInterval_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 1, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmMaNetCcmInterval_variables_oid,
                               sizeof(dot1agCfmMaNetCcmInterval_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaNetCcmInterval",
                               "Dot1agCfmCcmInterval",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 intervalInvalid} \
{1 interval300Hz} \
{2 interval10ms} \
{3 interval100ms} \
{4 interval1s} \
{5 interval10s} \
{6 interval1min} \
{7 interval10min} \
" /* redefine_descr */);

    // dot1agCfmMaNetRowStatus
    oid dot1agCfmMaNetRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 1, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmMaNetRowStatus_variables_oid,
                               sizeof(dot1agCfmMaNetRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaNetRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
" /* redefine_descr */);

    // dot1agCfmMaCompPrimaryVlanId
    oid dot1agCfmMaCompPrimaryVlanId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 2, 1, 2 };
    snmp_mib_redefine_register(dot1agCfmMaCompPrimaryVlanId_variables_oid,
                               sizeof(dot1agCfmMaCompPrimaryVlanId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaCompPrimaryVlanId",
                               "VlanIdOrNone",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 0}" /* redefine_descr */);
    "{1 4094}" /* redefine_descr */);

    // dot1agCfmMaCompMhfCreation
    oid dot1agCfmMaCompMhfCreation_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 2, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmMaCompMhfCreation_variables_oid,
                               sizeof(dot1agCfmMaCompMhfCreation_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaCompMhfCreation",
                               "Dot1agCfmMhfCreation",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 defMHFnone} \
{2 defMHFdefault} \
{3 defMHFexplicit} \
{4 defMHFdefer} \
" /* redefine_descr */);

    // dot1agCfmMaCompIdPermission
    oid dot1agCfmMaCompIdPermission_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 2, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmMaCompIdPermission_variables_oid,
                               sizeof(dot1agCfmMaCompIdPermission_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaCompIdPermission",
                               "Dot1agCfmIdPermission",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 sendIdNone} \
{2 sendIdChassis} \
{3 sendIdManage} \
{4 sendIdChassisManage} \
{5 sendIdDefer} \
" /* redefine_descr */);

    // dot1agCfmMaCompNumberOfVids
    oid dot1agCfmMaCompNumberOfVids_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 2, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmMaCompNumberOfVids_variables_oid,
                               sizeof(dot1agCfmMaCompNumberOfVids_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaCompNumberOfVids",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMaCompRowStatus
    oid dot1agCfmMaCompRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 2, 1, 6 };
    snmp_mib_redefine_register(dot1agCfmMaCompRowStatus_variables_oid,
                               sizeof(dot1agCfmMaCompRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaCompRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
" /* redefine_descr */);

    // dot1agCfmMaMepListRowStatus
    oid dot1agCfmMaMepListRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 6, 3, 1, 2 };
    snmp_mib_redefine_register(dot1agCfmMaMepListRowStatus_variables_oid,
                               sizeof(dot1agCfmMaMepListRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMaMepListRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
" /* redefine_descr */);

    // dot1agCfmMepIfIndex
    oid dot1agCfmMepIfIndex_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 2 };
    snmp_mib_redefine_register(dot1agCfmMepIfIndex_variables_oid,
                               sizeof(dot1agCfmMepIfIndex_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepIfIndex",
                               "InterfaceIndexOrZero",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 2147483647}" /* redefine_descr */);

    // dot1agCfmMepDirection
    oid dot1agCfmMepDirection_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmMepDirection_variables_oid,
                               sizeof(dot1agCfmMepDirection_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDirection",
                               "Dot1agCfmMpDirection",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 down} \
{2 up} \
" /* redefine_descr */);

    // dot1agCfmMepPrimaryVid
    oid dot1agCfmMepPrimaryVid_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmMepPrimaryVid_variables_oid,
                               sizeof(dot1agCfmMepPrimaryVid_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepPrimaryVid",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 16777215}" /* redefine_descr */);

    // dot1agCfmMepActive
    oid dot1agCfmMepActive_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmMepActive_variables_oid,
                               sizeof(dot1agCfmMepActive_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepActive",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepFngState
    oid dot1agCfmMepFngState_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 6 };
    snmp_mib_redefine_register(dot1agCfmMepFngState_variables_oid,
                               sizeof(dot1agCfmMepFngState_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepFngState",
                               "Dot1agCfmFngState",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 fngReset} \
{2 fngDefect} \
{3 fngReportDefect} \
{4 fngDefectReported} \
{5 fngDefectClearing} \
" /* redefine_descr */);

    // dot1agCfmMepCciEnabled
    oid dot1agCfmMepCciEnabled_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 7 };
    snmp_mib_redefine_register(dot1agCfmMepCciEnabled_variables_oid,
                               sizeof(dot1agCfmMepCciEnabled_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepCciEnabled",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepCcmLtmPriority
    oid dot1agCfmMepCcmLtmPriority_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 8 };
    snmp_mib_redefine_register(dot1agCfmMepCcmLtmPriority_variables_oid,
                               sizeof(dot1agCfmMepCcmLtmPriority_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepCcmLtmPriority",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 7}" /* redefine_descr */);

    // dot1agCfmMepMacAddress
    oid dot1agCfmMepMacAddress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 9 };
    snmp_mib_redefine_register(dot1agCfmMepMacAddress_variables_oid,
                               sizeof(dot1agCfmMepMacAddress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepMacAddress",
                               "MacAddress",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{6 6}" /* redefine_descr */);

    // dot1agCfmMepLowPrDef
    oid dot1agCfmMepLowPrDef_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 10 };
    snmp_mib_redefine_register(dot1agCfmMepLowPrDef_variables_oid,
                               sizeof(dot1agCfmMepLowPrDef_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepLowPrDef",
                               "Dot1agCfmLowestAlarmPri",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 allDef} \
{2 macRemErrXcon} \
{3 remErrXcon} \
{4 errXcon} \
{5 xcon} \
{6 noXcon} \
" /* redefine_descr */);

    // dot1agCfmMepFngAlarmTime
    oid dot1agCfmMepFngAlarmTime_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 11 };
    snmp_mib_redefine_register(dot1agCfmMepFngAlarmTime_variables_oid,
                               sizeof(dot1agCfmMepFngAlarmTime_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepFngAlarmTime",
                               "TimeInterval",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{250 1000}" /* redefine_descr */);

    // dot1agCfmMepFngResetTime
    oid dot1agCfmMepFngResetTime_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 12 };
    snmp_mib_redefine_register(dot1agCfmMepFngResetTime_variables_oid,
                               sizeof(dot1agCfmMepFngResetTime_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepFngResetTime",
                               "TimeInterval",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{250 1000}" /* redefine_descr */);

    // dot1agCfmMepHighestPrDefect
    oid dot1agCfmMepHighestPrDefect_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 13 };
    snmp_mib_redefine_register(dot1agCfmMepHighestPrDefect_variables_oid,
                               sizeof(dot1agCfmMepHighestPrDefect_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepHighestPrDefect",
                               "Dot1agCfmHighestDefectPri",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 none} \
{1 defRDICCM} \
{2 defMACstatus} \
{3 defRemoteCCM} \
{4 defErrorCCM} \
{5 defXconCCM} \
" /* redefine_descr */);

    // dot1agCfmMepDefects
    oid dot1agCfmMepDefects_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 14 };
    snmp_mib_redefine_register(dot1agCfmMepDefects_variables_oid,
                               sizeof(dot1agCfmMepDefects_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDefects",
                               "Dot1agCfmMepDefects",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 bDefRDICCM} \
{1 bDefMACstatus} \
{2 bDefRemoteCCM} \
{3 bDefErrorCCM} \
{4 bDefXconCCM} \
" /* redefine_descr */);

    // dot1agCfmMepErrorCcmLastFailure
    oid dot1agCfmMepErrorCcmLastFailure_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 15 };
    snmp_mib_redefine_register(dot1agCfmMepErrorCcmLastFailure_variables_oid,
                               sizeof(dot1agCfmMepErrorCcmLastFailure_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepErrorCcmLastFailure",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 1522}" /* redefine_descr */);

    // dot1agCfmMepXconCcmLastFailure
    oid dot1agCfmMepXconCcmLastFailure_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 16 };
    snmp_mib_redefine_register(dot1agCfmMepXconCcmLastFailure_variables_oid,
                               sizeof(dot1agCfmMepXconCcmLastFailure_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepXconCcmLastFailure",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 1522}" /* redefine_descr */);

    // dot1agCfmMepCcmSequenceErrors
    oid dot1agCfmMepCcmSequenceErrors_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 17 };
    snmp_mib_redefine_register(dot1agCfmMepCcmSequenceErrors_variables_oid,
                               sizeof(dot1agCfmMepCcmSequenceErrors_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepCcmSequenceErrors",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepCciSentCcms
    oid dot1agCfmMepCciSentCcms_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 18 };
    snmp_mib_redefine_register(dot1agCfmMepCciSentCcms_variables_oid,
                               sizeof(dot1agCfmMepCciSentCcms_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepCciSentCcms",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepNextLbmTransId
    oid dot1agCfmMepNextLbmTransId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 19 };
    snmp_mib_redefine_register(dot1agCfmMepNextLbmTransId_variables_oid,
                               sizeof(dot1agCfmMepNextLbmTransId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepNextLbmTransId",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepLbrIn
    oid dot1agCfmMepLbrIn_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 20 };
    snmp_mib_redefine_register(dot1agCfmMepLbrIn_variables_oid,
                               sizeof(dot1agCfmMepLbrIn_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepLbrIn",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepLbrInOutOfOrder
    oid dot1agCfmMepLbrInOutOfOrder_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 21 };
    snmp_mib_redefine_register(dot1agCfmMepLbrInOutOfOrder_variables_oid,
                               sizeof(dot1agCfmMepLbrInOutOfOrder_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepLbrInOutOfOrder",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepLbrBadMsdu
    oid dot1agCfmMepLbrBadMsdu_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 22 };
    snmp_mib_redefine_register(dot1agCfmMepLbrBadMsdu_variables_oid,
                               sizeof(dot1agCfmMepLbrBadMsdu_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepLbrBadMsdu",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepLtmNextSeqNumber
    oid dot1agCfmMepLtmNextSeqNumber_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 23 };
    snmp_mib_redefine_register(dot1agCfmMepLtmNextSeqNumber_variables_oid,
                               sizeof(dot1agCfmMepLtmNextSeqNumber_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepLtmNextSeqNumber",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepUnexpLtrIn
    oid dot1agCfmMepUnexpLtrIn_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 24 };
    snmp_mib_redefine_register(dot1agCfmMepUnexpLtrIn_variables_oid,
                               sizeof(dot1agCfmMepUnexpLtrIn_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepUnexpLtrIn",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepLbrOut
    oid dot1agCfmMepLbrOut_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 25 };
    snmp_mib_redefine_register(dot1agCfmMepLbrOut_variables_oid,
                               sizeof(dot1agCfmMepLbrOut_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepLbrOut",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmStatus
    oid dot1agCfmMepTransmitLbmStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 26 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmStatus_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmStatus",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmDestMacAddress
    oid dot1agCfmMepTransmitLbmDestMacAddress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 27 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmDestMacAddress_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmDestMacAddress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmDestMacAddress",
                               "MacAddress",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{6 6}" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmDestMepId
    oid dot1agCfmMepTransmitLbmDestMepId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 28 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmDestMepId_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmDestMepId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmDestMepId",
                               "Dot1agCfmMepIdOrZero",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 0}" /* redefine_descr */);
    "{1 8191}" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmDestIsMepId
    oid dot1agCfmMepTransmitLbmDestIsMepId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 29 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmDestIsMepId_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmDestIsMepId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmDestIsMepId",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmMessages
    oid dot1agCfmMepTransmitLbmMessages_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 30 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmMessages_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmMessages_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmMessages",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 1024}" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmDataTlv
    oid dot1agCfmMepTransmitLbmDataTlv_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 31 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmDataTlv_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmDataTlv_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmDataTlv",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmVlanPriority
    oid dot1agCfmMepTransmitLbmVlanPriority_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 32 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmVlanPriority_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmVlanPriority_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmVlanPriority",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 7}" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmVlanDropEnable
    oid dot1agCfmMepTransmitLbmVlanDropEnable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 33 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmVlanDropEnable_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmVlanDropEnable_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmVlanDropEnable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmResultOK
    oid dot1agCfmMepTransmitLbmResultOK_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 34 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmResultOK_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmResultOK_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmResultOK",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLbmSeqNumber
    oid dot1agCfmMepTransmitLbmSeqNumber_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 35 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLbmSeqNumber_variables_oid,
                               sizeof(dot1agCfmMepTransmitLbmSeqNumber_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLbmSeqNumber",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmStatus
    oid dot1agCfmMepTransmitLtmStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 36 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmStatus_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmStatus",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmFlags
    oid dot1agCfmMepTransmitLtmFlags_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 37 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmFlags_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmFlags_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmFlags",
                               "BITS",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 useFDBonly} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmTargetMacAddress
    oid dot1agCfmMepTransmitLtmTargetMacAddress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 38 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmTargetMacAddress_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmTargetMacAddress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmTargetMacAddress",
                               "MacAddress",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{6 6}" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmTargetMepId
    oid dot1agCfmMepTransmitLtmTargetMepId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 39 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmTargetMepId_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmTargetMepId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmTargetMepId",
                               "Dot1agCfmMepIdOrZero",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 0}" /* redefine_descr */);
    "{1 8191}" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmTargetIsMepId
    oid dot1agCfmMepTransmitLtmTargetIsMepId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 40 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmTargetIsMepId_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmTargetIsMepId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmTargetIsMepId",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmTtl
    oid dot1agCfmMepTransmitLtmTtl_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 41 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmTtl_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmTtl_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmTtl",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 255}" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmResult
    oid dot1agCfmMepTransmitLtmResult_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 42 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmResult_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmResult_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmResult",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmSeqNumber
    oid dot1agCfmMepTransmitLtmSeqNumber_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 43 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmSeqNumber_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmSeqNumber_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmSeqNumber",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepTransmitLtmEgressIdentifier
    oid dot1agCfmMepTransmitLtmEgressIdentifier_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 44 };
    snmp_mib_redefine_register(dot1agCfmMepTransmitLtmEgressIdentifier_variables_oid,
                               sizeof(dot1agCfmMepTransmitLtmEgressIdentifier_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepTransmitLtmEgressIdentifier",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{8 8}" /* redefine_descr */);

    // dot1agCfmMepRowStatus
    oid dot1agCfmMepRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 1, 1, 45 };
    snmp_mib_redefine_register(dot1agCfmMepRowStatus_variables_oid,
                               sizeof(dot1agCfmMepRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
" /* redefine_descr */);

    // dot1agCfmLtrTtl
    oid dot1agCfmLtrTtl_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmLtrTtl_variables_oid,
                               sizeof(dot1agCfmLtrTtl_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrTtl",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 255}" /* redefine_descr */);

    // dot1agCfmLtrForwarded
    oid dot1agCfmLtrForwarded_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmLtrForwarded_variables_oid,
                               sizeof(dot1agCfmLtrForwarded_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrForwarded",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmLtrTerminalMep
    oid dot1agCfmLtrTerminalMep_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmLtrTerminalMep_variables_oid,
                               sizeof(dot1agCfmLtrTerminalMep_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrTerminalMep",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmLtrLastEgressIdentifier
    oid dot1agCfmLtrLastEgressIdentifier_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 6 };
    snmp_mib_redefine_register(dot1agCfmLtrLastEgressIdentifier_variables_oid,
                               sizeof(dot1agCfmLtrLastEgressIdentifier_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrLastEgressIdentifier",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{8 8}" /* redefine_descr */);

    // dot1agCfmLtrNextEgressIdentifier
    oid dot1agCfmLtrNextEgressIdentifier_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 7 };
    snmp_mib_redefine_register(dot1agCfmLtrNextEgressIdentifier_variables_oid,
                               sizeof(dot1agCfmLtrNextEgressIdentifier_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrNextEgressIdentifier",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{8 8}" /* redefine_descr */);

    // dot1agCfmLtrRelay
    oid dot1agCfmLtrRelay_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 8 };
    snmp_mib_redefine_register(dot1agCfmLtrRelay_variables_oid,
                               sizeof(dot1agCfmLtrRelay_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrRelay",
                               "Dot1agCfmRelayActionFieldValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 rlyHit} \
{2 rlyFdb} \
{3 rlyMpdb} \
" /* redefine_descr */);

    // dot1agCfmLtrChassisIdSubtype
    oid dot1agCfmLtrChassisIdSubtype_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 9 };
    snmp_mib_redefine_register(dot1agCfmLtrChassisIdSubtype_variables_oid,
                               sizeof(dot1agCfmLtrChassisIdSubtype_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrChassisIdSubtype",
                               "LldpChassisIdSubtype",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 chassisComponent} \
{2 interfaceAlias} \
{3 portComponent} \
{4 macAddress} \
{5 networkAddress} \
{6 interfaceName} \
{7 local} \
" /* redefine_descr */);

    // dot1agCfmLtrChassisId
    oid dot1agCfmLtrChassisId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 10 };
    snmp_mib_redefine_register(dot1agCfmLtrChassisId_variables_oid,
                               sizeof(dot1agCfmLtrChassisId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrChassisId",
                               "LldpChassisId",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 255}" /* redefine_descr */);

    // dot1agCfmLtrManAddressDomain
    oid dot1agCfmLtrManAddressDomain_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 11 };
    snmp_mib_redefine_register(dot1agCfmLtrManAddressDomain_variables_oid,
                               sizeof(dot1agCfmLtrManAddressDomain_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrManAddressDomain",
                               "TDomain",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmLtrManAddress
    oid dot1agCfmLtrManAddress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 12 };
    snmp_mib_redefine_register(dot1agCfmLtrManAddress_variables_oid,
                               sizeof(dot1agCfmLtrManAddress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrManAddress",
                               "TAddress",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 255}" /* redefine_descr */);

    // dot1agCfmLtrIngress
    oid dot1agCfmLtrIngress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 13 };
    snmp_mib_redefine_register(dot1agCfmLtrIngress_variables_oid,
                               sizeof(dot1agCfmLtrIngress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrIngress",
                               "Dot1agCfmIngressActionFieldValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 ingNoTlv} \
{1 ingOk} \
{2 ingDown} \
{3 ingBlocked} \
{4 ingVid} \
" /* redefine_descr */);

    // dot1agCfmLtrIngressMac
    oid dot1agCfmLtrIngressMac_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 14 };
    snmp_mib_redefine_register(dot1agCfmLtrIngressMac_variables_oid,
                               sizeof(dot1agCfmLtrIngressMac_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrIngressMac",
                               "MacAddress",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{6 6}" /* redefine_descr */);

    // dot1agCfmLtrIngressPortIdSubtype
    oid dot1agCfmLtrIngressPortIdSubtype_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 15 };
    snmp_mib_redefine_register(dot1agCfmLtrIngressPortIdSubtype_variables_oid,
                               sizeof(dot1agCfmLtrIngressPortIdSubtype_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrIngressPortIdSubtype",
                               "LldpPortIdSubtype",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 interfaceAlias} \
{2 portComponent} \
{3 macAddress} \
{4 networkAddress} \
{5 interfaceName} \
{6 agentCircuitId} \
{7 local} \
" /* redefine_descr */);

    // dot1agCfmLtrIngressPortId
    oid dot1agCfmLtrIngressPortId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 16 };
    snmp_mib_redefine_register(dot1agCfmLtrIngressPortId_variables_oid,
                               sizeof(dot1agCfmLtrIngressPortId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrIngressPortId",
                               "LldpPortId",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 255}" /* redefine_descr */);

    // dot1agCfmLtrEgress
    oid dot1agCfmLtrEgress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 17 };
    snmp_mib_redefine_register(dot1agCfmLtrEgress_variables_oid,
                               sizeof(dot1agCfmLtrEgress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrEgress",
                               "Dot1agCfmEgressActionFieldValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 egrNoTlv} \
{1 egrOK} \
{2 egrDown} \
{3 egrBlocked} \
{4 egrVid} \
" /* redefine_descr */);

    // dot1agCfmLtrEgressMac
    oid dot1agCfmLtrEgressMac_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 18 };
    snmp_mib_redefine_register(dot1agCfmLtrEgressMac_variables_oid,
                               sizeof(dot1agCfmLtrEgressMac_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrEgressMac",
                               "MacAddress",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{6 6}" /* redefine_descr */);

    // dot1agCfmLtrEgressPortIdSubtype
    oid dot1agCfmLtrEgressPortIdSubtype_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 19 };
    snmp_mib_redefine_register(dot1agCfmLtrEgressPortIdSubtype_variables_oid,
                               sizeof(dot1agCfmLtrEgressPortIdSubtype_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrEgressPortIdSubtype",
                               "LldpPortIdSubtype",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 interfaceAlias} \
{2 portComponent} \
{3 macAddress} \
{4 networkAddress} \
{5 interfaceName} \
{6 agentCircuitId} \
{7 local} \
" /* redefine_descr */);

    // dot1agCfmLtrEgressPortId
    oid dot1agCfmLtrEgressPortId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 20 };
    snmp_mib_redefine_register(dot1agCfmLtrEgressPortId_variables_oid,
                               sizeof(dot1agCfmLtrEgressPortId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrEgressPortId",
                               "LldpPortId",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 255}" /* redefine_descr */);

    // dot1agCfmLtrOrganizationSpecificTlv
    oid dot1agCfmLtrOrganizationSpecificTlv_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 2, 1, 21 };
    snmp_mib_redefine_register(dot1agCfmLtrOrganizationSpecificTlv_variables_oid,
                               sizeof(dot1agCfmLtrOrganizationSpecificTlv_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmLtrOrganizationSpecificTlv",
                               "OCTETSTR",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{0 0}" /* redefine_descr */);
    "{4 1500}" /* redefine_descr */);

    // dot1agCfmMepDbRMepState
    oid dot1agCfmMepDbRMepState_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 2 };
    snmp_mib_redefine_register(dot1agCfmMepDbRMepState_variables_oid,
                               sizeof(dot1agCfmMepDbRMepState_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbRMepState",
                               "Dot1agCfmRemoteMepState",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 rMepIdle} \
{2 rMepStart} \
{3 rMepFailed} \
{4 rMepOk} \
" /* redefine_descr */);

    // dot1agCfmMepDbRMepFailedOkTime
    oid dot1agCfmMepDbRMepFailedOkTime_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 3 };
    snmp_mib_redefine_register(dot1agCfmMepDbRMepFailedOkTime_variables_oid,
                               sizeof(dot1agCfmMepDbRMepFailedOkTime_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbRMepFailedOkTime",
                               "TimeStamp",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepDbMacAddress
    oid dot1agCfmMepDbMacAddress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 4 };
    snmp_mib_redefine_register(dot1agCfmMepDbMacAddress_variables_oid,
                               sizeof(dot1agCfmMepDbMacAddress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbMacAddress",
                               "MacAddress",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{6 6}" /* redefine_descr */);

    // dot1agCfmMepDbRdi
    oid dot1agCfmMepDbRdi_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 5 };
    snmp_mib_redefine_register(dot1agCfmMepDbRdi_variables_oid,
                               sizeof(dot1agCfmMepDbRdi_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbRdi",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 true} \
{2 false} \
" /* redefine_descr */);

    // dot1agCfmMepDbPortStatusTlv
    oid dot1agCfmMepDbPortStatusTlv_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 6 };
    snmp_mib_redefine_register(dot1agCfmMepDbPortStatusTlv_variables_oid,
                               sizeof(dot1agCfmMepDbPortStatusTlv_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbPortStatusTlv",
                               "Dot1agCfmPortStatus",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 psNoPortStateTLV} \
{1 psBlocked} \
{2 psUp} \
" /* redefine_descr */);

    // dot1agCfmMepDbInterfaceStatusTlv
    oid dot1agCfmMepDbInterfaceStatusTlv_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 7 };
    snmp_mib_redefine_register(dot1agCfmMepDbInterfaceStatusTlv_variables_oid,
                               sizeof(dot1agCfmMepDbInterfaceStatusTlv_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbInterfaceStatusTlv",
                               "Dot1agCfmInterfaceStatus",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{0 isNoInterfaceStatusTLV} \
{1 isUp} \
{2 isDown} \
{3 isTesting} \
{4 isUnknown} \
{5 isDormant} \
{6 isNotPresent} \
{7 isLowerLayerDown} \
" /* redefine_descr */);

    // dot1agCfmMepDbChassisIdSubtype
    oid dot1agCfmMepDbChassisIdSubtype_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 8 };
    snmp_mib_redefine_register(dot1agCfmMepDbChassisIdSubtype_variables_oid,
                               sizeof(dot1agCfmMepDbChassisIdSubtype_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbChassisIdSubtype",
                               "LldpChassisIdSubtype",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "\
{1 chassisComponent} \
{2 interfaceAlias} \
{3 portComponent} \
{4 macAddress} \
{5 networkAddress} \
{6 interfaceName} \
{7 local} \
" /* redefine_descr */);

    // dot1agCfmMepDbChassisId
    oid dot1agCfmMepDbChassisId_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 9 };
    snmp_mib_redefine_register(dot1agCfmMepDbChassisId_variables_oid,
                               sizeof(dot1agCfmMepDbChassisId_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbChassisId",
                               "LldpChassisId",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 255}" /* redefine_descr */);

    // dot1agCfmMepDbManAddressDomain
    oid dot1agCfmMepDbManAddressDomain_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 10 };
    snmp_mib_redefine_register(dot1agCfmMepDbManAddressDomain_variables_oid,
                               sizeof(dot1agCfmMepDbManAddressDomain_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbManAddressDomain",
                               "TDomain",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "" /* redefine_descr */);

    // dot1agCfmMepDbManAddress
    oid dot1agCfmMepDbManAddress_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8, 1, 7, 3, 1, 11 };
    snmp_mib_redefine_register(dot1agCfmMepDbManAddress_variables_oid,
                               sizeof(dot1agCfmMepDbManAddress_variables_oid) / sizeof(oid),
                               "IEEE8021-CFM-MIB : dot1agCfmMepDbManAddress",
                               "TAddress",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY, /* redefine_access_type */
                               FALSE, /* redefine_size, TURE if size is redefined. */
                               "{1 255}" /* redefine_descr */);

#endif

    // FIXME: Update the mib context table
    /* Register mibContextTable.
     * Syntax of description: <MIB_Name> : <Supported_OID_Name> */
    oid ieee8021CfmMib_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 8 };
    mibContextTable_register(ieee8021CfmMib_variables_oid,
                             sizeof(ieee8021CfmMib_variables_oid) / sizeof(oid),
                             "XXX-MIB : ieee8021CfmMib");

    // FIXME: Place any other initialization you need here

    T_D("exit");
}


/******************************************************************************/
//
// Scalar access functions
//
/******************************************************************************/
/**
  * \brief Get scalar data of dot1agCfmDefaultMdScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdScalar_get(dot1agCfmDefaultMd_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set scalar data of dot1agCfmDefaultMdScalar
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdScalar_set(dot1agCfmDefaultMd_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}
/**
  * \brief Get scalar data of dot1agCfmMdScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdScalar_get(dot1agCfmMd_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set scalar data of dot1agCfmMdScalar
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdScalar_set(dot1agCfmMd_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}


/******************************************************************************/
//
// Table entry access functions
//
/******************************************************************************/
/**
  * \brief Get first table entry of dot1agCfmStackTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmStackTableEntry_getfirst(dot1agCfmStackTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmStackTableEntry_get(table_entry, TRUE);

     if (dot1agCfmStackTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmStackTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmStackTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmStackTableEntry_get(dot1agCfmStackTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmDefaultMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdTableEntry_getfirst(dot1agCfmDefaultMdTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmDefaultMdTableEntry_get(table_entry, TRUE);

     if (dot1agCfmDefaultMdTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmDefaultMdTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmDefaultMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdTableEntry_get(dot1agCfmDefaultMdTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of dot1agCfmDefaultMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmDefaultMdTableEntry_set(dot1agCfmDefaultMdTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmVlanTableEntry_getfirst(dot1agCfmVlanTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmVlanTableEntry_get(table_entry, TRUE);

     if (dot1agCfmVlanTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmVlanTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmVlanTableEntry_get(dot1agCfmVlanTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of dot1agCfmVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmVlanTableEntry_set(dot1agCfmVlanTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmConfigErrorListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmConfigErrorListTableEntry_getfirst(dot1agCfmConfigErrorListTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmConfigErrorListTableEntry_get(table_entry, TRUE);

     if (dot1agCfmConfigErrorListTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmConfigErrorListTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmConfigErrorListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmConfigErrorListTableEntry_get(dot1agCfmConfigErrorListTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdTableEntry_getfirst(dot1agCfmMdTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmMdTableEntry_get(table_entry, TRUE);

     if (dot1agCfmMdTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmMdTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdTableEntry_get(dot1agCfmMdTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of dot1agCfmMdTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMdTableEntry_set(dot1agCfmMdTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmMaNetTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaNetTableEntry_getfirst(dot1agCfmMaNetTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmMaNetTableEntry_get(table_entry, TRUE);

     if (dot1agCfmMaNetTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmMaNetTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmMaNetTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaNetTableEntry_get(dot1agCfmMaNetTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of dot1agCfmMaNetTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaNetTableEntry_set(dot1agCfmMaNetTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmMaCompTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaCompTableEntry_getfirst(dot1agCfmMaCompTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmMaCompTableEntry_get(table_entry, TRUE);

     if (dot1agCfmMaCompTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmMaCompTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmMaCompTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaCompTableEntry_get(dot1agCfmMaCompTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of dot1agCfmMaCompTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaCompTableEntry_set(dot1agCfmMaCompTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmMaMepListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaMepListTableEntry_getfirst(dot1agCfmMaMepListTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmMaMepListTableEntry_get(table_entry, TRUE);

     if (dot1agCfmMaMepListTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmMaMepListTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmMaMepListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaMepListTableEntry_get(dot1agCfmMaMepListTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of dot1agCfmMaMepListTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMaMepListTableEntry_set(dot1agCfmMaMepListTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmMepTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepTableEntry_getfirst(dot1agCfmMepTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmMepTableEntry_get(table_entry, TRUE);

     if (dot1agCfmMepTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmMepTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmMepTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepTableEntry_get(dot1agCfmMepTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of dot1agCfmMepTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepTableEntry_set(dot1agCfmMepTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmLtrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmLtrTableEntry_getfirst(dot1agCfmLtrTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmLtrTableEntry_get(table_entry, TRUE);

     if (dot1agCfmLtrTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmLtrTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmLtrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmLtrTableEntry_get(dot1agCfmLtrTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get first table entry of dot1agCfmMepDbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepDbTableEntry_getfirst(dot1agCfmMepDbTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    /* If value 0 is valid for the table key
    // Probe if this entry if existing
    // Otherwise, the following code can be skipped and
    // we can only simply return dot1agCfmMepDbTableEntry_get(table_entry, TRUE);

     if (dot1agCfmMepDbTableEntry_get(table_entry, FALSE) == 0) {
         // Found the first entry
        return 0;
    }

    */

    T_D("exit");
    return dot1agCfmMepDbTableEntry_get(table_entry, TRUE);
}

/**
  * \brief Get/Getnext table entry of dot1agCfmMepDbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int dot1agCfmMepDbTableEntry_get(dot1agCfmMepDbTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}


