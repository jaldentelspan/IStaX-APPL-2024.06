/*

 Copyright (c) 2006-2021 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

*/

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40

#ifndef _RFC4750_OSPF_H_
#define _RFC4750_OSPF_H_


#define OSPF_STR_LEN_MAX    63  // FIXME: Redefine a sufficient value for saving the memory
#define OSPF_OID_LEN_MAX    16  // FIXME: Redefine a sufficient value for saving the memory
#define OSPF_BITS_LEN_MAX   4   // FIXME: Redefine a sufficient value for saving the memory


/******************************************************************************/
//
// Data structure declarations
//
/******************************************************************************/

// The scalar data structure for ospfRouterId
typedef struct {
    in_addr_t ospfRouterId;
    int32_t ospfAdminStat;
    int32_t ospfVersionNumber;
    int32_t ospfAreaBdrRtrStatus;
    int32_t ospfASBdrRtrStatus;
    uint32_t ospfExternLsaCount;
    int32_t ospfExternLsaCksumSum;
    int32_t ospfTOSSupport;
    uint32_t ospfOriginateNewLsas;
    uint32_t ospfRxNewLsas;
    int32_t ospfExtLsdbLimit;
    int32_t ospfMulticastExtensions;
    int32_t ospfExitOverflowInterval;
    int32_t ospfDemandExtensions;
    int32_t ospfRFC1583Compatibility;
    int32_t ospfOpaqueLsaSupport;
    uint32_t ospfReferenceBandwidth;
    int32_t ospfRestartSupport;
    int32_t ospfRestartInterval;
    int32_t ospfRestartStrictLsaChecking;
    int32_t ospfRestartStatus;
    uint32_t ospfRestartAge;
    int32_t ospfRestartExitReason;
    uint32_t ospfAsLsaCount;
    uint32_t ospfAsLsaCksumSum;
    int32_t ospfStubRouterSupport;
    int32_t ospfStubRouterAdvertisement;
    uint32_t ospfDiscontinuityTime;
} ospfGeneralGroup_scalar_t;


// The table entry data structure for ospfAreaTable
typedef struct {
    // Entry keys
    in_addr_t   ospfAreaId;

    // Entry columns
    int32_t ospfAuthType;
    int32_t ospfImportAsExtern;
    uint32_t ospfSpfRuns;
    uint32_t ospfAreaBdrRtrCount;
    uint32_t ospfAsBdrRtrCount;
    uint32_t ospfAreaLsaCount;
    int32_t ospfAreaLsaCksumSum;
    int32_t ospfAreaSummary;
    int32_t ospfAreaStatus;
    int32_t ospfAreaNssaTranslatorRole;
    int32_t ospfAreaNssaTranslatorState;
    int32_t ospfAreaNssaTranslatorStabilityInterval;
    uint32_t ospfAreaNssaTranslatorEvents;
} ospfAreaTable_entry_t;

// The table entry data structure for ospfStubAreaTable
typedef struct {
    // Entry keys
    in_addr_t   ospfStubAreaId;
    int32_t   ospfStubTOS;

    // Entry columns
    int32_t ospfStubMetric;
    int32_t ospfStubStatus;
    int32_t ospfStubMetricType;
} ospfStubAreaTable_entry_t;

// The table entry data structure for ospfLsdbTable
typedef struct {
    // Entry keys
    in_addr_t   ospfLsdbAreaId;
    int32_t   ospfLsdbType;
    in_addr_t   ospfLsdbLsid;
    in_addr_t   ospfLsdbRouterId;

    // Entry columns
    int32_t ospfLsdbSequence;
    int32_t ospfLsdbAge;
    int32_t ospfLsdbChecksum;
    char ospfLsdbAdvertisement[OSPF_STR_LEN_MAX + 1];
    size_t  ospfLsdbAdvertisement_len;
} ospfLsdbTable_entry_t;

// The table entry data structure for ospfAreaRangeTable
typedef struct {
    // Entry keys
    in_addr_t   ospfAreaRangeAreaId;
    in_addr_t   ospfAreaRangeNet;

    // Entry columns
    in_addr_t ospfAreaRangeMask;
    int32_t ospfAreaRangeStatus;
    int32_t ospfAreaRangeEffect;
} ospfAreaRangeTable_entry_t;

// The table entry data structure for ospfHostTable
typedef struct {
    // Entry keys
    in_addr_t   ospfHostIpAddress;
    int32_t   ospfHostTOS;

    // Entry columns
    int32_t ospfHostMetric;
    int32_t ospfHostStatus;
    in_addr_t ospfHostAreaID;
    in_addr_t ospfHostCfgAreaID;
} ospfHostTable_entry_t;

// The table entry data structure for ospfIfTable
typedef struct {
    // Entry keys
    in_addr_t   ospfIfIpAddress;
    int32_t   ospfAddressLessIf;

    // Entry columns
    in_addr_t ospfIfAreaId;
    int32_t ospfIfType;
    int32_t ospfIfAdminStat;
    int32_t ospfIfRtrPriority;
    int32_t ospfIfTransitDelay;
    int32_t ospfIfRetransInterval;
    int32_t ospfIfHelloInterval;
    int32_t ospfIfRtrDeadInterval;
    int32_t ospfIfPollInterval;
    int32_t ospfIfState;
    in_addr_t ospfIfDesignatedRouter;
    in_addr_t ospfIfBackupDesignatedRouter;
    uint32_t ospfIfEvents;
    char ospfIfAuthKey[OSPF_STR_LEN_MAX + 1];
    size_t  ospfIfAuthKey_len;
    int32_t ospfIfStatus;
    int32_t ospfIfMulticastForwarding;
    int32_t ospfIfDemand;
    int32_t ospfIfAuthType;
    uint32_t ospfIfLsaCount;
    uint32_t ospfIfLsaCksumSum;
    in_addr_t ospfIfDesignatedRouterId;
    in_addr_t ospfIfBackupDesignatedRouterId;
} ospfIfTable_entry_t;

// The table entry data structure for ospfIfMetricTable
typedef struct {
    // Entry keys
    in_addr_t   ospfIfMetricIpAddress;
    int32_t   ospfIfMetricAddressLessIf;
    int32_t   ospfIfMetricTOS;

    // Entry columns
    int32_t ospfIfMetricValue;
    int32_t ospfIfMetricStatus;
} ospfIfMetricTable_entry_t;

// The table entry data structure for ospfVirtIfTable
typedef struct {
    // Entry keys
    in_addr_t   ospfVirtIfAreaId;
    in_addr_t   ospfVirtIfNeighbor;

    // Entry columns
    int32_t ospfVirtIfTransitDelay;
    int32_t ospfVirtIfRetransInterval;
    int32_t ospfVirtIfHelloInterval;
    int32_t ospfVirtIfRtrDeadInterval;
    int32_t ospfVirtIfState;
    uint32_t ospfVirtIfEvents;
    char ospfVirtIfAuthKey[OSPF_STR_LEN_MAX + 1];
    size_t  ospfVirtIfAuthKey_len;
    int32_t ospfVirtIfStatus;
    int32_t ospfVirtIfAuthType;
    uint32_t ospfVirtIfLsaCount;
    uint32_t ospfVirtIfLsaCksumSum;
} ospfVirtIfTable_entry_t;

// The table entry data structure for ospfNbrTable
typedef struct {
    // Entry keys
    in_addr_t   ospfNbrIpAddr;
    int32_t   ospfNbrAddressLessIndex;

    // Entry columns
    in_addr_t ospfNbrRtrId;
    int32_t ospfNbrOptions;
    int32_t ospfNbrPriority;
    int32_t ospfNbrState;
    uint32_t ospfNbrEvents;
    uint32_t ospfNbrLsRetransQLen;
    int32_t ospfNbmaNbrStatus;
    int32_t ospfNbmaNbrPermanence;
    int32_t ospfNbrHelloSuppressed;
    int32_t ospfNbrRestartHelperStatus;
    uint32_t ospfNbrRestartHelperAge;
    int32_t ospfNbrRestartHelperExitReason;
} ospfNbrTable_entry_t;

// The table entry data structure for ospfVirtNbrTable
typedef struct {
    // Entry keys
    in_addr_t   ospfVirtNbrArea;
    in_addr_t   ospfVirtNbrRtrId;

    // Entry columns
    in_addr_t ospfVirtNbrIpAddr;
    int32_t ospfVirtNbrOptions;
    int32_t ospfVirtNbrState;
    uint32_t ospfVirtNbrEvents;
    uint32_t ospfVirtNbrLsRetransQLen;
    int32_t ospfVirtNbrHelloSuppressed;
    int32_t ospfVirtNbrRestartHelperStatus;
    uint32_t ospfVirtNbrRestartHelperAge;
    int32_t ospfVirtNbrRestartHelperExitReason;
} ospfVirtNbrTable_entry_t;

// The table entry data structure for ospfExtLsdbTable
typedef struct {
    // Entry keys
    int32_t   ospfExtLsdbType;
    in_addr_t   ospfExtLsdbLsid;
    in_addr_t   ospfExtLsdbRouterId;

    // Entry columns
    int32_t ospfExtLsdbSequence;
    int32_t ospfExtLsdbAge;
    int32_t ospfExtLsdbChecksum;
    char ospfExtLsdbAdvertisement[OSPF_STR_LEN_MAX + 1];
    size_t  ospfExtLsdbAdvertisement_len;
} ospfExtLsdbTable_entry_t;

// The table entry data structure for ospfAreaAggregateTable
typedef struct {
    // Entry keys
    in_addr_t   ospfAreaAggregateAreaID;
    int32_t   ospfAreaAggregateLsdbType;
    in_addr_t   ospfAreaAggregateNet;
    in_addr_t   ospfAreaAggregateMask;

    // Entry columns
    int32_t ospfAreaAggregateStatus;
    int32_t ospfAreaAggregateEffect;
    uint32_t ospfAreaAggregateExtRouteTag;
} ospfAreaAggregateTable_entry_t;

// The table entry data structure for ospfLocalLsdbTable
typedef struct {
    // Entry keys
    in_addr_t   ospfLocalLsdbIpAddress;
    int32_t   ospfLocalLsdbAddressLessIf;
    int32_t   ospfLocalLsdbType;
    in_addr_t   ospfLocalLsdbLsid;
    in_addr_t   ospfLocalLsdbRouterId;

    // Entry columns
    int32_t ospfLocalLsdbSequence;
    int32_t ospfLocalLsdbAge;
    int32_t ospfLocalLsdbChecksum;
    char ospfLocalLsdbAdvertisement[OSPF_STR_LEN_MAX + 1];
    size_t  ospfLocalLsdbAdvertisement_len;
} ospfLocalLsdbTable_entry_t;

// The table entry data structure for ospfVirtLocalLsdbTable
typedef struct {
    // Entry keys
    in_addr_t   ospfVirtLocalLsdbTransitArea;
    in_addr_t   ospfVirtLocalLsdbNeighbor;
    int32_t   ospfVirtLocalLsdbType;
    in_addr_t   ospfVirtLocalLsdbLsid;
    in_addr_t   ospfVirtLocalLsdbRouterId;

    // Entry columns
    int32_t ospfVirtLocalLsdbSequence;
    int32_t ospfVirtLocalLsdbAge;
    int32_t ospfVirtLocalLsdbChecksum;
    char ospfVirtLocalLsdbAdvertisement[OSPF_STR_LEN_MAX + 1];
    size_t  ospfVirtLocalLsdbAdvertisement_len;
} ospfVirtLocalLsdbTable_entry_t;

// The table entry data structure for ospfAsLsdbTable
typedef struct {
    // Entry keys
    int32_t   ospfAsLsdbType;
    in_addr_t   ospfAsLsdbLsid;
    in_addr_t   ospfAsLsdbRouterId;

    // Entry columns
    int32_t ospfAsLsdbSequence;
    int32_t ospfAsLsdbAge;
    int32_t ospfAsLsdbChecksum;
    char ospfAsLsdbAdvertisement[OSPF_STR_LEN_MAX + 1];
    size_t  ospfAsLsdbAdvertisement_len;
} ospfAsLsdbTable_entry_t;

// The table entry data structure for ospfAreaLsaCountTable
typedef struct {
    // Entry keys
    in_addr_t   ospfAreaLsaCountAreaId;
    int32_t   ospfAreaLsaCountLsaType;

    // Entry columns
    uint32_t ospfAreaLsaCountNumber;
} ospfAreaLsaCountTable_entry_t;


/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the OSPF-MIB:ospf.
  **/
void rfc4750_ospf_init(void);


/******************************************************************************/
//
// Scalar access function declarations
//
/******************************************************************************/
/**
  * \brief Get scalar data of ospfGeneralGroupScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfGeneralGroupScalar_get(ospfGeneralGroup_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of ospfGeneralGroupScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfGeneralGroupScalar_set(ospfGeneralGroup_scalar_t *scalar_entry);


/******************************************************************************/
//
// Table entry access function declarations
//
/******************************************************************************/
/**
  * \brief Get first table entry of ospfAreaTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaTableEntry_getfirst(ospfAreaTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfAreaTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaTableEntry_get(ospfAreaTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfAreaTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaTableEntry_set(ospfAreaTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfStubAreaTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfStubAreaTableEntry_getfirst(ospfStubAreaTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfStubAreaTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfStubAreaTableEntry_get(ospfStubAreaTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfStubAreaTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfStubAreaTableEntry_set(ospfStubAreaTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfLsdbTableEntry_getfirst(ospfLsdbTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfLsdbTableEntry_get(ospfLsdbTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ospfAreaRangeTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaRangeTableEntry_getfirst(ospfAreaRangeTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfAreaRangeTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaRangeTableEntry_get(ospfAreaRangeTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfAreaRangeTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaRangeTableEntry_set(ospfAreaRangeTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfHostTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfHostTableEntry_getfirst(ospfHostTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfHostTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfHostTableEntry_get(ospfHostTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfHostTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfHostTableEntry_set(ospfHostTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfIfTableEntry_getfirst(ospfIfTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfIfTableEntry_get(ospfIfTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfIfTableEntry_set(ospfIfTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfIfMetricTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfIfMetricTableEntry_getfirst(ospfIfMetricTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfIfMetricTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfIfMetricTableEntry_get(ospfIfMetricTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfIfMetricTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfIfMetricTableEntry_set(ospfIfMetricTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfVirtIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfVirtIfTableEntry_getfirst(ospfVirtIfTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfVirtIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfVirtIfTableEntry_get(ospfVirtIfTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfVirtIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfVirtIfTableEntry_set(ospfVirtIfTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfNbrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfNbrTableEntry_getfirst(ospfNbrTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfNbrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfNbrTableEntry_get(ospfNbrTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfNbrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfNbrTableEntry_set(ospfNbrTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfVirtNbrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfVirtNbrTableEntry_getfirst(ospfVirtNbrTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfVirtNbrTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfVirtNbrTableEntry_get(ospfVirtNbrTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ospfExtLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfExtLsdbTableEntry_getfirst(ospfExtLsdbTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfExtLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfExtLsdbTableEntry_get(ospfExtLsdbTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ospfAreaAggregateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaAggregateTableEntry_getfirst(ospfAreaAggregateTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfAreaAggregateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaAggregateTableEntry_get(ospfAreaAggregateTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ospfAreaAggregateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaAggregateTableEntry_set(ospfAreaAggregateTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ospfLocalLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfLocalLsdbTableEntry_getfirst(ospfLocalLsdbTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfLocalLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfLocalLsdbTableEntry_get(ospfLocalLsdbTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ospfVirtLocalLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfVirtLocalLsdbTableEntry_getfirst(ospfVirtLocalLsdbTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfVirtLocalLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfVirtLocalLsdbTableEntry_get(ospfVirtLocalLsdbTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ospfAsLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAsLsdbTableEntry_getfirst(ospfAsLsdbTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfAsLsdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAsLsdbTableEntry_get(ospfAsLsdbTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ospfAreaLsaCountTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaLsaCountTableEntry_getfirst(ospfAreaLsaCountTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ospfAreaLsaCountTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ospfAreaLsaCountTableEntry_get(ospfAreaLsaCountTable_entry_t *table_entry, int getnext);


#endif /* _RFC4750_OSPF_H_ */

