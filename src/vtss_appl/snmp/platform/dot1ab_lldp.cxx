/*
 Copyright (c) 2006-2023 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
*/

/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.old-api.conf
 */

/* We *have* serialized access */
/*lint -esym(459, last_notification_change_time) */
/*lint -esym(459,tx_enable_list) */
/*lint -esym(459,VAR) */
/*lint -esym(459,table_info) */
/*lint -esym(459,VAR_STR) */
/*lint -esym(459,local_system_name) */
/*lint -esym(459,buf) */
/*lint -esym(459,old_buf) */

#include <main.h>
#include "lldp_trace.h"

#include "vtss_os_wrapper_snmp.h"
#if HAVE_STDLIB_H
#include <stdlib.h>
#endif                          /* HAVE_STDLIB_H */
#if HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif                          /* HAVE_STRING_H */

#include "dot1ab_lldp.h"
#include "dot1ab_lldp_api.h"

#include "vtss_snmp_api.h"
#include "mibContextTable.h"  //mibContextTable_register


#include "msg_api.h"

#include "lldp_api.h"
#include "lldp_remote.h"
#include "lldp_tlv.h"
#include "lldp_os.h"
#include "vtss/appl/lldp.h"
#include "lldp_print.h"
#include "misc_api.h"
#include "port_api.h" /* For port_count_max() */

#include "ifIndex_api.h"
#include "dot1Port_api.h"
#include "rfc1213_mib2.h"
#include "iana_addr_family_nums.h"


#define VTSS_TRACE_MODULE_ID VTSS_MODULE_ID_LLDP

#define SNMP_ASN_OCTET_STR_MAX_LEN  256  /* FIXME : Re-define it if needed */

/* #define REMOVE_STATS_IN_TRAP_BINDING_VAR */

/*
* +++ Start (Internal implementation declarations)
*/
#if DOT1AB_SUPPORTED_LLDPOBJECTS
/* lldpobjects ----------------------------------------------------------*/
//???
#endif /* DOT1AB_SUPPORTED_LLDPOBJECTS */
/*
* --- End (Internal implementation declarations)
*/

#if DOT1AB_SUPPORTED_LLDPOBJECTS
/* lldpobjects ----------------------------------------------------------*/
/*
* lldpObjects_variables_oid:
*   this is the top level oid that we want to register under.  This
*   is essentially a prefix, with the suffix appearing in the
*   variable below.
*/

oid             lldpObjects_variables_oid[] = { 1, 0, 8802, 1, 1, 2, 1 };

/*
* variable4 lldpObjects_variables:
*   this variable defines function callbacks and type return information
*   for the lldpObjects mib section
*/


struct variable4 lldpObjects_variables[] = {
    /*
    * magic number        , variable type , ro/rw , callback fn  , L, oidsuffix
    */
#define LLDPMESSAGETXINTERVAL                   1
    {LLDPMESSAGETXINTERVAL, ASN_INTEGER, RWRITE, var_lldpConfiguration, 2, {1, 1}},
#define LLDPMESSAGETXHOLDMULTIPLIER             2
    {LLDPMESSAGETXHOLDMULTIPLIER, ASN_INTEGER, RWRITE, var_lldpConfiguration, 2, {1, 2}},
#define LLDPREINITDELAY                         3
    {LLDPREINITDELAY, ASN_INTEGER, RWRITE, var_lldpConfiguration, 2, {1, 3}},
#define LLDPTXDELAY                             4
    {LLDPTXDELAY, ASN_INTEGER, RWRITE, var_lldpConfiguration, 2, {1, 4}},
#define LLDPNOTIFICATIONINTERVAL                5
    {LLDPNOTIFICATIONINTERVAL, ASN_INTEGER, RWRITE, var_lldpConfiguration, 2, {1, 5}},
#define LLDPPORTCONFIGPORTNUM                   6
    {LLDPPORTCONFIGPORTNUM, ASN_INTEGER, RONLY, var_lldpPortConfigTable, 4, {1, 6, 1, 1}},
#define LLDPPORTCONFIGADMINSTATUS               7
    {LLDPPORTCONFIGADMINSTATUS, ASN_INTEGER, RWRITE, var_lldpPortConfigTable, 4, {1, 6, 1, 2}},
#define LLDPPORTCONFIGNOTIFICATIONENABLE        8
    {LLDPPORTCONFIGNOTIFICATIONENABLE, ASN_INTEGER, RWRITE, var_lldpPortConfigTable, 4, {1, 6, 1, 3}},
#define LLDPPORTCONFIGTLVSTXENABLE              9
    {LLDPPORTCONFIGTLVSTXENABLE, ASN_OCTET_STR, RWRITE, var_lldpPortConfigTable, 4, {1, 6, 1, 4}},
#define LLDPCONFIGMANADDRPORTSTXENABLE          10
    {LLDPCONFIGMANADDRPORTSTXENABLE, ASN_OCTET_STR, RWRITE, var_lldpConfigManAddrTable, 4, {1, 7, 1, 1}},
#define LLDPSTATSREMTABLESLASTCHANGETIME        11
    {LLDPSTATSREMTABLESLASTCHANGETIME, ASN_TIMETICKS, RONLY, var_lldpStatistics, 2, {2, 1}},
#define LLDPSTATSREMTABLESINSERTS               12
    {LLDPSTATSREMTABLESINSERTS, ASN_GAUGE, RONLY, var_lldpStatistics, 2, {2, 2}},
#define LLDPSTATSREMTABLESDELETES               13
    {LLDPSTATSREMTABLESDELETES, ASN_GAUGE, RONLY, var_lldpStatistics, 2, {2, 3}},
#define LLDPSTATSREMTABLESDROPS                 14
    {LLDPSTATSREMTABLESDROPS, ASN_GAUGE, RONLY, var_lldpStatistics, 2, {2, 4}},
#define LLDPSTATSREMTABLESAGEOUTS               15
    {LLDPSTATSREMTABLESAGEOUTS, ASN_GAUGE, RONLY, var_lldpStatistics, 2, {2, 5}},
#define LLDPSTATSTXPORTNUM                      16
    {LLDPSTATSTXPORTNUM, ASN_INTEGER, RONLY, var_lldpStatsTxPortTable, 4, {2, 6, 1, 1}},
#define LLDPSTATSTXPORTFRAMESTOTAL              17
    {LLDPSTATSTXPORTFRAMESTOTAL, ASN_COUNTER, RONLY, var_lldpStatsTxPortTable, 4, {2, 6, 1, 2}},
#define LLDPSTATSRXPORTNUM                      18
    {LLDPSTATSRXPORTNUM, ASN_INTEGER, RONLY, var_lldpStatsRxPortTable, 4, {2, 7, 1, 1}},
#define LLDPSTATSRXPORTFRAMESDISCARDEDTOTAL     19
    {LLDPSTATSRXPORTFRAMESDISCARDEDTOTAL, ASN_COUNTER, RONLY, var_lldpStatsRxPortTable, 4, {2, 7, 1, 2}},
#define LLDPSTATSRXPORTFRAMESERRORS             20
    {LLDPSTATSRXPORTFRAMESERRORS, ASN_COUNTER, RONLY, var_lldpStatsRxPortTable, 4, {2, 7, 1, 3}},
#define LLDPSTATSRXPORTFRAMESTOTAL              21
    {LLDPSTATSRXPORTFRAMESTOTAL, ASN_COUNTER, RONLY, var_lldpStatsRxPortTable, 4, {2, 7, 1, 4}},
#define LLDPSTATSRXPORTTLVSDISCARDEDTOTAL       22
    {LLDPSTATSRXPORTTLVSDISCARDEDTOTAL, ASN_COUNTER, RONLY,  var_lldpStatsRxPortTable, 4, {2, 7, 1, 5}},
#define LLDPSTATSRXPORTTLVSUNRECOGNIZEDTOTAL    23
    {LLDPSTATSRXPORTTLVSUNRECOGNIZEDTOTAL, ASN_COUNTER, RONLY, var_lldpStatsRxPortTable, 4, {2, 7, 1, 6}},
#define LLDPSTATSRXPORTAGEOUTSTOTAL             24
    {LLDPSTATSRXPORTAGEOUTSTOTAL, ASN_GAUGE, RONLY, var_lldpStatsRxPortTable, 4, {2, 7, 1, 7}},
#define LLDPLOCCHASSISIDSUBTYPE                 25
    {LLDPLOCCHASSISIDSUBTYPE, ASN_INTEGER, RONLY, var_lldpLocalSystemData, 2, {3, 1}},
#define LLDPLOCCHASSISID                        26
    {LLDPLOCCHASSISID, ASN_OCTET_STR, RONLY, var_lldpLocalSystemData, 2, {3, 2}},
#define LLDPLOCSYSNAME                          27
    {LLDPLOCSYSNAME, ASN_OCTET_STR, RONLY, var_lldpLocalSystemData, 2, {3, 3}},
#define LLDPLOCSYSDESC                          28
    {LLDPLOCSYSDESC, ASN_OCTET_STR, RONLY, var_lldpLocalSystemData, 2, {3, 4}},
#define LLDPLOCSYSCAPSUPPORTED                  29
    {LLDPLOCSYSCAPSUPPORTED, ASN_OCTET_STR, RONLY, var_lldpLocalSystemData, 2, {3, 5}},
#define LLDPLOCSYSCAPENABLED                    30
    {LLDPLOCSYSCAPENABLED, ASN_OCTET_STR, RONLY, var_lldpLocalSystemData, 2, {3, 6}},
#define LLDPLOCPORTNUM                          31
    {LLDPLOCPORTNUM, ASN_INTEGER, RONLY, var_lldpLocPortTable, 4, {3, 7, 1, 1}},
#define LLDPLOCPORTIDSUBTYPE                    32
    {LLDPLOCPORTIDSUBTYPE, ASN_INTEGER, RONLY, var_lldpLocPortTable, 4, {3, 7, 1, 2}},
#define LLDPLOCPORTID                           33
    {LLDPLOCPORTID, ASN_OCTET_STR, RONLY, var_lldpLocPortTable, 4, {3, 7, 1, 3}},
#define LLDPLOCPORTDESC                         34
    {LLDPLOCPORTDESC, ASN_OCTET_STR, RONLY, var_lldpLocPortTable, 4, {3, 7, 1, 4}},
    /*
    #define LLDPLOCMANADDRSUBTYPE                   35
    {LLDPLOCMANADDRSUBTYPE, ASN_INTEGER, RONLY, var_lldpLocManAddrTable, 4, {3, 8, 1, 1}},
    #define LLDPLOCMANADDR                          36
    {LLDPLOCMANADDR, ASN_OCTET_STR, RONLY, var_lldpLocManAddrTable, 4, {3, 8, 1, 2}},
    */
#define LLDPLOCMANADDRLEN                       37
    {LLDPLOCMANADDRLEN, ASN_INTEGER, RONLY, var_lldpLocManAddrTable, 4, {3, 8, 1, 3}},
#define LLDPLOCMANADDRIFSUBTYPE                 38
    {LLDPLOCMANADDRIFSUBTYPE, ASN_INTEGER, RONLY, var_lldpLocManAddrTable, 4, {3, 8, 1, 4}},
#define LLDPLOCMANADDRIFID                      39
    {LLDPLOCMANADDRIFID, ASN_INTEGER, RONLY, var_lldpLocManAddrTable, 4, {3, 8, 1, 5}},
#define LLDPLOCMANADDROID                       40
    {LLDPLOCMANADDROID, ASN_OBJECT_ID, RONLY, var_lldpLocManAddrTable, 4, {3, 8, 1, 6}},
#define LLDPREMTIMEMARK                         41
    {LLDPREMTIMEMARK, ASN_TIMETICKS, RONLY, var_lldpRemTable, 4, {4, 1, 1, 1}},
#define LLDPREMLOCALPORTNUM                     42
    {LLDPREMLOCALPORTNUM, ASN_INTEGER, RONLY, var_lldpRemTable, 4, {4, 1, 1, 2}},
#define LLDPREMINDEX                            43
    {LLDPREMINDEX, ASN_INTEGER, RONLY, var_lldpRemTable, 4, {4, 1, 1, 3}},
#define LLDPREMCHASSISIDSUBTYPE                 44
    {LLDPREMCHASSISIDSUBTYPE, ASN_INTEGER, RONLY, var_lldpRemTable, 4, {4, 1, 1, 4}},
#define LLDPREMCHASSISID                        45
    {LLDPREMCHASSISID, ASN_OCTET_STR, RONLY, var_lldpRemTable, 4, {4, 1, 1, 5}},
#define LLDPREMPORTIDSUBTYPE                    46
    {LLDPREMPORTIDSUBTYPE, ASN_INTEGER, RONLY, var_lldpRemTable, 4, {4, 1, 1, 6}},
#define LLDPREMPORTID                           47
    {LLDPREMPORTID, ASN_OCTET_STR, RONLY, var_lldpRemTable, 4, {4, 1, 1, 7}},
#define LLDPREMPORTDESC                         48
    {LLDPREMPORTDESC, ASN_OCTET_STR, RONLY, var_lldpRemTable, 4, {4, 1, 1, 8}},
#define LLDPREMSYSNAME                          49
    {LLDPREMSYSNAME, ASN_OCTET_STR, RONLY, var_lldpRemTable, 4, {4, 1, 1, 9}},
#define LLDPREMSYSDESC                          50
    {LLDPREMSYSDESC, ASN_OCTET_STR, RONLY, var_lldpRemTable, 4, {4, 1, 1, 10}},
#define LLDPREMSYSCAPSUPPORTED                  51
    {LLDPREMSYSCAPSUPPORTED, ASN_OCTET_STR, RONLY, var_lldpRemTable, 4, {4, 1, 1, 11}},
#define LLDPREMSYSCAPENABLED                    52
    {LLDPREMSYSCAPENABLED, ASN_OCTET_STR, RONLY, var_lldpRemTable, 4, {4, 1, 1, 12}},
    /*
    #define LLDPREMMANADDRSUBTYPE                   53
        {LLDPREMMANADDRSUBTYPE, ASN_INTEGER, RONLY, var_lldpRemManAddrTable, 4, {4, 2, 1, 1}},
    #define LLDPREMMANADDR                          54
        {LLDPREMMANADDR, ASN_OCTET_STR, RONLY, var_lldpRemManAddrTable, 4, {4, 2, 1, 2}},
    */
#define LLDPREMMANADDRIFSUBTYPE                 55
    {LLDPREMMANADDRIFSUBTYPE, ASN_INTEGER, RONLY, var_lldpRemManAddrTable, 4, {4, 2, 1, 3}},
#define LLDPREMMANADDRIFID                      56
    {LLDPREMMANADDRIFID, ASN_INTEGER, RONLY, var_lldpRemManAddrTable, 4, {4, 2, 1, 4}},
#define LLDPREMMANADDROID                       57
    {LLDPREMMANADDROID, ASN_OBJECT_ID, RONLY, var_lldpRemManAddrTable, 4, {4, 2, 1, 5}},
};




/*
* (L = length of the oidsuffix)
*/



static dot1Port_info_t  table_info;

#define PORT_INDEX  table_info.if_id


// BITS type must be swapped
char BITS_type_swapbyte(unsigned char input)
{
    unsigned char result = 0;
    char r_index = 0;
    for (r_index = 0; r_index < 8; ++r_index) {
        result = result << 1;
        result |= (input & 1);
        input = input >> 1;
    }
    return result;
}

/*
* Initializes the lldpObjects module
*/
void
init_lldpObjects(void)
{
    // Register mibContextTable
    mibContextTable_register(lldpObjects_variables_oid,
                             sizeof(lldpObjects_variables_oid) / sizeof(oid),
                             "LLDP-MIB : lldpObjects");

    DEBUGMSGTL(("lldpObjects", "Initializing\n"));

    /*
    * register ourselves with the agent to handle our mib tree
    */
    REGISTER_MIB("lldpObjects", lldpObjects_variables, variable4,
                 lldpObjects_variables_oid);

    /*
    * place any other initialization junk you need here
    */

    table_info.isid = msg_primary_switch_isid();
    T_DG(TRACE_GRP_SNMP, "table_info.isid = %d", table_info.isid);
}

/*
* var_lldpConfiguration():
*   This function is called every time the agent gets a request for
*   a scalar variable that might be found within your mib section
*   registered above.  It is up to you to do the right thing and
*   return the correct value.
*     You should also correct the value of "var_len" if necessary.
*
*   Please see the documentation for more information about writing
*   module extensions, and check out the examples in the examples
*   and mibII directories.
*/
u_char         *
var_lldpConfiguration(struct variable *vp,
                      oid *name,
                      size_t *length,
                      int exact, size_t *var_len, WriteMethod **write_method)
{

    static long     VAR = 0;

    vtss_appl_lldp_common_conf_t   lldp_conf;
    vtss_appl_lldp_common_conf_get(&lldp_conf);

    if (header_generic(vp, name, length, exact, var_len, write_method)
        == MATCH_FAILED) {
        return NULL;
    }

    T_DG(TRACE_GRP_SNMP, "VTSS_ISID_LOCAL used not this isid:%d", table_info.isid);

    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPMESSAGETXINTERVAL: {
        *write_method = write_lldpMessageTxInterval;
        VAR = lldp_conf.tx_sm.msgTxInterval;
        return (u_char *) & VAR;
    }
    case LLDPNOTIFICATIONINTERVAL: {
        *write_method = write_lldpNotificationInterval;
        VAR = lldp_mgmt_get_notification_interval(TRUE);
        return (u_char *) & VAR;
    }
    case LLDPMESSAGETXHOLDMULTIPLIER: {
        *write_method = write_lldpMessageTxHoldMultiplier;
        VAR = lldp_conf.tx_sm.msgTxHold;
        T_DG(TRACE_GRP_SNMP, "lldp_conf.msgTxHold:%d", lldp_conf.tx_sm.msgTxHold);
        return (u_char *) & VAR;
    }
    case LLDPTXDELAY: {
        *write_method = write_lldpTxDelay;
        VAR = lldp_conf.tx_sm.txDelay;
        return (u_char *) & VAR;
    }
    case LLDPREINITDELAY: {
        *write_method = write_lldpReinitDelay;
        VAR = lldp_conf.tx_sm.reInitDelay;
        return (u_char *) & VAR;
    }
    default:
        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_lldpConfiguration\n",
                    vp->magic));
    }
    return NULL;
}


void print_oid (int oid_length,
                oid *name)
{
    oid       *op = name;
    int i;
    for (i = 0; i < oid_length; i++) {
        T_IG(TRACE_GRP_SNMP, "OID[%d]=%lu", i, *op++);
    }

}




mesa_rc check_for_man_addr (int exact,
                            size_t *length,
                            int oid_length,
                            oid *name,
                            int subtype,
                            char *ip_addr,
                            int ip_len)
{

    BOOL      index_man_addr_subtype_found = FALSE;
    ulong     index_man_addr_subtype = 0;
    ulong     index_man_addr_length = 0;
    oid       *op = NULL;




    op = name + oid_length; // point to first index
    mesa_rc rc = VTSS_UNSPECIFIED_ERROR;
    ulong i;

    // Get the indexes
    if (op < name + *length) {
        index_man_addr_subtype = *op++;
        index_man_addr_subtype_found = TRUE;
    }

    if (op < name + *length) {
        index_man_addr_length = *op++;
    }


    if (exact) {
        T_DG(TRACE_GRP_SNMP, "check_for_man_addr exact, oid_length = %d, ip_len =%d, *length = %zu", oid_length, ip_len, *length);
        // Check that the requested OID isn't shorter than our OID
        if (*length != oid_length +  index_man_addr_length + 2) { // The  +2 is for man_addr_subtype and man_addr_length indexes.
            T_NG(TRACE_GRP_SNMP, "Wrong length, index_man_addr_length = " VPRIlu, index_man_addr_length);
            rc =  VTSS_UNSPECIFIED_ERROR;
        } else if (index_man_addr_length != ip_len) {
            T_NG(TRACE_GRP_SNMP, "The reqested OID man address length doesn't match our OID man addr length, index_man_addr_length = " VPRIlu", ip_len =%d",
                 index_man_addr_length, ip_len);
            rc =  VTSS_UNSPECIFIED_ERROR;
        } else {
            if (index_man_addr_subtype == (ulong)subtype) {
                rc = VTSS_RC_OK; // By default we expect that the request is for us.

                // Loop through the management address and check if the request index exact the same a our OID.
                for (i = 0; i < (ulong)ip_len; i++) {
                    // Check that the request OID isn't longer the our OID
                    if (op > (name + oid_length + 2 + ip_len)) { // The  +2 is for man_addr_subtype and man_addr_length indexes.
                        T_IG(TRACE_GRP_SNMP, "The OID is longer than expected.");
                        rc = VTSS_UNSPECIFIED_ERROR; // The OID is longer than expected. = not exact
                        print_oid(*length, name);
                        break;
                    }

                    u32 ip_char = *ip_addr++;

                    if (*op++  != ip_char  ) {
                        T_IG(TRACE_GRP_SNMP, "IP address doesn't match.");
                        rc = VTSS_UNSPECIFIED_ERROR; // OK, it was not for us
                        break;
                    }
                }
            } else {
                T_IG(TRACE_GRP_SNMP, "Subtype didn't match.index_man_addr_subtype = " VPRIlu", subtype = %d",
                     index_man_addr_subtype, subtype);
            }
        }
    } else {
        T_NG(TRACE_GRP_SNMP, "Not exact ");

        if (op >= (name + *length)) {
            // The requested OID is a subset of our OID (e.g. requested OID = 1.0.8802.1.1.2.1.3.8, our OID = 1.0.8802.1.1.2.1.3.8.1.5.1.4.192.168.111.58)
            T_NG(TRACE_GRP_SNMP, "Subset");
            rc = VTSS_RC_OK; // Signaling that the request is for us
        } else  if (index_man_addr_subtype < (ulong)subtype || index_man_addr_subtype_found == FALSE) {
            T_NG(TRACE_GRP_SNMP, "index_man_addr_subtype = " VPRIlu", subtype =%d", index_man_addr_subtype, subtype);
            rc = VTSS_RC_OK;
        } else if (index_man_addr_subtype == subtype) {
            rc =  VTSS_UNSPECIFIED_ERROR; // By default expect that the request is not for us

            // Loop through the management address and check if the request index is "lower".
            for (i = 0; i < (ulong)ip_len; i++) {
                // Check if the man_addr index is a sub part of the management address ( index_man_addr_length < ip_len or id we exceeds the
                // the oid). If it is then it is a request for us.
                T_NG(TRACE_GRP_SNMP, "Same subtype, p, *op = %lu, ip_addr = %d", *op, *ip_addr);
                if (op >= (name + *length) || (i >= index_man_addr_length) ) {
                    T_NG(TRACE_GRP_SNMP, "Same subtype, Length");
                    rc = VTSS_RC_OK; // Signaling that the request is for us
                    break; // OK - This if for us - continue
                }

                u32 ip_char = *ip_addr++;
                T_NG(TRACE_GRP_SNMP, "Same subtype,*op = %u, ip_addr = %d, ip_char = %u", (u32)*op, *ip_addr, ip_char);

                if (*op++  < ip_char  ) {
                    T_NG(TRACE_GRP_SNMP, "Same subtype, not our ip, *op = %u, ip_addr = %d", (u32)*op, *ip_addr);
                    rc = VTSS_RC_OK; // Signaling that the request is for us
                    break; // OK - This if for us - continue
                }
            }

        } else {
            T_NG(TRACE_GRP_SNMP, "subtype larger index_man_addr_subtype = " VPRIlu", subtype = %d", index_man_addr_subtype, subtype);
            rc =  VTSS_UNSPECIFIED_ERROR; // The request is not for us.
        }
    }

    return rc;
}


/*
 * The entry data structure for lldpLocManAddrTable
 */
typedef struct {
    /*
     * Entry keys
     */
    long            lldpLocManAddrSubtype;
    char            lldpLocManAddr[SNMP_ASN_OCTET_STR_MAX_LEN];
    size_t          lldpLocManAddr_len;

    /*
     * Entry columns
     */
    long            lldpLocManAddrLen;
    long            lldpLocManAddrIfSubtype;
    long            lldpLocManAddrIfId;
    oid             lldpLocManAddrOID[MAX_OID_LEN];
    size_t          lldpLocManAddrOID_len;
} lldpLocManAddrTable_entry_t;

/*
 * The return data structure
 */
typedef struct {
    long            long_ret;
    char            string_ret[SNMP_ASN_OCTET_STR_MAX_LEN];
    oid             objid_ret[MAX_OID_LEN];
    size_t          objid_len_ret;
} lldpManAddrTable_return_t;

/*
 * The UCD-SNMP engine need a address point for processing get opertion
 */

/*lint -esym(459, lldpLocManAddrTable_global_ret)*/

/*
 * Process one packet at the same time, therefore unprotected access is acceptable
 */
static lldpManAddrTable_return_t lldpLocManAddrTable_global_ret;     /* static variables for retuning */

static void get_pre_lldpLocManAddrTableEntryKey(lldpLocManAddrTable_entry_t *key)
{
    int i = 0;
    BOOL found = FALSE;
    u8 *ptr = (u8 *) key->lldpLocManAddr;
    if (key->lldpLocManAddr_len > 1) {
        for (i = key->lldpLocManAddr_len - 1; i >= 0; i-- ) {
            if (*(ptr + i) != 0x0 ) {
                --*(ptr + i);
                found = TRUE;
                break;
            } else {
                *(ptr + i) = 0xff;
            }
        }
        if ( TRUE == found) {
            return;
        }
    }

    if (key->lldpLocManAddr_len >= 1) {
        --key->lldpLocManAddr_len;
        return;
    }

    key->lldpLocManAddr_len = SNMP_ASN_OCTET_STR_MAX_LEN;

    if (key->lldpLocManAddrSubtype >= 1) {
        --key->lldpLocManAddrSubtype;
        return;
    }
    memset(key, 0, sizeof(lldpLocManAddrTable_entry_t));
}

static BOOL get_next_lldpLocManAddrTableEntryByKey(lldpLocManAddrTable_entry_t *table_entry)
{
    mesa_ip_addr_t ip_addr;
    mesa_vid_t     if_id;
    iftable_info_t info;
    mesa_ipv4_t    addr_key;

    if ( table_entry->lldpLocManAddrSubtype > IANA_ADDR_IPV4 ) {
        return FALSE;
    }

    if ( table_entry->lldpLocManAddrSubtype == IANA_ADDR_IPV4 && table_entry->lldpLocManAddr_len > sizeof( addr_key ) ) {
        return FALSE;
    }

    if ( table_entry->lldpLocManAddrSubtype == IANA_ADDR_IPV4 && table_entry->lldpLocManAddr_len == sizeof( addr_key )) {
        memcpy(&addr_key, table_entry->lldpLocManAddr, sizeof( addr_key ));
        ip_addr.type = MESA_IP_TYPE_IPV4;
        ip_addr.addr.ipv4 = ntohl(addr_key);
    } else {
        ip_addr.type = MESA_IP_TYPE_IPV4;
        memset(&ip_addr.addr.ipv4, 0, sizeof( ip_addr.addr.ipv4 ));
    }

    if ( FALSE == get_next_ip(&ip_addr, &if_id) || ip_addr.type != MESA_IP_TYPE_IPV4 ) {
        return FALSE;
    }

    table_entry->lldpLocManAddrSubtype = ip_addr.type == MESA_IP_TYPE_IPV4 ? IANA_ADDR_IPV4 : IANA_ADDR_IPV6;
    table_entry->lldpLocManAddr_len = ip_addr.type == MESA_IP_TYPE_IPV4 ? sizeof(ip_addr.addr.ipv4) : sizeof(ip_addr.addr.ipv6);
    addr_key = htonl(ip_addr.addr.ipv4);
    memcpy(table_entry->lldpLocManAddr, &addr_key, table_entry->lldpLocManAddr_len);

    table_entry->lldpLocManAddrLen = sizeof(addr_key) + 1;
    table_entry->lldpLocManAddrIfSubtype = ( i32) lldp_tlv_get_mgmt_if_num_subtype();

    info.if_id  = if_id;
    info.type   = IFTABLE_IFINDEX_TYPE_VLAN;
    (void) ifIndex_get_by_interface( &info );
    table_entry->lldpLocManAddrIfId = info.ifIndex;
    table_entry->lldpLocManAddrOID_len = 2;
    memset(table_entry->lldpLocManAddrOID, 0, table_entry->lldpLocManAddrOID_len * sizeof(oid));
    return TRUE;
}

static BOOL get_lldpLocManAddrTableEntryByKey(lldpLocManAddrTable_entry_t *table_entry)
{
    lldpLocManAddrTable_entry_t tmp;

    tmp.lldpLocManAddrSubtype = table_entry->lldpLocManAddrSubtype;
    tmp.lldpLocManAddr_len    = table_entry->lldpLocManAddr_len;
    memcpy(tmp.lldpLocManAddr, table_entry->lldpLocManAddr, table_entry->lldpLocManAddr_len);
    get_pre_lldpLocManAddrTableEntryKey(&tmp);

    if ( FALSE == get_next_lldpLocManAddrTableEntryByKey(&tmp) ) {
        return FALSE;
    }

    if (tmp.lldpLocManAddrSubtype == table_entry->lldpLocManAddrSubtype && tmp.lldpLocManAddr_len == table_entry->lldpLocManAddr_len &&
        !memcmp(tmp.lldpLocManAddr, table_entry->lldpLocManAddr, table_entry->lldpLocManAddr_len)) {
        memcpy(table_entry, &tmp, sizeof(tmp));
        return TRUE;
    }
    return FALSE;

}

static int
getfirst_lldpLocManAddrTableEntry(lldpLocManAddrTable_entry_t *
                                  table_entry)
{
    memset(table_entry, 0, sizeof(lldpLocManAddrTable_entry_t));
    table_entry->lldpLocManAddrSubtype = 0;
    table_entry->lldpLocManAddr_len = 0;
    if ( FALSE == get_next_lldpLocManAddrTableEntryByKey(table_entry) ) {
        return VTSS_RC_ERROR;
    }
    return VTSS_RC_OK;
}

static int
get_lldpLocManAddrTableEntry(lldpLocManAddrTable_entry_t *table_entry,
                             BOOL getnext)
{
    lldpLocManAddrTable_entry_t tmp;

    memset (&tmp, 0, sizeof(tmp));
    tmp.lldpLocManAddrSubtype = table_entry->lldpLocManAddrSubtype;
    tmp.lldpLocManAddr_len = table_entry->lldpLocManAddr_len;
    memcpy(tmp.lldpLocManAddr, table_entry->lldpLocManAddr, table_entry->lldpLocManAddr_len);

    if ( (getnext == TRUE &&  FALSE == get_next_lldpLocManAddrTableEntryByKey(&tmp)) ||
         (getnext == FALSE && FALSE == get_lldpLocManAddrTableEntryByKey(&tmp))) {
        return VTSS_RC_ERROR;
    }

    memcpy(table_entry, &tmp, sizeof(tmp));
    return VTSS_RC_OK;
}

static int
parse_lldpLocManAddrTable(oid *name,
                          size_t *length,
                          int exact,
                          lldpLocManAddrTable_entry_t *table_entry)
{
    size_t          op_pos = 9 + 2;
    oid            *op = (oid *) (name + op_pos);
    u_char         *cp = NULL;
    size_t         len = 0;

    memset(table_entry, 0, sizeof(*table_entry));

    if (exact && *length < (9 + 1 + 3)) {
        return -1;
    } else if (!exact && *length <= op_pos) {
        if (getfirst_lldpLocManAddrTableEntry(table_entry)) {
            return -1;
        }
        return 1;               /* getfirst */
    }

    if (*length > op_pos) {
        table_entry->lldpLocManAddrSubtype = (long) * op++;
        op_pos++;
    } else if (exact) {
        return -1;
    } else {
        return 0;
    }

    if (*length > op_pos) {
        len = *op++;
        len = len > sizeof(table_entry->lldpLocManAddr) ? sizeof(table_entry->lldpLocManAddr) : len;
        op_pos++;
        table_entry->lldpLocManAddr_len = len;
        cp = (u_char *) table_entry->lldpLocManAddr;
        while (len-- > 0) {
            if (*length > op_pos) {
                *cp++ = (u_char) * op++;
                op_pos++;
            } else if (exact) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    if (exact && *length != op_pos) {
        return -1;
    }

    return 0;
}

static int
fillobj_lldpLocManAddrTable(oid *name,
                            size_t *length,
                            lldpLocManAddrTable_entry_t *table_entry)
{
    int             name_pos = 9 + 2;
    int             len = 0, idx = 0;

    name[name_pos++] = (oid) table_entry->lldpLocManAddrSubtype;
    len = (int) table_entry->lldpLocManAddr_len;
    name[name_pos++] = (oid) table_entry->lldpLocManAddr_len;
    idx = 0;
    while (len-- > 0) {
        name[name_pos++] =
            (unsigned char) table_entry->lldpLocManAddr[idx++];
    }

    *length = name_pos;
    return 0;
}


/*
 * var_lldpLocManAddrTable():
 *   Handle this table separately from the scalar value case.
 *   The workings of this are basically the same as for var_lldpLocManAddrTable above.
 */
u_char         *
var_lldpLocManAddrTable(struct variable *vp,
                        oid *name,
                        size_t *length,
                        int exact,
                        size_t *var_len, WriteMethod **write_method)
{
    int             rc;
    oid             newname[MAX_OID_LEN];
    size_t          newname_len;
    lldpLocManAddrTable_entry_t table_entry;

    *write_method = NULL;
    memcpy((char *) newname, (char *) vp->name,
           (int) (vp->namelen * sizeof(oid)));
    newname_len = vp->namelen;

    if (memcmp(name, vp->name, sizeof(oid) * vp->namelen) != 0) {
        memcpy(name, vp->name, sizeof(oid) * vp->namelen);
        *length = vp->namelen;
    }

    if ((rc =
             parse_lldpLocManAddrTable(name, length, exact,
                                       &table_entry)) < 0) {
        return NULL;
    } else if (rc > 0) {        /* getfirst */
        if (fillobj_lldpLocManAddrTable
            (newname, &newname_len, &table_entry)) {
            return NULL;
        }
    } else {
        do {
            if (get_lldpLocManAddrTableEntry
                (&table_entry, exact ? FALSE : TRUE)) {
                return NULL;
            }
            if (fillobj_lldpLocManAddrTable
                (newname, &newname_len, &table_entry)) {
                return NULL;
            }
            if (exact) {
                break;
            }
            rc = snmp_oid_compare(newname, newname_len, name, *length);
        } while (rc < 0);
    }

    /*
     * fill in object part of name for current entry
     */
    memcpy((char *) name, (char *) newname,
           (int) (newname_len * sizeof(oid)));
    *length = newname_len;

    /*
     * this is where we do the value assignments for the mib results.
     */
    switch (vp->magic) {
    case LLDPLOCMANADDRLEN: {
        lldpLocManAddrTable_global_ret.long_ret =
            table_entry.lldpLocManAddrLen;
        *var_len = sizeof(lldpLocManAddrTable_global_ret.long_ret);
        return (u_char *) & lldpLocManAddrTable_global_ret.long_ret;
    }
    case LLDPLOCMANADDRIFSUBTYPE: {
        lldpLocManAddrTable_global_ret.long_ret =
            table_entry.lldpLocManAddrIfSubtype;
        *var_len = sizeof(lldpLocManAddrTable_global_ret.long_ret);
        return (u_char *) & lldpLocManAddrTable_global_ret.long_ret;
    }
    case LLDPLOCMANADDRIFID: {
        lldpLocManAddrTable_global_ret.long_ret =
            table_entry.lldpLocManAddrIfId;
        *var_len = sizeof(lldpLocManAddrTable_global_ret.long_ret);
        return (u_char *) & lldpLocManAddrTable_global_ret.long_ret;
    }
    case LLDPLOCMANADDROID: {
        memcpy(lldpLocManAddrTable_global_ret.objid_ret,
               table_entry.lldpLocManAddrOID,
               table_entry.lldpLocManAddrOID_len * sizeof(oid));
        *var_len = table_entry.lldpLocManAddrOID_len * sizeof(oid);
        return (u_char *) lldpLocManAddrTable_global_ret.objid_ret;
    }
    default:
        DEBUGMSGTL(("snmpd",
                    "unknown sub-id %d in var_lldpLocManAddrTable\n",
                    vp->magic));
    }
    return NULL;
}


/*
* var_lldpStatsTxPortTable():
*   Handle this table separately from the scalar value case.
*   The workings of this are basically the same as for var_lldpConfiguration above.
*/
u_char         *
var_lldpStatsTxPortTable(struct variable *vp,
                         oid *name,
                         size_t *length,
                         int exact,
                         size_t *var_len, WriteMethod **write_method)
{
    static long     VAR = 0;
    // Determine if the table indexes are in use
    if (header_loc_port_num_table(vp, name, length, exact, var_len, write_method) != VTSS_RC_OK) {
        return NULL;
    }

    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPSTATSTXPORTNUM: {
        return NULL;
    }
    case LLDPSTATSTXPORTFRAMESTOTAL: {
        vtss_appl_lldp_port_counters_t statistics;
        vtss_ifindex_t ifindex;
        if (vtss_ifindex_from_port(table_info.isid, PORT_INDEX, &ifindex) != VTSS_RC_OK) {
            T_E("Could not get ifindex");
        }

        if (vtss_appl_lldp_stat_if_get(ifindex, &statistics) != VTSS_RC_OK) {
            T_WG(TRACE_GRP_SNMP, "Problem getting statistic counters");
        };

        VAR = statistics.statsFramesOutTotal;
        return (u_char *) & VAR;
    }
    default:
        DEBUGMSGTL(("snmpd",
                    "unknown sub-id %d in var_lldpStatsTxPortTable\n",
                    vp->magic));
    }
    return NULL;
}



static ulong port2table_index(mesa_port_no_t iport)
{
    table_info.type = DOT1PORT_TYPE_PORT;
    table_info.if_id = iport;

    if (FALSE == dot1Port_get_by_interface ( &table_info)) {
        return (ulong) - 1;
    }
    return table_info.dot1port;
}


static mesa_rc get_table_info(ulong *table_index,
                              ulong lldp_loc_port_num,
                              oid *name,
                              size_t *length,
                              int exact)
{
    //  Select first port if "get next"
    if (lldp_loc_port_num == 0 && !exact) {
        lldp_loc_port_num = 1;
    }

    T_DG(TRACE_GRP_SNMP, "lldp_loc_port_num = " VPRIlu, lldp_loc_port_num);
    table_info.dot1port = lldp_loc_port_num - 1;
    if (FALSE == dot1Port_get_next(&table_info)) {
        return VTSS_UNSPECIFIED_ERROR;// Stop when last index is exceeded
    }

    *table_index = table_info.dot1port;

    return VTSS_RC_OK;
}



mesa_rc header_loc_port_num_table (struct variable *vp,
                                   oid *name,
                                   size_t *length,
                                   int exact,
                                   size_t *var_len,
                                   WriteMethod **write_method)
{
    ulong           table_index;
    ulong           table_size = IFTABLE_IFINDEX_END;
    ulong           idx_num;


    T_DG(TRACE_GRP_SNMP, " name[(*length) - 1] =%lu. *length = %zu", name[(*length) - 1], *length);

    // Only one index (lldpLocPortNum), so we can use simple table
    if (header_simple_table
        (vp, name, length, exact, var_len, write_method, table_size)
        == MATCH_FAILED) {
        return VTSS_UNSPECIFIED_ERROR;
    }
    T_DG(TRACE_GRP_SNMP, " name[(*length) - 1] =%lu. *length = %zu", name[(*length) - 1], *length);

    idx_num = name[(*length) - 1];
    table_info.dot1port = idx_num - 1;
    if (FALSE == dot1Port_get_next(&table_info) || (table_info.type != DOT1PORT_TYPE_PORT
                                                    && table_info.type != DOT1PORT_TYPE_LLAG && table_info.type != DOT1PORT_TYPE_GLAG)) {
        return VTSS_UNSPECIFIED_ERROR;
    }

    table_index = table_info.dot1port;

    if (exact && (table_index != idx_num)) {
        return VTSS_UNSPECIFIED_ERROR;
    }

#if 0
    if (get_ifTableIndex_info(table_index, &table_info) == FALSE) {
        return VTSS_UNSPECIFIED_ERROR;
    }
#endif

    // Save this one as the "next one", if "table_index" is not sequence
    name[(*length) - 1] = table_index;

    return VTSS_RC_OK;
}






mesa_rc header_simple_entries_table(struct variable *vp,
                                    oid *name,
                                    size_t *length,
                                    int exact,
                                    size_t *var_len, WriteMethod **write_method,
                                    int oid_length,
                                    vtss_appl_lldp_remote_entry_t   *return_entry)
{
    oid                    *op = NULL;
    int                    idx_num;
    vtss_appl_lldp_remote_entry_t    entry, temp_entry;

    lldp_u32_t index_rem_time_mark = 0;
    lldp_u32_t index_rem_local_port_num = 0;
    lldp_u16_t index_rem_index = 0;

    lldp_bool_t found = LLDP_FALSE;
    mesa_rc rc = VTSS_UNSPECIFIED_ERROR;
    vtss_appl_lldp_cap_t cap;
    vtss_appl_lldp_cap_get(&cap);

    if ( !VTSS_ISID_LEGAL(table_info.isid) || (table_info.isid != VTSS_ISID_START)) {
        return rc;
    }

    *write_method = 0;           /* assume it isnt writable for the time being */
    *var_len = sizeof(long); /* assume an integer and change later if not */

    // Clear the entry to start from knwon point
    memset(&entry, 0x0, sizeof(entry));
    memset(&temp_entry, 0x0, sizeof(temp_entry));


    if (memcmp(name, vp->name, sizeof(oid) * vp->namelen) != 0) {
        memcpy(name, vp->name, sizeof(oid) * vp->namelen);
        *length = vp->namelen;
    }



    // Get the entries
    vtss_appl_lldp_remote_entry_t *entries = NULL;
    vtss_appl_lldp_mutex_lock();
    entries = vtss_appl_lldp_entries_get();
    vtss_appl_lldp_mutex_unlock();

    op = name + oid_length; // point to first index


    if (op < name + *length) {
        index_rem_time_mark = *op++;
    }

    if (op < name + *length) {
        index_rem_local_port_num = *op++;
    }

    if (op < name + *length) {
        index_rem_index = *op++;
    }

    ulong table_index;
    if (get_table_info(&table_index,
                       index_rem_local_port_num,
                       name,
                       length,
                       exact) != VTSS_RC_OK) {
        return VTSS_UNSPECIFIED_ERROR;
    }



    if (exact) {
        // Check that the requested OID has the correct length
        if (*length != (ulong)(oid_length + 3)) { // + 3 is the rem_time_mark, local_port_num and rem_index  indexes
            T_DG(TRACE_GRP_SNMP, "Requested OID length (%zu) didn't match. Expected length: %d",
                 *length, oid_length + 3);
            return VTSS_UNSPECIFIED_ERROR;
        }


        // make sure that we are *exact*
        if (op != name + oid_length + 3) {
            T_IG(TRACE_GRP_SNMP, "We are not exact (exact was expeted)");
            return VTSS_UNSPECIFIED_ERROR;
        }

        for (idx_num = 0; idx_num < cap.remote_entries_cnt; idx_num++) {
            entry = entries[idx_num];

            if (entry.in_use == 0) {
                continue;
            }

            T_RG(TRACE_GRP_SNMP, "entry.time_mark = %u, index_rem_time_mark =%u", entry.time_mark, index_rem_time_mark);

            if (entry.time_mark          == index_rem_time_mark &&
                entry.receive_port       == table_info.if_id &&
                entry.lldp_remote_index  == index_rem_index) {

                rc = VTSS_RC_OK;
                break; // OK - Entry found, stop looking.
            }
        }
    } else {
        T_NG(TRACE_GRP_SNMP, "Not exact ");


        /* Use parameters of time_mark, local_port_num, index, policy_app_type
        to lookup your entry, find a entry that entry keys is great current keys */

        for (idx_num = 0; idx_num < cap.remote_entries_cnt; idx_num++) {
            entry = entries[idx_num];

            if (entry.in_use == 0) {
                continue;
            }

            if ((entry.time_mark > index_rem_time_mark) ||
                (entry.time_mark == index_rem_time_mark && entry.receive_port > table_info.if_id) ||
                (entry.time_mark == index_rem_time_mark && entry.receive_port == table_info.if_id && entry.lldp_remote_index > index_rem_index)) {
                if (found == FALSE) {
                    /* record the fist find entry that entry keys is great current keys */
                    T_NG(TRACE_GRP_SNMP, "found = 1");
                    found = TRUE;
                    temp_entry = entry;

                    /* keep lookup to find if there is any smaller keys entry */

                } else if (temp_entry.time_mark > entry.time_mark ||
                           (temp_entry.time_mark == entry.time_mark && temp_entry.receive_port > entry.receive_port) ||
                           (temp_entry.time_mark == entry.time_mark && temp_entry.receive_port == entry.receive_port &&
                            temp_entry.lldp_remote_index > entry.lldp_remote_index)) {                   /* find another smaller keys entry */
                    T_NG(TRACE_GRP_SNMP, "Update temp entry");
                    temp_entry = entry;
                }

                T_NG(TRACE_GRP_SNMP, "Mark time %u, %u - port %u, %u - index %u, %u",
                     entry.time_mark, temp_entry.time_mark,
                     entry.receive_port, temp_entry.receive_port,
                     entry.lldp_remote_index, temp_entry.lldp_remote_index);

            }
        }

        if (found) {
            entry = temp_entry;
            rc = VTSS_RC_OK;

            T_NG(TRACE_GRP_SNMP, "rc = VTSS_RC_OK");
            *length = oid_length;
            name[(*length)++] = entry.time_mark;
            name[(*length)++] = port2table_index(entry.receive_port);
            name[(*length)++] = entry.lldp_remote_index;
        }
    }


    memcpy(return_entry, &entry, sizeof(vtss_appl_lldp_remote_entry_t));
    return rc;
}


/*
* var_lldpRemTable():
*   Handle this table separately from the scalar value case.
*   The workings of this are basically the same as for var_lldpConfiguration above.
*/
u_char         *
var_lldpRemTable(struct variable *vp,
                 oid *name,
                 size_t *length,
                 int exact, size_t *var_len, WriteMethod **write_method)
{
    static long     VAR = 0;
    static char     VAR_STR[255];

    vtss_appl_lldp_remote_entry_t    entry;

    // Oid Length = 11 (1.0.8802.1.1.2.1.4.1.1.4)
    T_D("enter");
    if (header_simple_entries_table(vp, name,
                                    length, exact,
                                    var_len,
                                    write_method,
                                    11,
                                    &entry) != VTSS_RC_OK) {
        return NULL;
    }


    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPREMTIMEMARK: {
        return NULL;
    }
    case LLDPREMLOCALPORTNUM: {
        return NULL;
    }
    case LLDPREMINDEX: {
        return NULL;
    }
    case LLDPREMCHASSISIDSUBTYPE: {
        VAR = entry.chassis_id_subtype;
        if (VAR == 0 ) {
            VAR = 1;
        }
        return (u_char *) & VAR;
    }
    case LLDPREMCHASSISID: {
        char chassis_id_str[VTSS_APPL_MAX_CHASSIS_ID_LENGTH] = "";
        (void) vtss_appl_lldp_chassis_id2string(&entry, &chassis_id_str[0]);

        T_DG(TRACE_GRP_SNMP, "Getting chassis id = %s", chassis_id_str);
        strcpy(VAR_STR, &chassis_id_str[0]);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;
    }
    case LLDPREMPORTIDSUBTYPE: {
        VAR = entry.port_id_subtype;
        return (u_char *) & VAR;
    }
    case LLDPREMPORTID: {
        char port_id_str[VTSS_APPL_MAX_PORT_ID_LENGTH] = "";
        vtss_appl_lldp_port_id2string(&entry, &port_id_str[0]);

        T_DG(TRACE_GRP_SNMP, "Getting remote port id = %s", port_id_str);
        strcpy(VAR_STR, &port_id_str[0]);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;
    }
    case LLDPREMPORTDESC: {

        char port_decr_str[VTSS_APPL_MAX_PORT_DESCR_LENGTH] = "";
        vtss_appl_lldp_port_descr2string(&entry, &port_decr_str[0]);

        T_DG(TRACE_GRP_SNMP, "Getting remote port description = %s", port_decr_str);

        strcpy(VAR_STR, &port_decr_str[0]);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;

    }
    case LLDPREMSYSNAME: {
        char sys_name_str[VTSS_APPL_MAX_SYSTEM_NAME_LENGTH] = "";
        (void) vtss_appl_lldp_system_name2string(&entry, &sys_name_str[0]);

        T_DG(TRACE_GRP_SNMP, "Getting remote system name = %s", sys_name_str);

        strcpy(VAR_STR, &sys_name_str[0]);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;
    }
    case LLDPREMSYSDESC: {
        char sys_desc_str[VTSS_APPL_MAX_SYSTEM_DESCR_LENGTH] = "";
        (void) vtss_appl_lldp_system_descr2string(&entry, &sys_desc_str[0]);

        T_DG(TRACE_GRP_SNMP, "Getting remote system description = %s", sys_desc_str);

        misc_strncpyz(VAR_STR, &sys_desc_str[0], 255);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;
    }
    case LLDPREMSYSCAPSUPPORTED: {
        VAR_STR[0] = ((int)entry.system_capabilities[0]) << 8 | BITS_type_swapbyte(entry.system_capabilities[1]);
        *var_len = 1;
        return (u_char *) VAR_STR;
    }
    case LLDPREMSYSCAPENABLED: {
        VAR_STR[0] = ((int)entry.system_capabilities[2]) << 8 | BITS_type_swapbyte(entry.system_capabilities[3]);
        *var_len = 1;
        return (u_char *) VAR_STR;
    }
    default:
        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_lldpRemTable\n",
                    vp->magic));
    }
    return NULL;
}

/*
* var_lldpLocPortTable():
*   Handle this table separately from the scalar value case.
*   The workings of this are basically the same as for var_lldpConfiguration above.
*/
u_char         *
var_lldpLocPortTable(struct variable *vp,
                     oid *name,
                     size_t *length,
                     int exact,
                     size_t *var_len, WriteMethod **write_method)
{
    static long     VAR = 0;
    static char     VAR_STR[255];
    // Determine if the table indexes are in use
    if ((header_loc_port_num_table(vp, name, length, exact, var_len, write_method) != VTSS_RC_OK) || ((table_info.isid != VTSS_ISID_START))) {
        return NULL;
    }

    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPLOCPORTNUM: {
        return NULL;
    }
    case LLDPLOCPORTIDSUBTYPE: {
        VAR = (long)  lldp_tlv_get_port_id_subtype();
        T_DG(TRACE_GRP_SNMP, "Getting Port id subtype = %lu", VAR);
        return (u_char *) & VAR;
    }
    case LLDPLOCPORTID: {
        char port_id_str[VTSS_APPL_MAX_PORT_ID_LENGTH] = "";
        int uport_id = (iport2uport(table_info.if_id));
        sprintf(port_id_str, "%02d", uport_id);

        strcpy(VAR_STR, &port_id_str[0]);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;


    }
    case LLDPLOCPORTDESC: {
        char port_desc_str[VTSS_APPL_MAX_PORT_DESCR_LENGTH] = "";
        lldp_os_get_if_descr(iport2uport(table_info.if_id), &port_desc_str[0], VTSS_APPL_MAX_PORT_DESCR_LENGTH);
        misc_strncpyz(VAR_STR, &port_desc_str[0], 255);

        T_DG(TRACE_GRP_SNMP, "Getting local port description : %s", VAR_STR);
        *var_len = strlen(VAR_STR);

        return (u_char *) VAR_STR;
    }
    default:
        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_lldpLocPortTable\n",
                    vp->magic));
    }
    return NULL;
}


int get_num_of_active_isids(void)
{

    unsigned char            num_of_isids = 1 ; // Default one switch in stack

    return num_of_isids;
}

/*
* var_lldpPortConfigTable():
*   Handle this table separately from the scalar value case.
*   The workings of this are basically the same as for var_lldpConfiguration above.
*/
u_char         *
var_lldpPortConfigTable(struct variable *vp,
                        oid *name,
                        size_t *length,
                        int exact,
                        size_t *var_len, WriteMethod **write_method)
{
    static long VAR;

    // Determine if the table indexes are in use
    if (header_loc_port_num_table(vp, name, length, exact, var_len, write_method) != VTSS_RC_OK) {
        return NULL;
    }



    // Get current configuration
    CapArray<vtss_appl_lldp_port_conf_t, MEBA_CAP_BOARD_PORT_MAP_COUNT> lldp_conf;
    if (table_info.isid != VTSS_ISID_START) {
        return NULL;
    }
    (void) lldp_mgmt_conf_get(&lldp_conf[0]);

    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPPORTCONFIGPORTNUM: {
        return NULL;

    }
    case LLDPPORTCONFIGADMINSTATUS: {
        *write_method = write_lldpPortConfigAdminStatus;
        if (table_info.isid != VTSS_ISID_START) {
            return NULL;
        }
        (void) lldp_mgmt_conf_get(&lldp_conf[0]);

        switch (lldp_conf[PORT_INDEX].admin_states) {


        case VTSS_APPL_LLDP_DISABLED :
            VAR = (long) 4;
            break;
        case VTSS_APPL_LLDP_ENABLED_RX_ONLY:
            VAR = (long) 2;
            break;
        case VTSS_APPL_LLDP_ENABLED_TX_ONLY:
            VAR = (long) 1;
            break;
        default: //LLDP_ENABLED_RX_TX
            VAR = (long) 3;
            break;
        }
        return (u_char *) & VAR;
    }
    case LLDPPORTCONFIGNOTIFICATIONENABLE: {
        *write_method = write_lldpPortConfigNotificationEnable;
        VAR = lldp_mgmt_get_notification_ena(PORT_INDEX, TRUE);
        return (u_char *) & VAR;
    }
    case LLDPPORTCONFIGTLVSTXENABLE: {
        *write_method = write_lldpPortConfigTLVsTxEnable;

        unsigned char tlvs_ena = 0;  // By default we expect that all optional TLVs are disabled

        // Check if the optional TLVs are enabled one by one.
        if (lldp_conf[PORT_INDEX].optional_tlvs_mask & VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_PORT_DESCR_BIT) {
            tlvs_ena |= 1 << 7;
        }

        if (lldp_conf[PORT_INDEX].optional_tlvs_mask & VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_NAME_BIT) {
            tlvs_ena |= 1 << 6;
        }

        if (lldp_conf[PORT_INDEX].optional_tlvs_mask & VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_DESCR_BIT) {
            tlvs_ena |= 1 << 5;
        }

        if (lldp_conf[PORT_INDEX].optional_tlvs_mask & VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_CAPA_BIT) {
            tlvs_ena |= 1 << 4;
        }

        T_DG(TRACE_GRP_SNMP, "Optional TLVs = %u", tlvs_ena);
        *var_len = 1;
        VAR = tlvs_ena;
        return (u_char *) & VAR;
    }
    default:
        DEBUGMSGTL(("snmpd",
                    "unknown sub-id %d in var_lldpPortConfigTable\n",
                    vp->magic));
    }
    T_NG(TRACE_GRP_SNMP, "Return NULL");
    return NULL;
}




/*
 * The entry data structure for lldpConfigManAddrTable
 */
typedef struct {
    /* Entry keys */
    long           lldpLocManAddrSubtype;
    char             lldpLocManAddr[SNMP_ASN_OCTET_STR_MAX_LEN];
    size_t              lldpLocManAddr_len;

    /* Entry columns */
    char             lldpConfigManAddrPortsTxEnable[SNMP_ASN_OCTET_STR_MAX_LEN];
    size_t              lldpConfigManAddrPortsTxEnable_len;
} lldpConfigManAddrTable_entry_t;

/*
 * The return data structure
 */
typedef struct {
    char                string_ret[SNMP_ASN_OCTET_STR_MAX_LEN];
} lldpConfigManAddrTable_return_t;

/*
 * The UCD-SNMP engine need a address point for processing get opertion
 */
/*lint -esym(459, lldpConfigManAddrTable_global_ret) */ /* Process one packet at the same time, therefore unprotected access is acceptable */
static lldpConfigManAddrTable_return_t lldpConfigManAddrTable_global_ret; /* static variables for retuning */

static void get_pre_lldpConfigManAddrTableEntryKey(lldpConfigManAddrTable_entry_t *key)
{
    int i = 0;
    BOOL found = FALSE;
    u8 *ptr = (u8 *) key->lldpLocManAddr;
    if (key->lldpLocManAddr_len > 1) {
        for (i = key->lldpLocManAddr_len - 1; i >= 0; i-- ) {
            if (*(ptr + i) != 0x0 ) {
                --*(ptr + i);
                found = TRUE;
                break;
            } else {
                *(ptr + i) = 0xff;
            }
        }
        if ( TRUE == found) {
            return;
        }
    }

    if (key->lldpLocManAddr_len >= 1) {
        --key->lldpLocManAddr_len;
        return;
    }

    key->lldpLocManAddr_len = SNMP_ASN_OCTET_STR_MAX_LEN;

    if (key->lldpLocManAddrSubtype >= 1) {
        --key->lldpLocManAddrSubtype;
        return;
    }
    memset(key, 0, sizeof(lldpConfigManAddrTable_entry_t));
}

static BOOL get_next_lldpConfigManAddrTableEntryKey(lldpConfigManAddrTable_entry_t *table_entry)
{
    mesa_ipv4_t addr_key;
    mesa_ip_addr_t ip_addr;
    if ( table_entry->lldpLocManAddrSubtype > IANA_ADDR_IPV4 ) {
        return FALSE;
    }

    if ( table_entry->lldpLocManAddrSubtype == IANA_ADDR_IPV4 && table_entry->lldpLocManAddr_len > sizeof( addr_key ) ) {
        return FALSE;
    }

    if ( table_entry->lldpLocManAddrSubtype == IANA_ADDR_IPV4 && table_entry->lldpLocManAddr_len == sizeof( addr_key )) {
        memcpy(&addr_key, table_entry->lldpLocManAddr, sizeof( addr_key ));
        ip_addr.type = MESA_IP_TYPE_IPV4;
        ip_addr.addr.ipv4 = ntohl(addr_key);
    } else {
        ip_addr.type = MESA_IP_TYPE_IPV4;
        memset(&ip_addr.addr.ipv4, 0, sizeof( ip_addr.addr.ipv4 ));
    }

    if ( FALSE == get_next_ip(&ip_addr, NULL) || ip_addr.type != MESA_IP_TYPE_IPV4 ) {
        return FALSE;
    }

    table_entry->lldpLocManAddrSubtype = ip_addr.type == MESA_IP_TYPE_IPV4 ? IANA_ADDR_IPV4 : IANA_ADDR_IPV6;
    table_entry->lldpLocManAddr_len = ip_addr.type == MESA_IP_TYPE_IPV4 ? sizeof(ip_addr.addr.ipv4) : sizeof(ip_addr.addr.ipv6);
    addr_key = htonl(ip_addr.addr.ipv4);
    memcpy(table_entry->lldpLocManAddr, &addr_key, table_entry->lldpLocManAddr_len);

    return TRUE;
}

static BOOL get_lldpConfigManAddrTableEntryKey(lldpConfigManAddrTable_entry_t *table_entry)
{
    lldpConfigManAddrTable_entry_t tmp;

    tmp.lldpLocManAddrSubtype = table_entry->lldpLocManAddrSubtype;
    tmp.lldpLocManAddr_len    = table_entry->lldpLocManAddr_len;
    memcpy(tmp.lldpLocManAddr, table_entry->lldpLocManAddr, table_entry->lldpLocManAddr_len);
    get_pre_lldpConfigManAddrTableEntryKey(&tmp);

    if ( FALSE == get_next_lldpConfigManAddrTableEntryKey(&tmp) ) {
        return FALSE;
    }

    if (tmp.lldpLocManAddrSubtype == table_entry->lldpLocManAddrSubtype && tmp.lldpLocManAddr_len == table_entry->lldpLocManAddr_len &&
        !memcmp(tmp.lldpLocManAddr, table_entry->lldpLocManAddr, table_entry->lldpLocManAddr_len)) {
        return TRUE;
    }
    return FALSE;

}

static void get_txEnablePortList_BF_size(u32 *port_count_p)
{
    dot1Port_info_t info;
    switch_iter_t   sit;

    (void)switch_iter_init(&sit, VTSS_ISID_GLOBAL, SWITCH_ITER_SORT_ORDER_ISID);
    while (switch_iter_getnext(&sit)) {
        info.isid = sit.isid;
        info.if_id = VTSS_PORT_NO_START + port_count_max() - 1;
        info.type = DOT1PORT_TYPE_PORT;
        (void) dot1Port_get_by_interface(&info);
    }

    *port_count_p = VTSS_PORTLIST_BF_SIZE(info.dot1port);

}


static void get_txEnable_portList(char *portList, u32 *portList_len)
{
    dot1Port_info_t         info;
    vtss_common_port_t      dot1port_start;
    port_iter_t             pit;

    info.isid = VTSS_ISID_START;
    info.if_id = VTSS_PORT_NO_START;
    info.type = DOT1PORT_TYPE_PORT;
    (void) dot1Port_get_by_interface(&info);
    dot1port_start = info.dot1port - VTSS_PORT_NO_START;

    CapArray<vtss_appl_lldp_port_conf_t, MEBA_CAP_BOARD_PORT_MAP_COUNT> lldp_conf;
    (void)lldp_mgmt_conf_get(&lldp_conf[0]);

    (void)port_iter_init(&pit, NULL, info.isid, PORT_ITER_SORT_ORDER_IPORT, PORT_ITER_FLAGS_NORMAL);

    while (port_iter_getnext(&pit)) {
        if (lldp_conf[pit.iport].optional_tlvs_mask & VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_ADDR_BIT) {
            VTSS_PORTLIST_BF_SET(portList, dot1port_start + pit.iport, 1);
        } else {
            VTSS_PORTLIST_BF_SET(portList, dot1port_start + pit.iport, 0);
        }
    }

    get_txEnablePortList_BF_size(portList_len);
}


static int
getfirst_lldpConfigManAddrTableEntry(lldpConfigManAddrTable_entry_t *table_entry)
{
    u32 tmpLen;
    memset(table_entry, 0, sizeof(lldpConfigManAddrTable_entry_t));
    table_entry->lldpLocManAddrSubtype = 0;
    table_entry->lldpLocManAddr_len = 0;
    if ( FALSE == get_next_lldpConfigManAddrTableEntryKey(table_entry) ) {
        return VTSS_RC_ERROR;
    }
    get_txEnable_portList(table_entry->lldpConfigManAddrPortsTxEnable, &tmpLen);
    table_entry->lldpConfigManAddrPortsTxEnable_len = tmpLen;
    return VTSS_RC_OK;
}

static int
get_lldpConfigManAddrTableEntry(lldpConfigManAddrTable_entry_t *table_entry, BOOL getnext)
{
    lldpConfigManAddrTable_entry_t tmp;
    u32 tmpLen;

    memset (&tmp, 0, sizeof(tmp));
    tmp.lldpLocManAddrSubtype = table_entry->lldpLocManAddrSubtype;
    tmp.lldpLocManAddr_len = table_entry->lldpLocManAddr_len;
    memcpy(tmp.lldpLocManAddr, table_entry->lldpLocManAddr, table_entry->lldpLocManAddr_len);

    if ( (getnext == TRUE &&  FALSE == get_next_lldpConfigManAddrTableEntryKey(&tmp)) ||
         (getnext == FALSE && FALSE == get_lldpConfigManAddrTableEntryKey(&tmp))) {
        return VTSS_RC_ERROR;
    }

    get_txEnable_portList(tmp.lldpConfigManAddrPortsTxEnable, &tmpLen);
    tmp.lldpConfigManAddrPortsTxEnable_len = tmpLen;
    memcpy(table_entry, &tmp, sizeof(tmp));
    return VTSS_RC_OK;
}

static int
parse_lldpConfigManAddrTable(oid     *name,
                             size_t  *length,
                             int     exact,
                             lldpConfigManAddrTable_entry_t *table_entry)
{
    size_t  op_pos = 9 + 2;
    oid     *op = (oid *)(name + op_pos);
    u_char  *cp = NULL;
    size_t  len = 0;

    memset(table_entry, 0, sizeof(*table_entry));

    if (exact && *length < (9 + 1 + 3)) {
        return -1;
    } else if (!exact && *length <= op_pos) {
        if (getfirst_lldpConfigManAddrTableEntry(table_entry)) {
            return -1;
        }
        return 1; /* getfirst */
    }

    if (*length > op_pos) {
        table_entry->lldpLocManAddrSubtype = (long) * op++;
        op_pos++;
    } else if (exact) {
        return -1;
    } else {
        return 0;
    }

    if (*length > op_pos) {
        len = *op++;
        len = len > sizeof(table_entry->lldpLocManAddr) ? sizeof(table_entry->lldpLocManAddr) : len;
        op_pos++;
        table_entry->lldpLocManAddr_len = len;

        T_DG(TRACE_GRP_SNMP, "table_entry->lldpLocManAddr_len = " VPRIz", len = " VPRIz, table_entry->lldpLocManAddr_len, len);
        cp = (u_char *) table_entry->lldpLocManAddr;
        while (len-- > 0) {
            if (*length > op_pos) {
                *cp++ = (u_char) * op++;
                op_pos++;
            } else if (exact) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    if (exact && *length != op_pos) {
        return -1;
    }

    return 0;
}

static int
fillobj_lldpConfigManAddrTable(oid     *name,
                               size_t  *length,
                               lldpConfigManAddrTable_entry_t *table_entry)
{
    int     name_pos = 9 + 2;
    int     len = 0, idx = 0;

    name[name_pos++] = (oid) table_entry->lldpLocManAddrSubtype;
    len = (int) table_entry->lldpLocManAddr_len;
    name[name_pos++] = (oid) table_entry->lldpLocManAddr_len;
    idx = 0;
    while (len-- > 0) {
        name[name_pos++] = (unsigned char) table_entry->lldpLocManAddr[idx++];
    }

    *length = name_pos;
    return 0;
}

/*
 * var_lldpConfigManAddrTable():
 *   Handle this table separately from the scalar value case.
 *   The workings of this are basically the same as for var_lldpConfigManAddrTable above.
 */
u_char *
var_lldpConfigManAddrTable(struct variable *vp,
                           oid     *name,
                           size_t  *length,
                           int     exact,
                           size_t  *var_len,
                           WriteMethod **write_method)
{
    int                 rc;
    oid                 newname[MAX_OID_LEN];
    size_t              newname_len;
    lldpConfigManAddrTable_entry_t table_entry;

    *write_method = NULL;
    memcpy((char *) newname, (char *) vp->name, (int) (vp->namelen * sizeof(oid)));
    newname_len = vp->namelen;

    if (memcmp(name, vp->name, sizeof(oid) * vp->namelen) != 0) {
        memcpy(name, vp->name, sizeof(oid) * vp->namelen);
        *length = vp->namelen;
    }

    if ((rc = parse_lldpConfigManAddrTable(name, length, exact, &table_entry)) < 0) {
        return NULL;
    } else if (rc > 0) { /* getfirst */
        if (fillobj_lldpConfigManAddrTable(newname, &newname_len, &table_entry)) {
            return NULL;
        }
    } else {
        do {
            if (get_lldpConfigManAddrTableEntry(&table_entry, exact ? FALSE : TRUE)) {
                return NULL;
            }
            if (fillobj_lldpConfigManAddrTable(newname, &newname_len, &table_entry)) {
                return NULL;
            }
            if (exact) {
                break;
            }
            rc = snmp_oid_compare(newname, newname_len, name, *length);
        } while (rc < 0);
    }

    /*
     * fill in object part of name for current entry
     */
    memcpy((char *) name, (char *) newname, (int) (newname_len * sizeof(oid)));
    *length = newname_len;

    /*
     * this is where we do the value assignments for the mib results.
     */
    switch (vp->magic) {
    case LLDPCONFIGMANADDRPORTSTXENABLE: {
        *write_method = write_lldpConfigManAddrPortsTxEnable;
        *var_len = table_entry.lldpConfigManAddrPortsTxEnable_len;
        memcpy(lldpConfigManAddrTable_global_ret.string_ret, table_entry.lldpConfigManAddrPortsTxEnable, *var_len);
        lldpConfigManAddrTable_global_ret.string_ret[*var_len] = '\0';
        return (u_char *) lldpConfigManAddrTable_global_ret.string_ret;
    }
    default:
        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_lldpConfigManAddrTable\n", vp->magic));
    }
    return NULL;
}

/*
 * The entry data structure for lldpRemManAddrTable
 */
typedef struct {
    /* Entry keys */
    u_long           lldpRemTimeMark;
    long           lldpRemLocalPortNum;
    long           lldpRemIndex;
    long           lldpRemManAddrSubtype;
    char             lldpRemManAddr[SNMP_ASN_OCTET_STR_MAX_LEN];
    size_t              lldpRemManAddr_len;

    /* Entry columns */
    long             lldpRemManAddrIfSubtype;
    long             lldpRemManAddrIfId;
    oid             lldpRemManAddrOID[MAX_OID_LEN];
    size_t              lldpRemManAddrOID_len;
} lldpRemManAddrTable_entry_t;

/*
 * The UCD-SNMP engine need a address point for processing get opertion
 */
/*lint -esym(459, lldpRemManAddrTable_global_ret) */ /* Process one packet at the same time, therefore unprotected access is acceptable */
static lldpManAddrTable_return_t lldpRemManAddrTable_global_ret; /* static variables for retuning */

static void get_pre_lldpRemManAddrTableEntryKey(lldpRemManAddrTable_entry_t *key)
{
    int i = 0;
    BOOL found = FALSE;
    u8 *ptr = (u8 *) key->lldpRemManAddr;
    if (key->lldpRemManAddr_len > 1) {
        for (i = key->lldpRemManAddr_len - 1; i >= 0; i-- ) {
            if (*(ptr + i) != 0x0 ) {
                --*(ptr + i);
                found = TRUE;
                break;
            } else {
                *(ptr + i) = 0xff;
            }
        }
        if ( TRUE == found) {
            return;
        }
    }

    if (key->lldpRemManAddr_len >= 1) {
        --key->lldpRemManAddr_len;
        return;
    }

    key->lldpRemManAddr_len = SNMP_ASN_OCTET_STR_MAX_LEN;

    if (key->lldpRemManAddrSubtype >= 1) {
        --key->lldpRemManAddrSubtype;
        return;
    }

    key->lldpRemManAddrSubtype = 65535;

    if (key->lldpRemIndex >= 1) {
        --key->lldpRemIndex;
        return;
    }

    key->lldpRemIndex = 0x7fffffff;

    if (key->lldpRemLocalPortNum >= 1) {
        --key->lldpRemLocalPortNum;
        return;
    }

    key->lldpRemLocalPortNum = 0x7fffffff;

    if (key->lldpRemTimeMark >= 1) {
        --key->lldpRemTimeMark;
        return;
    }

    memset(key, 0, sizeof(lldpRemManAddrTable_entry_t));
}

static int cmp_lldpRemManAddrTableEntryKey(lldpRemManAddrTable_entry_t *data, lldpRemManAddrTable_entry_t *key)
{
    int cmp;
    if (data->lldpRemTimeMark > key->lldpRemTimeMark) {
        return 1;
    } else if (data->lldpRemTimeMark < key->lldpRemTimeMark) {
        return -1;
    }

    if (data->lldpRemLocalPortNum > key->lldpRemLocalPortNum) {
        return 1;
    } else if (data->lldpRemLocalPortNum < key->lldpRemLocalPortNum) {
        return -1;
    }

    if (data->lldpRemIndex > key->lldpRemIndex) {
        return 1;
    } else if (data->lldpRemIndex < key->lldpRemIndex) {
        return -1;
    }

    if (data->lldpRemManAddrSubtype > key->lldpRemManAddrSubtype) {
        return 1;
    } else if (data->lldpRemManAddrSubtype < key->lldpRemManAddrSubtype) {
        return -1;
    }

    if (data->lldpRemManAddr_len > key->lldpRemManAddr_len) {
        return 1;
    } else if (data->lldpRemManAddr_len < key->lldpRemManAddr_len) {
        return -1;
    }

    cmp = memcmp(data->lldpRemManAddr, key->lldpRemManAddr, data->lldpRemManAddr_len);
    return cmp;
}



static BOOL get_next_lldpRemManAddrTableEntryKey(lldpRemManAddrTable_entry_t *key)
{
    int                 idx_num, tmp_idx_num = 0;
    vtss_appl_lldp_remote_entry_t *entries = NULL;
    vtss_appl_lldp_remote_entry_t entry;
    u8 mgmt_addr_index, tmp_mgmt_addr_index = 0;
    lldpRemManAddrTable_entry_t buf, tmp;
    BOOL                    found = FALSE;
    iftable_info_t           info;
    vtss_appl_lldp_cap_t cap;

    vtss_appl_lldp_cap_get(&cap);

    tmp.lldpRemTimeMark = 0xffffffff;
    tmp.lldpRemLocalPortNum = 0x7fffffff;
    tmp.lldpRemIndex = 0x7fffffff;
    tmp.lldpRemManAddrSubtype = 0x7fffffff;
    tmp.lldpRemManAddr_len = SNMP_ASN_OCTET_STR_MAX_LEN;

    vtss_appl_lldp_mutex_lock();

    entries = vtss_appl_lldp_entries_get();

    for (idx_num = 0; idx_num < cap.remote_entries_cnt; idx_num++) {
        entry = entries[idx_num];

        if (entry.in_use == 0) {
            continue;
        }

        for (mgmt_addr_index = 0; mgmt_addr_index < LLDP_MGMT_ADDR_CNT; mgmt_addr_index++) {
            info.isid = VTSS_ISID_START;
            info.if_id = entry.receive_port;
            info.type = IFTABLE_IFINDEX_TYPE_PORT;

            if (ifIndex_get_by_interface(&info) == FALSE) {
                continue;
            }

            buf.lldpRemTimeMark         = entry.time_mark;
            buf.lldpRemLocalPortNum     = info.if_id + 1;
            buf.lldpRemIndex            = entry.lldp_remote_index;
            buf.lldpRemManAddrSubtype   = entry.mgmt_addr[mgmt_addr_index].subtype;
            buf.lldpRemManAddr_len      = entry.mgmt_addr[mgmt_addr_index].length;
            memcpy(buf.lldpRemManAddr, entry.mgmt_addr[mgmt_addr_index].mgmt_address, entry.mgmt_addr[mgmt_addr_index].length);
            if (cmp_lldpRemManAddrTableEntryKey(&buf, key) <= 0 || buf.lldpRemManAddr_len != 4 ) {
                continue;
            }
            if (cmp_lldpRemManAddrTableEntryKey(&tmp, &buf ) > 0 ) {
                memcpy(&tmp, &buf, sizeof(buf));
                found = TRUE;
                tmp_idx_num = idx_num;
                tmp_mgmt_addr_index = mgmt_addr_index;
            }

        }
    }


    if ( TRUE != found ) {
        vtss_appl_lldp_mutex_unlock();
        return FALSE;
    }

    entries = vtss_appl_lldp_entries_get();
    entry = entries[tmp_idx_num];
    tmp.lldpRemManAddrIfSubtype = entry.mgmt_addr[tmp_mgmt_addr_index].if_number_subtype;
    u32 if_number = (entry.mgmt_addr[tmp_mgmt_addr_index].if_number[0] << 24) |
                    (entry.mgmt_addr[tmp_mgmt_addr_index].if_number[1] << 16) |
                    (entry.mgmt_addr[tmp_mgmt_addr_index].if_number[2] << 8) |
                    entry.mgmt_addr[tmp_mgmt_addr_index].if_number[3];
    tmp.lldpRemManAddrIfId = if_number;
    tmp.lldpRemManAddrOID_len = 2;
    memset(tmp.lldpRemManAddrOID, 0, tmp.lldpRemManAddrOID_len * sizeof(oid));
    memcpy( key, &tmp, sizeof(tmp));
    vtss_appl_lldp_mutex_unlock();
    return TRUE;
}

static BOOL get_lldpRemManAddrTableEntryKey(lldpRemManAddrTable_entry_t *key)
{
    lldpRemManAddrTable_entry_t tmp;

    tmp.lldpRemTimeMark = key->lldpRemTimeMark;
    tmp.lldpRemLocalPortNum = key->lldpRemLocalPortNum;
    tmp.lldpRemIndex = key->lldpRemIndex;
    tmp.lldpRemManAddrSubtype = key->lldpRemManAddrSubtype;
    tmp.lldpRemManAddr_len = key->lldpRemManAddr_len;
    memcpy (tmp.lldpRemManAddr, key->lldpRemManAddr, key->lldpRemManAddr_len);
    get_pre_lldpRemManAddrTableEntryKey (&tmp);

    if (  FALSE == get_next_lldpRemManAddrTableEntryKey (&tmp) ||
          cmp_lldpRemManAddrTableEntryKey (&tmp, key) != 0) {
        return FALSE;
    }

    memcpy( key, &tmp, sizeof(tmp));
    return TRUE;
}

static int
getfirst_lldpRemManAddrTableEntry(lldpRemManAddrTable_entry_t *table_entry)
{
    memset(table_entry, 0, sizeof(lldpRemManAddrTable_entry_t));
    if ( FALSE == get_next_lldpRemManAddrTableEntryKey(table_entry)) {
        return VTSS_RC_ERROR;
    }
    return VTSS_RC_OK;
}

static int
get_lldpRemManAddrTableEntry(lldpRemManAddrTable_entry_t *table_entry, BOOL getnext)
{
    if ( ( TRUE == getnext && FALSE == get_next_lldpRemManAddrTableEntryKey (table_entry)) ||
         ( FALSE == getnext && FALSE == get_lldpRemManAddrTableEntryKey (table_entry))) {
        return VTSS_RC_ERROR;
    }

    return VTSS_RC_OK;
}

static int
parse_lldpRemManAddrTable(oid     *name,
                          size_t  *length,
                          int     exact,
                          lldpRemManAddrTable_entry_t *table_entry)
{
    size_t  op_pos = 9 + 2;
    oid     *op = (oid *)(name + op_pos);
    u_char  *cp = NULL;
    size_t  len = 0;

    memset(table_entry, 0, sizeof(*table_entry));

    if (exact && *length < (9 + 1 + 6)) {
        return -1;
    } else if (!exact && *length <= op_pos) {
        if (getfirst_lldpRemManAddrTableEntry(table_entry)) {
            return -1;
        }
        return 1; /* getfirst */
    }

    if (*length > op_pos) {
        table_entry->lldpRemTimeMark = (u_long) * op++;
        op_pos++;
    } else if (exact) {
        return -1;
    } else {
        return 0;
    }
    if (*length > op_pos) {
        table_entry->lldpRemLocalPortNum = (long) * op++;
        op_pos++;
    } else if (exact) {
        return -1;
    } else {
        return 0;
    }
    if (*length > op_pos) {
        table_entry->lldpRemIndex = (long) * op++;
        op_pos++;
    } else if (exact) {
        return -1;
    } else {
        return 0;
    }
    if (*length > op_pos) {
        table_entry->lldpRemManAddrSubtype = (long) * op++;
        op_pos++;
    } else if (exact) {
        return -1;
    } else {
        return 0;
    }
    len = *op++;
    len = len > sizeof(table_entry->lldpRemManAddr) ? sizeof(table_entry->lldpRemManAddr) : len;
    op_pos++;
    table_entry->lldpRemManAddr_len = (char) len;
    cp = (u_char *) table_entry->lldpRemManAddr;
    while (len-- > 0) {
        if (*length > op_pos) {
            *cp++ = (u_char) * op++;
            op_pos++;
        } else if (exact) {
            return -1;
        } else {
            return 0;
        }
    }

    if (exact && *length != op_pos) {
        return -1;
    }

    return 0;
}

static int
fillobj_lldpRemManAddrTable(oid     *name,
                            size_t  *length,
                            lldpRemManAddrTable_entry_t *table_entry)
{
    int     name_pos = 9 + 2;
    int     len = 0, idx = 0;

    name[name_pos++] = (oid) table_entry->lldpRemTimeMark;
    name[name_pos++] = (oid) table_entry->lldpRemLocalPortNum;
    name[name_pos++] = (oid) table_entry->lldpRemIndex;
    name[name_pos++] = (oid) table_entry->lldpRemManAddrSubtype;
    len = (int) table_entry->lldpRemManAddr_len;
    name[name_pos++] = (oid) len;
    while (len-- > 0) {
        name[name_pos++] = (unsigned char) table_entry->lldpRemManAddr[idx++];
    }

    *length = name_pos;
    return 0;
}

/*
 * var_lldpRemManAddrTable():
 *   Handle this table separately from the scalar value case.
 *   The workings of this are basically the same as for var_lldpRemManAddrTable above.
 */
u_char *
var_lldpRemManAddrTable(struct variable *vp,
                        oid     *name,
                        size_t  *length,
                        int     exact,
                        size_t  *var_len,
                        WriteMethod **write_method)
{
    int                 rc;
    oid                 newname[MAX_OID_LEN];
    size_t              newname_len;
    lldpRemManAddrTable_entry_t table_entry;

    *write_method = NULL;
    memcpy((char *) newname, (char *) vp->name, (int) (vp->namelen * sizeof(oid)));
    newname_len = vp->namelen;

    if (memcmp(name, vp->name, sizeof(oid) * vp->namelen) != 0) {
        memcpy(name, vp->name, sizeof(oid) * vp->namelen);
        *length = vp->namelen;
    }

    if ((rc = parse_lldpRemManAddrTable(name, length, exact, &table_entry)) < 0) {
        return NULL;
    } else if (rc > 0) { /* getfirst */
        if (fillobj_lldpRemManAddrTable(newname, &newname_len, &table_entry)) {
            return NULL;
        }
    } else {
        do {
            if (get_lldpRemManAddrTableEntry(&table_entry, exact ? FALSE : TRUE)) {
                return NULL;
            }
            if (fillobj_lldpRemManAddrTable(newname, &newname_len, &table_entry)) {
                return NULL;
            }
            if (exact) {
                break;
            }
            rc = snmp_oid_compare(newname, newname_len, name, *length);
        } while (rc < 0);
    }

    /*
     * fill in object part of name for current entry
     */
    memcpy((char *) name, (char *) newname, (int) (newname_len * sizeof(oid)));
    *length = newname_len;

    /*
     * this is where we do the value assignments for the mib results.
     */
    switch (vp->magic) {
    case LLDPREMMANADDRIFSUBTYPE: {
        lldpRemManAddrTable_global_ret.long_ret = table_entry.lldpRemManAddrIfSubtype;
        *var_len = sizeof(lldpRemManAddrTable_global_ret.long_ret);
        return (u_char *) &lldpRemManAddrTable_global_ret.long_ret;
    }
    case LLDPREMMANADDRIFID: {
        lldpRemManAddrTable_global_ret.long_ret = table_entry.lldpRemManAddrIfId;
        *var_len = sizeof(lldpRemManAddrTable_global_ret.long_ret);
        return (u_char *) &lldpRemManAddrTable_global_ret.long_ret;
    }
    case LLDPREMMANADDROID: {
        memcpy(lldpRemManAddrTable_global_ret.objid_ret, table_entry.lldpRemManAddrOID, table_entry.lldpRemManAddrOID_len * sizeof(oid));
        *var_len = table_entry.lldpRemManAddrOID_len * sizeof(oid);
        return (u_char *) lldpRemManAddrTable_global_ret.objid_ret;
    }
    default:
        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_lldpRemManAddrTable\n", vp->magic));
    }
    return NULL;
}

/*
* var_lldpStatsRxPortTable():
*   Handle this table separately from the scalar value case.
*   The workings of this are basically the same as for var_lldpConfiguration above.
*/
u_char         *
var_lldpStatsRxPortTable(struct variable *vp,
                         oid *name,
                         size_t *length,
                         int exact,
                         size_t *var_len, WriteMethod **write_method)
{
    static long VAR;

    // Determine if the table indexes are in use
    if (header_loc_port_num_table(vp, name, length, exact, var_len, write_method) != VTSS_RC_OK) {
        return NULL;
    }

    /*
    Get the stat counters
    */
    vtss_appl_lldp_port_counters_t statistics;
    vtss_ifindex_t ifindex;

    if (vtss_ifindex_from_port(table_info.isid, PORT_INDEX, &ifindex) != VTSS_RC_OK) {
        T_E("Could not get ifindex");
    }

    if (vtss_appl_lldp_stat_if_get(ifindex, &statistics) != VTSS_RC_OK) {
        T_WG(TRACE_GRP_SNMP, "Problem getting statistic counters");
    }

    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPSTATSRXPORTNUM: {
        return NULL;
    }
    case LLDPSTATSRXPORTFRAMESDISCARDEDTOTAL: {
        VAR = statistics.statsFramesDiscardedTotal;
        return (u_char *) & VAR;
    }
    case LLDPSTATSRXPORTFRAMESERRORS: {
        VAR = statistics.statsFramesInErrorsTotal        ;
        return (u_char *) & VAR;
    }
    case LLDPSTATSRXPORTFRAMESTOTAL: {
        VAR = statistics.statsFramesInTotal;
        return (u_char *) & VAR;
    }
    case LLDPSTATSRXPORTTLVSDISCARDEDTOTAL: {
        VAR = statistics.statsTLVsDiscardedTotal              ;
        return (u_char *) & VAR;
    }
    case LLDPSTATSRXPORTTLVSUNRECOGNIZEDTOTAL: {
        VAR = statistics.statsTLVsUnrecognizedTotal                 ;
        return (u_char *) & VAR;
    }
    case LLDPSTATSRXPORTAGEOUTSTOTAL: {
        VAR = statistics.statsAgeoutsTotal       ;
        return (u_char *) & VAR;
    }
    default:
        DEBUGMSGTL(("snmpd",
                    "unknown sub-id %d in var_lldpStatsRxPortTable\n",
                    vp->magic));
    }
    return NULL;
}


int write_lldpMessageTxInterval(int action,
                                u_char *var_val,
                                u_char var_val_type,
                                size_t var_val_len,
                                u_char *statP, oid *name, size_t name_len)
{
    static int      buf = 30;
    static int      old_buf = 30;
    size_t          max_size = sizeof(int);
    long            intval = *((int *) var_val);
    vtss_appl_lldp_common_conf_t  lldp_conf;

    T_DG(TRACE_GRP_SNMP, "TX interval Enter action = %d", action);
    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_INTEGER) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpMessageTxInterval: not ASN_INTEGER\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpMessageTxInterval: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (intval < 5 || intval > 32768) {
            T_DG(TRACE_GRP_SNMP, "TX interval Wrong Value");
            (void) snmp_log(LOG_ERR,
                            "write to lldpMessageTxInterval: bad value\n");
            return SNMP_ERR_WRONGVALUE;
        }
        T_DG(TRACE_GRP_SNMP, "TX interval Reserve1");
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        T_DG(TRACE_GRP_SNMP, "TX interval Reserve2");
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        T_DG(TRACE_GRP_SNMP, "TX interval Free");
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        buf = *((int *) var_val);

        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.msgTxInterval = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        T_DG(TRACE_GRP_SNMP, "TX interval Action");
        break;
    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        buf = old_buf;
        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.msgTxInterval = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_UNDOFAILED;
        }

        T_DG(TRACE_GRP_SNMP, "TX interval UNDO");
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    default:
        T_DG(TRACE_GRP_SNMP, "TX interval default");

    }
    T_DG(TRACE_GRP_SNMP, "Return OK");
    return SNMP_ERR_NOERROR;
}

int
write_lldpNotificationInterval(int action,
                               u_char *var_val,
                               u_char var_val_type,
                               size_t var_val_len,
                               u_char *statP, oid *name, size_t name_len)
{
    static int           buf = 5, old_buf = 5;
    size_t          max_size = sizeof(long);
    long            intval;


    intval = *((long *) var_val);

    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_INTEGER) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpNotificationInterval: not ASN_INTEGER\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpNotificationInterval: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (intval < 5 || intval > 3600) {   /* Interval defined by IEEE 802.1ab */
            (void) snmp_log(LOG_ERR,
                            "write to lldpNotificationInterval: bad value\n");
            return SNMP_ERR_WRONGVALUE;
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        buf = *((int *) var_val);


        if (lldp_mgmt_set_notification_interval(buf) != VTSS_RC_OK) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        break;
    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        buf = old_buf;
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}


int
write_lldpMessageTxHoldMultiplier(int action,
                                  u_char *var_val,
                                  u_char var_val_type,
                                  size_t var_val_len,
                                  u_char *statP,
                                  oid *name, size_t name_len)
{
    static int buf = 2, old_buf = 2;
    size_t            max_size = sizeof(int);
    long              intval;
    vtss_appl_lldp_common_conf_t  lldp_conf;

    intval = *((char *) var_val);

    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_INTEGER) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpMessageTxHoldMultiplier: not ASN_INTEGER\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpMessageTxHoldMultiplier: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (intval < 2 || intval > 10) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpMessageTxHoldMultiplier: bad value\n");
            return SNMP_ERR_WRONGVALUE;
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        buf = *((char *) var_val);
        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.msgTxHold = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        break;

    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        buf = old_buf;
        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.msgTxHold = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_UNDOFAILED;
        }

        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}

int
write_lldpTxDelay(int action,
                  u_char *var_val,
                  u_char var_val_type,
                  size_t var_val_len,
                  u_char *statP, oid *name, size_t name_len)
{
    static int      buf = VTSS_APPL_LLDP_TX_DELAY_DEFAULT, old_buf = VTSS_APPL_LLDP_TX_DELAY_DEFAULT;
    size_t          max_size = sizeof(int);
    long            intval;
    vtss_appl_lldp_common_conf_t   lldp_conf;

    intval = *((int *) var_val);

    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_INTEGER) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpTxDelay: not ASN_INTEGER\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR, "write to lldpTxDelay: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (intval < VTSS_APPL_LLDP_TX_DELAY_MIN || intval > VTSS_APPL_LLDP_TX_DELAY_MAX) {
            (void) snmp_log(LOG_ERR, "write to lldpTxDelay: bad value - Minimum = %d\n", VTSS_APPL_LLDP_TX_DELAY_MIN);
            return SNMP_ERR_WRONGVALUE;
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        buf = *((int *) var_val);
        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.txDelay = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        break;
    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        buf = old_buf;
        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.txDelay = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_UNDOFAILED;
        }
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}

int
write_lldpReinitDelay(int action,
                      u_char *var_val,
                      u_char var_val_type,
                      size_t var_val_len,
                      u_char *statP, oid *name, size_t name_len)
{
    static char     buf = 2, old_buf = 2;
    size_t          max_size = sizeof(int);
    long            intval;
    vtss_appl_lldp_common_conf_t  lldp_conf;

    intval = *((char *) var_val);

    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_INTEGER) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpReinitDelay: not ASN_INTEGER\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpReinitDelay: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (intval < 1 || intval > 10) {
            (void) snmp_log(LOG_ERR, "write to lldpReinitDelay: bad value\n");
            return SNMP_ERR_WRONGVALUE;
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */

        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        buf = *((char *) var_val);
        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.reInitDelay = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        break;
    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        buf = old_buf;
        vtss_appl_lldp_common_conf_get(&lldp_conf);
        lldp_conf.tx_sm.reInitDelay = buf;
        if (vtss_appl_lldp_common_conf_set(&lldp_conf) != VTSS_RC_OK) {
            return SNMP_ERR_UNDOFAILED;
        }
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}

int
write_lldpPortConfigAdminStatus(int action,
                                u_char *var_val,
                                u_char var_val_type,
                                size_t var_val_len,
                                u_char *statP,
                                oid *name, size_t name_len)
{
    static char    buf = 1, old_buf = 1;
    size_t          max_size = sizeof(int);
    long            intval;


    intval = *((char *) var_val);


    T_NG(TRACE_GRP_SNMP, "entering write_lldpPortConfigAdminStatus");

    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_INTEGER) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigAdminStatus: not ASN_INTEGER\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigAdminStatus: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (intval < 1 || intval > 4) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigAdminStatus: bad value\n");
            return SNMP_ERR_WRONGVALUE;
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        CapArray<vtss_appl_lldp_port_conf_t, MEBA_CAP_BOARD_PORT_MAP_COUNT> lldp_conf;
        if (table_info.isid != VTSS_ISID_START) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        (void)lldp_mgmt_conf_get(&lldp_conf[0]);

        buf = *((char *) var_val);

        switch (buf) {

        case 4 :
            lldp_conf[PORT_INDEX].admin_states = VTSS_APPL_LLDP_DISABLED;
            break;
        case 2 :
            lldp_conf[PORT_INDEX].admin_states = VTSS_APPL_LLDP_ENABLED_RX_ONLY;
            break;
        case 1 :
            lldp_conf[PORT_INDEX].admin_states = VTSS_APPL_LLDP_ENABLED_TX_ONLY;
            break;
        default: //LLDP_ENABLED_RX_TX
            lldp_conf[PORT_INDEX].admin_states = VTSS_APPL_LLDP_ENABLED_RX_TX;
            break;
        }

        if (lldp_mgmt_conf_set(&lldp_conf[0]) != VTSS_RC_OK) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        break;

    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        buf = old_buf;
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}

int
write_lldpPortConfigNotificationEnable(int action,
                                       u_char *var_val,
                                       u_char var_val_type,
                                       size_t var_val_len,
                                       u_char *statP,
                                       oid *name, size_t name_len)
{
    static long     buf = 1, old_buf = 1;
    size_t          max_size = sizeof(long);
    long            intval;

    intval = *((long *) var_val);

    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_INTEGER) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigNotificationEnable: not ASN_INTEGER\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigNotificationEnable: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (intval != 1 && intval != 2) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigNotificationEnable: bad value\n");
            return SNMP_ERR_WRONGVALUE;
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        buf = *((long *) var_val);

        if ((table_info.isid != VTSS_ISID_START) || (lldp_mgmt_set_notification_ena(buf, PORT_INDEX) != VTSS_RC_OK)) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        break;
    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        buf = old_buf;
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}

int
write_lldpPortConfigTLVsTxEnable(int action,
                                 u_char *var_val,
                                 u_char var_val_type,
                                 size_t var_val_len,
                                 u_char *statP,
                                 oid *name, size_t name_len)
{
    static u_char               buf, old_buf;
    size_t                      max_size = (4 + 7) / 8; /* 4 TLV_OPTIONs */
    CapArray<vtss_appl_lldp_port_conf_t, MEBA_CAP_BOARD_PORT_MAP_COUNT> lldp_conf;

    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_OCTET_STR) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigTLVsTxEnable: not ASN_OCTET_STR\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            T_DG(TRACE_GRP_SNMP, "var_val_len = %d", (char)var_val_len);
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigTLVsTxEnable: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (*var_val & 0xF) {
            T_DG(TRACE_GRP_SNMP, "var_val = %u", *var_val);
            (void) snmp_log(LOG_ERR,
                            "write to lldpPortConfigTLVsTxEnable: bad value\n");
            return SNMP_ERR_WRONGVALUE;
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;

    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        // Get current configuration
        if (table_info.isid != VTSS_ISID_START) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }
        (void)lldp_mgmt_conf_get(&lldp_conf[0]);

        T_DG_PORT(TRACE_GRP_SNMP, (u32) PORT_INDEX, "write_lldpPortConfigTLVsTxEnable Action%s", "");
        buf = *var_val;

        // Update with new configuration
        T_DG_PORT(TRACE_GRP_SNMP, (u32) PORT_INDEX, "write_lldpPortConfigTLVsTxEnable ACTION - buf = 0x%X,table_info.isid = %d",
                  buf, table_info.isid);

        if (buf & 0x80) {
            lldp_conf[PORT_INDEX].optional_tlvs_mask |= VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_PORT_DESCR_BIT;
        } else {
            lldp_conf[PORT_INDEX].optional_tlvs_mask &= ~VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_PORT_DESCR_BIT;
        }

        if (buf & 0x40) {
            lldp_conf[PORT_INDEX].optional_tlvs_mask |= VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_NAME_BIT;
        } else {
            lldp_conf[PORT_INDEX].optional_tlvs_mask &= ~VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_NAME_BIT;
        }

        if (buf & 0x20) {
            lldp_conf[PORT_INDEX].optional_tlvs_mask |= VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_DESCR_BIT;
        } else {
            lldp_conf[PORT_INDEX].optional_tlvs_mask &= ~VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_DESCR_BIT;
        }

        if (buf & 0x10) {
            lldp_conf[PORT_INDEX].optional_tlvs_mask |= VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_CAPA_BIT;
        } else {
            lldp_conf[PORT_INDEX].optional_tlvs_mask &= ~VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_SYSTEM_CAPA_BIT;
        }

        if (lldp_mgmt_conf_set(&lldp_conf[0]) != VTSS_RC_OK) {
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }

        break;
    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        T_DG_PORT(TRACE_GRP_SNMP, (u32) PORT_INDEX, "write_lldpPortConfigTLVsTxEnable Undo%s", "");
        buf = old_buf;
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        old_buf = buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}

int
write_lldpConfigManAddrPortsTxEnable(int action,
                                     u_char *var_val,
                                     u_char var_val_type,
                                     size_t var_val_len,
                                     u_char *statP,
                                     oid *name, size_t name_len)
{
    static u_char buf[VTSS_MAX_PORTS_LEGACY_CONSTANT_USE_CAPARRAY_INSTEAD / 8];
    static u_char old_buf[VTSS_MAX_PORTS_LEGACY_CONSTANT_USE_CAPARRAY_INSTEAD / 8];
    size_t                      max_size = (fast_cap(MEBA_CAP_BOARD_PORT_MAP_COUNT) + 7) / 8;
    u_char                      bit_left = fast_cap(MEBA_CAP_BOARD_PORT_MAP_COUNT) % 8;
    CapArray<vtss_appl_lldp_port_conf_t, MEBA_CAP_BOARD_PORT_MAP_COUNT> lldp_conf;

    T_NG(TRACE_GRP_SNMP, "var_val_len  =%zu,var_val_type =%d", var_val_len, var_val_type);
    switch (action) {
    case RESERVE1: {
        if (var_val_type != ASN_OCTET_STR) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpConfigManAddrPortsTxEnable: not ASN_OCTET_STR\n");
            return SNMP_ERR_WRONGTYPE;
        }
        if (var_val_len > max_size) {
            (void) snmp_log(LOG_ERR,
                            "write to lldpConfigManAddrPortsTxEnable: bad length\n");
            return SNMP_ERR_WRONGLENGTH;
        }
        if (var_val_len == max_size && bit_left > 0) {
            if ((var_val[var_val_len - 1] << bit_left) & 0xFF) {
                T_DG(TRACE_GRP_SNMP, "var_val[LAST] = %u", var_val[var_val_len - 1]);
                (void) snmp_log(LOG_ERR,
                                "write to lldpConfigManAddrPortsTxEnable: bad value\n");
                return SNMP_ERR_WRONGVALUE;
            }
        }
        break;
    }
    case RESERVE2: {
        /*
        * Allocate memory and similar resources
        */
        break;
    }
    case FREE: {
        /*
        * Release any resources that have been allocated
        */
        break;
    }
    case ACTION: {
        /*
        * The variable has been stored in 'value' for you to use,
        * and you have just been asked to do something with it.
        * Note that anything done here must be reversable in the UNDO case
        */
        /*
        * Save to current configuration
        */
        vtss_isid_t     isid = VTSS_ISID_START;
        u_char          bit_pos;
        port_iter_t     pit;
        mesa_port_no_t  idx, port_idx;

        if (var_val_len > max_size) {
            T_NG(TRACE_GRP_SNMP, "Set length error: %zd", var_val_len);
            return SNMP_ERR_RESOURCEUNAVAILABLE;
        }

        memset(buf, 0x0, max_size);
        memcpy(buf, var_val, var_val_len);

        if (msg_switch_exists(isid) && lldp_mgmt_conf_get(&lldp_conf[0]) == VTSS_RC_OK) {
            idx = 0;
            bit_pos = 0;
            (void)port_iter_init(&pit, NULL, isid, PORT_ITER_SORT_ORDER_IPORT, PORT_ITER_FLAGS_NORMAL);
            while (port_iter_getnext(&pit)) {
                port_idx = pit.iport;
                T_NG(TRACE_GRP_SNMP, "Setting mgmt addr - bit %d, buf[port_idx(%d)/8] = %d", idx, port_idx, buf[idx / 8]);
                if (((buf[idx / 8] << bit_pos) & 0x80) == 0) {
                    lldp_conf[port_idx].optional_tlvs_mask &= ~VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_ADDR_BIT;
                } else {
                    lldp_conf[port_idx].optional_tlvs_mask |= VTSS_APPL_LLDP_TLV_OPTIONAL_MGMT_ADDR_BIT;
                }

                ++idx;
                if (++bit_pos == 8) {
                    bit_pos = 0;
                }
            }

            if (lldp_mgmt_conf_set(&lldp_conf[0]) != VTSS_RC_OK) {
                T_NG(TRACE_GRP_SNMP, "Set error");
                return SNMP_ERR_RESOURCEUNAVAILABLE;
            }
        }
        break;
    }
    case UNDO: {
        /*
        * Back out any changes made in the ACTION case
        */
        /*
        * Restore current configuration form old configuration
        */
        *buf = *old_buf;
        break;
    }
    case COMMIT: {
        /*
        * Things are working well, so it's now safe to make the change
        * permanently.  Make sure that anything done here can't fail!
        */
        /*
        * Update old configuration
        */
        *old_buf = *buf;
        break;
    }
    }
    return SNMP_ERR_NOERROR;
}

/*
* var_lldpStatistics():
*   This function is called every time the agent gets a request for
*   a scalar variable that might be found within your mib section
*   registered above.  It is up to you to do the right thing and
*   return the correct value.
*     You should also correct the value of "var_len" if necessary.
*
*   Please see the documentation for more information about writing
*   module extensions, and check out the examples in the examples
*   and mibII directories.
*/
u_char         *
var_lldpStatistics(struct variable *vp,
                   oid *name,
                   size_t *length,
                   int exact,
                   size_t *var_len, WriteMethod **write_method)
{

    static long VAR;
    int             idx_num;

    /*
    * This assumes that the table is a 'simple' table.
    *  See the implementation documentation for the meaning of this.
    *  You will need to provide the correct value for the TABLE_SIZE parameter
    *
    * If this table does not meet the requirements for a simple table,
    *  you will need to provide the replacement code yourself.
    *  Mib2c is not smart enough to write this for you.
    *    Again, see the implementation documentation for what is required.
    */

    if (header_generic(vp, name, length, exact, var_len, write_method)
        == MATCH_FAILED) {
        return NULL;
    }


    idx_num = name[(*length) - 1];

    /*
    * Save this one as the "next one"
    */
    name[(*length) - 1] = idx_num;


    // Get the statistics
    vtss_appl_lldp_global_counters_t global_stat;
    if (vtss_appl_lldp_stat_global_get(&global_stat) != VTSS_RC_OK) {
        T_E("Could not get statistics");
        VAR = 100; // We need to give the time in hundredths of a sec.
        return (u_char *) & VAR;
    }

    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPSTATSREMTABLESLASTCHANGETIME: {
        VAR = global_stat.last_change_ago * 100; // We need to give the time in hundredths of a sec.
        return (u_char *) & VAR;
    }
    case LLDPSTATSREMTABLESDELETES: {
        VAR = global_stat.table_deletes;
        return (u_char *) & VAR;
    }
    case LLDPSTATSREMTABLESDROPS: {
        VAR = global_stat.table_drops;
        return (u_char *) & VAR;
    }
    case LLDPSTATSREMTABLESINSERTS: {
        VAR = global_stat.table_inserts;
        return (u_char *) & VAR;
    }
    case LLDPSTATSREMTABLESAGEOUTS: {
        VAR = global_stat.table_ageouts;
        return (u_char *) & VAR;
    }
    default:
        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_lldpStatistics\n",
                    vp->magic));
    }
    return NULL;
}

/*
* var_lldpLocalSystemData():
*   This function is called every time the agent gets a request for
*   a scalar variable that might be found within your mib section
*   registered above.  It is up to you to do the right thing and
*   return the correct value.
*     You should also correct the value of "var_len" if necessary.
*
*   Please see the documentation for more information about writing
*   module extensions, and check out the examples in the examples
*   and mibII directories.
*/
u_char         *
var_lldpLocalSystemData(struct variable *vp,
                        oid *name,
                        size_t *length,
                        int exact,
                        size_t *var_len, WriteMethod **write_method)
{
    static long VAR;
    static char     VAR_STR[255];
    T_NG(TRACE_GRP_SNMP, "entering var_lldpLocalSystemData");

    if (header_generic(vp, name, length, exact, var_len, write_method)
        == MATCH_FAILED) {
        return NULL;
    }

    /*
    * this is where we do the value assignments for the mib results.
    */
    switch (vp->magic) {
    case LLDPLOCSYSDESC: {
        char sys_desc[VTSS_APPL_MAX_SYSTEM_DESCR_LENGTH] = "";
        lldp_tlv_get_system_descr(&sys_desc[0]);
        misc_strncpyz(VAR_STR, &sys_desc[0], 255);

        T_DG(TRACE_GRP_SNMP, "Getting local system description : %s", VAR_STR);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;
    }
    case LLDPLOCCHASSISIDSUBTYPE:

    {
        VAR = lldp_tlv_get_chassis_id_subtype();
        T_DG(TRACE_GRP_SNMP, "Getting Chassis ID subtype, %lu", VAR);
        return (u_char *) & VAR;
    }
    case LLDPLOCSYSCAPSUPPORTED: {
        VAR_STR[0] =  BITS_type_swapbyte(lldp_tlv_get_system_capabilities());
        *var_len = 1;
        return (u_char *) VAR_STR;
    }
    case LLDPLOCSYSCAPENABLED: {
        VAR_STR[0] = BITS_type_swapbyte(lldp_tlv_get_system_capabilities_ena());
        *var_len = 1;
        return (u_char *) VAR_STR;
    }
    case LLDPLOCSYSNAME: {
        char sys_name[VTSS_APPL_MAX_SYSTEM_NAME_LENGTH] = "";
        lldp_tlv_get_system_name(&sys_name[0]);
        strcpy(VAR_STR, &sys_name[0]);

        T_DG(TRACE_GRP_SNMP, "Getting local system name : %s", VAR_STR);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;
    }
    case LLDPLOCCHASSISID: {

        // Get the MAC address
        vtss_common_macaddr_t mac_addr;
        vtss_os_get_systemmac(&mac_addr);
        // Type conversion.
        char mac_addr_ptr[VTSS_COMMON_MACADDR_SIZE] = "";
        memcpy(&mac_addr_ptr[0], mac_addr.macaddr, VTSS_COMMON_MACADDR_SIZE);
        mac_addr2str(&mac_addr_ptr[0], &VAR_STR[0]);


        // Return MAC address as string
        T_DG(TRACE_GRP_SNMP, "Getting local chassis ID : %s", VAR_STR);
        *var_len = strlen(VAR_STR);
        return (u_char *) VAR_STR;
    }
    default:
        DEBUGMSGTL(("snmpd", "unknown sub-id %d in var_lldpLocalSystemData\n",
                    vp->magic));
    }
    return NULL;

}



// LLDP notification Trap - Must be called when ever a entry is modified.
void snmpLLDPNotificationChange(vtss_isid_t isid, int port_index, vtss_appl_lldp_global_counters_t *stat, int notification_interval )
{

    // Variable for storing when the last notification trap was transmitted
    static int last_notification_change_time = 0;
    struct variable_list *top = NULL;
    iftable_info_t info;
    // Set the notification OID
    oid  lldp_notifications_oid[] = {1, 0, 8802, 1, 1, 2, 0, 0, 1};
    oid  ifIndex_oid[] = {1, 3, 6, 1, 2, 1, 2, 2, 1, 1, 0};
#if !defined(REMOVE_STATS_IN_TRAP_BINDING_VAR)
    u32 tmp;
    oid  inserts_oid[] = {1, 0, 8802, 1, 1, 2, 1, 2, 2};
    oid  deletes_oid[] = {1, 0, 8802, 1, 1, 2, 1, 2, 3};
    oid  drops_oid[]   = {1, 0, 8802, 1, 1, 2, 1, 2, 4};
    oid  ageouts_oid[] = {1, 0, 8802, 1, 1, 2, 1, 2, 5};
#endif /*   REMOVE_STATS_IN_TRAP_BINDING_VAR    */

    snmp_vars_trap_entry_t  trap_entry;

    T_DG(TRACE_GRP_SNMP, "Notification Change called for isid = %d, port = %d", isid, port_index);

    // Check is the trap shall be throttled.
    if (msg_uptime_get(VTSS_ISID_LOCAL) - last_notification_change_time > notification_interval ) {

        // Check if notfication for the port the has has changed is enabled
        T_DG(TRACE_GRP_SNMP, "Notification for port was enabled");

        info.type = IFTABLE_IFINDEX_TYPE_PORT;
        info.isid = isid;
        info.if_id = port_index;
        ( void ) ifIndex_get_by_interface(&info);
        ifIndex_oid[OID_LENGTH(ifIndex_oid) - 1] =  info.ifIndex;
        // Transmit the SNMP trap
        memset(&trap_entry, 0x0, sizeof(trap_entry));
        strncpy(trap_entry.name, TRAP_NAME_LLDP_REM_TBL_CHNG, TRAP_MAX_TABLE_NAME_LEN);
        trap_entry.oid_len = OID_LENGTH(lldp_notifications_oid);

        memcpy(trap_entry.oid, lldp_notifications_oid, sizeof(oid) * trap_entry.oid_len);

#if !defined(REMOVE_STATS_IN_TRAP_BINDING_VAR)
        tmp = stat->table_ageouts;
        top = snmp_bind_var(top, &tmp, ASN_GAUGE, sizeof(u_int),
                            ageouts_oid, OID_LENGTH(ageouts_oid));

        tmp = stat->table_drops;
        top = snmp_bind_var(top, &tmp, ASN_GAUGE, sizeof(u_int),
                            drops_oid, OID_LENGTH(drops_oid));

        tmp = stat->table_deletes;
        top = snmp_bind_var(top, &tmp, ASN_GAUGE, sizeof(u_int),
                            deletes_oid, OID_LENGTH(deletes_oid));

        tmp = stat->table_inserts;
        top = snmp_bind_var(top, &tmp, ASN_GAUGE, sizeof(u_int),
                            inserts_oid, OID_LENGTH(inserts_oid));
#endif /*   REMOVE_STATS_IN_TRAP_BINDING_VAR    */

        trap_entry.vars = top;
        snmp_send_vars_trap(&trap_entry);

        // Store the time that this SNMP trap was transmitted.
        last_notification_change_time = msg_uptime_get(VTSS_ISID_LOCAL);

    }
}

#endif /* DOT1AB_SUPPORTED_LLDPOBJECTS */
