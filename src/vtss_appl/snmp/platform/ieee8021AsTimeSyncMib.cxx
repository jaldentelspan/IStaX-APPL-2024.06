/*
 Copyright (c) 2006-2021 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
*/

/*
 Microchip is aware that some terminology used in this technical document is
 antiquated and inappropriate. As a result of the complex nature of software
 where seemingly simple changes have unpredictable, and often far-reaching
 negative results on the software's functionality (requiring extensive retesting
 and revalidation) we are unable to make the desired changes in all legacy
 systems without compromising our product or our clients' products.
*/

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40
//       Revise the "FIXME" parts to make it as a completed code.

#include <main.h>

#include "vtss_os_wrapper_snmp.h"
#include "vtss_snmp_api.h"
#include "ieee8021AsTimeSyncMib.h"
#include "ucd_snmp_ieee8021AsTimeSyncMib.h"
#include "mibContextTable.h" // mibContextTable_register()
#include "snmp_mib_redefine.h"  // snmp_mib_redefine_register()
#include <vtss_module_id.h>
#include <vtss_trace_lvl_api.h>

#include "vtss/appl/ptp.h"

// Trace module ID
#define VTSS_TRACE_MODULE_ID    VTSS_MODULE_ID_SNMP

/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-AS-MIB:ieee8021AsTimeSyncMib.
  **/
void ieee8021AsTimeSyncMib_init(void)
{
    T_D("enter");
    ucd_snmp_init_ieee8021AsTimeSyncMib();

    /* Register mibContextTable */
    oid ieee8021AsTimeSyncMib_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20 };
    mibContextTable_register(ieee8021AsTimeSyncMib_variables_oid,
                             sizeof(ieee8021AsTimeSyncMib_variables_oid) / sizeof(oid),
                             "IEEE8021-AS-MIB : ieee8021AsTimeSyncMib");

    /* Register snmpMibRedefineTable */

    // ieee8021AsDefaultDSClockIdentity
    oid ieee8021AsDefaultDSClockIdentity_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 1 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSClockIdentity_variables_oid,
                               sizeof(ieee8021AsDefaultDSClockIdentity_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSClockIdentity",
                               "ClockIdentity",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{8 8}");

    // ieee8021AsDefaultDSNumberPorts
    oid ieee8021AsDefaultDSNumberPorts_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 2 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSNumberPorts_variables_oid,
                               sizeof(ieee8021AsDefaultDSNumberPorts_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSNumberPorts",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 255}");

    // ieee8021AsDefaultDSClockClass
    oid ieee8021AsDefaultDSClockClass_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 3 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSClockClass_variables_oid,
                               sizeof(ieee8021AsDefaultDSClockClass_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSClockClass",
                               "IEEE8021ASClockClassValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{6 primarySync} \
{7 primarySyncLost} \
{13 applicationSpecificSync} \
{14 applicationSpecficSyncLost} \
{52 primarySyncAlternativeA} \
{58 applicationSpecificAlternativeA} \
{187 primarySyncAlternativeB} \
{193 applicationSpecficAlternativeB} \
{248 defaultClock} \
{255 slaveOnlyClock} \
");

    // ieee8021AsDefaultDSClockAccuracy
    oid ieee8021AsDefaultDSClockAccuracy_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 4 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSClockAccuracy_variables_oid,
                               sizeof(ieee8021AsDefaultDSClockAccuracy_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSClockAccuracy",
                               "IEEE8021ASClockAccuracyValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{32 timeAccurateTo25ns} \
{33 timeAccurateTo100ns} \
{34 timeAccurateTo250ns} \
{35 timeAccurateTo1us} \
{36 timeAccurateTo2dot5us} \
{37 timeAccurateTo10us} \
{38 timeAccurateTo25us} \
{39 timeAccurateTo100us} \
{40 timeAccurateTo250us} \
{41 timeAccurateTo1ms} \
{42 timeAccurateTo2dot5ms} \
{43 timeAccurateTo10ms} \
{44 timeAccurateTo25ms} \
{45 timeAccurateTo100ms} \
{46 timeAccurateTo250ms} \
{47 timeAccurateTo1s} \
{48 timeAccurateTo10s} \
{49 timeAccurateToGT10s} \
{254 timeAccurateToUnknown} \
");

    // ieee8021AsDefaultDSOffsetScaledLogVariance
    oid ieee8021AsDefaultDSOffsetScaledLogVariance_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 5 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSOffsetScaledLogVariance_variables_oid,
                               sizeof(ieee8021AsDefaultDSOffsetScaledLogVariance_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSOffsetScaledLogVariance",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsDefaultDSPriority1
    oid ieee8021AsDefaultDSPriority1_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 6 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSPriority1_variables_oid,
                               sizeof(ieee8021AsDefaultDSPriority1_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSPriority1",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 255}");

    // ieee8021AsDefaultDSPriority2
    oid ieee8021AsDefaultDSPriority2_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 7 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSPriority2_variables_oid,
                               sizeof(ieee8021AsDefaultDSPriority2_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSPriority2",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 255}");

    // ieee8021AsDefaultDSGmCapable
    oid ieee8021AsDefaultDSGmCapable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 8 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSGmCapable_variables_oid,
                               sizeof(ieee8021AsDefaultDSGmCapable_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSGmCapable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsDefaultDSCurrentUTCOffset
    oid ieee8021AsDefaultDSCurrentUTCOffset_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 9 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSCurrentUTCOffset_variables_oid,
                               sizeof(ieee8021AsDefaultDSCurrentUTCOffset_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSCurrentUTCOffset",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{-32768 32767}");

    // ieee8021AsDefaultDSCurrentUTCOffsetValid
    oid ieee8021AsDefaultDSCurrentUTCOffsetValid_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 10 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSCurrentUTCOffsetValid_variables_oid,
                               sizeof(ieee8021AsDefaultDSCurrentUTCOffsetValid_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSCurrentUTCOffsetValid",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsDefaultDSLeap59
    oid ieee8021AsDefaultDSLeap59_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 11 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSLeap59_variables_oid,
                               sizeof(ieee8021AsDefaultDSLeap59_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSLeap59",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsDefaultDSLeap61
    oid ieee8021AsDefaultDSLeap61_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 12 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSLeap61_variables_oid,
                               sizeof(ieee8021AsDefaultDSLeap61_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSLeap61",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsDefaultDSTimeTraceable
    oid ieee8021AsDefaultDSTimeTraceable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 13 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSTimeTraceable_variables_oid,
                               sizeof(ieee8021AsDefaultDSTimeTraceable_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSTimeTraceable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsDefaultDSFrequencyTraceable
    oid ieee8021AsDefaultDSFrequencyTraceable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 14 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSFrequencyTraceable_variables_oid,
                               sizeof(ieee8021AsDefaultDSFrequencyTraceable_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSFrequencyTraceable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsDefaultDSTimeSource
    oid ieee8021AsDefaultDSTimeSource_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 1, 15 };
    snmp_mib_redefine_register(ieee8021AsDefaultDSTimeSource_variables_oid,
                               sizeof(ieee8021AsDefaultDSTimeSource_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsDefaultDSTimeSource",
                               "IEEE8021ASTimeSourceValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{16 atomicClock} \
{32 gps} \
{48 terrestrialRadio} \
{64 ptp} \
{80 ntp} \
{96 handSet} \
{144 other} \
{160 internalOscillator} \
");

    // ieee8021AsCurrentDSStepsRemoved
    oid ieee8021AsCurrentDSStepsRemoved_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 1 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSStepsRemoved_variables_oid,
                               sizeof(ieee8021AsCurrentDSStepsRemoved_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSStepsRemoved",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{-32768 32767}");

    // ieee8021AsCurrentDSOffsetFromMasterHs
    oid ieee8021AsCurrentDSOffsetFromMasterHs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 2 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSOffsetFromMasterHs_variables_oid,
                               sizeof(ieee8021AsCurrentDSOffsetFromMasterHs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSOffsetFromMasterHs",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSOffsetFromMasterMs
    oid ieee8021AsCurrentDSOffsetFromMasterMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 3 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSOffsetFromMasterMs_variables_oid,
                               sizeof(ieee8021AsCurrentDSOffsetFromMasterMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSOffsetFromMasterMs",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSOffsetFromMasterLs
    oid ieee8021AsCurrentDSOffsetFromMasterLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 4 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSOffsetFromMasterLs_variables_oid,
                               sizeof(ieee8021AsCurrentDSOffsetFromMasterLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSOffsetFromMasterLs",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSLastGmPhaseChangeHs
    oid ieee8021AsCurrentDSLastGmPhaseChangeHs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 5 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSLastGmPhaseChangeHs_variables_oid,
                               sizeof(ieee8021AsCurrentDSLastGmPhaseChangeHs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSLastGmPhaseChangeHs",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSLastGmPhaseChangeMs
    oid ieee8021AsCurrentDSLastGmPhaseChangeMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 6 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSLastGmPhaseChangeMs_variables_oid,
                               sizeof(ieee8021AsCurrentDSLastGmPhaseChangeMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSLastGmPhaseChangeMs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSLastGmPhaseChangeLs
    oid ieee8021AsCurrentDSLastGmPhaseChangeLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 7 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSLastGmPhaseChangeLs_variables_oid,
                               sizeof(ieee8021AsCurrentDSLastGmPhaseChangeLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSLastGmPhaseChangeLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSLastGmFreqChangeMs
    oid ieee8021AsCurrentDSLastGmFreqChangeMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 8 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSLastGmFreqChangeMs_variables_oid,
                               sizeof(ieee8021AsCurrentDSLastGmFreqChangeMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSLastGmFreqChangeMs",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSLastGmFreqChangeLs
    oid ieee8021AsCurrentDSLastGmFreqChangeLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 9 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSLastGmFreqChangeLs_variables_oid,
                               sizeof(ieee8021AsCurrentDSLastGmFreqChangeLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSLastGmFreqChangeLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSGmTimebaseIndicator
    oid ieee8021AsCurrentDSGmTimebaseIndicator_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 10 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSGmTimebaseIndicator_variables_oid,
                               sizeof(ieee8021AsCurrentDSGmTimebaseIndicator_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSGmTimebaseIndicator",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsCurrentDSGmChangeCount
    oid ieee8021AsCurrentDSGmChangeCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 11 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSGmChangeCount_variables_oid,
                               sizeof(ieee8021AsCurrentDSGmChangeCount_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSGmChangeCount",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSTimeOfLastGmChangeEvent
    oid ieee8021AsCurrentDSTimeOfLastGmChangeEvent_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 12 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSTimeOfLastGmChangeEvent_variables_oid,
                               sizeof(ieee8021AsCurrentDSTimeOfLastGmChangeEvent_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSTimeOfLastGmChangeEvent",
                               "TimeStamp",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent
    oid ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 13 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent_variables_oid,
                               sizeof(ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent",
                               "TimeStamp",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent
    oid ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 2, 14 };
    snmp_mib_redefine_register(ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent_variables_oid,
                               sizeof(ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent",
                               "TimeStamp",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsParentDSParentClockIdentity
    oid ieee8021AsParentDSParentClockIdentity_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 1 };
    snmp_mib_redefine_register(ieee8021AsParentDSParentClockIdentity_variables_oid,
                               sizeof(ieee8021AsParentDSParentClockIdentity_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSParentClockIdentity",
                               "ClockIdentity",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{8 8}");

    // ieee8021AsParentDSParentPortNumber
    oid ieee8021AsParentDSParentPortNumber_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 2 };
    snmp_mib_redefine_register(ieee8021AsParentDSParentPortNumber_variables_oid,
                               sizeof(ieee8021AsParentDSParentPortNumber_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSParentPortNumber",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsParentDSCumlativeRateRatio
    oid ieee8021AsParentDSCumlativeRateRatio_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 3 };
    snmp_mib_redefine_register(ieee8021AsParentDSCumlativeRateRatio_variables_oid,
                               sizeof(ieee8021AsParentDSCumlativeRateRatio_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSCumlativeRateRatio",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsParentDSGrandmasterIdentity
    oid ieee8021AsParentDSGrandmasterIdentity_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 4 };
    snmp_mib_redefine_register(ieee8021AsParentDSGrandmasterIdentity_variables_oid,
                               sizeof(ieee8021AsParentDSGrandmasterIdentity_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSGrandmasterIdentity",
                               "ClockIdentity",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{8 8}");

    // ieee8021AsParentDSGrandmasterClockClass
    oid ieee8021AsParentDSGrandmasterClockClass_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 5 };
    snmp_mib_redefine_register(ieee8021AsParentDSGrandmasterClockClass_variables_oid,
                               sizeof(ieee8021AsParentDSGrandmasterClockClass_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSGrandmasterClockClass",
                               "IEEE8021ASClockClassValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{6 primarySync} \
{7 primarySyncLost} \
{13 applicationSpecificSync} \
{14 applicationSpecficSyncLost} \
{52 primarySyncAlternativeA} \
{58 applicationSpecificAlternativeA} \
{187 primarySyncAlternativeB} \
{193 applicationSpecficAlternativeB} \
{248 defaultClock} \
{255 slaveOnlyClock} \
");

    // ieee8021AsParentDSGrandmasterClockAccuracy
    oid ieee8021AsParentDSGrandmasterClockAccuracy_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 6 };
    snmp_mib_redefine_register(ieee8021AsParentDSGrandmasterClockAccuracy_variables_oid,
                               sizeof(ieee8021AsParentDSGrandmasterClockAccuracy_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSGrandmasterClockAccuracy",
                               "IEEE8021ASClockAccuracyValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{32 timeAccurateTo25ns} \
{33 timeAccurateTo100ns} \
{34 timeAccurateTo250ns} \
{35 timeAccurateTo1us} \
{36 timeAccurateTo2dot5us} \
{37 timeAccurateTo10us} \
{38 timeAccurateTo25us} \
{39 timeAccurateTo100us} \
{40 timeAccurateTo250us} \
{41 timeAccurateTo1ms} \
{42 timeAccurateTo2dot5ms} \
{43 timeAccurateTo10ms} \
{44 timeAccurateTo25ms} \
{45 timeAccurateTo100ms} \
{46 timeAccurateTo250ms} \
{47 timeAccurateTo1s} \
{48 timeAccurateTo10s} \
{49 timeAccurateToGT10s} \
{254 timeAccurateToUnknown} \
");

    // ieee8021AsParentDSGrandmasterOffsetScaledLogVariance
    oid ieee8021AsParentDSGrandmasterOffsetScaledLogVariance_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 7 };
    snmp_mib_redefine_register(ieee8021AsParentDSGrandmasterOffsetScaledLogVariance_variables_oid,
                               sizeof(ieee8021AsParentDSGrandmasterOffsetScaledLogVariance_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSGrandmasterOffsetScaledLogVariance",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsParentDSGrandmasterPriority1
    oid ieee8021AsParentDSGrandmasterPriority1_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 8 };
    snmp_mib_redefine_register(ieee8021AsParentDSGrandmasterPriority1_variables_oid,
                               sizeof(ieee8021AsParentDSGrandmasterPriority1_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSGrandmasterPriority1",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 255}");

    // ieee8021AsParentDSGrandmasterPriority2
    oid ieee8021AsParentDSGrandmasterPriority2_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 3, 9 };
    snmp_mib_redefine_register(ieee8021AsParentDSGrandmasterPriority2_variables_oid,
                               sizeof(ieee8021AsParentDSGrandmasterPriority2_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsParentDSGrandmasterPriority2",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 255}");

    // ieee8021AsTimePropertiesDSCurrentUtcOffset
    oid ieee8021AsTimePropertiesDSCurrentUtcOffset_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 1 };
    snmp_mib_redefine_register(ieee8021AsTimePropertiesDSCurrentUtcOffset_variables_oid,
                               sizeof(ieee8021AsTimePropertiesDSCurrentUtcOffset_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsTimePropertiesDSCurrentUtcOffset",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{-32768 32767}");

    // ieee8021AsTimePropertiesDSCurrentUtcOffsetValid
    oid ieee8021AsTimePropertiesDSCurrentUtcOffsetValid_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 2 };
    snmp_mib_redefine_register(ieee8021AsTimePropertiesDSCurrentUtcOffsetValid_variables_oid,
                               sizeof(ieee8021AsTimePropertiesDSCurrentUtcOffsetValid_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsTimePropertiesDSCurrentUtcOffsetValid",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsTimePropertiesDSLeap59
    oid ieee8021AsTimePropertiesDSLeap59_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 3 };
    snmp_mib_redefine_register(ieee8021AsTimePropertiesDSLeap59_variables_oid,
                               sizeof(ieee8021AsTimePropertiesDSLeap59_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsTimePropertiesDSLeap59",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsTimePropertiesDSLeap61
    oid ieee8021AsTimePropertiesDSLeap61_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 4 };
    snmp_mib_redefine_register(ieee8021AsTimePropertiesDSLeap61_variables_oid,
                               sizeof(ieee8021AsTimePropertiesDSLeap61_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsTimePropertiesDSLeap61",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsTimePropertiesDSTimeTraceable
    oid ieee8021AsTimePropertiesDSTimeTraceable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 5 };
    snmp_mib_redefine_register(ieee8021AsTimePropertiesDSTimeTraceable_variables_oid,
                               sizeof(ieee8021AsTimePropertiesDSTimeTraceable_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsTimePropertiesDSTimeTraceable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsTimePropertiesDSFrequencyTraceable
    oid ieee8021AsTimePropertiesDSFrequencyTraceable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 6 };
    snmp_mib_redefine_register(ieee8021AsTimePropertiesDSFrequencyTraceable_variables_oid,
                               sizeof(ieee8021AsTimePropertiesDSFrequencyTraceable_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsTimePropertiesDSFrequencyTraceable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsTimePropertiesDSTimeSource
    oid ieee8021AsTimePropertiesDSTimeSource_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 4, 7 };
    snmp_mib_redefine_register(ieee8021AsTimePropertiesDSTimeSource_variables_oid,
                               sizeof(ieee8021AsTimePropertiesDSTimeSource_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsTimePropertiesDSTimeSource",
                               "IEEE8021ASTimeSourceValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{16 atomicClock} \
{32 gps} \
{48 terrestrialRadio} \
{64 ptp} \
{80 ntp} \
{96 handSet} \
{144 other} \
{160 internalOscillator} \
");

    // ieee8021AsAcceptableMasterTableDSMaxTableSize
    oid ieee8021AsAcceptableMasterTableDSMaxTableSize_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 1, 1 };
    snmp_mib_redefine_register(ieee8021AsAcceptableMasterTableDSMaxTableSize_variables_oid,
                               sizeof(ieee8021AsAcceptableMasterTableDSMaxTableSize_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsAcceptableMasterTableDSMaxTableSize",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsAcceptableMasterTableDSActualTableSize
    oid ieee8021AsAcceptableMasterTableDSActualTableSize_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 1, 2 };
    snmp_mib_redefine_register(ieee8021AsAcceptableMasterTableDSActualTableSize_variables_oid,
                               sizeof(ieee8021AsAcceptableMasterTableDSActualTableSize_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsAcceptableMasterTableDSActualTableSize",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 65535}");


    // ieee8021AsPortDSClockIdentity
    oid ieee8021AsPortDSClockIdentity_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 3 };
    snmp_mib_redefine_register(ieee8021AsPortDSClockIdentity_variables_oid,
                               sizeof(ieee8021AsPortDSClockIdentity_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSClockIdentity",
                               "ClockIdentity",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{8 8}");

    // ieee8021AsPortDSPortNumber
    oid ieee8021AsPortDSPortNumber_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 4 };
    snmp_mib_redefine_register(ieee8021AsPortDSPortNumber_variables_oid,
                               sizeof(ieee8021AsPortDSPortNumber_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSPortNumber",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsPortDSPortRole
    oid ieee8021AsPortDSPortRole_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 5 };
    snmp_mib_redefine_register(ieee8021AsPortDSPortRole_variables_oid,
                               sizeof(ieee8021AsPortDSPortRole_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSPortRole",
                               "INTEGER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{3 disabledPort} \
{6 masterPort} \
{7 passivePort} \
{9 slavePort} \
");

    // ieee8021AsPortDSPttPortEnabled
    oid ieee8021AsPortDSPttPortEnabled_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 6 };
    snmp_mib_redefine_register(ieee8021AsPortDSPttPortEnabled_variables_oid,
                               sizeof(ieee8021AsPortDSPttPortEnabled_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSPttPortEnabled",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsPortDSIsMeasuringDelay
    oid ieee8021AsPortDSIsMeasuringDelay_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 7 };
    snmp_mib_redefine_register(ieee8021AsPortDSIsMeasuringDelay_variables_oid,
                               sizeof(ieee8021AsPortDSIsMeasuringDelay_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSIsMeasuringDelay",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsPortDSAsCapable
    oid ieee8021AsPortDSAsCapable_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 8 };
    snmp_mib_redefine_register(ieee8021AsPortDSAsCapable_variables_oid,
                               sizeof(ieee8021AsPortDSAsCapable_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSAsCapable",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsPortDSNeighborPropDelayHs
    oid ieee8021AsPortDSNeighborPropDelayHs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 9 };
    snmp_mib_redefine_register(ieee8021AsPortDSNeighborPropDelayHs_variables_oid,
                               sizeof(ieee8021AsPortDSNeighborPropDelayHs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNeighborPropDelayHs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortDSNeighborPropDelayMs
    oid ieee8021AsPortDSNeighborPropDelayMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 10 };
    snmp_mib_redefine_register(ieee8021AsPortDSNeighborPropDelayMs_variables_oid,
                               sizeof(ieee8021AsPortDSNeighborPropDelayMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNeighborPropDelayMs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortDSNeighborPropDelayLs
    oid ieee8021AsPortDSNeighborPropDelayLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 11 };
    snmp_mib_redefine_register(ieee8021AsPortDSNeighborPropDelayLs_variables_oid,
                               sizeof(ieee8021AsPortDSNeighborPropDelayLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNeighborPropDelayLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortDSNeighborPropDelayThreshHs
    oid ieee8021AsPortDSNeighborPropDelayThreshHs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 12 };
    snmp_mib_redefine_register(ieee8021AsPortDSNeighborPropDelayThreshHs_variables_oid,
                               sizeof(ieee8021AsPortDSNeighborPropDelayThreshHs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNeighborPropDelayThreshHs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSNeighborPropDelayThreshMs
    oid ieee8021AsPortDSNeighborPropDelayThreshMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 13 };
    snmp_mib_redefine_register(ieee8021AsPortDSNeighborPropDelayThreshMs_variables_oid,
                               sizeof(ieee8021AsPortDSNeighborPropDelayThreshMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNeighborPropDelayThreshMs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSNeighborPropDelayThreshLs
    oid ieee8021AsPortDSNeighborPropDelayThreshLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 14 };
    snmp_mib_redefine_register(ieee8021AsPortDSNeighborPropDelayThreshLs_variables_oid,
                               sizeof(ieee8021AsPortDSNeighborPropDelayThreshLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNeighborPropDelayThreshLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSDelayAsymmetryHs
    oid ieee8021AsPortDSDelayAsymmetryHs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 15 };
    snmp_mib_redefine_register(ieee8021AsPortDSDelayAsymmetryHs_variables_oid,
                               sizeof(ieee8021AsPortDSDelayAsymmetryHs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSDelayAsymmetryHs",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSDelayAsymmetryMs
    oid ieee8021AsPortDSDelayAsymmetryMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 16 };
    snmp_mib_redefine_register(ieee8021AsPortDSDelayAsymmetryMs_variables_oid,
                               sizeof(ieee8021AsPortDSDelayAsymmetryMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSDelayAsymmetryMs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSDelayAsymmetryLs
    oid ieee8021AsPortDSDelayAsymmetryLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 17 };
    snmp_mib_redefine_register(ieee8021AsPortDSDelayAsymmetryLs_variables_oid,
                               sizeof(ieee8021AsPortDSDelayAsymmetryLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSDelayAsymmetryLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSNeighborRateRatio
    oid ieee8021AsPortDSNeighborRateRatio_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 18 };
    snmp_mib_redefine_register(ieee8021AsPortDSNeighborRateRatio_variables_oid,
                               sizeof(ieee8021AsPortDSNeighborRateRatio_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNeighborRateRatio",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortDSInitialLogAnnounceInterval
    oid ieee8021AsPortDSInitialLogAnnounceInterval_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 19 };
    snmp_mib_redefine_register(ieee8021AsPortDSInitialLogAnnounceInterval_variables_oid,
                               sizeof(ieee8021AsPortDSInitialLogAnnounceInterval_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSInitialLogAnnounceInterval",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{-128 127}");

    // ieee8021AsPortDSCurrentLogAnnounceInterval
    oid ieee8021AsPortDSCurrentLogAnnounceInterval_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 20 };
    snmp_mib_redefine_register(ieee8021AsPortDSCurrentLogAnnounceInterval_variables_oid,
                               sizeof(ieee8021AsPortDSCurrentLogAnnounceInterval_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSCurrentLogAnnounceInterval",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{-128 127}");

    // ieee8021AsPortDSAnnounceReceiptTimeout
    oid ieee8021AsPortDSAnnounceReceiptTimeout_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 21 };
    snmp_mib_redefine_register(ieee8021AsPortDSAnnounceReceiptTimeout_variables_oid,
                               sizeof(ieee8021AsPortDSAnnounceReceiptTimeout_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSAnnounceReceiptTimeout",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 255}");

    // ieee8021AsPortDSInitialLogSyncInterval
    oid ieee8021AsPortDSInitialLogSyncInterval_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 22 };
    snmp_mib_redefine_register(ieee8021AsPortDSInitialLogSyncInterval_variables_oid,
                               sizeof(ieee8021AsPortDSInitialLogSyncInterval_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSInitialLogSyncInterval",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{-128 127}");

    // ieee8021AsPortDSCurrentLogSyncInterval
    oid ieee8021AsPortDSCurrentLogSyncInterval_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 23 };
    snmp_mib_redefine_register(ieee8021AsPortDSCurrentLogSyncInterval_variables_oid,
                               sizeof(ieee8021AsPortDSCurrentLogSyncInterval_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSCurrentLogSyncInterval",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{-128 127}");

    // ieee8021AsPortDSSyncReceiptTimeout
    oid ieee8021AsPortDSSyncReceiptTimeout_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 24 };
    snmp_mib_redefine_register(ieee8021AsPortDSSyncReceiptTimeout_variables_oid,
                               sizeof(ieee8021AsPortDSSyncReceiptTimeout_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSSyncReceiptTimeout",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 255}");

    // ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs
    oid ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 25 };
    snmp_mib_redefine_register(ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs_variables_oid,
                               sizeof(ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs
    oid ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 26 };
    snmp_mib_redefine_register(ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs_variables_oid,
                               sizeof(ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs
    oid ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 27 };
    snmp_mib_redefine_register(ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs_variables_oid,
                               sizeof(ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortDSInitialLogPdelayReqInterval
    oid ieee8021AsPortDSInitialLogPdelayReqInterval_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 28 };
    snmp_mib_redefine_register(ieee8021AsPortDSInitialLogPdelayReqInterval_variables_oid,
                               sizeof(ieee8021AsPortDSInitialLogPdelayReqInterval_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSInitialLogPdelayReqInterval",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{-128 127}");

    // ieee8021AsPortDSCurrentLogPdelayReqInterval
    oid ieee8021AsPortDSCurrentLogPdelayReqInterval_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 29 };
    snmp_mib_redefine_register(ieee8021AsPortDSCurrentLogPdelayReqInterval_variables_oid,
                               sizeof(ieee8021AsPortDSCurrentLogPdelayReqInterval_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSCurrentLogPdelayReqInterval",
                               "INTEGER32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{-128 127}");

    // ieee8021AsPortDSAllowedLostResponses
    oid ieee8021AsPortDSAllowedLostResponses_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 30 };
    snmp_mib_redefine_register(ieee8021AsPortDSAllowedLostResponses_variables_oid,
                               sizeof(ieee8021AsPortDSAllowedLostResponses_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSAllowedLostResponses",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsPortDSVersionNumber
    oid ieee8021AsPortDSVersionNumber_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 31 };
    snmp_mib_redefine_register(ieee8021AsPortDSVersionNumber_variables_oid,
                               sizeof(ieee8021AsPortDSVersionNumber_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSVersionNumber",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "{0 63}");

    // ieee8021AsPortDSNupMs
    oid ieee8021AsPortDSNupMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 32 };
    snmp_mib_redefine_register(ieee8021AsPortDSNupMs_variables_oid,
                               sizeof(ieee8021AsPortDSNupMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNupMs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSNupLs
    oid ieee8021AsPortDSNupLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 33 };
    snmp_mib_redefine_register(ieee8021AsPortDSNupLs_variables_oid,
                               sizeof(ieee8021AsPortDSNupLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNupLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSNdownMs
    oid ieee8021AsPortDSNdownMs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 34 };
    snmp_mib_redefine_register(ieee8021AsPortDSNdownMs_variables_oid,
                               sizeof(ieee8021AsPortDSNdownMs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNdownMs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSNdownLs
    oid ieee8021AsPortDSNdownLs_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 35 };
    snmp_mib_redefine_register(ieee8021AsPortDSNdownLs_variables_oid,
                               sizeof(ieee8021AsPortDSNdownLs_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSNdownLs",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "");

    // ieee8021AsPortDSAcceptableMasterTableEnabled
    oid ieee8021AsPortDSAcceptableMasterTableEnabled_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 5, 1, 36 };
    snmp_mib_redefine_register(ieee8021AsPortDSAcceptableMasterTableEnabled_variables_oid,
                               sizeof(ieee8021AsPortDSAcceptableMasterTableEnabled_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortDSAcceptableMasterTableEnabled",
                               "TruthValue",
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               SNMP_MIB_ACCESS_TYPE_RWRITE,
                               FALSE,
                               "\
{1 true} \
{2 false} \
");

    // ieee8021AsPortStatRxSyncCount
    oid ieee8021AsPortStatRxSyncCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 1 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxSyncCount_variables_oid,
                               sizeof(ieee8021AsPortStatRxSyncCount_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxSyncCount",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatRxFollowUpCount
    oid ieee8021AsPortStatRxFollowUpCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 2 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxFollowUpCount_variables_oid,
                               sizeof(ieee8021AsPortStatRxFollowUpCount_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxFollowUpCount",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatRxPdelayRequest
    oid ieee8021AsPortStatRxPdelayRequest_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 3 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxPdelayRequest_variables_oid,
                               sizeof(ieee8021AsPortStatRxPdelayRequest_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxPdelayRequest",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatRxPdelayResponse
    oid ieee8021AsPortStatRxPdelayResponse_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 4 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxPdelayResponse_variables_oid,
                               sizeof(ieee8021AsPortStatRxPdelayResponse_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxPdelayResponse",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatRxPdelayResponseFollowUp
    oid ieee8021AsPortStatRxPdelayResponseFollowUp_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 5 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxPdelayResponseFollowUp_variables_oid,
                               sizeof(ieee8021AsPortStatRxPdelayResponseFollowUp_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxPdelayResponseFollowUp",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatRxAnnounce
    oid ieee8021AsPortStatRxAnnounce_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 6 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxAnnounce_variables_oid,
                               sizeof(ieee8021AsPortStatRxAnnounce_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxAnnounce",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatRxPTPPacketDiscard
    oid ieee8021AsPortStatRxPTPPacketDiscard_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 7 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxPTPPacketDiscard_variables_oid,
                               sizeof(ieee8021AsPortStatRxPTPPacketDiscard_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxPTPPacketDiscard",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatRxSyncReceiptTimeouts
    oid ieee8021AsPortStatRxSyncReceiptTimeouts_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 8 };
    snmp_mib_redefine_register(ieee8021AsPortStatRxSyncReceiptTimeouts_variables_oid,
                               sizeof(ieee8021AsPortStatRxSyncReceiptTimeouts_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatRxSyncReceiptTimeouts",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatAnnounceReceiptTimeouts
    oid ieee8021AsPortStatAnnounceReceiptTimeouts_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 9 };
    snmp_mib_redefine_register(ieee8021AsPortStatAnnounceReceiptTimeouts_variables_oid,
                               sizeof(ieee8021AsPortStatAnnounceReceiptTimeouts_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatAnnounceReceiptTimeouts",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatPdelayAllowedLostResponsesExceeded
    oid ieee8021AsPortStatPdelayAllowedLostResponsesExceeded_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 10 };
    snmp_mib_redefine_register(ieee8021AsPortStatPdelayAllowedLostResponsesExceeded_variables_oid,
                               sizeof(ieee8021AsPortStatPdelayAllowedLostResponsesExceeded_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatPdelayAllowedLostResponsesExceeded",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatTxSyncCount
    oid ieee8021AsPortStatTxSyncCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 11 };
    snmp_mib_redefine_register(ieee8021AsPortStatTxSyncCount_variables_oid,
                               sizeof(ieee8021AsPortStatTxSyncCount_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatTxSyncCount",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatTxFollowUpCount
    oid ieee8021AsPortStatTxFollowUpCount_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 12 };
    snmp_mib_redefine_register(ieee8021AsPortStatTxFollowUpCount_variables_oid,
                               sizeof(ieee8021AsPortStatTxFollowUpCount_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatTxFollowUpCount",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatTxPdelayRequest
    oid ieee8021AsPortStatTxPdelayRequest_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 13 };
    snmp_mib_redefine_register(ieee8021AsPortStatTxPdelayRequest_variables_oid,
                               sizeof(ieee8021AsPortStatTxPdelayRequest_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatTxPdelayRequest",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatTxPdelayResponse
    oid ieee8021AsPortStatTxPdelayResponse_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 14 };
    snmp_mib_redefine_register(ieee8021AsPortStatTxPdelayResponse_variables_oid,
                               sizeof(ieee8021AsPortStatTxPdelayResponse_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatTxPdelayResponse",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatTxPdelayResponseFollowUp
    oid ieee8021AsPortStatTxPdelayResponseFollowUp_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 15 };
    snmp_mib_redefine_register(ieee8021AsPortStatTxPdelayResponseFollowUp_variables_oid,
                               sizeof(ieee8021AsPortStatTxPdelayResponseFollowUp_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatTxPdelayResponseFollowUp",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsPortStatTxAnnounce
    oid ieee8021AsPortStatTxAnnounce_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 6, 1, 16 };
    snmp_mib_redefine_register(ieee8021AsPortStatTxAnnounce_variables_oid,
                               sizeof(ieee8021AsPortStatTxAnnounce_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsPortStatTxAnnounce",
                               "COUNTER",
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               SNMP_MIB_ACCESS_TYPE_RONLY,
                               FALSE,
                               "");

    // ieee8021AsAcceptableMasterClockIdentity
    oid ieee8021AsAcceptableMasterClockIdentity_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 2 };
    snmp_mib_redefine_register(ieee8021AsAcceptableMasterClockIdentity_variables_oid,
                               sizeof(ieee8021AsAcceptableMasterClockIdentity_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsAcceptableMasterClockIdentity",
                               "ClockIdentity",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{8 8}");

    // ieee8021AsAcceptableMasterPortNumber
    oid ieee8021AsAcceptableMasterPortNumber_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 3 };
    snmp_mib_redefine_register(ieee8021AsAcceptableMasterPortNumber_variables_oid,
                               sizeof(ieee8021AsAcceptableMasterPortNumber_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsAcceptableMasterPortNumber",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{0 65535}");

    // ieee8021AsAcceptableMasterAlternatePriority1
    oid ieee8021AsAcceptableMasterAlternatePriority1_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 4 };
    snmp_mib_redefine_register(ieee8021AsAcceptableMasterAlternatePriority1_variables_oid,
                               sizeof(ieee8021AsAcceptableMasterAlternatePriority1_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsAcceptableMasterAlternatePriority1",
                               "UNSIGNED32",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "{0 255}");

    // ieee8021AsAcceptableMasterRowStatus
    oid ieee8021AsAcceptableMasterRowStatus_variables_oid[] = { 1, 3, 111, 2, 802, 1, 1, 20, 1, 7, 2, 1, 1, 5 };
    snmp_mib_redefine_register(ieee8021AsAcceptableMasterRowStatus_variables_oid,
                               sizeof(ieee8021AsAcceptableMasterRowStatus_variables_oid) / sizeof(oid),
                               "IEEE8021-AS-MIB : ieee8021AsAcceptableMasterRowStatus",
                               "RowStatus",
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               SNMP_MIB_ACCESS_TYPE_RCREATE,
                               FALSE,
                               "\
{1 active} \
{2 notInService} \
{3 notReady} \
{4 createAndGo} \
{5 createAndWait} \
{6 destroy} \
");

    T_D("exit");
}

/******************************************************************************/
//
// Local functions
//
/******************************************************************************/
static BOOL IEEE8021As_Default_DSScalar_get(ieee8021AsDefaultDS_scalar_t *scalar_entry)
{
    vtss_appl_ptp_clock_status_default_ds_t clock_status;
    mesa_rc    rc;

    if ((rc = vtss_appl_ptp_clock_status_default_ds_get(0, &clock_status)) != VTSS_RC_OK) {
        T_D("Cannot get default DS scalar data : %s\n", error_txt(rc));
        return FALSE;
    }
    scalar_entry->ieee8021AsDefaultDSNumberPorts = clock_status.numberPorts;
    for (int i = 0; i < sizeof(scalar_entry->ieee8021AsDefaultDSClockIdentity); i++) {
        if (i == sizeof(clock_status.clockIdentity)) {
            break;
        }
        scalar_entry->ieee8021AsDefaultDSClockIdentity[i] = clock_status.clockIdentity[i];
    }
    scalar_entry->ieee8021AsDefaultDSClockClass = clock_status.clockQuality.clockClass;
    scalar_entry->ieee8021AsDefaultDSClockAccuracy = clock_status.clockQuality.clockAccuracy;
    scalar_entry->ieee8021AsDefaultDSOffsetScaledLogVariance = clock_status.clockQuality.offsetScaledLogVariance;
    scalar_entry->ieee8021AsDefaultDSGmCapable = clock_status.s_802_1as.gmCapable;

    /* To be done ...
    scalar_entry->ieee8021AsDefaultDSClockIdentity_len;
    scalar_entry->ieee8021AsDefaultDSPriority1;
    scalar_entry->ieee8021AsDefaultDSPriority2;
    scalar_entry->ieee8021AsDefaultDSCurrentUTCOffset;
    scalar_entry->ieee8021AsDefaultDSCurrentUTCOffsetValid;
    scalar_entry->ieee8021AsDefaultDSLeap59;
    scalar_entry->ieee8021AsDefaultDSLeap61;
    scalar_entry->ieee8021AsDefaultDSTimeTraceable;
    scalar_entry->ieee8021AsDefaultDSFrequencyTraceable;
    scalar_entry->ieee8021AsDefaultDSTimeSource;
    */

    return TRUE;
}

static BOOL IEEE8021As_Current_DSScalar_get(ieee8021AsCurrentDS_scalar_t *scalar_entry)
{
    vtss_appl_ptp_clock_current_ds_t status;
    mesa_rc    rc;

    if ((rc = vtss_appl_ptp_clock_status_current_ds_get(0, &status)) != VTSS_RC_OK) {
        T_D("Cannot get current DS scalar data : %s\n", error_txt(rc));
        return FALSE;
    }

    scalar_entry->ieee8021AsCurrentDSLastGmPhaseChangeHs = status.cur_802_1as.lastGMPhaseChange.scaled_ns_high;
    scalar_entry->ieee8021AsCurrentDSLastGmPhaseChangeMs = (status.cur_802_1as.lastGMPhaseChange.scaled_ns_low & 0xffffffff00000000) >> 32;
    scalar_entry->ieee8021AsCurrentDSLastGmPhaseChangeLs = status.cur_802_1as.lastGMPhaseChange.scaled_ns_low & 0x00000000ffffffff;
    scalar_entry->ieee8021AsCurrentDSLastGmFreqChangeMs = ((long long int)(status.cur_802_1as.lastGMFreqChange + 0.5) & 0xffffffff00000000) >> 32;
    scalar_entry->ieee8021AsCurrentDSLastGmFreqChangeLs = (long long int)(status.cur_802_1as.lastGMFreqChange + 0.5) & 0x00000000ffffffff;
    scalar_entry->ieee8021AsCurrentDSGmTimebaseIndicator = status.cur_802_1as.gmTimeBaseIndicator;
    scalar_entry->ieee8021AsCurrentDSGmChangeCount = status.cur_802_1as.gmChangeCount;
    scalar_entry->ieee8021AsCurrentDSTimeOfLastGmChangeEvent = status.cur_802_1as.timeOfLastGMChangeEvent;
    scalar_entry->ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent = status.cur_802_1as.timeOfLastGMFreqChangeEvent;
    scalar_entry->ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent = status.cur_802_1as.timeOfLastGMPhaseChangeEvent;
    scalar_entry->ieee8021AsCurrentDSStepsRemoved = status.stepsRemoved;
    scalar_entry->ieee8021AsCurrentDSOffsetFromMasterHs = 0;
    scalar_entry->ieee8021AsCurrentDSOffsetFromMasterMs = (status.offsetFromMaster & 0xffffffff00000000) >> 32;
    scalar_entry->ieee8021AsCurrentDSOffsetFromMasterLs = status.offsetFromMaster & 0xffffffff00000000;

    return TRUE;
}

static BOOL IEEE8021As_Parent_DSScalar_get(ieee8021AsParentDS_scalar_t *scalar_entry)
{
    vtss_appl_ptp_clock_parent_ds_t status;
    mesa_rc    rc;

    if ((rc = vtss_appl_ptp_clock_status_parent_ds_get(0, &status)) != VTSS_RC_OK) {
        T_D("Cannot get parent DS scalar data : %s\n", error_txt(rc));
        return FALSE;
    }

    for (int i = 0; i < sizeof(scalar_entry->ieee8021AsParentDSParentClockIdentity); i++) {
        if (i == sizeof(status.parentPortIdentity.clockIdentity)) {
            break;
        }
        scalar_entry->ieee8021AsParentDSParentClockIdentity[i] = status.parentPortIdentity.clockIdentity[i];
    }
    scalar_entry->ieee8021AsParentDSParentPortNumber = status.parentPortIdentity.portNumber;
    scalar_entry->ieee8021AsParentDSCumlativeRateRatio = status.par_802_1as.cumulativeRateRatio;
    for (int i = 0; i < sizeof(scalar_entry->ieee8021AsParentDSGrandmasterIdentity); i++) {
        if (i == sizeof(status.grandmasterIdentity)) {
            break;
        }
        scalar_entry->ieee8021AsParentDSGrandmasterIdentity[i] = status.grandmasterIdentity[i];
    }
    scalar_entry->ieee8021AsParentDSGrandmasterClockClass = status.grandmasterClockQuality.clockClass;
    scalar_entry->ieee8021AsParentDSParentClockIdentity_len = 8;
    scalar_entry->ieee8021AsParentDSGrandmasterIdentity_len = 8;
    scalar_entry->ieee8021AsParentDSGrandmasterClockClass = status.grandmasterClockQuality.clockClass;
    scalar_entry->ieee8021AsParentDSGrandmasterClockAccuracy = status.grandmasterClockQuality.clockAccuracy;
    scalar_entry->ieee8021AsParentDSGrandmasterOffsetScaledLogVariance = status.grandmasterClockQuality.offsetScaledLogVariance;
    scalar_entry->ieee8021AsParentDSGrandmasterPriority1 = status.grandmasterPriority1;
    scalar_entry->ieee8021AsParentDSGrandmasterPriority2 = status.grandmasterPriority2;

    return TRUE;
}

static BOOL IEEE8021As_TimeProperties_DSScalar_get(ieee8021AsTimePropertiesDS_scalar_t *scalar_entry)
{
    vtss_appl_ptp_clock_timeproperties_ds_t timeproperties_ds;
    mesa_rc    rc;

    if ((rc = vtss_appl_ptp_clock_status_timeproperties_ds_get(0, &timeproperties_ds)) != VTSS_RC_OK) {
        T_D("Cannot get time properties DS scalar data : %s\n", error_txt(rc));
        return FALSE;
    }
    scalar_entry->ieee8021AsTimePropertiesDSCurrentUtcOffset = timeproperties_ds.currentUtcOffset;
    scalar_entry->ieee8021AsTimePropertiesDSCurrentUtcOffsetValid = timeproperties_ds.currentUtcOffsetValid;
    scalar_entry->ieee8021AsTimePropertiesDSLeap59 = timeproperties_ds.leap59;
    scalar_entry->ieee8021AsTimePropertiesDSLeap61 = timeproperties_ds.leap61;
    scalar_entry->ieee8021AsTimePropertiesDSTimeTraceable = timeproperties_ds.timeTraceable;
    scalar_entry->ieee8021AsTimePropertiesDSFrequencyTraceable = timeproperties_ds.frequencyTraceable;
    scalar_entry->ieee8021AsTimePropertiesDSTimeSource = timeproperties_ds.timeSource;

    return TRUE;
}

static BOOL IEEE8021As_Port_DSIfTableEntry_get(ieee8021AsPortDSIfTable_entry_t *table_entry, int getnext)
{
    vtss_appl_ptp_config_port_ds_t port_ds;
    vtss_appl_ptp_status_port_ds_t port_ds_status;
    mesa_rc                        rc;
    vtss_ifindex_t                 port, port_next;
    uint                           clock_next;

    if (table_entry->ieee8021AsPortDSAsIfIndex == 0) {
        vtss_appl_ptp_clock_port_itr(0, &clock_next, NULL, &port);
    } else {
        port = vtss_ifindex_cast_from_u32_0(table_entry->ieee8021AsPortDSAsIfIndex);
    }

    if (getnext) {
        if ((vtss_appl_ptp_clock_port_itr(0, &clock_next, &port, &port_next) != VTSS_RC_OK) || (clock_next != 0)) {
            return FALSE;
        }
        port = port_next;
    }

    if ((rc = vtss_appl_ptp_config_clocks_port_ds_get(0, port, &port_ds)) != VTSS_RC_OK) {
        T_D("Cannot get port DS config scalar data : %s\n", error_txt(rc));
        return FALSE;
    }

    if ((rc = vtss_appl_ptp_status_clocks_port_ds_get(0, port, &port_ds_status)) != VTSS_RC_OK) {
        T_D("Cannot get port DS status scalar data : %s\n", error_txt(rc));
        return FALSE;
    }

    table_entry->ieee8021AsPortDSClockIdentity_len          = sizeof(port_ds_status.portIdentity.clockIdentity);
    table_entry->ieee8021AsPortDSPortNumber                 = port_ds_status.portIdentity.portNumber;
    table_entry->ieee8021AsPortDSPortRole                   = port_ds_status.s_802_1as.portRole;
    table_entry->ieee8021AsPortDSPttPortEnabled             = port_ds.enabled;
    table_entry->ieee8021AsPortDSIsMeasuringDelay           = port_ds_status.s_802_1as.peer_d.isMeasuringDelay;
    table_entry->ieee8021AsPortDSAsCapable                  = port_ds_status.s_802_1as.asCapable;
    table_entry->ieee8021AsPortDSNeighborPropDelayThreshHs  = 0;
    table_entry->ieee8021AsPortDSNeighborPropDelayThreshMs  = (port_ds.c_802_1as.peer_d.meanLinkDelayThresh & 0xffffffff00000000) >> 32;
    table_entry->ieee8021AsPortDSNeighborPropDelayThreshLs  =  port_ds.c_802_1as.peer_d.meanLinkDelayThresh & 0x00000000ffffffff;
    table_entry->ieee8021AsPortDSDelayAsymmetryHs           = 0;
    table_entry->ieee8021AsPortDSDelayAsymmetryMs           = (port_ds.delayAsymmetry & 0xffffffff00000000) >> 32;
    table_entry->ieee8021AsPortDSDelayAsymmetryLs           = port_ds.delayAsymmetry & 0x00000000ffffffff;
    table_entry->ieee8021AsPortDSNeighborRateRatio          = port_ds_status.s_802_1as.peer_d.neighborRateRatio;
    table_entry->ieee8021AsPortDSInitialLogAnnounceInterval = 0;
    table_entry->ieee8021AsPortDSCurrentLogAnnounceInterval = port_ds_status.s_802_1as.currentLogAnnounceInterval;
    table_entry->ieee8021AsPortDSAnnounceReceiptTimeout     = port_ds.announceReceiptTimeout;
    table_entry->ieee8021AsPortDSInitialLogSyncInterval     = -3;
    table_entry->ieee8021AsPortDSCurrentLogSyncInterval     = port_ds_status.s_802_1as.currentLogSyncInterval;
    table_entry->ieee8021AsPortDSSyncReceiptTimeout         = port_ds.c_802_1as.syncReceiptTimeout;
    table_entry->ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs = 0;
    table_entry->ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs = (port_ds_status.s_802_1as.syncReceiptTimeInterval & 0xffffffff00000000) >> 32;
    table_entry->ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs = port_ds_status.s_802_1as.syncReceiptTimeInterval & 0x00000000ffffffff;
    table_entry->ieee8021AsPortDSInitialLogPdelayReqInterval = 0;
    table_entry->ieee8021AsPortDSCurrentLogPdelayReqInterval = port_ds_status.s_802_1as.peer_d.currentLogPDelayReqInterval;
    table_entry->ieee8021AsPortDSAllowedLostResponses        = port_ds.c_802_1as.peer_d.allowedLostResponses;
    table_entry->ieee8021AsPortDSVersionNumber               = port_ds.versionNumber;
    table_entry->ieee8021AsPortDSAcceptableMasterTableEnabled = port_ds_status.s_802_1as.acceptableMasterTableEnabled;

    /* To be done...
    u_long ieee8021AsPortDSNeighborPropDelayHs;
    u_long ieee8021AsPortDSNeighborPropDelayMs;
    u_long ieee8021AsPortDSNeighborPropDelayLs;
    u_long ieee8021AsPortDSNupMs;
    u_long ieee8021AsPortDSNupLs;
    u_long ieee8021AsPortDSNdownMs;
    u_long ieee8021AsPortDSNdownLs;
    */

    return TRUE;
}

static BOOL IEEE8021As_Port_Stat_IfTableEntry_get(ieee8021AsPortStatIfTable_entry_t *table_entry, int getnext)
{
    vtss_appl_ptp_status_port_statistics_t port_stat;
    mesa_rc                                rc;
    vtss_ifindex_t                         port, port_next;
    uint                                   clock_next;

    if (table_entry->ieee8021AsPortDSAsIfIndex == 0) {
        vtss_appl_ptp_clock_port_itr(0, &clock_next, NULL, &port);
    } else {
        port = vtss_ifindex_cast_from_u32_0(table_entry->ieee8021AsPortDSAsIfIndex);
    }

    if (getnext) {
        if ((vtss_appl_ptp_clock_port_itr(0, &clock_next, &port, &port_next) != VTSS_RC_OK) || (clock_next != 0)) {
            return -1;
        }
        port = port_next;
    }

    if ((rc = vtss_appl_ptp_status_clocks_port_statistics_get(0, port, &port_stat)) != VTSS_RC_OK) {
        T_D("Cannot get port status table entry data : %s\n", error_txt(rc));
        return FALSE;
    }

    // Entry columns
    table_entry->ieee8021AsPortStatRxSyncCount = port_stat.rxSyncCount;
    table_entry->ieee8021AsPortStatRxFollowUpCount = port_stat.rxFollowUpCount;
    table_entry->ieee8021AsPortStatRxPdelayRequest = port_stat.peer_d.rxPdelayRequestCount;
    table_entry->ieee8021AsPortStatRxPdelayResponse = port_stat.peer_d.rxPdelayResponseCount;
    table_entry->ieee8021AsPortStatRxPdelayResponseFollowUp = port_stat.peer_d.rxPdelayResponseFollowUpCount;
    table_entry->ieee8021AsPortStatRxAnnounce = port_stat.rxAnnounceCount;
    table_entry->ieee8021AsPortStatRxPTPPacketDiscard = port_stat.rxPTPPacketDiscardCount;
    table_entry->ieee8021AsPortStatRxSyncReceiptTimeouts = port_stat.syncReceiptTimeoutCount;
    table_entry->ieee8021AsPortStatAnnounceReceiptTimeouts = port_stat.announceReceiptTimeoutCount;
    table_entry->ieee8021AsPortStatPdelayAllowedLostResponsesExceeded = port_stat.peer_d.pdelayAllowedLostResponsesExceededCount;
    table_entry->ieee8021AsPortStatTxSyncCount = port_stat.txSyncCount;
    table_entry->ieee8021AsPortStatTxFollowUpCount = port_stat.txFollowUpCount;
    table_entry->ieee8021AsPortStatTxPdelayRequest = port_stat.peer_d.txPdelayRequestCount;
    table_entry->ieee8021AsPortStatTxPdelayResponse = port_stat.peer_d.txPdelayResponseCount;
    table_entry->ieee8021AsPortStatTxPdelayResponseFollowUp = port_stat.peer_d.txPdelayResponseFollowUpCount;
    table_entry->ieee8021AsPortStatTxAnnounce = port_stat.txAnnounceCount;

    return TRUE;
}


/******************************************************************************/
//
// Scalar access functions
//
/******************************************************************************/
/**
  * \brief Get scalar data of ieee8021AsDefaultDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsDefaultDSScalar_get(ieee8021AsDefaultDS_scalar_t *scalar_entry)
{
    ieee8021AsDefaultDS_scalar_t buf;

    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    if (!IEEE8021As_Default_DSScalar_get(&buf)) {
        return -1;
    }

    memcpy(scalar_entry, &buf, sizeof(ieee8021AsDefaultDS_scalar_t));

    T_D("exit");
    return 0;
}
#if IEEE8021AsTimeSyncMIB_NOT_SUPPORTED
/**
  * \brief Set scalar data of ieee8021AsDefaultDSScalar
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsDefaultDSScalar_set(ieee8021AsDefaultDS_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}
#endif /* IEEE8021AsTimeSyncMIB_NOT_SUPPORTED */
/**
  * \brief Get scalar data of ieee8021AsCurrentDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsCurrentDSScalar_get(ieee8021AsCurrentDS_scalar_t *scalar_entry)
{
    ieee8021AsCurrentDS_scalar_t     buf;

    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    if (!IEEE8021As_Current_DSScalar_get(&buf)) {
        return -1;
    }

    memcpy(scalar_entry, &buf, sizeof(ieee8021AsCurrentDS_scalar_t));

    T_D("exit");
    return 0;
}
#if IEEE8021AsTimeSyncMIB_NOT_SUPPORTED
/**
  * \brief Set scalar data of ieee8021AsCurrentDSScalar
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsCurrentDSScalar_set(ieee8021AsCurrentDS_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}
#endif /* IEEE8021AsTimeSyncMIB_NOT_SUPPORTED */
/**
  * \brief Get scalar data of ieee8021AsParentDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsParentDSScalar_get(ieee8021AsParentDS_scalar_t *scalar_entry)
{
    ieee8021AsParentDS_scalar_t     buf;

    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    if (!IEEE8021As_Parent_DSScalar_get(&buf)) {
        return -1;
    }

    memcpy(scalar_entry, &buf, sizeof(ieee8021AsParentDS_scalar_t));

    T_D("exit");
    return 0;
}
#if IEEE8021AsTimeSyncMIB_NOT_SUPPORTED
/**
  * \brief Set scalar data of ieee8021AsParentDSScalar
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsParentDSScalar_set(ieee8021AsParentDS_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}
#endif /* IEEE8021AsTimeSyncMIB_NOT_SUPPORTED */
/**
  * \brief Get scalar data of ieee8021AsTimePropertiesDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsTimePropertiesDSScalar_get(ieee8021AsTimePropertiesDS_scalar_t *scalar_entry)
{
    ieee8021AsTimePropertiesDS_scalar_t    buf;

    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    if (!IEEE8021As_TimeProperties_DSScalar_get(&buf)) {
        return -1;
    }

    memcpy(scalar_entry, &buf, sizeof(ieee8021AsTimePropertiesDS_scalar_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Set scalar data of ieee8021AsTimePropertiesDSScalar
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsTimePropertiesDSScalar_set(ieee8021AsTimePropertiesDS_scalar_t *scalar_entry)
{
    vtss_appl_ptp_clock_timeproperties_ds_t timeproperties_ds;

    T_D("enter");

    if ( VTSS_RC_OK != vtss_appl_ptp_clock_config_timeproperties_ds_get(0, &timeproperties_ds) ) {
        return -1;
    }
    timeproperties_ds.currentUtcOffset = scalar_entry->ieee8021AsTimePropertiesDSCurrentUtcOffset;
    timeproperties_ds.currentUtcOffsetValid = scalar_entry->ieee8021AsTimePropertiesDSCurrentUtcOffsetValid;
    timeproperties_ds.leap59 = scalar_entry->ieee8021AsTimePropertiesDSLeap59;
    timeproperties_ds.leap61 = scalar_entry->ieee8021AsTimePropertiesDSLeap61;
    timeproperties_ds.timeTraceable = scalar_entry->ieee8021AsTimePropertiesDSTimeTraceable;
    timeproperties_ds.frequencyTraceable = scalar_entry->ieee8021AsTimePropertiesDSFrequencyTraceable;
    timeproperties_ds.timeSource = scalar_entry->ieee8021AsTimePropertiesDSTimeSource;

    if ( VTSS_RC_OK != vtss_appl_ptp_clock_config_timeproperties_ds_set(0, &timeproperties_ds) ) {
        return -1;
    }

    T_D("exit");
    return 0;
}
#if IEEE8021AsTimeSyncMIB_NOT_SUPPORTED
/**
  * \brief Get scalar data of ieee8021AsAcceptableMasterTableDSBaseScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSBaseScalar_get(ieee8021AsAcceptableMasterTableDSBase_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set scalar data of ieee8021AsAcceptableMasterTableDSBaseScalar
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSBaseScalar_set(ieee8021AsAcceptableMasterTableDSBase_scalar_t *scalar_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}
#endif /* IEEE8021AsTimeSyncMIB_NOT_SUPPORTED */

/******************************************************************************/
//
// Table entry access functions
//
/******************************************************************************/
/**
  * \brief Get first table entry of ieee8021AsPortDSIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortDSIfTableEntry_getfirst(ieee8021AsPortDSIfTable_entry_t *table_entry)
{
    ieee8021AsPortDSIfTable_entry_t buf;

    memset(&buf, 0, sizeof(buf));

    T_D("enter");

    if (!IEEE8021As_Port_DSIfTableEntry_get(&buf, 0)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021AsPortDSIfTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Get/Getnext table entry of ieee8021AsPortDSIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortDSIfTableEntry_get(ieee8021AsPortDSIfTable_entry_t *table_entry, int getnext)
{
    ieee8021AsPortDSIfTable_entry_t buf;

    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    buf.ieee8021AsPortDSAsIfIndex = table_entry->ieee8021AsPortDSAsIfIndex;
    if (!IEEE8021As_Port_DSIfTableEntry_get(&buf, getnext)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021AsPortDSIfTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Set table entry of ieee8021AsPortDSIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortDSIfTableEntry_set(ieee8021AsPortDSIfTable_entry_t *table_entry)
{
    T_D("enter");
    vtss_ifindex_t                 portnum;
    vtss_appl_ptp_config_port_ds_t port_ds;

    portnum = vtss_ifindex_cast_from_u32_0(table_entry->ieee8021AsPortDSAsIfIndex);
    if ((vtss_appl_ptp_config_clocks_port_ds_get(0, portnum, &port_ds)) != VTSS_RC_OK) {
        return -1;
    }

    port_ds.enabled = table_entry->ieee8021AsPortDSPttPortEnabled;
    port_ds.c_802_1as.peer_d.meanLinkDelayThresh = (((i64)table_entry->ieee8021AsPortDSNeighborPropDelayThreshMs) << 32) | (i64)table_entry->ieee8021AsPortDSNeighborPropDelayThreshLs;
    port_ds.delayAsymmetry = (((i64)table_entry->ieee8021AsPortDSDelayAsymmetryMs) << 32) | (i64)table_entry->ieee8021AsPortDSDelayAsymmetryLs;
    port_ds.logAnnounceInterval = table_entry->ieee8021AsPortDSCurrentLogAnnounceInterval;
    port_ds.announceReceiptTimeout = table_entry->ieee8021AsPortDSAnnounceReceiptTimeout;
    port_ds.logSyncInterval = table_entry->ieee8021AsPortDSCurrentLogSyncInterval;
    port_ds.c_802_1as.syncReceiptTimeout = table_entry->ieee8021AsPortDSSyncReceiptTimeout;
    port_ds.logMinPdelayReqInterval = table_entry->ieee8021AsPortDSCurrentLogPdelayReqInterval;
    port_ds.c_802_1as.peer_d.allowedLostResponses = table_entry->ieee8021AsPortDSAllowedLostResponses;
    port_ds.versionNumber = table_entry->ieee8021AsPortDSVersionNumber;

    if ((vtss_appl_ptp_config_clocks_port_ds_set(0, portnum, &port_ds)) != VTSS_RC_OK) {
        return -1;
    }

    T_D("exit");
    return 0;
}

/**
  * \brief Get first table entry of ieee8021AsPortStatIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortStatIfTableEntry_getfirst(ieee8021AsPortStatIfTable_entry_t *table_entry)
{
    ieee8021AsPortStatIfTable_entry_t buf;

    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    if (!IEEE8021As_Port_Stat_IfTableEntry_get(&buf, 0)) {
        return -1;
    }
    memcpy(table_entry, &buf, sizeof(ieee8021AsPortStatIfTable_entry_t));

    T_D("exit");
    return 0;
}

/**
  * \brief Get/Getnext table entry of ieee8021AsPortStatIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortStatIfTableEntry_get(ieee8021AsPortStatIfTable_entry_t *table_entry, int getnext)
{
    ieee8021AsPortStatIfTable_entry_t buf;

    T_D("enter");

    memset(&buf, 0, sizeof(buf));

    if (!IEEE8021As_Port_Stat_IfTableEntry_get(&buf, getnext)) {
        return -1;
    }

    memcpy(table_entry, &buf, sizeof(ieee8021AsPortStatIfTable_entry_t));

    T_D("exit");
    return 0;
}
#if IEEE8021AsTimeSyncMIB_NOT_SUPPORTED
/**
  * \brief Get first table entry of ieee8021AsAcceptableMasterTableDSMasterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSMasterTableEntry_getfirst(ieee8021AsAcceptableMasterTableDSMasterTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Get/Getnext table entry of ieee8021AsAcceptableMasterTableDSMasterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSMasterTableEntry_get(ieee8021AsAcceptableMasterTableDSMasterTable_entry_t *table_entry, int getnext)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}

/**
  * \brief Set table entry of ieee8021AsAcceptableMasterTableDSMasterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSMasterTableEntry_set(ieee8021AsAcceptableMasterTableDSMasterTable_entry_t *table_entry)
{
    T_D("enter");

    // FIXME: Return 0 if the operation success, non-zero value otherwise.

    T_D("exit");
    return -1;
}
#endif /* IEEE8021AsTimeSyncMIB_NOT_SUPPORTED */
