/*
 Copyright (c) 2006-2020 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
*/

/*
 Microchip is aware that some terminology used in this technical document is
 antiquated and inappropriate. As a result of the complex nature of software
 where seemingly simple changes have unpredictable, and often far-reaching
 negative results on the software's functionality (requiring extensive retesting
 and revalidation) we are unable to make the desired changes in all legacy
 systems without compromising our product or our clients' products.
*/

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40

#ifndef _IEEE8021ASTIMESYNCMIB_H_
#define _IEEE8021ASTIMESYNCMIB_H_


#define IEEE8021ASTIMESYNCMIB_STR_LEN_MAX    7
#define IEEE8021ASTIMESYNCMIB_OID_LEN_MAX    16
#define IEEE8021ASTIMESYNCMIB_BITS_LEN_MAX   4

#define IEEE8021AsTimeSyncMIB_NOT_SUPPORTED      0
/******************************************************************************/
//
// Data structure declarations
//
/******************************************************************************/

// The scalar data structure for ieee8021AsDefaultDSClockIdentity
typedef struct {
    char ieee8021AsDefaultDSClockIdentity[IEEE8021ASTIMESYNCMIB_STR_LEN_MAX + 1];
    size_t  ieee8021AsDefaultDSClockIdentity_len;
    u_long ieee8021AsDefaultDSNumberPorts;
    long ieee8021AsDefaultDSClockClass;
    long ieee8021AsDefaultDSClockAccuracy;
    u_long ieee8021AsDefaultDSOffsetScaledLogVariance;
    u_long ieee8021AsDefaultDSPriority1;
    u_long ieee8021AsDefaultDSPriority2;
    long ieee8021AsDefaultDSGmCapable;
    long ieee8021AsDefaultDSCurrentUTCOffset;
    long ieee8021AsDefaultDSCurrentUTCOffsetValid;
    long ieee8021AsDefaultDSLeap59;
    long ieee8021AsDefaultDSLeap61;
    long ieee8021AsDefaultDSTimeTraceable;
    long ieee8021AsDefaultDSFrequencyTraceable;
    long ieee8021AsDefaultDSTimeSource;
} ieee8021AsDefaultDS_scalar_t;

// The scalar data structure for ieee8021AsCurrentDSStepsRemoved
typedef struct {
    long ieee8021AsCurrentDSStepsRemoved;
    long ieee8021AsCurrentDSOffsetFromMasterHs;
    long ieee8021AsCurrentDSOffsetFromMasterMs;
    long ieee8021AsCurrentDSOffsetFromMasterLs;
    long ieee8021AsCurrentDSLastGmPhaseChangeHs;
    u_long ieee8021AsCurrentDSLastGmPhaseChangeMs;
    u_long ieee8021AsCurrentDSLastGmPhaseChangeLs;
    long ieee8021AsCurrentDSLastGmFreqChangeMs;
    u_long ieee8021AsCurrentDSLastGmFreqChangeLs;
    u_long ieee8021AsCurrentDSGmTimebaseIndicator;
    u_long ieee8021AsCurrentDSGmChangeCount;
    u_long ieee8021AsCurrentDSTimeOfLastGmChangeEvent;
    u_long ieee8021AsCurrentDSTimeOfLastGmFreqChangeEvent;
    u_long ieee8021AsCurrentDSTimeOfLastGmPhaseChangeEvent;
} ieee8021AsCurrentDS_scalar_t;

// The scalar data structure for ieee8021AsParentDSParentClockIdentity
typedef struct {
    char ieee8021AsParentDSParentClockIdentity[IEEE8021ASTIMESYNCMIB_STR_LEN_MAX + 1];
    size_t  ieee8021AsParentDSParentClockIdentity_len;
    u_long ieee8021AsParentDSParentPortNumber;
    long ieee8021AsParentDSCumlativeRateRatio;
    char ieee8021AsParentDSGrandmasterIdentity[IEEE8021ASTIMESYNCMIB_STR_LEN_MAX + 1];
    size_t  ieee8021AsParentDSGrandmasterIdentity_len;
    long ieee8021AsParentDSGrandmasterClockClass;
    long ieee8021AsParentDSGrandmasterClockAccuracy;
    u_long ieee8021AsParentDSGrandmasterOffsetScaledLogVariance;
    u_long ieee8021AsParentDSGrandmasterPriority1;
    u_long ieee8021AsParentDSGrandmasterPriority2;
} ieee8021AsParentDS_scalar_t;

// The scalar data structure for ieee8021AsTimePropertiesDSCurrentUtcOffset
typedef struct {
    long ieee8021AsTimePropertiesDSCurrentUtcOffset;
    long ieee8021AsTimePropertiesDSCurrentUtcOffsetValid;
    long ieee8021AsTimePropertiesDSLeap59;
    long ieee8021AsTimePropertiesDSLeap61;
    long ieee8021AsTimePropertiesDSTimeTraceable;
    long ieee8021AsTimePropertiesDSFrequencyTraceable;
    long ieee8021AsTimePropertiesDSTimeSource;
} ieee8021AsTimePropertiesDS_scalar_t;

// The scalar data structure for ieee8021AsAcceptableMasterTableDSMaxTableSize
typedef struct {
    u_long ieee8021AsAcceptableMasterTableDSMaxTableSize;
    u_long ieee8021AsAcceptableMasterTableDSActualTableSize;
} ieee8021AsAcceptableMasterTableDSBase_scalar_t;


// The table entry data structure for ieee8021AsPortDSIfTable
typedef struct {
    // Entry keys
    u_long   ieee8021AsBridgeBasePort;
    long   ieee8021AsPortDSAsIfIndex;

    // Entry columns
    char ieee8021AsPortDSClockIdentity[IEEE8021ASTIMESYNCMIB_STR_LEN_MAX + 1];
    size_t  ieee8021AsPortDSClockIdentity_len;
    u_long ieee8021AsPortDSPortNumber;
    long ieee8021AsPortDSPortRole;
    long ieee8021AsPortDSPttPortEnabled;
    long ieee8021AsPortDSIsMeasuringDelay;
    long ieee8021AsPortDSAsCapable;
    u_long ieee8021AsPortDSNeighborPropDelayHs;
    u_long ieee8021AsPortDSNeighborPropDelayMs;
    u_long ieee8021AsPortDSNeighborPropDelayLs;
    u_long ieee8021AsPortDSNeighborPropDelayThreshHs;
    u_long ieee8021AsPortDSNeighborPropDelayThreshMs;
    u_long ieee8021AsPortDSNeighborPropDelayThreshLs;
    long ieee8021AsPortDSDelayAsymmetryHs;
    u_long ieee8021AsPortDSDelayAsymmetryMs;
    u_long ieee8021AsPortDSDelayAsymmetryLs;
    long ieee8021AsPortDSNeighborRateRatio;
    long ieee8021AsPortDSInitialLogAnnounceInterval;
    long ieee8021AsPortDSCurrentLogAnnounceInterval;
    u_long ieee8021AsPortDSAnnounceReceiptTimeout;
    long ieee8021AsPortDSInitialLogSyncInterval;
    long ieee8021AsPortDSCurrentLogSyncInterval;
    u_long ieee8021AsPortDSSyncReceiptTimeout;
    u_long ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalHs;
    u_long ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalMs;
    u_long ieee8021AsPortDSSyncReceiptTimeoutTimeIntervalLs;
    long ieee8021AsPortDSInitialLogPdelayReqInterval;
    long ieee8021AsPortDSCurrentLogPdelayReqInterval;
    u_long ieee8021AsPortDSAllowedLostResponses;
    u_long ieee8021AsPortDSVersionNumber;
    u_long ieee8021AsPortDSNupMs;
    u_long ieee8021AsPortDSNupLs;
    u_long ieee8021AsPortDSNdownMs;
    u_long ieee8021AsPortDSNdownLs;
    long ieee8021AsPortDSAcceptableMasterTableEnabled;
} ieee8021AsPortDSIfTable_entry_t;

// The table entry data structure for ieee8021AsPortStatIfTable
typedef struct {
    // Entry keys
    u_long   ieee8021AsBridgeBasePort;
    long   ieee8021AsPortDSAsIfIndex;

    // Entry columns
    u_long ieee8021AsPortStatRxSyncCount;
    u_long ieee8021AsPortStatRxFollowUpCount;
    u_long ieee8021AsPortStatRxPdelayRequest;
    u_long ieee8021AsPortStatRxPdelayResponse;
    u_long ieee8021AsPortStatRxPdelayResponseFollowUp;
    u_long ieee8021AsPortStatRxAnnounce;
    u_long ieee8021AsPortStatRxPTPPacketDiscard;
    u_long ieee8021AsPortStatRxSyncReceiptTimeouts;
    u_long ieee8021AsPortStatAnnounceReceiptTimeouts;
    u_long ieee8021AsPortStatPdelayAllowedLostResponsesExceeded;
    u_long ieee8021AsPortStatTxSyncCount;
    u_long ieee8021AsPortStatTxFollowUpCount;
    u_long ieee8021AsPortStatTxPdelayRequest;
    u_long ieee8021AsPortStatTxPdelayResponse;
    u_long ieee8021AsPortStatTxPdelayResponseFollowUp;
    u_long ieee8021AsPortStatTxAnnounce;
} ieee8021AsPortStatIfTable_entry_t;

// The table entry data structure for ieee8021AsAcceptableMasterTableDSMasterTable
typedef struct {
    // Entry keys
    u_long   ieee8021AsAcceptableMasterTableDSMasterId;

    // Entry columns
    char ieee8021AsAcceptableMasterClockIdentity[IEEE8021ASTIMESYNCMIB_STR_LEN_MAX + 1];
    size_t  ieee8021AsAcceptableMasterClockIdentity_len;
    u_long ieee8021AsAcceptableMasterPortNumber;
    u_long ieee8021AsAcceptableMasterAlternatePriority1;
    long ieee8021AsAcceptableMasterRowStatus;
} ieee8021AsAcceptableMasterTableDSMasterTable_entry_t;


/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-AS-MIB:ieee8021AsTimeSyncMib.
  **/
void ieee8021AsTimeSyncMib_init(void);


/******************************************************************************/
//
// Scalar access function declarations
//
/******************************************************************************/
/**
  * \brief Get scalar data of ieee8021AsDefaultDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsDefaultDSScalar_get(ieee8021AsDefaultDS_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of ieee8021AsDefaultDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsDefaultDSScalar_set(ieee8021AsDefaultDS_scalar_t *scalar_entry);
/**
  * \brief Get scalar data of ieee8021AsCurrentDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsCurrentDSScalar_get(ieee8021AsCurrentDS_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of ieee8021AsCurrentDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsCurrentDSScalar_set(ieee8021AsCurrentDS_scalar_t *scalar_entry);
/**
  * \brief Get scalar data of ieee8021AsParentDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsParentDSScalar_get(ieee8021AsParentDS_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of ieee8021AsParentDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsParentDSScalar_set(ieee8021AsParentDS_scalar_t *scalar_entry);
/**
  * \brief Get scalar data of ieee8021AsTimePropertiesDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsTimePropertiesDSScalar_get(ieee8021AsTimePropertiesDS_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of ieee8021AsTimePropertiesDSScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsTimePropertiesDSScalar_set(ieee8021AsTimePropertiesDS_scalar_t *scalar_entry);
/**
  * \brief Get scalar data of ieee8021AsAcceptableMasterTableDSBaseScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSBaseScalar_get(ieee8021AsAcceptableMasterTableDSBase_scalar_t *scalar_entry);

/**
  * \brief Set scalar data of ieee8021AsAcceptableMasterTableDSBaseScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSBaseScalar_set(ieee8021AsAcceptableMasterTableDSBase_scalar_t *scalar_entry);


/******************************************************************************/
//
// Table entry access function declarations
//
/******************************************************************************/
/**
  * \brief Get first table entry of ieee8021AsPortDSIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortDSIfTableEntry_getfirst(ieee8021AsPortDSIfTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021AsPortDSIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortDSIfTableEntry_get(ieee8021AsPortDSIfTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021AsPortDSIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortDSIfTableEntry_set(ieee8021AsPortDSIfTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021AsPortStatIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortStatIfTableEntry_getfirst(ieee8021AsPortStatIfTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021AsPortStatIfTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsPortStatIfTableEntry_get(ieee8021AsPortStatIfTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ieee8021AsAcceptableMasterTableDSMasterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSMasterTableEntry_getfirst(ieee8021AsAcceptableMasterTableDSMasterTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021AsAcceptableMasterTableDSMasterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSMasterTableEntry_get(ieee8021AsAcceptableMasterTableDSMasterTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021AsAcceptableMasterTableDSMasterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021AsAcceptableMasterTableDSMasterTableEntry_set(ieee8021AsAcceptableMasterTableDSMasterTable_entry_t *table_entry);

#endif /* _IEEE8021ASTIMESYNCMIB_H_ */
