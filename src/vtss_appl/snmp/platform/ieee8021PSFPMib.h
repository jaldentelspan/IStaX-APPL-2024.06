/*

 Copyright (c) 2006-2017 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

*/

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40

#ifndef _IEEE8021PSFPMIB_H_
#define _IEEE8021PSFPMIB_H_


#define IEEE8021PSFPMIB_STR_LEN_MAX    63  // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021PSFPMIB_OID_LEN_MAX    16  // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021PSFPMIB_BITS_LEN_MAX   4   // FIXME: Redefine a sufficient value for saving the memory

#define  PSFP_SET_SDU_TLV_LENGTH  4
#define  PSFP_SET_FMI_TLV_LENGTH  4
#define  PSFP_SET_ADMIN_TLV_LENGTH   13
#define  PSFP_SET_OPER_TLV_LENGTH  13
#define FILTER_SPECIFICATION_LIST_MAX  14
#define FILTER_SPECIFICATION_LIST_MIN   7
/* Syntax of ieee8021PSFPStreamBlockedDueToOversizeFrameEnable
*   "The ieee8021PSFPStreamBlockedDueToOversizeFrameEnable object contains a Boolean value that indicates whether the ieee8021PSFPStreamBlockedDueToOversizeFrame function is ena*    bled (TRUE) or disabled (FALSE). The value of this object MUST be retained across reinitializations of the management system."
*/
enum {
    IEEE8021_PSFP_BO_ENABLED    = 1,
    IEEE8021_PSFP_BO_DISABLED   = 2
};

/* Syntax of ieee8021PSFPStreamBlockedDueToOversizeFrame
*   "The ieee8021PSFPStreamBlockedDueToOversizeFrameEnable object contains a Boolean value that indicates whether the ieee8021PSFPStreamBlockedDueToOversizeFrame function is ena*    bled (TRUE) or disabled (FALSE)"
*/
enum {
    IEEE8021_PSFP_BO_DISCARDED       = 1,
    IEEE8021_PSFP_BO_NOT_DISCARDED   = 2
};

/* Syntax of ieee8021PSFPGateEnabled
*  "The GateEnabled parameter determines whether the stream gate
*  is active (true) or inactive (false)."
*/
enum {
    IEEE8021_STREAM_GATE_ACTIVE       = 1,
    IEEE8021_STREAM_GATE_INACTIVE   = 2
};

/* Syntax of ieee8021PSFPAdminGateStates
*  "The administrative value of the GateStates parameter for the stream gate. The open value indicates that the gate is open, the closed value indicates that the gate is closed."
*/
enum {
    IEEE8021_ADMIN_GATE_OPEN       = 1,
    IEEE8021_ADMIN_GATE_CLOSED   = 2
};

/* Syntax of ieee8021PSFPOperGateStates
*  "The operational value of the GateStates parameter for the stream gate. The open value indicates that the gate is open, the closed value indicates that the gate is closed."
*/
enum {
    IEEE8021_OPER_GATE_OPEN       = 1,
    IEEE8021_OPER_GATE_CLOSED   = 2
};

/* Syntax of ieee8021PSFPFlowMeterCM
*  "The FlowMeterCM parameter contains an integer value that represents the CM value for the flow meter, as an enumerated value indicating colorBlind(1) or colorAware(2)."
*/
enum {
    IEEE8021_FMI_COLORBLIND      = 1,
    IEEE8021_FMI_COLORAWARE      = 2
};

/* Syntax of ieee8021PSFPFlowMeterMarkAllFramesRedEnable
*  "The FlowMeterMarkAllFramesRedEnable parameter contains a Boolean value that indicates whether the MarkAllFramesRed function is enabled (TRUE) or disabled (FALSE)."
*/
enum {
    IEEE8021_FMI_RED_ENABLED      = 1,
    IEEE8021_FMI_RED_DISABLED      = 2
};

/* Syntax of ieee8021PSFPFlowMeterMarkAllFramesRed
*  "The FlowMeterMarkAllFramesRed parameter contains a Boolean value that indicates whether, if the MarkAllFramesRed function is enabled, all frames are to be discarded (TRUE)  *   or not (FALSE)."
*/
enum {
    IEEE8021_FMI_FRAMES_DISCARDED       = 1,
    IEEE8021_FMI_FRAMES_NOT_DISCARDED   = 2
};

/* Syntax of ieee8021PSFPGateClosedDueToInvalidRxEnable
*  "The PSFPGateClosedDueToInvalidRxEnable object contains a Boolean value that indicates whether the PSFPGateClosedDueToInvalidRx function is enabled (TRUE) or disabled (FALSE)
*/
enum {
    IEEE8021_GATE_CLOSED_INVALID_RX_ENABLED    = 1,
    IEEE8021_GATE_CLOSED_INVALID_RX_DISABLED   = 2
};

/* Syntax of ieee8021PSFPGateClosedDueToOctetsExceededEnable
*  "The PSFPGateClosedDueToOctetsExceededEnable object contains a Boolean value that indicates whether the PSFPGateClosedDueToOctetsExceeded function is enabled (TRUE) or disabled (FALSE)."
*/
enum {
    IEEE8021_GATE_CLOSED_OCTET_EXCEED_ENABLED    = 1,
    IEEE8021_GATE_CLOSED_OCTET_EXCEED_DISABLED   = 2
};

/**
 * \The following three enums defines the first three octet fields of
   each TLV inside ieee8021PSFPFilterSpecificationList.
   The first octet  of each TLV is interpreted as an
        unsigned integer representing a filter specification type:
            0: Maximum SDU Size.
            1: Flow meter instance identifier.
            2-255: Reserved for future gate operations

   The second and third octets of the TLV are the length field,
   interpreted as an unsigned integer, indicating the number of
   octets of the value that follows the length. A length of
   zero indicates that there is no value
   (i.e., the filter specification has no parameters).
**/

enum {
    PSFP_CONTROL_FILTER_SPECIFICATION_TYPE_SDU = 0,
    PSFP_CONTROL_FILTER_SPECIFICATION_TYPE_FMI = 1
};

/******************************************************************************/
//
// Data structure declarations
//
/******************************************************************************/


// The table entry data structure for ieee8021PSFPStreamFilterTable
typedef struct {
    // Entry keys
    u_long   ieee8021BridgeBaseComponentId;
    u_long   ieee8021PSFPStreamFilterInstance;

    // Entry columns
    long ieee8021PSFPStreamHandleSpec;
    long ieee8021PSFPPrioritySpec;
    u_long ieee8021PSFPStreamGateInstanceID;
    char ieee8021PSFPFilterSpecificationList[IEEE8021PSFPMIB_STR_LEN_MAX + 1];
    size_t  ieee8021PSFPFilterSpecificationList_len;
    struct counter64    ieee8021PSFPMatchingFramesCount;
    struct counter64    ieee8021PSFPPassingFramesCount;
    struct counter64    ieee8021PSFPNotPassingFramesCount;
    struct counter64    ieee8021PSFPPassingSDUCount;
    struct counter64    ieee8021PSFPNotPassingSDUCount;
    struct counter64    ieee8021PSFPREDFramesCount;
    long ieee8021PSFPStreamBlockedDueToOversizeFrameEnable;
    long ieee8021PSFPStreamBlockedDueToOversizeFrame;
    long ieee8021PSFPStreamFilterEntryRowStatus;
} ieee8021PSFPStreamFilterTable_entry_t;

// The table entry data structure for ieee8021PSFPStreamGateTable
typedef struct {
    // Entry keys
    u_long   ieee8021BridgeBaseComponentId;
    u_long   ieee8021PSFPStreamGateInstance;

    // Entry columns
    long ieee8021PSFPGateEnabled;
    long ieee8021PSFPAdminGateStates;
    long ieee8021PSFPOperGateStates;
    u_long ieee8021PSFPAdminControlListLength;
    u_long ieee8021PSFPOperControlListLength;
    char ieee8021PSFPAdminControlList[IEEE8021PSFPMIB_STR_LEN_MAX + 1];
    size_t  ieee8021PSFPAdminControlList_len;
    char ieee8021PSFPOperControlList[IEEE8021PSFPMIB_STR_LEN_MAX + 1];
    size_t  ieee8021PSFPOperControlList_len;
    u_long ieee8021PSFPAdminCycleTimeNumerator;
    u_long ieee8021PSFPAdminCycleTimeDenominator;
    u_long ieee8021PSFPOperCycleTimeNumerator;
    u_long ieee8021PSFPOperCycleTimeDenominator;
    u_long ieee8021PSFPAdminCycleTimeExtension;
    u_long ieee8021PSFPOperCycleTimeExtension;
    char ieee8021PSFPAdminBaseTime[IEEE8021PSFPMIB_STR_LEN_MAX + 1];
    size_t  ieee8021PSFPAdminBaseTime_len;
    char ieee8021PSFPOperBaseTime[IEEE8021PSFPMIB_STR_LEN_MAX + 1];
    size_t  ieee8021PSFPOperBaseTime_len;
    long ieee8021PSFPConfigChange;
    char ieee8021PSFPConfigChangeTime[IEEE8021PSFPMIB_STR_LEN_MAX + 1];
    size_t  ieee8021PSFPConfigChangeTime_len;
    u_long ieee8021PSFPTickGranularity;
    char ieee8021PSFPCurrentTime[IEEE8021PSFPMIB_STR_LEN_MAX + 1];
    size_t  ieee8021PSFPCurrentTime_len;
    long ieee8021PSFPConfigPending;
    struct counter64    ieee8021PSFPConfigChangeError;
    long ieee8021PSFPAdminIPV;
    long ieee8021PSFPOperIPV;
    long ieee8021PSFPGateClosedDueToInvalidRxEnable;
    long ieee8021PSFPGateClosedDueToInvalidRx;
    long ieee8021PSFPGateClosedDueToOctetsExceededEnable;
    long ieee8021PSFPGateClosedDueToOctetsExceeded;
    long ieee8021PSFPStreamGateEntryRowStatus;
} ieee8021PSFPStreamGateTable_entry_t;

// The table entry data structure for ieee8021PSFPFlowMeterTable
typedef struct {
    // Entry keys
    u_long   ieee8021BridgeBaseComponentId;
    u_long   ieee8021PSFPFlowMeterInstance;

    // Entry columns
    u_long ieee8021PSFPFlowMeterCIR;
    u_long ieee8021PSFPFlowMeterCBS;
    u_long ieee8021PSFPFlowMeterEIR;
    u_long ieee8021PSFPFlowMeterEBS;
    long ieee8021PSFPFlowMeterCF;
    long ieee8021PSFPFlowMeterCM;
    long ieee8021PSFPFlowMeterDropOnYellow;
    long ieee8021PSFPFlowMeterMarkAllFramesRedEnable;
    long ieee8021PSFPFlowMeterMarkAllFramesRed;
    long ieee8021PSFPFlowMeterEntryRowStatus;
} ieee8021PSFPFlowMeterTable_entry_t;

// The table entry data structure for ieee8021PSFPStreamParameterTable
typedef struct {
    // Entry keys
    u_long   ieee8021BridgeBaseComponentId;

    // Entry columns
    u_long ieee8021PSFPMaxStreamFilterInstances;
    u_long ieee8021PSFPMaxStreamGateInstances;
    u_long ieee8021PSFPMaxFlowMeterInstances;
    u_long ieee8021PSFPSupportedListMax;
} ieee8021PSFPStreamParameterTable_entry_t;

/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-PSFP-MIB:ieee8021PSFPMib.
  **/
void ieee8021PSFPMib_init(void);


/******************************************************************************/
//
// Scalar access function declarations
//
/******************************************************************************/


/******************************************************************************/
//
// Table entry access function declarations
//
/******************************************************************************/
/**
  * \brief Get first table entry of ieee8021PSFPStreamFilterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamFilterTableEntry_getfirst(ieee8021PSFPStreamFilterTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021PSFPStreamFilterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamFilterTableEntry_get(ieee8021PSFPStreamFilterTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021PSFPStreamFilterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamFilterTableEntry_set(ieee8021PSFPStreamFilterTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021PSFPStreamGateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamGateTableEntry_getfirst(ieee8021PSFPStreamGateTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021PSFPStreamGateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamGateTableEntry_get(ieee8021PSFPStreamGateTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021PSFPStreamGateTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamGateTableEntry_set(ieee8021PSFPStreamGateTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021PSFPFlowMeterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPFlowMeterTableEntry_getfirst(ieee8021PSFPFlowMeterTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021PSFPFlowMeterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPFlowMeterTableEntry_get(ieee8021PSFPFlowMeterTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021PSFPFlowMeterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPFlowMeterTableEntry_set(ieee8021PSFPFlowMeterTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021PSFPStreamParameterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamParameterTableEntry_getfirst(ieee8021PSFPStreamParameterTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021PSFPStreamParameterTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int ieee8021PSFPStreamParameterTableEntry_get(ieee8021PSFPStreamParameterTable_entry_t *table_entry, int getnext);


#endif /* _IEEE8021PSFPMIB_H_ */

