<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>IPv6 Source Guard Configuration</title>
    <link href="lib/normal.css" rel="stylesheet" type="text/css">
    <script type="text/javascript" src="lib/mootools-core.js"></script>
    <script type="text/javascript" src="lib/config.js"></script>
    <script type="text/javascript" src="lib/dynforms.js"></script>
    <script type="text/javascript" src="lib/validate.js"></script>
    <script type="text/javascript" src="lib/json_minimum.js"></script>
    <script type="text/javascript" src="lib/HeaderControl.js"></script>
    <script type="text/javascript">

// Help page magic
var help_page = "/help/help_module_conf.htm";

var currPortsInfo = [];
var moduleEnabled = false;

function saveTable()
{
    var i;
    var dataArr = [];
    var port_warning = [];
    for (i = 0; i < currPortsInfo.length; i++) {
        var trId = "portData" + i;
        var modeId = "modeSelect" + i;
        var maxId = "maxSelect" + i;
        var currPort = currPortsInfo[i];

        var tr = document.getElementById(trId);
        var innerText = tr.innerText.split("\t");
        var portName = innerText[0];

        var modeSelect = document.getElementById(modeId);
        var maxSelect = document.getElementById(maxId);
        var mode = modeSelect.options[modeSelect.selectedIndex].value;
        var max = parseInt(maxSelect.options[maxSelect.selectedIndex].value, 10);

        var boolMode = false;
        if (mode === "true") {
            boolMode = true;
        }

        if ((currPort.Mode === boolMode) && (max === currPort.MaxDyn)){
            continue;
        }

        if (moduleEnabled && currPort.Mode && boolMode && (max < currPort.MaxDyn)) {
            port_warning.push(portName);
        }

        var portConf = {
        "enabled": boolMode,
        "MaxDynamicEntries": max
        };

        var data = [portName, portConf];
        
        dataArr.push(data);

    }

    if (port_warning.length > 0) {
        if (!confirm("The new settings may cause the loss of some dynamic entries on port(s):\n" + port_warning.join(", ") +".\nDo you want to proceed anyway?")) {
            return;
        }
    }

    for (i = 0;  i < dataArr.length; i++) {
        requestJsonDoc("ipv6_source_guard.config.port.set", dataArr[i]); 
    }

    milliSleep(500);

    requestPortsUpdate();
}

function processConf(recv_json, name) 
{
    if (!recv_json) {
        alert("Could not get module configuration.");
        return;
    }

    var select = document.getElementById("sourceGuardMode");
    select.options.length = 0;

    var optionEnabled = document.createElement("option");
    optionEnabled.text = "Enabled";
    optionEnabled.id = "modeEnabled";
    optionEnabled.value = true;
    select.add(optionEnabled);
    
    var optionDisabled = document.createElement("option");
    optionDisabled.text = "Disabled";
    optionDisabled.id = "modeDisabled";
    optionDisabled.value = false;
    select.add(optionDisabled);
    
    moduleEnabled = recv_json.Enabled;

    if (moduleEnabled) {
        optionEnabled.selected = true;
    } else {
        optionDisabled.selected = true;
    }
}

function checkSelectAll(selectId) {
    var select = document.getElementById(selectId + "All");
    var value = select.options[select.selectedIndex].value;

    if (value === "none") {
        return;
    }

    for (var i = 0; i < currPortsInfo.length; i++) {
        var portSelect = document.getElementById(selectId + i);

        portSelect.value = value;
    }

}

function addFirstRow(index, frag) {
    var id = "portData" + "All";
    var tr = CreateStyledElement("tr", index % 2 ? "display_odd" : "display_even");
    tr.id = id;
    var port = "*  ";

    /* Add mode selector. */
    var modeSelect = document.createElement("SELECT");
    var modeSelectId = "modeSelect" + "All";
    modeSelect.id = modeSelectId;
    var enableOption = document.createElement("option");
    var disableOption = document.createElement("option");
    var emptyOption = document.createElement("option");

    emptyOption.text = "<>";
    emptyOption.value = "none";
    enableOption.text = "Enabled";
    enableOption.value = true;
    disableOption.text = "Disabled";
    disableOption.value = false;

    modeSelect.add(emptyOption);
    modeSelect.add(enableOption);
    modeSelect.add(disableOption);

    emptyOption.selected = true;
    modeSelect.onchange = function() {checkSelectAll("modeSelect");};

    /* Add max dynamic selector.*/
    var maxSelect = document.createElement("SELECT");
    var maxSelectId = "maxSelect" + "All";
    maxSelect.id = maxSelectId;

    var selectEmptyOption = document.createElement("option");
    selectEmptyOption.text = "<>";
    selectEmptyOption.value = "none";
    maxSelect.add(selectEmptyOption);
    selectEmptyOption.selected = true;

    for (var i = 0; i < 4; i++) {
        var option = document.createElement("option");
        maxSelect.add(option);
        
        if (i === 3) {
            option.text = "Unlimited";
            option.value = 0xffff;
        } else {
            option.text = i;
            option.value = i;
        }
    }

    maxSelect.onchange = function() {checkSelectAll("maxSelect");};

    var td1 = CreateTd("cr");
    var td2 = CreateTd("cr");

    // Add values to table.
    addTextCell(tr, port, "cr");
    addCell(tr,td1, modeSelect);
    addCell(tr,td2, maxSelect);
    
    frag.appendChild(tr);
}

function addEntryRow(index, frag, entryKey, entryValues)
{
    var id = "portData" + (index-1);
    var tr = CreateStyledElement("tr", index % 2 ? "display_odd" : "display_even");
    tr.id = id;
    var port = entryKey;
    var enabled = entryValues["enabled"];
    var maxDyn = entryValues["MaxDynamicEntries"];

    var currPort = {
        "Port": port,
        "Mode": enabled,
        "MaxDyn": maxDyn
    };

    currPortsInfo.push(currPort);

    /* Add mode selector. */
    var modeSelect = document.createElement("SELECT");
    var modeSelectId = "modeSelect" + (index-1);
    modeSelect.id = modeSelectId;
    var enableOption = document.createElement("option");
    var disableOption = document.createElement("option");

    enableOption.text = "Enabled";
    enableOption.value = true;
    disableOption.text = "Disabled";
    disableOption.value = false;

    modeSelect.add(enableOption);
    modeSelect.add(disableOption);

    if (enabled) {
        enableOption.selected = true;
    } else {
        disableOption.selected = true;
    }
    
    /* Add max dynamic selector.*/
    var maxSelect = document.createElement("SELECT");
    var maxSelectId = "maxSelect" + (index-1);
    maxSelect.id = maxSelectId;

    for (var i = 0; i < 4; i++) {
        var option = document.createElement("option");
        maxSelect.add(option);
        
        if (i === 3) {
            option.text = "Unlimited";
            option.value = 0xffff;
            if (maxDyn > 2) {
                option.selected = true;
            }
        } else {
            option.text = i;
            option.value = i;
        }

        if (maxDyn === i) {
            option.selected = true;
        }
    }
    
    var td1 = CreateTd("cr");
    var td2 = CreateTd("cr");

    // Add values to table.
    addTextCell(tr, port, "cr");
    addCell(tr,td1, modeSelect);
    addCell(tr,td2, maxSelect);
    
    frag.appendChild(tr);
}

function processPorts(recv_json, name)
{
    if (!recv_json) {
        alert("Could not get port data.");
        return;
    }

    var tbody = document.getElementById('tableBodyData');
    clearChildNodes(tbody);
    currPortsInfo.length = 0;
    
    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    var index = 0;

    // First row allows user to change all ports an once.
    addFirstRow(index, frag);
    index++;

    Object.each(recv_json, function (record) {
        addEntryRow(index, frag, record.key, record.val);
        index++;
    });


    if (!tbody.appendChild(frag)) { // Add Frag to table body
        alert("This browser doesn't support dynamic tables.");
    }
}

function updateGlobalConf()
{
    var select = document.getElementById("sourceGuardMode");
    var value = select.options[select.selectedIndex].value;

    var boolValue = false;

    if (value === "true") {
        boolValue = true;
    } else {
        boolValue = false;
    }

    var data = {
        "Enabled": boolValue
    };

    requestJsonDoc("ipv6_source_guard.config.global.set", data);

    milliSleep(500);

    requestGlobalUpdate();
}

function requestTranslate()
{
    var data = {
        "TranslateDynamicToStatic": true
    };
    requestJsonDoc("ipv6_source_guard.control.translate.set", data);
}

function requestGlobalUpdate()
{
    requestJsonDoc("ipv6_source_guard.config.global.get", null, processConf, "global_data");
}

function requestPortsUpdate()
{
    requestJsonDoc("ipv6_source_guard.config.port.get", null, processPorts, "port_data");
}

function requestUpdate() {
    requestGlobalUpdate();
    requestPortsUpdate();
}

/* Initialize resources when HTML document is ready */
window.addEvent('domready', function () 
{
    // only show warning for Serval1, Caracal and Ocelot platforms
    // (configArchServal includes both Serval1 and Ocelot)
    var warndiv = document.getElementById('keySizeWarningCell');
    if (warndiv && (configArchServal || configArchLuton26)) {
        warndiv.style.display = 'visible';
    } else {
        warndiv.style.display = 'none';
    }

    requestUpdate();
});

</script>
</head>

<body class="content" style="height: calc(100vh - 30px);">
    <h1>IPv6 Source Guard Configuration</h1>

    <div style="display: flex; flex-direction: column;">    
        <div id="keySizeWarningCell" style="border:2px solid darkred; padding: 5px; flex: 1; width: 550px;">
            <p>
                <b>Please note:</b> <br>
                Enabling this function requires you to change the <i>Key Type</i> to "MAC and IP Address"
                for all ports that will receive DHCPv6 packets. 
                <br>You can do this in the
                <a href="/qos_port_classification.htm">QoS Port Classification</a> page.
            </p>
        </div>
        <div style="flex: 2; width: 300px; margin-top: 10px;">
            <table summary="Configuration" cellspacing="0" class="config">
                <tr class="config">
                <td class="param_label">Mode</td>
                <td class="cl">
                    <select id="sourceGuardMode" name="source_guard_mode" onchange="updateGlobalConf()">
                    </select>
                </td>
                </tr>
            </table>
        </div>

    <p>
        <input type="button" id="translate" value="Translate dynamic to static" onclick="requestTranslate();">
    </p>
    
    <div id="myTableContainer" style="height:70vh; display: inline-block; overflow-y:auto; flex: 3">
        <table id="ipv6SGPortTable" summary="IPv6 Source Guard Port Table" cellspacing="0" class="display"
               style="height:auto; margin-right:20px; overflow-y:auto;">
            <thead>
                <tr class="display_header">
                    <th>Port</th>
                    <th>Mode</th>
                    <th>Max Dynamic Clients</th>
            </thead>
          <tbody id="tableBodyData"></tbody>
        </table>
    </div>

    <div style="padding-top:5px; flex: 4">
        <input type="button" id="saveTable" value="Save" onclick="saveTable();">
    </div>
</div>

</body>
</html>
