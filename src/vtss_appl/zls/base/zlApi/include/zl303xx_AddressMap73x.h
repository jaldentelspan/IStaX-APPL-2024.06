

/*******************************************************************************
*
*  $Id: 6517a3b4707c071ac26ad8fcef236bd9d8d99889
*  Copyright (c) 2006-2022 Microchip Technology Inc. and its subsidiaries, all rights reserved.
*  Subject to the terms of the license that accompanies the software and controls as it relates to the software and any conflicting terms herein, you may use this Microchip software and any derivatives exclusively with Microchip products.
*  You are responsible for complying with third party license terms applicable to your use of third party software (including open source software) that may accompany this Microchip software.
*  SOFTWARE IS 'AS IS'. NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
*  IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.
*  TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS RELATED TO THE SOFTWARE WILL NOT EXCEED AMOUNT OF FEES, IF ANY, YOU PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
*
*  Module Description:
*     Values and constants for the ZLS3073X device internal address map
*
*******************************************************************************/

#ifndef ZL303XX_ADDRESS_MAP_73X_H_
#define ZL303XX_ADDRESS_MAP_73X_H_

#ifdef __cplusplus
extern "C" {
#endif

/*****************   INCLUDE FILES   ******************************************/

#include "zl303xx_Global.h"
#include "zl303xx_AddressMap.h"

/*****************   DEFINES   ************************************************/

#define ZLS3073X_DPLL_MAX                           8        /* DPLLs 0-4 are normal, 5=NCO_ASSIST, 6=SplitXO and 7=SplitXORedundancy */
#define ZLS3073X_REF_SYNTH                          5        /* Synths 0-4 */
#define ZLS3073X_REF_MAX                            10       /* Refs 0-9 */
#define ZLS3073X_NUM_OUTPUTS                        20       /* Outputs 0-19 */
#define ZLS3073X_NUM_OUTPUT_PAIRS                   (ZLS3073X_NUM_OUTPUTS / 2)
#define ZLS3073X_STICKY_UPDATE_DELAY_MS             25       /* Delay in ms between sticky register updates */

/*****************    LIMITS   ************************************************/

#define DEVICE_PAGE_SEL_REG_ADDR_73X    0x7F
#define MIN_PAGED_ADDR_73X              0x00
#define MAX_PAGED_ADDR_73X              0x7F
#define MAX_PAGES_73X                   0xFF


/*****************   REGISTER ADDRESSES   *************************************/
/* Register size defines */

/* Mask to cover all possible size bits:
   - 6 bits allows a range of 0-63 (corresponds to size of 1-64 bytes) */
#define ZL303XX_MEM_SIZE_MASK_73X                     (Uint32T)0x003F0000
#define ZL303XX_MEM_SIZE_SHIFT_73X                    (Uint16T)16

/* Macro to extract the encoded SIZE (in bytes) from a virtual address */
#define ZL303XX_MEM_SIZE_EXTRACT_73X(addr)   \
      (Uint8T)(((addr & ZL303XX_MEM_SIZE_MASK_73X) >> ZL303XX_MEM_SIZE_SHIFT_73X) + 1)

/* Generic versions of the above defines */
#define ZL303XX_MEM_SIZE_MASK                         (Uint32T)0x0003F000
#define ZL303XX_MEM_SIZE_SHIFT                        (Uint16T)12

/* Macro to extract the encoded SIZE (in bytes) from a virtual address */
#define ZL303XX_MEM_SIZE_EXTRACT(addr)   \
      (Uint8T)(((addr & ZL303XX_MEM_SIZE_MASK) >> ZL303XX_MEM_SIZE_SHIFT) + 1)

/* Macro to encode the register SIZE for insertion into a virtual address */
#define ZL303XX_MEM_SIZE_INSERT_73X(bytes)       \
      (Uint32T)((((Uint32T)(bytes) - 1) << ZL303XX_MEM_SIZE_SHIFT_73X)  \
                                                      & ZL303XX_MEM_SIZE_MASK_73X)


/* Register address defines */

/* address mask, extract & insert definitions */
#define ZL303XX_MEM_ADDR_MASK_73X                     (Uint32T) 0x0000007F
#define ZL303XX_MEM_ADDR_AND_PAGE_MASK_73X            (Uint32T) 0x00007FFF

/* Macro to get the destination address from a given virtual register address. */
#define ZL303XX_MEM_ADDR_EXTRACT_73X(addr)                           \
      (Uint32T)((addr) & ZL303XX_MEM_ADDR_MASK_73X)

/* Macro to set the virtual register address into a virtual address  */
#define ZL303XX_MEM_ADDR_INSERT_73X(addr)                            \
      (Uint32T)((Uint32T)(addr) & ZL303XX_MEM_ADDR_MASK_73X)


/* Register page defines */

/*        The page number is stored in register_address[14:7].
          The page offset is stored in register_address[6:0].
*/
#define ZL303XX_MEM_PAGE_MASK_73X                     (Uint32T)0x00007F80
#define ZL303XX_MEM_PAGE_SHIFT_73X                    (Uint16T)7

/* Macro to extract the encoded PAGE value from a virtual address */
#define ZL303XX_MEM_PAGE_EXTRACT_73X(addr)   \
      (Uint8T)(((addr) & ZL303XX_MEM_PAGE_MASK_73X) >> ZL303XX_MEM_PAGE_SHIFT_73X)

/* Macro to encode the PAGE value for insertion into a virtual address */
#define ZL303XX_MEM_PAGE_INSERT_73X(page)       \
      (Uint32T)(((Uint32T)(page) << ZL303XX_MEM_PAGE_SHIFT_73X) & ZL303XX_MEM_PAGE_MASK_73X)

/* Paged addresses are within the following range */
#define ZL303XX_PAGED_ADDR_MIN_73X                    (Uint32T) MIN_PAGED_ADDR_73X
#define ZL303XX_PAGED_ADDR_MAX_73X                    (Uint32T) MAX_PAGED_ADDR_73X

/* Register construction defines */

/* Construct a memory address for a register on a specific device.
   The device field is not filled in by this macro */

/* Page can be ignored, use virtual addresses and decode the page in the driver */
#define ZL303XX_MAKE_MEM_ADDR_73X(fulladdr,size)        \
      (Uint32T)(((fulladdr) & ZL303XX_MEM_ADDR_AND_PAGE_MASK_73X) |       \
                ZL303XX_MEM_SIZE_INSERT_73X(size))

#define ZLS3073X_PAGE_REG                           ZL303XX_MAKE_MEM_ADDR_73X(DEVICE_PAGE_SEL_REG_ADDR_73X, ZL303XX_MEM_SIZE_1_BYTE)


#define ZLS3073X_INFO_REG                           ZL303XX_MAKE_MEM_ADDR_73X(0x0000, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_ID_REG                             ZL303XX_MAKE_MEM_ADDR_73X(0x0001, ZL303XX_MEM_SIZE_2_BYTE)
#if !defined _ZL303XX_AZURITE_A_DEVICE
/* ZL30634 = 0x0E32
   ZL30640 = 0x0E38
   ZL30642 = 0x0E3A
   ZL30735 = 0x0E97
*/
#else
/* ZL30634A = 0x1E32
   ZL30640A = 0x1E38
   ZL30642A = 0x1E3A
   ZL30735A = 0x1E97
*/
#endif
#define ZLS3073X_REVISION_REG                       ZL303XX_MAKE_MEM_ADDR_73X(0x0003, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_FW_REVISION_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0005, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_CUSTOM_CONFIG_VER_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0007, ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_CENTRAL_FREQ_OFFSET_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x000B, ZL303XX_MEM_SIZE_4_BYTE)

/* GPIOs Page */
#define ZLS3073X_GPIO_IRQ_CONFIG_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x0080, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REF_MON_TH_MASK_0P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0082, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_0N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0083, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_1P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0084, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_1N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0085, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_2P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0086, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_2N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0087, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_3P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0088, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_3N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0089, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_4P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x008A, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_MASK_4N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x008B, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MON_TH_MASK_0_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0090, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_MASK_1_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0091, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_MASK_2_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0092, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_MASK_3_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0093, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_MASK_4_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0094, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_MASK_5_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0095, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_MASK_6_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0096, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_MASK_7_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0097, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_NS_ROLLOVER_MASK_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x00A7, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REF_MON_TL_MASK_0P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B2, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_0N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B3, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_1P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B4, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_1N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B5, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_2P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B6, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_2N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B7, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_3P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B8, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_3N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00B9, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_4P_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00BA, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_MASK_4N_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00BB, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MON_TL_MASK_0_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C0, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_MASK_1_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C1, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_MASK_2_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C2, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_MASK_3_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C3, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_MASK_4_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C4, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_MASK_5_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C5, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_MASK_6_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C6, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_MASK_7_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x00C7, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_SPLIT_XO_SEL_STATUS_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x0100, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REF_MON_STATUS_0P_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0102, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_0N_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0103, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_1P_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0104, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_1N_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0105, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_2P_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0106, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_2N_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0107, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_3P_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0108, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_3N_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0109, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_4P_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x010A, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_STATUS_4N_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x010B, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MON_STATUS_0_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0110, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_STATUS_1_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0111, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_STATUS_2_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0112, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_STATUS_3_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0113, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_STATUS_4_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0114, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_STATUS_5_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0115, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_STATUS_6_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0116, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_STATUS_7_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0117, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_0_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0130, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_1_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0131, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_2_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0132, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_3_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0133, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_4_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0134, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_5_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0135, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_6_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0136, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_STATE_REFSEL_STATUS_7_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0137, ZL303XX_MEM_SIZE_1_BYTE)

#if defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_MITODSYNC_RX_USER_BIT_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x017B, ZL303XX_MEM_SIZE_1_BYTE)  /* ZL3073XA-only */
#endif

/* Sticky Page */
#define ZLS3073X_STICKY_LOCK_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0180, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REF_MON_TH_STICKY_0P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0182, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_0N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0183, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_1P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0184, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_1N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0185, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_2P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0186, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_2N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0187, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_3P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0188, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_3N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0189, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_4P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x018A, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_4N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x018B, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MON_TH_STICKY_0_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0190, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_STICKY_1_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0191, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_STICKY_2_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0192, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_STICKY_3_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0193, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_STICKY_4_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0194, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_STICKY_5_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0195, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_STICKY_6_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0196, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TH_STICKY_7_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0197, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REF_MON_TL_STICKY_0P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B2, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_0N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B3, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_1P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B4, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_1N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B5, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_2P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B6, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_2N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B7, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_3P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B8, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_3N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01B9, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_4P_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01BA, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_4N_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01BB, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MON_TL_STICKY_0_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C0, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_STICKY_1_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C1, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_STICKY_2_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C2, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_STICKY_3_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C3, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_STICKY_4_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C4, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_STICKY_5_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C5, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_STICKY_6_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C6, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MON_TL_STICKY_7_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x01C7, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_FASTLOCK_PHASE_STICKY_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x01E0, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_FASTLOCK_FREQ_STICKY_REG      ZL303XX_MAKE_MEM_ADDR_73X(0x01E1, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_TIE_WR_STICKY_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x01E4, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REF_LOS_3_0_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0200, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_LOS_4_REG                      ZL303XX_MAKE_MEM_ADDR_73X(0x0201, ZL303XX_MEM_SIZE_1_BYTE)

/* Dpll page */
#define ZLS3073X_DPLL_SPLIT_XO_REF_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0280, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_SPLIT_XO_CTRL_0_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0281, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_ENABLE_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0283, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MODE_REFSEL_0_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0284, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_0_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0285, ZL303XX_MEM_SIZE_1_BYTE)

#if !defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_DPLL_CMD_0_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x0286, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MODE_REFSEL_1_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0288, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_1_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0289, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_1_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x028A, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MODE_REFSEL_2_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x028C, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_2_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x028D, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_2_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x028E, ZL303XX_MEM_SIZE_1_BYTE)
#else
#define ZLS3073X_DPLL_CMD_0_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x0286, ZL303XX_MEM_SIZE_1_BYTE)
/* CMD_0 bits are different */
#define ZLS3073X_DPLL_MODE_REFSEL_1_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0288, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_1_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0289, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_1_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x028A, ZL303XX_MEM_SIZE_1_BYTE)
/* CMD_1 bits are different */
#define ZLS3073X_DPLL_MODE_REFSEL_2_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x028C, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_2_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x028D, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_2_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x028E, ZL303XX_MEM_SIZE_1_BYTE)
/* CMD_2 bits are different */
#endif

#define ZLS3073X_DPLL_MODE_REFSEL_3_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0290, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_3_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0291, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_3_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x0292, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MODE_REFSEL_4_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0294, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_4_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0295, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_4_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x0296, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MODE_REFSEL_5_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x0298, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_5_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0299, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_5_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x029A, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MODE_REFSEL_6_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x029C, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_6_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x029D, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_6_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x029E, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_MODE_REFSEL_7_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x02A0, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CTRL_7_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x02A1, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_CMD_7_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x02A2, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_DF_READ_0_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02A8, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_READ_1_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02A9, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_READ_2_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02AA, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_READ_3_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02AB, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_READ_4_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02AC, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_READ_5_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02AD, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_READ_6_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02AE, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_READ_7_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x02AF, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLL_TIE_CTRL_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x02B0, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TIE_CTRL_MASK_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x02B1, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x02B2, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_MASK_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x02B3, ZL303XX_MEM_SIZE_1_BYTE)

#if defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_MITODSYNC_RX_CTRL_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x02B6, ZL303XX_MEM_SIZE_1_BYTE)  /* ZL3073XA-only */
#endif

#define ZLS3073X_DPLL_TOD_CTRL_0_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02B8, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_1_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02B9, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_2_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02BA, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_3_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02BB, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_4_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02BC, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_5_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02BD, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_6_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02BE, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_CTRL_7_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x02BF, ZL303XX_MEM_SIZE_1_BYTE)

/* Dpll Data Page */
#define ZLS3073X_DPLL_DF_OFFSET_0_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0300, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_0_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x030C, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_0_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0312, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_0_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0318, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLL_DF_OFFSET_1_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0320, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_1_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x032C, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_1_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0332, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_1_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0338, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLL_DF_OFFSET_2_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0340, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_2_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x034C, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_2_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0352, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_2_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0358, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLL_DF_OFFSET_3_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0360, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_3_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x036C, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_3_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0372, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_3_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0378, ZL303XX_MEM_SIZE_4_BYTE)

/* Dpll Data Page Cont. */
#define ZLS3073X_DPLL_DF_OFFSET_4_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0380, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_4_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x038C, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_4_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0392, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_4_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0398, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLL_DF_OFFSET_5_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x03A0, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_5_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x03AC, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_5_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x03B2, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_5_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x03B8, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLL_DF_OFFSET_6_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x03C0, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_6_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x03CC, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_6_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x03D2, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_6_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x03D8, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLL_DF_OFFSET_7_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x03E0, ZL303XX_MEM_SIZE_6_BYTE)

#define ZLS3073X_DPLL_TIE_DATA_7_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x03EC, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_7_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x03F2, ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_7_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x03F8, ZL303XX_MEM_SIZE_4_BYTE)

/* Misc. Page */

/* Synth and Output Page */
#define ZLS3073X_SYNTH_CTRL_0_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0480, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_SYNTH_CTRL_1_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0481, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_SYNTH_CTRL_2_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0482, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_SYNTH_CTRL_3_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0483, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_SYNTH_CTRL_4_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0484, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_SYNTH_CTRL_EN_MASK                 (0x01)
#define ZLS3073X_SYNTH_CTRL_ID_MASK                 (0x70)

#define ZLS3073X_SYNTH_OFFSET_MANUAL_0_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x0485, ZL303XX_MEM_SIZE_5_BYTE)
#define ZLS3073X_SYNTH_OFFSET_MANUAL_1_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x048A, ZL303XX_MEM_SIZE_5_BYTE)
#define ZLS3073X_SYNTH_OFFSET_MANUAL_2_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x048F, ZL303XX_MEM_SIZE_5_BYTE)
#define ZLS3073X_SYNTH_OFFSET_MANUAL_3_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x0494, ZL303XX_MEM_SIZE_5_BYTE)
#define ZLS3073X_SYNTH_OFFSET_MANUAL_4_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x0499, ZL303XX_MEM_SIZE_5_BYTE)

#define ZLS3073X_OUTPUT_CTRL_X_REG(out)             ZL303XX_MAKE_MEM_ADDR_73X(0x04A8 + (out), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_0_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04A8, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_1_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04A9, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_2_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04AA, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_3_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04AB, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_4_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04AC, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_5_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04AD, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_6_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04AE, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_7_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04AF, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_8_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04B0, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_CTRL_9_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04B1, ZL303XX_MEM_SIZE_1_BYTE)


#define ZLS3073X_OUTPUT_STEP_TIME_MASK_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x04B6, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_OUTPUT_PHASE_STEP_CTRL_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x04B8, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_PHASE_STEP_NUMBER_REG       ZL303XX_MAKE_MEM_ADDR_73X(0x04B9, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_OUTPUT_PHASE_STEP_MASK_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x04BA, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_OUTPUT_PHASE_STEP_DATA_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x04BC, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_MITOD_TX_CHANNELX_REG(x)           ZL303XX_MAKE_MEM_ADDR_73X(0x04C4 + (x), ZL303XX_MEM_SIZE_1_BYTE)

#if defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_MITOD_TX_CH_0_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04C4, ZL303XX_MEM_SIZE_1_BYTE)        /* ZL3073XA-only */
#define ZLS3073X_MITODSYNC_TX_CH_1_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x04C5, ZL303XX_MEM_SIZE_1_BYTE)        /* ZL3073XA-only */
#define ZLS3073X_MITODSYNC_TX_CH_2_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x04C6, ZL303XX_MEM_SIZE_1_BYTE)        /* ZL3073XA-only */
#define ZLS3073X_MITOD_TX_CTRL_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x04C7, ZL303XX_MEM_SIZE_1_BYTE)        /* ZL3073XA-only */
#define ZLS3073X_MITODSYNC_TX_CTRL_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x04C8, ZL303XX_MEM_SIZE_1_BYTE)        /* ZL3073XA-only */
#endif

#define ZLS3073X_MITOD_TX_PROTOCOL_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x04CB, ZL303XX_MEM_SIZE_1_BYTE)

#if defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_MITODBASIC_TX_CTRL_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x04CC, ZL303XX_MEM_SIZE_1_BYTE)        /* ZL3073XA-only */
#define ZLS3073X_MITODBASIC_TX_ACC_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x04CD, ZL303XX_MEM_SIZE_1_BYTE)        /* ZL3073XA-only */
#endif


/***************************************************/
/* Mailbox Pages Begin */
/***************************************************/

/***************************************************/
/* Mailbox Ref Control */
#define ZLS3073X_REF_MB_MASK_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0502, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REF_MB_SEM_REG                     ZL303XX_MAKE_MEM_ADDR_73X(0x0504, ZL303XX_MEM_SIZE_1_BYTE)

/* Generic ref registers since all mailboxes use the same address */
#define ZLS3073X_REFX_FREQ_BASE_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0505, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_FREQ_MULT_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0507, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_RATIO_M_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0509, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_RATIO_N_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x050B, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_CONFIG_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x050D, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REFX_SCM_REG                       ZL303XX_MAKE_MEM_ADDR_73X(0x050F, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REFX_SCM_FINE_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0510, ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_REFX_CFM_REG                       ZL303XX_MAKE_MEM_ADDR_73X(0x0514, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_REFX_GST_DISQUAL_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0516, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_GST_QUAL_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0518, ZL303XX_MEM_SIZE_2_BYTE)

#define ZLS3073X_REFX_PFM_CTRL_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x051B, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REFX_PFM_DISQUALIFY_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x051C, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_PFM_QUALIFY_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x051E, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_PFM_PERIOD_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x0520, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_REFX_PFM_FILTER_LIMIT_REG          ZL303XX_MAKE_MEM_ADDR_73X(0x0522, ZL303XX_MEM_SIZE_1_BYTE)

#if !defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_REFX_PHASE_OFFSET_COMP_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x0528, ZL303XX_MEM_SIZE_4_BYTE)
#else
#define ZLS3073X_REFX_PHASE_OFFSET_COMP_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x0528, ZL303XX_MEM_SIZE_6_BYTE)
/* COMP is 6 bytes rather than 4 */
#endif

#define ZLS3073X_REFX_SYNC_REG                      ZL303XX_MAKE_MEM_ADDR_73X(0x052E, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REFX_SYNC_MISC_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x052F, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REFX_ESYNC_DIV_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0530, ZL303XX_MEM_SIZE_4_BYTE)

/***************************************************/
/* Mailbox Dpll Control */
#define ZLS3073X_DPLL_MB_MASK_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0602, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_DPLL_MB_SEM_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0604, ZL303XX_MEM_SIZE_1_BYTE)

/* Generic dpll register since all mailboxes use the same address */
#define ZLS3073X_DPLLX_CONFIG_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0605, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLLX_FAST_LOCK_CTRL_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0609, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_FAST_LOCK_IDEAL_TIME_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x060A, ZL303XX_MEM_SIZE_2_BYTE)

#if !defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_DPLLX_FAST_LOCK_FOL_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x060C, ZL303XX_MEM_SIZE_2_BYTE)
#else
#define ZLS3073X_DPLLX_FAST_LOCK_FOL_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x060C, ZL303XX_MEM_SIZE_2_BYTE)
/* The value for A devices is in nanosecs/s (ppb) vs usecs/s (ppm) */
#endif

#define ZLS3073X_DPLLX_FAST_LOCK_PHASE_ERROR_REG    ZL303XX_MAKE_MEM_ADDR_73X(0x0610, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_DPLLX_FAST_LOCK_FREQ_ERROR_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0612, ZL303XX_MEM_SIZE_1_BYTE)

#if defined _ZL303XX_AZURITE_A_DEVICE
#define ZLS3073X_DPLL_FAST_LOCK_FREQ_IDEAL_TIME_REG ZL303XX_MAKE_MEM_ADDR_73X(0x0615, ZL303XX_MEM_SIZE_2_BYTE)
/* Use 0x060A for fastlock phase ramp and 0x0615 for fastlock freq ramp */
#endif

#define ZLS3073X_DPLLX_BW_FIXED_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0620, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_BW_VAR_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0621, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_PSL_REG                      ZL303XX_MAKE_MEM_ADDR_73X(0x0622, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_DPLLX_PSL_SCALING_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0647, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLLX_DAMPING_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0626, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_DURATION_GOOD_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x0627, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_PHASE_GOOD_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0628, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLLX_STEP_TIME_THRESH_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x0638, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_DPLLX_STEP_TIME_RESO_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0640, ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_DPLLX_PHASE_ALIGN_SPEEDUP_THRESH_REG ZL303XX_MAKE_MEM_ADDR_73X(0x0644, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_RANGE_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0645, ZL303XX_MEM_SIZE_2_BYTE)

#define ZLS3073X_DPLLX_TIE_WR_THRESH_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x064D, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_DPLLX_LOCK_DELAY_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x064F, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_REF_SW_MASK_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0650, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLLX_REF_PRIO_0_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0652, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_REF_PRIO_1_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0653, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_REF_PRIO_2_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0654, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_REF_PRIO_3_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0655, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_REF_PRIO_4_REG               ZL303XX_MAKE_MEM_ADDR_73X(0x0656, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLLX_REF_HO_MASK_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x0660, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLLX_HO_FILTER_REG                ZL303XX_MAKE_MEM_ADDR_73X(0x0662, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_HO_DELAY_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0663, ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_DPLLX_FP_FIRST_REALIGN_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x0668, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_FP_REALIGN_INTVL_REG         ZL303XX_MAKE_MEM_ADDR_73X(0x0669, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_FP_LOCK_THRESH_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x066A, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_DPLLX_FP_SYNC_MASK_REG             ZL303XX_MAKE_MEM_ADDR_73X(0x066C, ZL303XX_MEM_SIZE_1_BYTE)

/***************************************************/
/* Mailbox Synth Control */
#define ZLS3073X_SYNTH_MB_MASK_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0682, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_SYNTH_MB_SEM_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x0684, ZL303XX_MEM_SIZE_1_BYTE)

/* Generic dpll register since all mailboxes use the same address */
#define ZL3073X_SYNTH_FREQ_BASE_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0686, ZL303XX_MEM_SIZE_2_BYTE)
#define ZL3073X_SYNTH_FREQ_MULT_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0688, ZL303XX_MEM_SIZE_4_BYTE)
#define ZL3073X_SYNTH_RATIO_M_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x068C, ZL303XX_MEM_SIZE_2_BYTE)
#define ZL3073X_SYNTH_RATIO_N_REG                   ZL303XX_MAKE_MEM_ADDR_73X(0x068E, ZL303XX_MEM_SIZE_2_BYTE)
#define ZL3073X_SYNTH_PHASE_COMPENSATION_REG        ZL303XX_MAKE_MEM_ADDR_73X(0x0690, ZL303XX_MEM_SIZE_2_BYTE)

#define ZL3073X_SYNTH_SPREAD_SPECTRUM_CFG_REG       ZL303XX_MAKE_MEM_ADDR_73X(0x0694, ZL303XX_MEM_SIZE_1_BYTE)
#define ZL3073X_SYNTH_SPREAD_SPECTRUM_RATE_REG      ZL303XX_MAKE_MEM_ADDR_73X(0x0695, ZL303XX_MEM_SIZE_2_BYTE)
#define ZL3073X_SYNTH_SPREAD_SPECTRUM_SPREAD_REG    ZL303XX_MAKE_MEM_ADDR_73X(0x0697, ZL303XX_MEM_SIZE_1_BYTE)

/***************************************************/
/* Mailbox Output Control */
#define ZLS3073X_OUTPUT_MB_MASK_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0702, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_OUTPUT_MB_SEM_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x0704, ZL303XX_MEM_SIZE_1_BYTE)

/* Generic dpll register since all mailboxes use the same address */
#define ZLS3073X_OUTPUT_MODE_REG                    ZL303XX_MAKE_MEM_ADDR_73X(0x0705, ZL303XX_MEM_SIZE_1_BYTE)

#if defined _ZL303XX_AZURITE_A_DEVICE
/* OUTPUT mode bits are different */
#endif
#define ZLS3073X_OUTPUT_DRIVER_CONFIG_REG           ZL303XX_MAKE_MEM_ADDR_73X(0x0707, ZL303XX_MEM_SIZE_2_BYTE)

#define ZLS3073X_OUTPUT_DRIVER_DIV_REG              ZL303XX_MAKE_MEM_ADDR_73X(0x070C, ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_OUTPUT_DRIVER_WIDTH_REG            ZL303XX_MAKE_MEM_ADDR_73X(0x0710, ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_OUTPUT_DRIVER_ESYNC_PERIOD_REG     ZL303XX_MAKE_MEM_ADDR_73X(0x0714, ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_OUTPUT_DRIVER_ESYNC_WIDTH_REG      ZL303XX_MAKE_MEM_ADDR_73X(0x0718, ZL303XX_MEM_SIZE_4_BYTE)

#define ZLS3073X_OUTPUT_MODE_MODEMASK               (0xF0)
#define ZLS3073X_OUTPUT_MODE_NPIN_DIV               (0x0C)
#define ZLS3073X_OUTPUT_MODE_NPIN_DIV_INV           (0x0F)




typedef enum
{
   ZLS3073X_REF0P  = 0x00,
   ZLS3073X_REF0N  = 0x01,
   ZLS3073X_REF1P  = 0x02,
   ZLS3073X_REF1N  = 0x03,
   ZLS3073X_REF2P  = 0x04,
   ZLS3073X_REF2N  = 0x05,
   ZLS3073X_REF3P  = 0x06,
   ZLS3073X_REF3N  = 0x07,
   ZLS3073X_REF4P  = 0x08,
   ZLS3073X_REF4N  = 0x09
} ZLS3073X_InputsE;

typedef enum
{
   ZLS3073X_OUT0  = 0x00,
   ZLS3073X_OUT1  = 0x01,
   ZLS3073X_OUT2  = 0x02,
   ZLS3073X_OUT3  = 0x03,
   ZLS3073X_OUT4  = 0x04,
   ZLS3073X_OUT5  = 0x05,
   ZLS3073X_OUT6  = 0x06,
   ZLS3073X_OUT7  = 0x07,
   ZLS3073X_OUT8  = 0x08,
   ZLS3073X_OUT9  = 0x09,
   ZLS3073X_NONE  = 0xFF
} ZLS3073X_OutputsE;

typedef enum
{
   ZLS3073X_OUTPUT_TYPE_HP = 0
} ZLS3073X_OutputTypesE;

typedef enum
{
   ZLS3073X_DPLL_0,
   ZLS3073X_DPLL_1,
   ZLS3073X_DPLL_2,
   ZLS3073X_DPLL_3,
   ZLS3073X_DPLL_4,
   ZLS3073X_DPLL_5,
   ZLS3073X_DPLL_6,
   ZLS3073X_DPLL_7,
   ZLS3073X_DPLL_CNT = ZLS3073X_DPLL_MAX
} ZLS3073X_DpllNumE;

typedef enum
{
   ZLS3073X_SYNTH_0,
   ZLS3073X_SYNTH_1,
   ZLS3073X_SYNTH_2,
   ZLS3073X_SYNTH_3,
   ZLS3073X_SYNTH_4,
   ZLS3073X_SYNTH_5,
   ZLS3073X_SYNTH_CNT
} ZLS3073X_SynthNumE;

#define ZLS3073X_CHECK_REF_ID(refId) \
            (((refId) >= ZLS3073X_REF_MAX) \
                ? ZL303XX_TRACE_ERROR("Invalid refId: %u", refId, 0,0,0,0,0), ZL303XX_PARAMETER_INVALID \
                : ZL303XX_OK)

#define ZLS3073X_CHECK_SYNC_ID(syncId) \
            ((((syncId) >= ZLS3073X_REF_MAX) || (((Sint32T)syncId) < -1)) \
                ? ZL303XX_TRACE_ERROR("Invalid syncId: %u", refId, 0,0,0,0,0), ZL303XX_PARAMETER_INVALID \
                : ZL303XX_OK)

#define ZLS3073X_CHECK_DPLL_ID(dpllId) \
            ((((dpllId) >= ZLS3073X_DPLL_MAX) || (((Sint32T)dpllId) < -1)) \
                ? ZL303XX_TRACE_ERROR("Invalid dpllId: %u", dpllId, 0,0,0,0,0), ZL303XX_PARAMETER_INVALID \
                : ZL303XX_OK)

/* Sticky lock register options */
typedef enum
{
   ZLS3073X_STICKY_UNLOCK   = 0,
   ZLS3073X_STICKY_LOCK     = 1
} ZLS3073X_StickyLockE;

#define ZLS3073X_CHECK_STICKY_LOCK(s) \
            (((ZLS3073X_StickyLockE)(s) > ZLS3073X_STICKY_LOCK) \
                ? ZL303XX_PARAMETER_INVALID \
                : ZL303XX_OK)


/*****************   REGISTER FIELD DEFINES   ******************************/

/* Reference monitor fail bits */
typedef enum
{
   ZLS3073X_REF_MON_FAIL_LOS        = 0x01,
   ZLS3073X_REF_MON_FAIL_SCM        = 0x02,
   ZLS3073X_REF_MON_FAIL_CFM        = 0x04,
   ZLS3073X_REF_MON_FAIL_GST        = 0x08,
   ZLS3073X_REF_MON_FAIL_PFM        = 0x10,
   ZLS3073X_REF_MON_FAIL_SFM        = 0x20,
   ZLS3073X_REF_MON_FAIL_ESYNC      = 0x40,
   ZLS3073X_REF_MON_FAIL_SPLIT_XO   = 0x80,

   ZLS3073X_REF_MON_FAIL_MASK       = 0xFF
} ZLS3073X_RefMonFailE;

/* Dpll reference selection and mode register options */
typedef enum
{
   ZLS3073X_DPLL_MODE_FREERUN       = 0x0,
   ZLS3073X_DPLL_MODE_HOLDOVER      = 0x1,
   ZLS3073X_DPLL_MODE_REFLOCK       = 0x2,
   ZLS3073X_DPLL_MODE_AUTO_LOCK     = 0x3,
   ZLS3073X_DPLL_MODE_NCO           = 0x4,

   ZLS3073X_DPLL_REF_MASK           = 0xF0,
   ZLS3073X_DPLL_MODE_MASK          = 0x07,
   ZLS3073X_DPLL_REFMODE_MASK       = 0xF7
} ZLS3073X_DpllHWModeE;

#define ZLS3073X_CHECK_DPLL_MODE(mode) \
            (((mode) > ZLS3073X_DPLL_MODE_NCO) \
                ? ZL303XX_PARAMETER_INVALID \
                : ZL303XX_OK)

#define ZLS3073X_CHECK_POST_DIV(div) \
           (((div) > ZLS3073X_POST_DIV_D) ? ZL303XX_PARAMETER_INVALID : ZL303XX_OK)

/* TIE Control */
typedef enum
{
    /*
        Normal operation:
        x00: Read the accumulated I-part (iMemory)
        x01: Read the output of the holdover filter (filtered iMemory)
        x10: Read the sum of the P and I-parts (delta frequency)
        x11: Read P-part only

        Holdover:
        0xx: Read the output of the holdover filter
        100: Read the accumulated I-part, latched before entering holdover
        101: Read the output of the holdover filter
        110: Read the sum of the P and I-parts, latched before entering holdover
        111: Read P-part only, latched before entering holdover

        NCO (all reads represent values latched before entering NCO):
        x00: Read the accumulated I-part
        x01: Read the output of the holdover filter
        010: Depends on previous state...
                    Normal: Read the sum of the P and I-parts
                    Holdover: Read the output of the holdover filter
        110: Read the sum of the P and I-parts
        x11: Read P-part only
    */
    ZLS3073X_NORMAL_I_PART                                  = 0,
    ZLS3073X_NORMAL_HOLDOVER                                = 1,
    ZLS3073X_NORMAL_P_PLUS_I_PARTS                          = 2,
    ZLS3073X_NORMAL_P_PART                                  = 3,

    ZLS3073X_HOLDOVER_FILTER_1                              = 0,
    ZLS3073X_HOLDOVER_I_PART_LATCHED_BEFORE_HOLDOVER        = 4,
    ZLS3073X_HOLDOVER_FILTER_2                              = 5,
    ZLS3073X_HOLDOVER_P_PLUS_I_PART_LATCHED_BEFORE_HOLDOVER = 6,
    ZLS3073X_HOLDOVER_P_PART_LATCHED_BEFORE_HOLDOVER        = 7,

    ZLS3073X_NCO_I_PART                                     = 0,
    ZLS3073X_NCO_HOLDOVER                                   = 1,
    ZLS3073X_NCO_NORMAL_OR_HOLDOVER                         = 2,
    ZLS3073X_NCO_P_PLUS_I_PARTS                             = 6,
    ZLS3073X_NCO_P_PART                                     = 3

} ZLS3073X_MemPartE;


typedef enum
{
   ZLS3073X_DPLL_TIE_COMPLETE               = 0,
   ZLS3073X_DPLL_MTIE_SNAP                  = 1,
   ZLS3073X_DPLL_TIE_READ_SUBSEC_INSTANT    = 2,
   ZLS3073X_DPLL_TIE_READ_SUBPERIOD_INSTANT = 3,
   ZLS3073X_DPLL_TIE_WRITE                  = 4,
   ZLS3073X_DPLL_TIE_READ_HISTORY           = 5,
   ZLS3073X_DPLL_TIE_CLEAR_HISTORY          = 6
} ZLS3073X_DpllTieCtrlE;

#define ZLS3073X_DPLL_TIE_CTRL_MASK     (0x07)

/* TIE control registers */
#define ZLS3073X_DPLLX_TIE_REG                      ZL303XX_MAKE_MEM_ADDR_73X(0x0285, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLLX_TIE_WR_THRESH                ZL303XX_MAKE_MEM_ADDR_73X(0x064D, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_TIE_WR_STICKY_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x01E4, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_TIE_WR_STICKY_MASK                 (0x3)



/* MAILBOX defines */
#define ZL303XX_MB_SEM_WRITE  (1)
#define ZL303XX_MB_SEM_READ   (2)

/* Interval between checks of the mailbox semaphore waiting for it to be available */
#define ZLS3073X_MAILBOX_SEMAPHORE_CHECK_INTERVAL       (1)
/* Max time to wait for a mailbox semaphore in milliseconds */
#define ZLS3073X_MAX_MAILBOX_SEMAPHORE_WAIT             (50)

typedef enum {
    ZLS3073X_SemStatus_busy,
    ZLS3073X_SemStatus_available
} ZLS3073X_SemStatusE;

typedef enum {
    ZLS3073X_MB_ref,
    ZLS3073X_MB_DPLL,
    ZLS3073X_MB_synth,
    ZLS3073X_MB_output,
    ZLS3073X_MB_last
} ZLS3073X_MailboxE;

typedef enum {
    ZLS3073X_RMBN_0 = 0,
    ZLS3073X_RMBN_1 = 1,
    ZLS3073X_RMBN_2 = 2,
    ZLS3073X_RMBN_3 = 3,
    ZLS3073X_RMBN_4 = 4,
    ZLS3073X_RMBN_5 = 5,
    ZLS3073X_RMBN_6 = 6,
    ZLS3073X_RMBN_7 = 7,
    ZLS3073X_RMBN_8 = 8,
    ZLS3073X_RMBN_9 = 9,
    ZLS3073X_RMBN_last = ZLS3073X_REF_MAX
} ZLS3073X_RefMailboxNumberE;

typedef enum {
    ZLS3073X_DMBN_0 = 0,
    ZLS3073X_DMBN_1 = 1,
    ZLS3073X_DMBN_2 = 2,
    ZLS3073X_DMBN_3 = 3,
    ZLS3073X_DMBN_4 = 4,
    ZLS3073X_DMBN_5 = 5,
    ZLS3073X_DMBN_6 = 6,
    ZLS3073X_DMBN_7 = 7,
    ZLS3073X_DMBN_last = ZLS3073X_DPLL_MAX
} ZLS3073X_DPLLMailboxNumberE;

typedef enum {
    ZLS3073X_SMBN_0 = 0,
    ZLS3073X_SMBN_1 = 1,
    ZLS3073X_SMBN_2 = 2,
    ZLS3073X_SMBN_3 = 3,
    ZLS3073X_SMBN_4 = 4,
    ZLS3073X_SMBN_last = ZLS3073X_REF_SYNTH
} ZLS3073X_SynthMailboxNumberE;

typedef enum {
    ZLS3073X_OMBN_0 = 0,
    ZLS3073X_OMBN_1 = 1,
    ZLS3073X_OMBN_2 = 2,
    ZLS3073X_OMBN_3 = 3,
    ZLS3073X_OMBN_4 = 4,
    ZLS3073X_OMBN_5 = 5,
    ZLS3073X_OMBN_6 = 6,
    ZLS3073X_OMBN_7 = 7,
    ZLS3073X_OMBN_8 = 8,
    ZLS3073X_OMBN_9 = 9,
    ZLS3073X_OMBN_last = ZLS3073X_NUM_OUTPUT_PAIRS
} ZLS3073X_OutputMailboxNumberE;

#define ZLS3073X_CHECK_MAILBOX_ID(mbId) \
           (((mbId) >= ZLS3073X_MB_last) \
               ? ZL303XX_TRACE_ERROR("Invalid mailbox id: %u", mbId, 0,0,0,0,0), ZL303XX_PARAMETER_INVALID \
               : ZL303XX_OK)

/* NON-MAILBOX */
/* ref_sync register field */
typedef enum {
    ZLS3073X_RSPM_disabled                    = 0,
    ZLS3073X_RSPM_enabled                     = 1,
    ZLS3073X_RSPM_50_50_clk_25_75_Esync       = 2,
    ZLS3073X_RSPM_50_50_clk_75_25_Esync       = 3,
    ZLS3073X_RSPM_25_75_clk_75_25_Esync       = 4,
    ZLS3073X_RSPM_75_25_clk_25_75_Esync       = 5,
    ZLS3073X_RSPM_50_50_clk_alternating_Esync = 6,
    ZLS3073X_RSPM_EmbeddedToDModes            = 7,
    ZLS3073X_RSPM_last
} ZLS3073X_RefSynchPairModeE;


/* pll bandwidth */
typedef enum {
    ZLS3073X_BW_14Hz     = 0,
    ZLS3073X_BW_29Hz     = 1,
    ZLS3073X_BW_61Hz     = 2,
    ZLS3073X_BW_130Hz    = 3,
    ZLS3073X_BW_380Hz    = 4,
    ZLS3073X_BW_custom   = 7
} ZLS3073X_BandwidthE;

#define ZL303XX_DPLL_73X_BANDWIDTH_MASK           (0x7)

#define ZLS3073X_CHECK_BANDWIDTH(bw) \
           (((bw) > ZLS3073X_BW_custom) \
            ? ZL303XX_TRACE_ERROR("Invalid bandwidth: %u", bw, 0,0,0,0,0), ZL303XX_PARAMETER_INVALID \
            : ZL303XX_OK)

/* Phase step control bitfield options */
/* output_phase_step_ctrl - 0x04B8 */
typedef enum
{
   ZLS3073X_PHASE_STEP_CTRL_READY = 0x00,
   ZLS3073X_PHASE_STEP_CTRL_RESET = 0x01,
   ZLS3073X_PHASE_STEP_CTRL_READ  = 0x02,
   ZLS3073X_PHASE_STEP_CTRL_WRITE = 0x03,

   ZLS3073X_PHASE_STEP_CTRL_MASK  = 0x03
} ZLS3073X_PhaseStepCtrlE;

/* ToD in output_phase_step_ctrl -  0x04B8 */
#define ZLS3073X_PHASE_STEP_CTRL_TOD_STEP_DPLL_SHIFT       4
#define ZLS3073X_PHASE_STEP_CTRL_TOD_STEP_DPLL_MASK        0x70
#define ZLS3073X_PHASE_STEP_CTRL_TOD_STEP_ACCUMULATE_SHIFT 3
#define ZLS3073X_PHASE_STEP_CTRL_TOD_STEP_ACCUMULATE       (1 << ZLS3073X_PHASE_STEP_CTRL_TOD_STEP_ACCUMULATE_SHIFT)


/* time-of-day (ToD) */
typedef enum {
    ZLS3073X_TRT_currentToD           = 0x8,
    ZLS3073X_TRT_predictedToD         = 0x9,
    ZLS3073X_TRT_ToDLatchedOnNCOWrite = 0xA,
    ZLS3073X_TRT_ToDLatchedOnNCORead  = 0xB
} ZLS3073X_TODReadTypeE;

typedef enum {
    ZLS3073X_TWT_writeOnInternal1Hz      = 0x1,
    ZLS3073X_TWT_writeOnNextInputSync    = 0x2,
    ZLS3073X_TWT_writeOnNextZeroPoint5Hz = 0x3
} ZLS3073X_ToDWriteTypeE;

/* Registers with dpll offsets, shifts and masks */
/* DPLL refsel registers */
#define ZLS3073X_DPLL_REFSEL_STAT_REG(dpllId)           ZL303XX_MAKE_MEM_ADDR_73X((0x0130 + ((dpllId) * 0x1)), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_MODE_REFSEL_REG(dpllId)           ZL303XX_MAKE_MEM_ADDR_73X((0x0284 + ((dpllId) * 0x4)), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_REFSEL_FORCE_GET(data)            (((data) & 0x07) & 2)
#define ZLS3073X_DPLL_REFSEL_AUTO_GET(data)             (((data) & 0x07) & 3)
#define ZLS3073X_DPLL_REF_SEL_MASK                      (0x0F)
#define ZLS3073X_REF_SEL_OFFSET_SHIFT                   (4)
#define ZLS3073X_MODE_ONLY_MASK                         (ZLS3073X_DPLL_MODE_MASK)
#define ZLS3073X_DPLL_MODE_ONLY_GET(data)               ((data) & ZLS3073X_DPLL_MODE_MASK)
#define ZLS3073X_DPLL_REF_ONLY_GET(data)                (((data) & ZLS3073X_DPLL_REF_MASK) >> ZLS3073X_REF_SEL_OFFSET_SHIFT)

/* Dpll freq offset register when in NCO mode */
#define ZLS3073X_DPLL_NCO_FREQ_OFFSET(dpllId)           ZL303XX_MAKE_MEM_ADDR_73X((0x0300 + ((dpllId) * 0x20)), ZL303XX_MEM_SIZE_6_BYTE)

/* Dpll delta frequency read request registers */
#define ZLS3073X_DPLL_DF_CTRL(dpllId)                   ZL303XX_MAKE_MEM_ADDR_73X(0x2A8 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_DF_CTRL_SEM_GET(data)             (((data) & 0x10) >> 4)
#define ZLS3073X_DPLL_DF_CTRL_SEM_SET                   (1 << 4)
#define ZLS3073X_DPLL_DF_CTRL_CMD_SET(data)             ((data) & 0x7)

/* Dpll holdover lock status registers */
#define ZLS3073X_HOLDOVER_LOCK_STATUS_REG(dpllId)       ZL303XX_MAKE_MEM_ADDR_73X(0x0110 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_LOCK_STATUS_DPLL_GET(data)             ((data) & 0x1)
#define ZLS3073X_LOSS_OF_LOCK_STATUS_DPLL_GET(data)     ((data) & 0x1)
#define ZLS3073X_HOLDOVER_MASK_DPLL                     (0x2)
#define ZLS3073X_HOLDOVER_STATUS_DPLL_GET(data)         (((data) & ZLS3073X_HOLDOVER_MASK_DPLL) >> 1)
#define ZLS3073X_HOLDOVER_LOCK_TH_STICKY_REG(dpllId)    ZL303XX_MAKE_MEM_ADDR_73X(0x0190 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_HOLDOVER_LOCK_TL_STICKY_REG(dpllId)    ZL303XX_MAKE_MEM_ADDR_73X(0x01B2 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_HOLDOVER_LOCK_STICKY_MASK              (0x3)

/* Reference monitor failure status registers */
#define ZLS3073X_REF_MON_FAIL_REG(refId)                ZL303XX_MAKE_MEM_ADDR_73X(0x0102 + (refId), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TH_STICKY_REG(refId)           ZL303XX_MAKE_MEM_ADDR_73X(0x0182 + (refId), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_MON_TL_STICKY_REG(refId)           ZL303XX_MAKE_MEM_ADDR_73X(0x01B2 + (refId), ZL303XX_MEM_SIZE_1_BYTE)

/* Reference clock-sync pair registers (MAILBOX) */
#define ZLS3073X_REF_CLK_SYNC_PAIR_REG                  ZL303XX_MAKE_MEM_ADDR_73X(0x052E, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_REF_CLK_SYNC_PAIR_GET(data)            (((data) >> 4) & 0x0F)
#define ZLS3073X_REF_CLK_SYNC_MODE_GET(data)            ((data) & 0x07)
#define ZLS3073X_REF_CLK_SYNC_MODE_MASK                 (0x07)
#if defined _ZL303XX_AZURITE_A_DEVICE
/* REFX_CLK_SYNC mode bits (0x8-0xA) and clock_type (0x3-0x4) are added */
#endif

/* Ref Freq */
/* ref_config - 0x050D */
#define ZLS3073X_REF_PRE_DIVIDE(data)                   (((data) & 0x10) >> 4)

/* DPLL reference priority registers (MAILBOX) */
#define ZLS3073X_DPLL_REF_PRIORITY_REG(refId)           ZL303XX_MAKE_MEM_ADDR_73X((0x0652 + (refId / 2)), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_REF_PRIORITY_GET_UPPER(data)      (((data) >> 4) & 0x0F)
#define ZLS3073X_DPLL_REF_PRIORITY_GET_LOWER(data)      ((data) & 0x0F)
#define ZLS3073X_DPLL_REF_PRIORITY_GET(data, refId)     (((refId) % 2 == 0) ? ZLS3073X_DPLL_REF_PRIORITY_GET_LOWER(data) : \
                                                                              ZLS3073X_DPLL_REF_PRIORITY_GET_UPPER(data))
#define ZLS3073X_DPLL_REF_PRIORITY_NEVER_LOCK           (0xF)

/* Bandwidth config - 0x0620 */
#define ZLS3073X_DPLL_BANDWIDTH(data)                   ((data) & 7)


/* Dpll control registers (NON-MAILBOX) */
#define ZLS3073X_DPLL_TIE_CLEAR_REG(dpllId)             ZL303XX_MAKE_MEM_ADDR_73X(0x0285 + ((dpllId) * 4), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TIE_CLEAR_REG_MASK                0x0F
#define ZLS3073X_DPLL_TIE_CLEAR_EN_SHIFT                0
#define ZLS3073X_DPLL_TIE_CLEAR_EN_MASK                 0x01
#define ZLS3073X_DPLL_TIE_CLEAR_EN(data)                (((data) >> ZLS3073X_DPLL_TIE_CLEAR_EN_SHIFT) & ZLS3073X_DPLL_TIE_CLEAR_EN_MASK)
#define ZLS3073X_DPLL_TIE_WRITE_CLEAR_AFTER_SWITCH_MASK  0x02
#define ZLS3073X_DPLL_TIE_WRITE_CLEAR_AFTER_SWITCH_SHIFT 1
#define ZLS3073X_DPLL_TIE_COMPENSATE_AFTER_SWITCH_MASK   0x04
#define ZLS3073X_DPLL_TIE_COMPENSATE_AFTER_SWITCH_SHIFT  2
#define ZLS3073X_DPLL_NCO_AUTO_READ_REG(dpllId)         ZL303XX_MAKE_MEM_ADDR_73X(0x0285 + ((dpllId) * 4), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_NCO_AUTO_READ_SHIFT               6
#define ZLS3073X_DPLL_NCO_AUTO_READ_MASK                0x01

/* Dpll control registers (MAILBOX) */
#define ZLS3073X_DPLL_NCO_ASSIST_EN_REG                 ZL303XX_MAKE_MEM_ADDR_73X(0x0605, ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_NCO_ASSIST_EN_SHIFT               4
#define ZLS3073X_DPLL_NCO_ASSIST_EN_MASK                0x01

#define ZLS3073X_DPLL_TIE_SWITCH_CLEAR_EN_MASK          0x01
#define ZLS3073X_DPLL_TIE_REF_SYNC_TIE_WR_MASK          0x02

/* Pull-in range in ppm */
#define ZLS3073X_DPLL_PULL_IN_GET(data)                 (data)

/* dpll_config - 0x0605 */
#define ZLS3073X_DPLL_EDGE_SEL(data)                    (((data) >> 6) & 0x03)

/* scm, and cfm registers */
/* ref_scm - 0x050F */
#define ZLS3073X_SCM_LIMIT_GET(data)                    ((data) & 0x07)
/* ref_csm - 0x0514 */
#define ZLS3073X_CFM_LIMIT_GET(data)                    ((data) & 0x07)

/* Reference config registers */
/* ref_config - 0x050D */
#define ZLS3073X_DIFF_EN_GET(data)                      (((data) >> 2) & 0x01)

/* Dpll TIE registers (NON-MAILBOX) */
#define ZLS3073X_DPLL_TIE_DATA_REG(dpllId)              ZL303XX_MAKE_MEM_ADDR_73X(0x030C + ((dpllId) * 0x20), ZL303XX_MEM_SIZE_6_BYTE)

/* Output configuration */
#define ZLS3073X_NUM_OUTPUT_CONFIGS                     (ZLS3073X_NUM_OUTPUTS)

/* Fast lock control (MAILBOX) */
/* dpll_fast_lock_ctrl -  0x0609 */
#define ZLS3073X_FAST_LOCK_NCO_ENABLE_MASK              (0x4)
#define ZLS3073X_FAST_LOCK_FORCE_ENABLE_MASK            (0x2)
#define ZLS3073X_FAST_LOCK_ENABLE_MASK                  (0x1)
#define ZLS3073X_FAST_LOCK_MASK                         (0x7)
#define ZLS3073X_FAST_LOCK_NCO_ENABLE_SHIFT             (0x2)
#define ZLS3073X_FAST_LOCK_FORCE_ENABLE_SHIFT           (0x1)
#define ZLS3073X_FAST_LOCK_ENABLE_SHIFT                 (0x0)

/* ToD (NON-MAILBOX) */
#define ZLS3073X_DPLL_TOD_CTRL_X_REG(dpllId)            ZL303XX_MAKE_MEM_ADDR_73X(0x02B8 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)
#define ZLS3073X_DPLL_TOD_SEC_REG(dpllId)               ZL303XX_MAKE_MEM_ADDR_73X(0x0312 + ((dpllId) *0x20), ZL303XX_MEM_SIZE_6_BYTE)
#define ZLS3073X_DPLL_TOD_NS_REG(dpllId)                ZL303XX_MAKE_MEM_ADDR_73X(0x0318 + ((dpllId) *0x20), ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_DPLL_TOD_CMD_MASK                      (0xF)
#define ZLS3073X_DPLL_TOD_SEM_MASK                      (0x10)
#define ZLS3073X_DPLL_TOD_CMD_DONE                      (0)

/* Device id registers (NON-MAILBOX) */
#define ZLS3073X_DEVICE_ID_REG                          ZL303XX_MAKE_MEM_ADDR_73X(0x01, ZL303XX_MEM_SIZE_2_BYTE)
#define ZLS3073X_DEVICE_REV_REG                         ZL303XX_MAKE_MEM_ADDR_73X(0x03, ZL303XX_MEM_SIZE_1_BYTE)

/* H/W HoldoverReady (NON-MAILBOX) */
#define ZLS3073X_DPLL_MON_STATUS_X_REG(dpllId)          ZL303XX_MAKE_MEM_ADDR_73X(0x0110 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)
/* Sticky Low to High transition */
#define ZLS3073X_DPLL_MON_TH_STICKY_REG(dpllId)         ZL303XX_MAKE_MEM_ADDR_73X(0x0190 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)
/* Sticky High to Low transition */
#define ZLS3073X_DPLL_MON_TL_STICKY_REG(dpllId)         ZL303XX_MAKE_MEM_ADDR_73X(0x01C0 + (dpllId), ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_HO_READY_BIT                           (0x4)
#define ZLS3073X_IN_HO_BIT                              (0x2)
#define ZLS3073X_LOCKBIT                                (0x1)

/* Holdover in NCO Mode */
#define ZLS3073X_NCO_HO_ENABLE_BIT_MASK                 (0x10)

#define ZLS3073X_PFM_CTRL_RESOLUTION_GET_REG(data)      ((data) & 0x1)

#define ZLS3073X_OUPUT_PHASE_STEP_MASK                  (0x3FF)

/* ToD and MiTod Sync and Basic (output phase step related) */
#define ZLS3073X_MITODSYNC_TX_PROTOCOL                  (1)
#define ZLS3073X_MITODBASIC_TX_PROTOCOL                 (2)
#define ZLS3073X_MITOD_TX_ENABLED_MASK                  (0x8)
#define ZLS3073X_MITOD_TX_ENABLED(x)                    ((x & ZLS3073X_MITOD_TX_ENABLED_MASK) >>3)
#define ZLS3073X_TOD_ESYNC                              (0x1)
#define ZLS3073X_TOD_ESYNC_ALT                          (0x2)
#define ZLS3073X_MITOD_TX_PROTOCOL                      (0x3)
#define ZLS3073X_MITOD_TX_CLOCKTYPE_MASK                (0x7)


#define ZLS3073X_PHASE_STEP_TIME_REG(dpllId)   ZL303XX_MAKE_MEM_ADDR_73X(0x0450 + ((dpllId) *4), ZL303XX_MEM_SIZE_4_BYTE)


#define ZLS3073X_INPUT_PHASE_STEP_REG(dpllId)   ZL303XX_MAKE_MEM_ADDR_73X(0x0460 + ((dpllId) *4), ZL303XX_MEM_SIZE_4_BYTE)
#define ZLS3073X_MISC_SW_HOST_REG(dpllId) ZL303XX_MAKE_MEM_ADDR_73X(0x0470 + ((dpllId) *4), ZL303XX_MEM_SIZE_1_BYTE)

#define ZLS3073X_MISC_SW_HOST_HYBRID_TRANSIENT_MASK (0x3)


#ifdef __cplusplus
}
#endif

#endif /* MULTIPLE INCLUDE BARRIER */
