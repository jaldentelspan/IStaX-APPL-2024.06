<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 Copyright (c) 2006-2022 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.
-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>QoS Port Classification</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/HeaderControl.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_qos_port_classification.htm";

var oTPCP      = genArrayStr(0, 7);
var oVPCP      = genArrayInt(0, 7);
var oTDEI      = genArrayStr(0, 1);
var oVDEI      = genArrayInt(0, 1);
var oTCOS      = genArrayStr(0, 7);
var oVCOS      = genArrayInt(0, 7);
var oTCOSID    = genArrayStr(0, 7);
var oVCOSID    = genArrayInt(0, 7);
var oTDPL      = genArrayStr(0, configQosDplMax);
var oVDPL      = genArrayInt(0, configQosDplMax);
var oTAddrMode = ["Source", "Destination"];
var oVAddrMode = [0, 1];
var oTKeyType  = ["Normal", "Double Tag", "IP Address", "MAC and IP Address"];
var oVKeyType  = [0, 1, 2, 3];
var oTWRED     = genArrayStr(configQosWredGroupMin, configQosWredGroupMax);
var oVWRED     = genArrayInt(configQosWredGroupMin, configQosWredGroupMax);

var tagClassNames = ["Disabled", "Enabled"];

var portCnt = 0; // The number of ports shown on the web page are determined at runtime

function addHeader(ref, show_pcp_dei, show_tag, show_dscp)
{
  var frag = document.createDocumentFragment();
  var tr;
  var thead;
  var count = 3;

  if (show_pcp_dei) {
      count += 2;
  }
  if (configQosHasCosIdClassification) {
      count++;
  }
  if (show_tag) {
      count++;
  }
  if (show_dscp) {
      count++;
  }
  if (configQosHasQceKeyType) {
      count++;
  }
  if (configQosHasQceAddressMode) {
      count++;
  }
  if (configQosWredVer == 3) {
      count++;
  }
  if (configQoSHasIngressMap) {
      count++;
  }

  tr = CreateStyledElement("tr", "config_header");
  addTextHeaderCell(tr, "Port", "hdrc", 1, 2);
  addTextHeaderCell(tr, "Ingress", "hdrc", count);
  if (configQoSHasEgressMap) {
      addTextHeaderCell(tr, "Egress", "hdrc", 1);
  }
  frag.appendChild(tr);  // Add row to fragment

  tr = CreateStyledElement("tr", "config_header");
  addTextHeaderCell(tr, "CoS", "hdrc", 2);
  addTextHeaderCell(tr, "DPL", "hdrc");
  if (show_pcp_dei) {
      addTextHeaderCell(tr, "PCP", "hdrc");
      addTextHeaderCell(tr, "DEI", "hdrc");
  }
  if (configQosHasCosIdClassification) {
      addTextHeaderCell(tr, "CoS ID", "hdrc");
  }
  if (show_tag) {
      addTextHeaderCell(tr, "Tag Class.", "hdrc");
  }
  if (show_dscp) {
      addTextHeaderCell(tr, "DSCP Based", "hdrc");
  }
  if (configQosHasQceKeyType) {
      addTextHeaderCell(tr, "Key Type", "hdrc");
  }
  if (configQosHasQceAddressMode) {
      addTextHeaderCell(tr, "Address Mode", "hdrc");
  }
  if (configQosWredVer == 3) {
      addTextHeaderCell(tr, "WRED Group", "hdrc");
  }
  if (configQoSHasIngressMap) {
      addTextHeaderCell(tr, "Map", "hdrc");
  }
  if (configQoSHasEgressMap) {
      addTextHeaderCell(tr, "Map", "hdrc");
  }
  frag.appendChild(tr);

  thead = document.getElementById(ref);
  clearChildNodes(thead);
  thead.appendChild(frag);
}

function addRow(i, frag, portInfo, show_pcp_dei, show_tag, show_dscp) {
  var tr = CreateStyledElement("tr", i % 2 ? "config_odd" : "config_even");
  var config  = portInfo.split("#");
  var portno;
  var vol_class;

  if (config.length >= 7) {
      portno = parseInt(config[0], 10);

    addTextCell(tr, configPortName(portno, 0), "cr");
    addSelectCell(tr, oTCOS, oVCOS, parseInt(config[3], 10), "c", "class_" + portno);
    vol_class = parseInt(config[4], 10);
    if (vol_class === -1) {
      addTextCell(tr, " ", "no_padding");
    } else {
      addTextCell(tr, "(" + vol_class + ")", "no_padding");
    }
    addSelectCell(tr, oTDPL, oVDPL, parseInt(config[5], 10), "c", "dpl_" + portno);

    if (show_pcp_dei) {
        addSelectCell(tr, oTPCP, oVPCP, parseInt(config[1], 10), "c", "pcp_" + portno);
        addSelectCell(tr, oTDEI, oVDEI, parseInt(config[2], 10), "c", "dei_" + portno);
    }
    if (configQosHasCosIdClassification) {
        addSelectCell(tr, oTCOSID, oVCOSID, parseInt(config[13], 10), "c", "cosid_" + portno);
    }
    if (show_tag) {
        addLink(tr, "c", "qos_port_classification_map.htm?port=" + portno, tagClassNames[parseInt(config[6], 10)]);
    }
    if (show_dscp) {
        addCheckBoxCell(tr, parseInt(config[7], 10), "c", "dscp_enable_" + portno);
    }
    if (configQosHasQceKeyType) {
        addSelectCell(tr, oTKeyType, oVKeyType, parseInt(config[9], 10), "c", "key_type_" + portno);
    }
    if (configQosHasQceAddressMode) {
        addSelectCell(tr, oTAddrMode, oVAddrMode, parseInt(config[8], 10), "c", "dmac_dip_" + portno);
    }
    if (configQosWredVer == 3) {
        addSelectCell(tr, oTWRED, oVWRED, parseInt(config[10], 10), "c", "wred_group_" + portno);
    }
    if (configQoSHasIngressMap) {
        var mapId = parseInt(config[11], 10);
        if (mapId == 4095) {
            addInputCell(tr, "", "cl", "ingressMapId" + portno, 4, 4);
        } else {
            addInputCell(tr, mapId, "cl", "ingressMapId" + portno, 4, 4);
        }
    }
    if (configQoSHasEgressMap) {
        mapId = parseInt(config[12], 10);
        if (mapId == 4095) {
            addInputCell(tr, "", "cl", "egressMapId" + portno, 4, 4);
        } else {
            addInputCell(tr, mapId, "cl", "egressMapId" + portno, 4, 4);
        }
    }

    frag.appendChild(tr);  // Add row to fragment
  }
}

/*
 * Format:
 * <options>|<ports>
 *
 * options :== <show_pcp_dei>,<show_tag_classification>,<show_dscp_classification>
 *   show_pcp_dei             :== 0..1 // 0: hide - , 1: show pcp and dei select cells
 *   show_tag_classification  :== 0..1 // 0: hide - , 1: show tag classification
 *   show_dscp_classification :== 0..1 // 0: hide - , 1: show dscp classification
 *
 * ports :== <port 1>,<port 2>,<port 3>,...<port n>
 *   port x :== <port_no>#<default_pcp>#<default_dei>#<default_class>#<volatile_class>#<default_dpl>#<tag_class>#<dscp_class>#<dmac_dip>#<key_type>#<wred_group>
 *     port_no        :== 1..max
 *     default_pcp    :== 0..7
 *     default_dei    :== 0..1
 *     default_class  :== 0..7
 *     volatile_class :== 0..7 or -1 if volatile is not set
 *     default_dpl    :== 0..3 on jaguar, 0..1 on luton26
 *     tag_class      :== 0..1 // 0: Disabled, 1: Enabled
 *     dscp_class     :== 0..1 // 0: Disabled, 1: Enabled
 *     dmac_dip       :== 0..1 // 0: Disabled, 1: Enabled
 *     key_type       :== 0..3 // One of vtss_vcap_key_type_t
 *     wred_group     :== 1..3 // 1 based WRED group
 *     ingress_map    :== configQosIngressMapMin..configQosIngressMapMax
 *     egress_map     :== configQosEgressMapMin..configQosEgressMapMax
 *     default_cosid  :== 0..7
 */
function processUpdate(req, ref)
{
  var values;
  var options;
  var show_pcp_dei;
  var show_tag_class;
  var show_dscp_class;
  var ports;
  var frag;
  var i;
  var tbody;
  var cBar;

  if (redirectOnError(req)) {
    return;
  }

  if (req.responseText) {
    values             = req.responseText.split("|");
    options            = values[0].split(",");
    show_pcp_dei       = parseInt(options[0], 10);
    show_tag_class     = parseInt(options[1], 10);
    show_dscp_class    = parseInt(options[2], 10);
    ports              = values[1].split(",");
    portCnt            = ports.length;

    // Create Port QoS Table Header
    addHeader('qos_thead', show_pcp_dei, show_tag_class, show_dscp_class);

    // Create Port QoS Table Body
    frag = document.createDocumentFragment();
    for (i = 0; i < ports.length; i++) {
        addRow(i, frag, ports[i], show_pcp_dei, show_tag_class, show_dscp_class);
    }
    tbody = document.getElementById(ref);
    clearChildNodes(tbody);
    tbody.appendChild(frag);

    cBar = new HeaderControlBar([{text: "*", className: "cr"}, 
                                 {name: "class_"},
                                 {text: " ", className: "no_padding"},
                                 {name: "dpl_"}]);
    if (show_pcp_dei) {
      cBar.extend([{name: "pcp_"},
                   {name: "dei_"}]);
    }
    if (configQosHasCosIdClassification) {
      cBar.extend([{name: "cosid_"}]);
    }
    if (show_tag_class) {
      cBar.extend([{text: " "}]);
    }
    if (show_dscp_class) {
      cBar.extend([{name: "dscp_enable_"}]);
    }
    if (configQosHasQceKeyType) {
      cBar.extend([{name: "key_type_"}]);
    }
    if (configQosHasQceAddressMode) {
      cBar.extend([{name: "dmac_dip_"}]);
    }
    if (configQosWredVer == 3) {
      cBar.extend([{name: "wred_group_"}]);
    }
    if (configQoSHasIngressMap) {
        cBar.extend([{text: " "}]);
    }
    if (configQoSHasEgressMap) {
        cBar.extend([{text: " "}]);
    }
    cBar.construct(ref);
  } else {
      SpomHandleError();
  }
}

function requestUpdate() {
  if (SpomNavigationLoading()) {
    return;                 // Bail out, navigation will trigger update
  }
  loadXMLDoc(SpomAddSidArg("/config/qos_port_classification"), processUpdate, "qos_tbody");
  SpomUpdateDisplaySid("display_sid");
  SpomUpdateFormSid("submit_sid");
}

function checkForm()
{
    for (i = 0; i < portCnt; i++) {
        /* Chech if the provided Ingress map ID is valid */
        if (configQoSHasIngressMap) {
            fld = document.getElementById("ingressMapId" + i);
            if (fld && fld.value) { // non empty field
                if (!isWithinRange("ingressMapId" + i, configQosIngressMapMin,
                                   configQosIngressMapMax, "'Ingress Map ID'")) {
                    return false;
                }
            }
        }

        /* Chech if the provided Egress map ID is valid */
        if (configQoSHasEgressMap) {
            fld = document.getElementById("egressMapId" + i);
            if (fld && fld.value) { // non empty field
                if (!isWithinRange("egressMapId" + i, configQosEgressMapMin,
                                   configQosEgressMapMax, "'Egress Map ID'")) {
                    return false;
                }
            }
        }
    }

    // If you reach this line, then all checks have passed.
    return true;
}

function SpomSidSelectorUpdate(sid)
{
  SpomSetCurrentSid(sid);     // Save current SID
  requestUpdate();            // Update page to reflect selector
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<form id="qos_port_classification" method="POST" action="/config/qos_port_classification" onsubmit="return checkForm();">

<h1>QoS Port Classification <span id="display_sid"></span></h1>

<table summary="QoS Port Classification Overview" cellspacing="0" class="config">
 <thead id="qos_thead">
 </thead>
 <tbody id="qos_tbody">
 </tbody>
</table>

<p>
 <input type="hidden" id="submit_sid" name="sid">    
 <input type="submit" value="Save">
 <input type="reset" value="Reset">
</p>

</form>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
