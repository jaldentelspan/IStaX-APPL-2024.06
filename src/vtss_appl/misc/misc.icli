# Copyright (c) 2006-2024 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.

# Microchip is aware that some terminology used in this technical document is
# antiquated and inappropriate. As a result of the complex nature of software
# where seemingly simple changes have unpredictable, and often far-reaching
# negative results on the software's functionality (requiring extensive retesting
# and revalidation) we are unable to make the desired changes in all legacy
# systems without compromising our product or our clients' products.

MODULE_IF_FLAG =

INCLUDE_BEGIN
#include "misc_api.h"
#include "misc_icli_util.h"
#include "vtss/appl/module_id.h"
#include "critd_api.h"
#include "icli_porting_util.h"
#include "led_api.h"
#include "msg_api.h"
#include "packet_api.h"
#include "vtss_api_if_api.h"
#include <sys/ioctl.h>
#include <linux/i2c.h>
#include <linux/i2c-dev.h>  /* I2C support */
#if defined(VTSS_SW_OPTION_TOD)
#include "tod_api.h"
#endif

#undef VTSS_TRACE_MODULE_ID
#define VTSS_TRACE_MODULE_ID VTSS_MODULE_ID_MISC
/*lint -esym(459, _debug_msg_cmd)   */
/*lint -esym(459, _debug_sfp_read)  */
/*lint -esym(459, _debug_sfp_write) */
/*lint -esym(459, _debug_assert) */
INCLUDE_END

FUNCTION_BEGIN

static void misc_icli_req_init(misc_icli_req_t *req, u32 session_id)
{
    vtss_clear(*req);
    req->session_id = session_id;
}

static BOOL _runtime_cword_module(
    IN    u32                   session_id,
    IN    icli_runtime_ask_t    ask,
    OUT   icli_runtime_t        *runtime
)
{
    u32     i;

    if ( session_id ){}

    if ( runtime == NULL ) {
        return FALSE;
    }

    switch ( ask ) {
    case ICLI_ASK_CWORD:
        for ( i = 0; i < VTSS_MODULE_ID_NONE; ++i ) {
            runtime->cword[i] = (char *)vtss_module_names[i];
        }
        return TRUE;
    default:
        break;
    }
    return FALSE;
}

static vtss_module_id_t _module_id_get(
    IN char     *module_name
)
{
    vtss_module_id_t    i;

    for ( i = 0; i < VTSS_MODULE_ID_NONE; ++i ) {
        if ( strcmp(module_name, vtss_module_names[i]) == 0 ) {
            return i;
        }
    }
    return VTSS_MODULE_ID_NONE;
}

static void mem_print(u32 addr, u8 *arr, int start_pos, int end_pos)
{
    int i;

    addr &= ~0xF;
    ICLI_SELF_PRINTF("%08x: ", addr);
    for (i = 0; i < start_pos; i++) {
        ICLI_SELF_PRINTF("   ");
    }
    for (i = start_pos; i < end_pos; i++) {
        ICLI_SELF_PRINTF("%02x%c", arr[i], i == 7 ? '-' : ' ');
    }
    for (i = end_pos; i < 16; i++) {
        ICLI_SELF_PRINTF("   ");
    }
    for (i = 0; i < start_pos; i++) {
        ICLI_SELF_PRINTF(" ");
    }
    for (i = start_pos; i < end_pos; i++) {
        ICLI_SELF_PRINTF("%c", isprint(arr[i]) ? arr[i] : '.');
    }
    ICLI_SELF_PRINTF("\n");
}

static BOOL misc_icli_arch_jaguar2(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    if (ask == ICLI_ASK_PRESENT) {
        uint32_t chip_family = fast_cap(MESA_CAP_MISC_CHIP_FAMILY);
        runtime->present = chip_family == MESA_CHIP_FAMILY_JAGUAR2 || chip_family == MESA_CHIP_FAMILY_SERVALT;
        return TRUE;
    }

    return FALSE;
}

static BOOL misc_icli_10g_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    return icli_present_phy_cap(ask, runtime, MEPA_CAP_SPEED_MASK_10G);
}

static BOOL misc_icli_phy_ts_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    bool mepa_cap_phy_ts = false;
#ifdef VTSS_SW_OPTION_TOD
    mepa_cap_phy_ts = mepa_phy_ts_cap();
#endif
    return icli_present_cap(ask, runtime, mepa_cap_phy_ts);
}

static BOOL misc_icli_sgpio_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    return icli_present_cap(ask, runtime, MESA_CAP_MISC_SGPIO_CNT);
}

static BOOL misc_icli_10G_phy_ts_and_jr2_present(u32 session_id, icli_runtime_ask_t ask, icli_runtime_t *runtime)
{
    bool mepa_cap_phy_ts = false;
#ifdef VTSS_SW_OPTION_TOD
    mepa_cap_phy_ts = mepa_phy_ts_cap();
#endif
    return icli_present_cap(ask, runtime, MEPA_CAP_SPEED_MASK_10G) && icli_present_cap(ask, runtime, mepa_cap_phy_ts) &&
        icli_present_cap(ask, runtime, MESA_CAP_TS_PPS_VIA_CONFIGURABLE_IO_PINS);
}

FUNCTION_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_CHIP_10G_PHY)

COMMAND = debug phy-10g apc-restart [interface <port_type_list>] {host | line}

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! 1: debug
! 2: phy-10g
! 3: apc-restart
! 4: interface
! 5: <port_type_list>
! 6: host
! 7: line

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_host
CMD_VAR = has_line

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = do apc restart operation on host side
HELP = do apc restart operation on line side

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = host : Option
BYWORD = line : Option

CODE_BEGIN
misc_icli_cmd_apc_restart (has_host, v_port_type_list);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-1g interface <port_type_list> read-tr <0-0x1fff>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! 1: debug
! 2: phy-1g
! 3: interface
! 4: <port_type_list>
! 5: read-tr
! 6: <0-0x1fff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR = v_0_0x1fff

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
phy_1g_token_ring_read(session_id, v_port_type_list, v_0_0x1fff);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_OPT_TS_SPI_FPGA)

COMMAND = debug phy spi-daisy timestamp interface <port_type_list> [ { output { enable | disable } } ] [ { input { enable | disable } } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! 1: debug
! 2: phy
! 3: spi-daisy
! 4: timestamp
! 5: interface
! 6: <port_type_list>
! 7: output
! 8: enable
! 9: disable
! 10: input
! 11: enable
! 12: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_output
CMD_VAR = has_enable
CMD_VAR = has_disable
CMD_VAR = has_input
CMD_VAR = has_enable_1
CMD_VAR = has_disable_1

RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = output : Option
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = input : Option
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
    misc_icli_spi_daisy_chaining_timestamp(session_id, v_port_type_list, has_output, has_enable, has_disable,
                                           has_input, has_enable_1, has_disable_1);
CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG = defined(VTSS_OPT_TS_SPI_FPGA) && defined(VTSS_SW_OPTION_SYNCE)

COMMAND = debug phy ts-api timestamp interface <port_type_list> no-of-timestamps <1-50>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! 1: debug
! 2: phy
! 3: ts-api
! 4: timestamp
! 5: interface
! 6: <port_type_list>
! 7: no-of-timestamps
! 8: <1-50>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR = v_1_to_50

RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    misc_icli_cmd_debug_phy_1588_timestamp_show(session_id, v_port_type_list, v_1_to_50);
CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG = defined(VTSS_OPT_TS_SPI_FPGA) && defined(VTSS_SW_OPTION_SYNCE)

COMMAND = debug phy ts-api fifo { clear | status }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
! 1: debug
! 2: phy
! 3: ts-api
! 4: fifo
! 5: clear
! 6: status

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_clear
CMD_VAR = has_status

RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present
RUNTIME = misc_icli_phy_ts_present

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = clear : Option
BYWORD = status : Option

CODE_BEGIN
     if (has_clear)
        misc_icli_cmd_debug_phy_1588_fifo_clear(session_id);
     else
        misc_icli_cmd_debug_phy_1588_fifo_status(session_id);

CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-1g ext-interrupt interface <port_type_list> { poll | set | clear } <1-11>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_arch_jaguar2

! 1: debug
! 2: phy-1g
! 3: ext-interrupt
! 4: interface
! 5: <port_type_list>
! 6: poll
! 7: set
! 8: clear
! 9: <1-11>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_poll
CMD_VAR = has_set
CMD_VAR = has_clear
CMD_VAR = v_1_to_11

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = PHY extended interrupt type \n\
       \t\t1 -> PHY EEE Wake Error \n\
       \t\t2 -> PHY EEE Wait Quit/Rx TS Timer \n\
       \t\t3 -> PHY EEE Rx TQ Timer \n\
       \t\t4 -> PHY EEE Link Fail \n\
       \t\t5 -> PHY Ring Resiliancy Switchover \n\
       \t\t6 -> PHY MACSEC Host MAC \n\
       \t\t7 -> PHY MACSEC Line MAC \n\
       \t\t8 -> PHY MACSEC Flow Control Buff \n\
       \t\t9 -> PHY MACSEC Ingress \n\
       \t\t10 -> PHY MACSEC Egress \n\
       \t\t11 -> PHY MEM Integrity Ring Control \n\

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = poll : Option
BYWORD = set : Option
BYWORD = clear : Option
BYWORD =

CODE_BEGIN
    if (phy_icli_1g_phy_extended_event_set(session_id, v_port_type_list, has_poll, has_set, has_clear, v_1_to_11) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api interrupt interface <port_type_list> { get | set | clear } <1-10>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: interrupt
! 5: interface
! 6: <port_type_list>
! 7: get
! 8: set
! 9: clear
! 10: <1-10>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_get
CMD_VAR = has_set
CMD_VAR = has_clear
CMD_VAR = v_1_to_10

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =  1588 interrupt type \n\
       \t\t1 -> More than one engine find match \n\
       \t\t2 -> Preamble too short to append timestamp \n\
       \t\t3 -> FCS error in ingress \n\
       \t\t4 -> More than one engine find match \n\
       \t\t5 -> FCS error in egress \n\
       \t\t6 -> Timestamp captured in Tx TSFIFO \n\
       \t\t7 -> Tx TSFIFO overflow \n\
       \t\t8 -> Data in reserved Field \n\
       \t\t9 -> New PPS pushed onto external PPS pin \n\
       \t\t10 -> New LTC value either loaded in to HW or saved into registers \n\

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = get : Option
BYWORD = set : Option
BYWORD = clear : Option
BYWORD =

CODE_BEGIN
     if (phy_icli_1588_event_enable_set(session_id, v_port_type_list, has_get, has_set, has_clear, v_1_to_10) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }

CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g interrupt interface <port_type_list> event <1-32> { enable | disable }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: interrupt
! 4: interface
! 5: <port_type_list>
! 6: event
! 7: <1-25>
! 8: enable
! 9: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR = v_1_to_32
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = 1->LINK_LOS 2->RX_LOL 3->TX_LOL 4->LOPC 5->HIGH_BER 6->MODULE_STAT 7->PCS_RECEIVE_FAULT 8->Severely errored frame 9->far-end PLM-P/LCD-P 10->far-end (AIS-P) 11->Loss of Frame 12->Line Remote Defect\n\
       13->Line Alarm Indication Signal 14->Loss of Code-group Delineation 15->Path Label Mismatch\n\
       16->Path Alarm Indication Signal 17->Path Loss of Pointer 18->Unequiped Path 19->Far-end Unequiped Path\n\
       20-> Far-end Path Remote Defect Identifier 21 >Line Remote Error Indication 22-> Path Remote Error Indication\n\
       23->PMTICK B1 BIP 24->PMTICK B2 BIP 25->PMTICK B3 BIP 26->PMTICK REI-L 27->PMTICK REI-P\n\
       28->B1 Thresh err 29->B2 Thresh err 30->B3 Thresh err 31->REIL Thresh err 32->REIP Thresh err
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
    if (phy_icli_10g_event_enable_set(session_id, v_port_type_list, v_1_to_32, has_enable, has_disable) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }

CODE_END

CMD_END
!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g interrupt interface <port_type_list> extended-event <1-14> { enable | disable }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: interrupt
! 4: interface
! 5: <port_type_list>
! 6: extended-event
! 7: <1-14>
! 8: enable
! 9: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR = v_1_to_14
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = 10G PMA/PCS specific  interrupt type \n\
       \t\t1 -> LOS at Serdes \n\
       \t\t2 -> Current state of RX LOL from SerDes \n\
       \t\t3 -> Current state of TX LOL from SerDes \n\
       \t\t4 -> None interrupt \n\
       \t\t5 -> RX character decode \n\
       \t\t6 -> TX character encode error count \n\
       \t\t7 -> RX block decode error count\n\
       \t\t8 -> TX block encode error count \n\
       \t\t9 -> RX sequencing error count \n\
       \t\t10 -> TX sequencing error count \n\
       \t\t11 -> KR-FEC uncorrectable block count \n\
       \t\t12 -> KR-FEC corrected threshold \n\
       \t\t13 -> high bit Error \n\
       \t\t14 -> Link status up \n\

HELP =
HELP =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
     if (phy_icli_10g_extended_event_enable_set(session_id, v_port_type_list, v_1_to_14,
                                                has_enable, has_disable) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
     }

CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g interrupt interface <port_type_list> poll-event <1-32>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: interrupt
! 4: interface
! 5: <port_type_list>
! 6: poll-event
! 7: <1-32>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR = v_1_to_32

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = 1->LINK_LOS 2->RX_LOL 3->TX_LOL 4->LOPC 5->HIGH_BER 6->MODULE_STAT 7->PCS_RECEIVE_FAULT 8->Severely errored frame 9->far-end PLM-P/LCD-P 10->far-end (AIS-P) 11->Loss of Frame 12->Line Remote Defect\n\
       13->Line Alarm Indication Signal 14->Loss of Code-group Delineation 15->Path Label Mismatch\n\
       16->Path Alarm Indication Signal 17->Path Loss of Pointer 18->Unequiped Path 19->Far-end Unequiped Path\n\
       20-> Far-end Path Remote Defect Identifier 21 >Line Remote Error Indication 22-> Path Remote Error Indication\n\
       23->PMTICK B1 BIP 24->PMTICK B2 BIP 25->PMTICK B3 BIP 26->PMTICK REI-L 27->PMTICK REI-P\n\
       28->B1 Thresh err 29->B2 Thresh err 30->B3 Thresh err 31->REIL Thresh err 32->REIP Thresh err

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (phy_icli_10g_event_enable_poll(session_id, v_port_type_list, v_1_to_32) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
     }

CODE_END

CMD_END
!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g interrupt interface <port_type_list> poll extended-event <1-14>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: interrupt
! 4: interface
! 5: <port_type_list>
! 6: poll
! 7: extended-event
! 8: <1-14>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR =
CMD_VAR = v_1_to_14
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = 10G PMA/PCS specific  interrupt type \n\
       \t\t1 -> LOS at Serdes \n\
       \t\t2 -> Current state of RX LOL from SerDes \n\
       \t\t3 -> Current state of TX LOL from SerDes \n\
       \t\t4 -> None \n\
       \t\t5 -> RX character decode \n\
       \t\t6 -> TX character encode error count \n\
       \t\t7 -> RX block decode error count\n\
       \t\t8 -> TX block encode error count \n\
       \t\t9 -> RX sequencing error count \n\
       \t\t10 -> TX sequencing error count \n\
       \t\t11 -> KR-FEC uncorrectable block count \n\
       \t\t12 -> KR-FEC corrected threshold \n\
       \t\t13 -> high bit Error \n\
       \t\t14 -> Link status up \n\

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (phy_icli_10g_extended_event_enable_poll(session_id, v_port_type_list, v_1_to_14) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
     }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug auto-failover interface <port_type_list> [ <uint16> <uint16> { host | line } event { gpio | los | lof | linkstatus | none } { enable | disable } [ filter <0-4> <uint16> ] [ gpio-pins <uint16> <uint16> ] ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: auto-failover
! 3: interface
! 4: <port_type_list>
! 5: <uint16>
! 6: <uint16>
! 7: host
! 8: line
! 9: event
! 10: gpio
! 11: los
! 12: lof
! 13: linkstatus
! 14: none
! 15: enable
! 16: disable
! 17: filter
! 18: <0-4>
! 19: <uint16>
! 20: gpio-pins
! 21: <uint16>
! 22: <uint16>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_uint16
CMD_VAR = v_uint16_1
CMD_VAR = has_host
CMD_VAR =
CMD_VAR =
CMD_VAR = has_gpio
CMD_VAR = has_los
CMD_VAR = has_lof
CMD_VAR = has_linkstatus
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR = has_disable
CMD_VAR = has_filter
CMD_VAR = v_0_to_4
CMD_VAR = v_uint16_2
CMD_VAR =
CMD_VAR = v_uint16_3
CMD_VAR = v_uint16_4

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Destination channel
HELP = Source channel
HELP = Configuration is on host
HELP = Configuration is on line
HELP =
HELP = Triggering event is GPIO
HELP = Triggering event is LOS
HELP = Triggering event is LOF
HELP = Triggering event is Link status
HELP = No triggering event, switching forcefully
HELP = Enable cross connect
HELP = Disable cross connect
HELP = Filter
HELP = Filter type 0-None,1-B2316,2-B70,3-A2316,4-A70
HELP = Filter value CSR clock cycles
HELP = GPIO pin that triggers GPIO event
HELP = 0-39, actual GPIO to be selected for GPIO event
HELP = 0-7 , 8 GPIOs can be used for GPIO event

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = host : Option
BYWORD = line : Option
BYWORD =
BYWORD = gpio : Option
BYWORD = los : Option
BYWORD = lof : Option
BYWORD = linkstatus : Option
BYWORD = none : Option
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = filter : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
bool is_set = false;
vtss_phy_10g_auto_failover_event_t event = VTSS_PHY_10G_AUTO_FAILOVER_EVENT_NONE;
VARIABLE_END

CODE_BEGIN
    if (has_enable || has_disable ) {
        is_set = true;
        if(has_gpio) {
            event = VTSS_PHY_10G_AUTO_FAILOVER_EVENT_GPIO;
        } else if(has_los) {
            event = VTSS_PHY_10G_AUTO_FAILOVER_EVENT_SERDES_LOS;
        } else if(has_lof) {
            event = VTSS_PHY_10G_AUTO_FAILOVER_EVENT_WIS_LOF;
        } else if(has_linkstatus) {
            event = VTSS_PHY_10G_AUTO_FAILOVER_EVENT_PCS_LINK_STATUS;
        } else {
            event = VTSS_PHY_10G_AUTO_FAILOVER_EVENT_NONE;
        }
    }

    if (misc_icli_auto_failover(session_id,v_port_type_list,v_uint16, v_uint16_1, has_host, event, has_enable, is_set, has_filter, v_0_to_4, v_uint16_2, v_uint16_3, v_uint16_4) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g gpio-mode interface <port_type_list> <uint16> [ mode <uint8> ] [ port-no <uint> ] [ led-mode <uint> [ blink-time-100ms | blink-time-50ms ] ] [ pgpio-no <uint16> ] [ internal-signal <uint8> ] [ source <uint16> ] [ channel-interrupt <uint8> ] [ port-gpio-interrupt [ set | unset ] ] [ aggr-interrupt <uint> ] [ gpio-input <uint8> ] [ use-as-interrupt-source [ true | false ] ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: gpio-mode
! 4: interface
! 5: <port_type_list>
! 6: <uint16>
! 7: mode
! 8: <uint8>
! 9: port-no
! 10: <uint>
! 11: led-mode
! 12: <uint>
! 13: blink-time-100ms
! 14: blink-time-50ms
! 15: pgpio-no
! 16: <uint16>
! 17: internal-signal
! 18: <uint8>
! 19: source
! 20: <uint16>
! 21: channel-interrupt
! 22: <uint8>
! 23: port-gpio-interrupt
! 24: set
! 25: unset
! 26: aggr-interrupt
! 27: <uint>
! 28: gpio-input
! 29: <uint>
! 30: use-as-interrupt-source
! 31: true
! 32: false

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_uint16
CMD_VAR = has_mode
CMD_VAR = v_uint8
CMD_VAR = has_port_no
CMD_VAR = v_uint
CMD_VAR =
CMD_VAR = v_uint_1
CMD_VAR = has_blink_time_100ms
CMD_VAR =
CMD_VAR = has_pgpio_no
CMD_VAR = v_uint16_1
CMD_VAR = has_internal_signal
CMD_VAR = v_uint8_1
CMD_VAR = has_source
CMD_VAR = v_uint16_2
CMD_VAR = has_channel_interrupt
CMD_VAR = v_uint8_2
CMD_VAR = has_port_gpio_interrupt
CMD_VAR = has_set
CMD_VAR = has_unset
CMD_VAR = has_aggr_interrupt
CMD_VAR = v_uint_2
CMD_VAR = has_gpio_input
CMD_VAR = v_uint8_3
CMD_VAR =
CMD_VAR = has_true
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = GPIO pin no.
HELP =
HELP = Mode 0-not initialized, 1-out , 2-in, 3-wis_int, 4-1588_load_save, 5-1588_1pps_0,6-1588_1pps_1, 7-1588_1pps_2, 8-1588_1pps_3, 9-pcs_rx_fault, 10-set_i2c_master, 11-tx_enable, 12-line_pll_status, 13-host_pll_status, 14-rcomp_busy, 15-chan_int_0, 16-chan_int_1, 17-1588_int, 18-ts_fifo_empty, 19-agg_int_0, 20-agg_int_1, 21-agg_int_2, 22-agg_int_3, 23-pll_int_0, 24-pll_int_1, 25-set_i2c_slave, 26-crss_int, 27-led, 28-drive_low,29-drive_high
HELP =
HELP = Port no.
HELP =
HELP = led mode: 1: Display Tx link status; 3: Display combination of Tx link and Tx data activity status; 4:Display LINE Tx link status and Tx,Rx data activity; 5: Display Rx link status; 7: Display combination of Rx link and Rx data activity status; 8: Display LINE Rx link status and Tx,Rx data activity;
HELP = blink time: 100ms interval
HELP = blink time: 50ms interval
HELP = Per channel gpio no.
HELP =
HELP = Internal signal 0-i2c_mstr_data_out, 1-i2c_mstr_clk_out, 2-led_tx, 3-led_rx, 4-rx_alarm, 5-tx_alarm, 6-host_link, 7-line_link, 8-line_kr_8b10b_2gpio, 9-line_kr_10b_2gpio, 10-rosi_pulse, 11-rosi_sdata, 12-rosi_sclk, 13-tosi_pulse, 14-tosi_sclk, 15-line_pcs1g_link, 16-line_pcs_rx_stat, 17-client_psc1g_link, 18-host_pcs_rx_stat, 19-host_sd10g_ib_sig, 20-line_sd10g_ib_sig, 21-hpcs_intr, 22-lpcs_intr, 23-client_pc1g_intr, 24-line_pc1g_intr, 25-wis_int0, 26-host_pma_int, 27-line_pma_int, 28-data_act_tx, 29-data_act_rx, 30-hdata_act_tx, 31-hdata_act_rx, 32-xgmii_paus_egr, 33-xgmii_paus_ing, 34-rx_pcs_paus, 35-tx_pcs_paus, 36-rx_wis_paus, 37-tx_wis_paus, 38-eth_chan_dis, 39-macsec_1588_sfd_lane, 40-line_s_tx_fault, 41-lpcs1g_latency0_or_ewis_bit0, 42-lpcs1g_latency1_or_ewis_bit1, 43-lpcs1g_char_pos0_or_ewis_bit2, 44-lpcs1g_char_pos1_or_ewis_word0, 45-lpcs1g_char_pos2_or_ewis_word1, 46-lpcs1g_char_pos3_or_ewis_word2, 47-macsec_igr_pred_var0, 48-macsec_igr_pred_var1, 49-kr_actv_2gpio, 50-dft_tx_2gpio, 51-reserved, 52-exe_lst_2gpio_0, 53-exe_lst_2gpio_1, 54-exe_lst_2gpio_2, 55-exe_lst_2gpio_3, 56-exe_lst_2gpio_4, 57-link_hcd_2gpio_0, 58-link_hcd_2gpio_1, 59-link_hcd_2gpio_2, 60-eth_1g_ena, 61-h_kr_8b10b_2gpio, 62-h_kr_10Gb_2gpio, 63-h_kr_actv_2gpio,64-none.
HELP =
HELP = Source
HELP =
HELP = Channel Interrupt 0-wis0, 1-wis1, 2-lpcs10g, 3-hpcs10g, 4-lpcs1g, 5-hpcs1g, 6-msec_egr, 7-msec_igr, 8-lmac, 9-hmac, 10-fcbuf, 11-ligr_fifo, 12-legr_fifo, 13-hegr_fifo, 14-lpma, 15-hpma
HELP =
HELP = USe GPIO per port as source of interrupt
HELP = Set -use
HELP = unset - Don't use
HELP = aggregated interrupt bit mask Following bits to be set Eg: say 0x3 selects channel interrupt 0,1;;; Aggr 0 - CH0_INTR0,1 - CH0_INTR1,2 - CH1_INTR0,3 - CH1_INTR1, 4 - CH2_INTR0,5 - CH2_INTR1,6 - CH2_INTR1,7 - CH3_INTR1, 8 - IP1588_0_INTR0, 9 - IP1588_0_INTR1,10 - IP1588_0_INTR2,11 - IP1588_0_INTR3,12 - IP1588_1_INTR0,13 - IP1588_1_INTR1,14 - IP1588_1_INTR2,15 - IP1588_1_INTR3,16 - LCPLL_0_INTR,17 - LCPLL_1_INTR,18 - EXP4_INTR,19 - CLK_MUX_INTR,20 - GPIO_INTR
HELP = GPIO inputs
HELP = 1- Line LOPC,2- Host LOPC
HELP = Uses the same GPIO to propagate interrupt
HELP = TRUE - use
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = mode : Option
BYWORD =
BYWORD = port-no : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = blink-time-100ms : Option
BYWORD = blink-time-50ms : Option
BYWORD = pgpio-no : Option
BYWORD =
BYWORD = internal-signal : Option
BYWORD =
BYWORD = source : Option
BYWORD =
BYWORD = channel-interrupt : Option
BYWORD =
BYWORD = port-gpio-interrupt : Option
BYWORD = set : Option
BYWORD = unset : Option
BYWORD = aggr-interrupt : Option
BYWORD =
BYWORD = gpio-input : Option
BYWORD =
BYWORD = use-as-interrupt-source : Option
BYWORD = true : Option
BYWORD = false : Option

CODE_BEGIN
BOOL blink_time = has_blink_time_100ms;
if(has_blink_time_100ms){blink_time = true;} else {blink_time = false;}

    if (misc_icli_gpio_set_get(session_id, v_port_type_list, v_uint16, has_mode, v_uint8, has_port_no, v_uint, v_uint_1, blink_time, has_pgpio_no, v_uint16_1, has_internal_signal, v_uint8_1, has_source, v_uint16_2, has_channel_interrupt, v_uint8_2, has_port_gpio_interrupt, has_set, has_unset, has_aggr_interrupt, v_uint_2,has_gpio_input,v_uint8_3,has_true)  != VTSS_RC_OK ) {
	return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis tx-oh-conf interface <port_type_list> [ { set { all | sec-oh | line-oh | path-oh | d1-d3 | sec-ord | suc | res-sg | d4-d12 | line-ord | aps-rdil | sync | res-lg | c2pl | puc | ptcm | res-pg } { <word> } } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: tx-oh-conf
! 4: interface
! 5: <port_type_list>
! 6: set
! 7: all
! 8: sec-oh
! 9: line-oh
! 10: path-oh
! 11: d1-d3
! 12: sec-ord
! 13: suc
! 14: res-sg
! 15: d4-d12
! 16: line-ord
! 17: aps-rdil
! 18: sync
! 19: res-lg
! 20: c2pl
! 21: puc
! 22: ptcm
! 23: res-pg
! 24: <word>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_set
CMD_VAR = has_all
CMD_VAR = has_sec_oh
CMD_VAR = has_line_oh
CMD_VAR = has_path_oh
CMD_VAR = has_d1_d3
CMD_VAR = has_sec_ord
CMD_VAR = has_suc
CMD_VAR = has_res_sg
CMD_VAR = has_d4_d12
CMD_VAR = has_line_ord
CMD_VAR = has_aps_rdil
CMD_VAR = has_sync
CMD_VAR = has_res_lg
CMD_VAR = has_c2pl
CMD_VAR = has_puc
CMD_VAR = has_ptcm
CMD_VAR = has_res_pg
CMD_VAR = v_word

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = Set one tx overhead register or get all tx overhead bytes \n
HELP =
HELP =
HELP =
HELP = Key word to configure all overheads in one step \n
HELP = Section overhead(D1-D3) \n
HELP = Line overhead(D4-D12) \n
HELP = Path overhead \n
HELP = Section Data Communications Channel \n
HELP = Section Orderwire \n
HELP = Section User Channel \n
HELP = Reserved for Section growth \n
HELP = Line Data Communications Channel \n
HELP = Line Orderwire overhead \n
HELP = Automatic protection switch (APS) channel and Line Remote Defect Identifier (RDI-L)\n
HELP = Synchronization messaging \n
HELP = Reserved for Line growth  \n
HELP = Transmitted C2 path label \n
HELP = Path User Channel \n
HELP = Tandem connection maintenance/Path data channel \n
HELP = Reserved for Path growth \n
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = set : Option
BYWORD = all : Option
BYWORD = sec-oh : Option
BYWORD = line-oh : Option
BYWORD = path-oh : Option
BYWORD = d1-d3 : Option
BYWORD = sec-ord : Option
BYWORD = suc : Option
BYWORD = res-sg : Option
BYWORD = d4-d12 : Option
BYWORD = line-ord : Option
BYWORD = aps-rdil : Option
BYWORD = sync : Option
BYWORD = res-lg : Option
BYWORD = c2pl : Option
BYWORD = puc : Option
BYWORD = ptcm : Option
BYWORD = res-pg : Option
BYWORD =

CODE_BEGIN
    if(misc_icli_wis_tx_overhead_conf(session_id, v_port_type_list, has_set, has_all, has_sec_oh, has_line_oh, has_path_oh,
                                      has_d1_d3, has_sec_ord, has_suc, has_res_sg, has_d4_d12, has_line_ord, has_aps_rdil,
                                      has_sync, has_res_lg, has_c2pl, has_puc, has_ptcm,
                                      has_res_pg, v_word) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis txtti interface <port_type_list> [ set <0-1> <0-2> <line> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: txtti
! 4: interface
! 5: <port_type_list>
! 6: set
! 7: <0-1>
! 8: <0-2>
! 9: <line>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_set
CMD_VAR = v_0_to_1
CMD_VAR = v_0_to_2
CMD_VAR = v_word

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = Set WIS overhead, tti-mode, tti
HELP = WIS overhead   0 - section layer   1 - path layer
HELP = WIS tti-mode   0 - one byte        1 - 16 bytes       2 - 64 bytes
HELP = WIS tti (upto 64 bytes)

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = set : Option
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if(misc_icli_wis_txtti(session_id, has_set, v_0_to_1, (vtss_ewis_tti_mode_t) v_0_to_2, v_word, v_port_type_list) != VTSS_RC_OK) {
         return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis test-status interface <port_type_list>

DOC_CMD_DESC    = Get WIS test status
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: test-status
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if(misc_icli_wis_test_status(session_id, v_port_type_list) != VTSS_RC_OK) {
         return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis perf-thr interface <port_type_list> [ { set <0-0xffffffff> <0-0xffffffff> <0-0xffffffff> <0-0xffffffff> <0-0xffffffff> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: perf-thr
! 4: interface
! 5: <port_type_list>
! 6: set
! 7: <0-0xffffffff>
! 8: <0-0xffffffff>
! 9: <0-0xffffffff>
! 10: <0-0xffffffff>
! 11: <0-0xffffffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_set
CMD_VAR = v_0_0xffffffff
CMD_VAR = v_0_0xffffffff_1
CMD_VAR = v_0_0xffffffff_2
CMD_VAR = v_0_0xffffffff_3
CMD_VAR = v_0_0xffffffff_4

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = set WIS performance counter threshold configuration
HELP = WIS Section error count (B1) threshold
HELP = WIS Near end line error count (B2) threshold
HELP = WIS Far end line error count threshold
HELP = WIS Path block error count (B3) threshold
HELP = WIS Far end path error count threshold

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = set : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if(misc_cli_wis_tx_perf_thr_conf(session_id, v_port_type_list, has_set, v_0_0xffffffff, v_0_0xffffffff_1,
                                     v_0_0xffffffff_2, v_0_0xffffffff_3, v_0_0xffffffff_4 ) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis test-mode interface <port_type_list> [ loopback | no-loopback ] [ gen-dis | gen-sqr | gen-prbs31 | gen-mix ] [ ana-dis | ana-prbs31 | ana-mix ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: test-mode
! 4: interface
! 5: <port_type_list>
! 6: loopback
! 7: no-loopback
! 8: gen-dis
! 9: gen-sqr
! 10: gen-prbs31
! 11: gen-mix
! 12: ana-dis
! 13: ana-prbs31
! 14: ana-mix

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_loopback
CMD_VAR = has_no_loopback
CMD_VAR = has_gen_dis
CMD_VAR = has_gen_sqr
CMD_VAR = has_gen_prbs31
CMD_VAR = has_gen_mix
CMD_VAR = has_ana_dis
CMD_VAR = has_ana_prbs31
CMD_VAR = has_ana_mix

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = enable loopback
HELP = disable loopback
HELP = disable generator test
HELP = squarevave generator
HELP = prbs31 generator
HELP = mixed frequency generator
HELP = disable analyser
HELP = prbs31 analyser
HELP = mixed frequency analyser

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = loopback : Option
BYWORD = no-loopback : Option
BYWORD = gen-dis : Option
BYWORD = gen-sqr : Option
BYWORD = gen-prbs31 : Option
BYWORD = gen-mix : Option
BYWORD = ana-dis : Option
BYWORD = ana-prbs31 : Option
BYWORD = ana-mix : Option

CODE_BEGIN
    if(misc_icli_wis_test_mode(session_id, v_port_type_list, has_loopback, has_no_loopback, has_gen_dis, has_gen_sqr,
                               has_gen_prbs31, has_gen_mix, has_ana_dis, has_ana_prbs31, has_ana_mix) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis prbs31-err-inj interface <port_type_list> { single-erro | sat-erro }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: prbs31-err-inj
! 4: interface
! 5: <port_type_list>
! 6: single-erro
! 7: sat-erro

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_single_erro
CMD_VAR = has_sat_erro

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = single-erro : Option
BYWORD = sat-erro : Option

CODE_BEGIN
    if (misc_cli_wis_prbs31_err_inj_conf(session_id, v_port_type_list, has_single_erro, has_sat_erro) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis atti interface <port_type_list> [ { overhead <0-1> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: atti
! 4: interface
! 5: <port_type_list>
! 6: overhead
! 7: <0-1>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_overhead
CMD_VAR = v_0_to_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = overhead : Option
BYWORD =

CODE_BEGIN
    if (misc_icli_wis_atti(session_id, has_overhead, v_0_to_1, v_port_type_list) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis reset interface <port_type_list>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: reset
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (misc_icli_wis_reset(session_id, v_port_type_list) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis status interface <port_type_list>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: status
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (misc_icli_wis_status(session_id, v_port_type_list) != VTSS_RC_OK) {
	return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =
COMMAND = debug wis counters  interface <port_type_list>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: counters
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD = interface : Option
BYWORD =

CODE_BEGIN
    misc_icli_wis_counters(session_id, v_port_type_list);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis defects interface <port_type_list>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: defects
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
  misc_icli_wis_defects(session_id,v_port_type_list);
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis perf-counters interface <port_type_list>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: perf-counters
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (misc_icli_wis_perf_counters_get(session_id, v_port_type_list) != VTSS_RC_OK) {
	return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis mode interface <port_type_list> [ enable | disable ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: mode
! 4: interface
! 5: <port_type_list>
! 6: enable
! 7: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
    if (misc_icli_wis_mode(session_id,has_enable,has_disable,v_port_type_list) != VTSS_RC_OK) {
	    return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug chip [ { 0 | 1 | all } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! chip
CMD_VAR =
RUNTIME =
HELP    = Select chip for debugging
BYWORD  =

! 0
CMD_VAR = has_0
RUNTIME =
HELP    = Select first chip
BYWORD  = 0 : Option

! 1
CMD_VAR = has_1
RUNTIME =
HELP    = Select second chip
BYWORD  = 1 : Option

! all
CMD_VAR = has_all
RUNTIME =
HELP    = Select all chips
BYWORD  = all : Option

VARIABLE_BEGIN
    misc_icli_req_t req;
VARIABLE_END

CODE_BEGIN
    misc_icli_req_init(&req, session_id);
    req.chip_no = (has_0 ? 0 : has_1 ? 1 : has_all ? VTSS_CHIP_NO_ALL : MISC_CHIP_NO_NONE);
    misc_icli_chip(&req);
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g pcs1g-sticky poll

DOC_CMD_DESC    = Poll PCS1G sticky register
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g pcs1g-sticky poll

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: pcs1g-sticky
! 4: poll

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Poll PCS1G sticky register

BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    misc_icli_10g_phy_pcs_sticky_poll(session_id,plist);
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g clause37 [ { host } ] [ { line } ] [ { aneg-enable | aneg-disable } ]

DOC_CMD_DESC    = Show or set 10g phy Clause 37 Ability
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g clause37 line aneg-enable

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: clause37
! 4: host
! 5: line
! 6: aneg_enable
! 7: aneg_disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_host
CMD_VAR = has_line
CMD_VAR = has_aneg_enable
CMD_VAR = has_aneg_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set 10g phy Clause37 Ability
HELP = Host side Autoneg
HELP = Line side Autoneg
HELP = Autoneg Enable
HELP = Autoneg Disable

BYWORD =
BYWORD =
BYWORD = host : Option
BYWORD = line : Option
BYWORD = aneg_enable : Option
BYWORD = aneg_disable : Option

CODE_BEGIN
    misc_icli_10g_phy_clause37_abil(session_id, has_host, has_line, has_aneg_enable, has_aneg_disable, plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =
COMMAND = debug phy-10g kr-autoneg-train [ { enable | disable } ] [ { line } ] [ { host } ] [ kr-ld-adv-abil [ { adv-1g } ] [ { adv-10g } ] [ { fec-abil } ] [ { fec-req } ] ] [ kr-training [ { enable | disable } ] [ tr-method [ cm1 <0> ] [ c0 <0-1> ] [ cp1 <0> ] ] [ ld-pre-init { init | preset } ] ]

DOC_CMD_DESC    = Show or set 10g phy KR Training & Autoneg
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g kr-autoneg-train enable

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist

! 1: debug
! 2: phy-10g
! 3: kr-autoneg
! 4: enable
! 5: disable
! 6: line
! 5: host
! 8: kr-ld-adv-abil
! 9: adv-1g
! 10: adv-10g
! 11: fec-abil
! 12: fec-req
! 13: kr-training
! 14: enable
! 15: disable
! 16: tr-method
! 17: cm1
! 18: <0>
! 19: c0
! 20: <0-1>
! 21: cp1
! 22: <0>
! 23: ld-pre-init
! 24: init
! 25: preset

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR = has_disable
CMD_VAR = has_line
CMD_VAR = has_host
CMD_VAR =
CMD_VAR = has_adv_1g
CMD_VAR = has_adv_10g
CMD_VAR = has_fec_abil
CMD_VAR = has_fec_req
CMD_VAR =
CMD_VAR = has_enable_1
CMD_VAR = has_disable_1
CMD_VAR = has_tr_method
CMD_VAR = has_cm1
CMD_VAR = cm_1
CMD_VAR = has_c0
CMD_VAR = c_0
CMD_VAR = has_cp1
CMD_VAR = c_1
CMD_VAR =
CMD_VAR =
CMD_VAR = has_preset

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set 10g phy KR Autoneg & Training
HELP = Enable KR Training & Autoneg
HELP = Disable KR Training & Autoneg
HELP = Line Side KR
HELP = Host Side KR
HELP = Configure advertisement abilities
HELP = select 1G
HELP = select 10G
HELP = select fec ability
HELP = fec request
HELP = Configure Training
HELP = enable training setup
HELP = disable training setup
HELP = select training method
HELP = configure cm(c_minus-1) coefficient
HELP = cm value
HELP = Configure c0 coefficient
HELP = c0 value
HELP = Configure cp(c_plus+1) coefficient
HELP = cp value
HELP = select ld_pre_init configuration
HELP = use init value
HELP = use preset value

BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = line : Option
BYWORD = host : Option
BYWORD = kr-ld-adv-abil : Option
BYWORD = adv-1g : Option
BYWORD = adv-10g : Option
BYWORD = fec-abil : Option
BYWORD = fec-req : Option
BYWORD = kr-training : Option
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = tr-method : Option
BYWORD = cm1 : Option
BYWORD = <Cm1 : 0>
BYWORD = c0 : Option
BYWORD = <C0 : 0-1>
BYWORD = cp1 : Option
BYWORD = <C1 : 0>
BYWORD = ld-pre-init : Option
BYWORD = init : Option
BYWORD = preset : Option

VARIABLE_BEGIN
vtss_phy_10g_base_kr_ld_adv_abil_t adv_abil;
vtss_phy_10g_base_kr_training_t training;
VARIABLE_END
CODE_BEGIN
if (has_adv_1g) {
    adv_abil.adv_1g = TRUE;
}
if (has_adv_10g) {
    adv_abil.adv_10g = TRUE;
}
if (has_fec_abil) {
    adv_abil.fec_abil = TRUE;
}
if (has_fec_req) {
    adv_abil.fec_req = TRUE;
}
if (has_enable_1) {
    training.enable = TRUE;
} else if(has_disable_1) {
    training.enable = FALSE;
}
if (has_tr_method) {
    if (has_cm1) {
        training.trmthd_cm=cm_1;
    }
    if (has_c0) {
        training.trmthd_c0=c_0;
    }
    if (has_cp1) {
        training.trmthd_cp=c_1;
    }
}
training.ld_pre_init = TRUE;
if (has_preset) {
    training.ld_pre_init = FALSE;
} else {
    training.ld_pre_init = TRUE;
}
misc_icli_10g_phy_kr_train_autoneg(session_id, has_enable, has_disable, has_line, has_host, &adv_abil, &training, plist);
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_CHIP_10G_PHY)

COMMAND = debug phy-10g fc-buffer-reset

DOC_CMD_DESC    = FC Buffer Reset
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g fc-buffer-reset

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist

! 1: debug
! 2: phy-10g
! 3: fc-buffer-reset

CMD_VAR =
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = FC Buffer reset

BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
misc_icli_phy_10g_fc_buffer_reset(session_id,plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug api [interface <port_type_list>] [action <uint>] [{ail | cil}] [{init | misc | port | counters | phy [ vml-pattern ] | macsec | vlan | pvlan | mac-table | acl | qos | aggr | stp | mirror | erps | eps | redbox | packet | fdma | ts | pts | wm | ipmc | stack | cmef | vxlat | oam | sgpio | l3 | afi | serdes | kr | mrp}] [full] [clear]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! api
CMD_VAR =
RUNTIME =
HELP    = VTSS API
BYWORD  =

! interface
CMD_VAR = has_interface
RUNTIME =
HELP    = Specify interface
BYWORD  = interface : Option

! <port_type_list>
CMD_VAR = port_list
RUNTIME =
HELP    =
BYWORD  = <PortList : port_type_list>

! action
CMD_VAR = has_action
RUNTIME =
HELP    = This is a debug group depending action value, giving possibility for different actions like selecting what information to print. If this argument is NOT present default action is taken. If this argument is present and the value is '0' it is recommended that the meaning of other values are displayed.
BYWORD  =

! <uint>
CMD_VAR = action
RUNTIME =
HELP    = The action value.
BYWORD  = <Action : <uint>>

! ail
CMD_VAR = has_ail
RUNTIME =
HELP    = Application Interface Layer
BYWORD  = ail : Option

! cil
CMD_VAR = has_cil
RUNTIME =
HELP    = Chip Interface Layer
BYWORD  = cil : Option

! init
CMD_VAR = has_init
RUNTIME =
HELP    = Inititialization group
BYWORD  = init : Option

! misc
CMD_VAR = has_misc
RUNTIME =
HELP    = Miscellaneous group
BYWORD  = misc : Option

! port
CMD_VAR = has_port
RUNTIME =
HELP    = Port group
BYWORD  = port : Option

! counters
CMD_VAR = has_counters
RUNTIME =
HELP    = Port counter group
BYWORD  = counters : Option

! phy
CMD_VAR = has_phy
RUNTIME =
HELP    = PHY group
BYWORD  = phy : Option

! vml-pattern
CMD_VAR = has_vml_pattern
RUNTIME =
HELP    = VML format register dump
BYWORD  = vml-pattern : option

! macsec
CMD_VAR = has_macsec
RUNTIME =
HELP    = MACsec group
BYWORD  = macsec : Option

! vlan
CMD_VAR = has_vlan
RUNTIME =
HELP    = VLAN group
BYWORD  = vlan : Option

! pvlan
CMD_VAR = has_pvlan
RUNTIME =
HELP    = PVLAN group
BYWORD  = pvlan : Option

! mac-table
CMD_VAR = has_mac_table
RUNTIME =
HELP    = MAC address table group
BYWORD  = mac-table : Option

! acl
CMD_VAR = has_acl
RUNTIME =
HELP    = ACL group
BYWORD  = acl : Option

! qos
CMD_VAR = has_qos
RUNTIME =
HELP    = QoS group
BYWORD  = qos : Option

! aggr
CMD_VAR = has_aggr
RUNTIME =
HELP    = Link aggregation group
BYWORD  = aggr : Option

! stp
CMD_VAR = has_stp
RUNTIME =
HELP    = Spanning Tree group
BYWORD  = stp : Option

! mirror
CMD_VAR = has_mirror
RUNTIME =
HELP    = Mirror group
BYWORD  = mirror : Option

! erps
CMD_VAR = has_erps
RUNTIME =
HELP    = ERPS group
BYWORD  = erps : Option

! eps
CMD_VAR = has_eps
RUNTIME =
HELP    = EPS group
BYWORD  = eps : Option

! redbox
CMD_VAR = has_redbox
RUNTIME =
HELP    = RedBox group
BYWORD  = redbox : Option

! packet
CMD_VAR = has_packet
RUNTIME =
HELP    = Packet group
BYWORD  = packet : Option

! fdma
CMD_VAR = has_fdma
RUNTIME =
HELP    = FDMA group
BYWORD  = fdma : Option

! ts
CMD_VAR = has_ts
RUNTIME =
HELP    = Timestamp group
BYWORD  = ts : Option

! pts
CMD_VAR = has_pts
RUNTIME =
HELP    = PHY timestamp group
BYWORD  = pts : Option

! wm
CMD_VAR = has_wm
RUNTIME =
HELP    = Queue system water mark group
BYWORD  = wm : Option

! ipmc
CMD_VAR = has_ipmc
RUNTIME =
HELP    = IP multicast group
BYWORD  = ipmc : Option

! stack
CMD_VAR = has_stack
RUNTIME =
HELP    = Stacking group
BYWORD  = stack : Option

! cmef
CMD_VAR = has_cmef
RUNTIME =
HELP    = Stacking congestion control group
BYWORD  = cmef : Option

! vxlat
CMD_VAR = has_vxlat
RUNTIME =
HELP    = VLAN translation group
BYWORD  = vxlat : Option

! oam
CMD_VAR = has_oam
RUNTIME =
HELP    = OAM group
BYWORD  = oam : Option

! sgpio
CMD_VAR = has_sgpio
RUNTIME =
HELP    = Serial GPIO group
BYWORD  = sgpio : Option

! l3
CMD_VAR = has_l3
RUNTIME =
HELP    = Layer 3 group
BYWORD  = l3 : Option

! afi
CMD_VAR = has_afi
RUNTIME =
HELP    = Automatic Frame Injection group
BYWORD  = afi : Option

! serdes
CMD_VAR = has_serdes
RUNTIME =
HELP    = SerDes group
BYWORD  = serdes : Option

! kr
CMD_VAR = has_kr
RUNTIME =
HELP    = kr
BYWORD  = kr : Option

! mrp
CMD_VAR = has_mrp
RUNTIME =
HELP    = Media Redundancy Protocol (IEC 62439-2)
BYWORD  = mrp : Option

! full
CMD_VAR = has_full
RUNTIME =
HELP    = Show all information
BYWORD  = full : Option

! clear
CMD_VAR = has_clear
RUNTIME =
HELP    = Clear information (e.g. sticky bits)
BYWORD  = clear : Option

VARIABLE_BEGIN
    misc_icli_req_t req;
VARIABLE_END

CODE_BEGIN
    misc_icli_req_init(&req, session_id);
    req.dummy = has_interface;
    req.port_list = port_list;
    req.debug_info.layer = (has_ail       ? MESA_DEBUG_LAYER_AIL       :
                            has_cil       ? MESA_DEBUG_LAYER_CIL       : MESA_DEBUG_LAYER_ALL);
    req.debug_info.group = (has_init      ? MESA_DEBUG_GROUP_INIT      :
                            has_misc      ? MESA_DEBUG_GROUP_MISC      :
                            has_port      ? MESA_DEBUG_GROUP_PORT      :
                            has_counters  ? MESA_DEBUG_GROUP_PORT_CNT  :
                            has_phy       ? MESA_DEBUG_GROUP_PHY       :
                            has_macsec    ? MESA_DEBUG_GROUP_MACSEC    :
                            has_vlan      ? MESA_DEBUG_GROUP_VLAN      :
                            has_pvlan     ? MESA_DEBUG_GROUP_PVLAN     :
                            has_mac_table ? MESA_DEBUG_GROUP_MAC_TABLE :
                            has_acl       ? MESA_DEBUG_GROUP_ACL       :
                            has_qos       ? MESA_DEBUG_GROUP_QOS       :
                            has_aggr      ? MESA_DEBUG_GROUP_AGGR      :
                            has_stp       ? MESA_DEBUG_GROUP_STP       :
                            has_mirror    ? MESA_DEBUG_GROUP_MIRROR    :
                            has_erps      ? MESA_DEBUG_GROUP_ERPS      :
                            has_eps       ? MESA_DEBUG_GROUP_EPS       :
                            has_redbox    ? MESA_DEBUG_GROUP_REDBOX    :
                            has_packet    ? MESA_DEBUG_GROUP_PACKET    :
                            has_fdma      ? MESA_DEBUG_GROUP_FDMA      :
                            has_ts        ? MESA_DEBUG_GROUP_TS        :
                            has_pts       ? MESA_DEBUG_GROUP_PHY_TS    :
                            has_wm        ? MESA_DEBUG_GROUP_WM        :
                            has_ipmc      ? MESA_DEBUG_GROUP_IPMC      :
                            has_stack     ? MESA_DEBUG_GROUP_STACK     :
                            has_cmef      ? MESA_DEBUG_GROUP_CMEF      :
                            has_vxlat     ? MESA_DEBUG_GROUP_VXLAT     :
                            has_oam       ? MESA_DEBUG_GROUP_OAM       :
                            has_sgpio     ? MESA_DEBUG_GROUP_SER_GPIO  :
                            has_l3        ? MESA_DEBUG_GROUP_L3        :
                            has_afi       ? MESA_DEBUG_GROUP_AFI       :
                            has_serdes    ? MESA_DEBUG_GROUP_SERDES    :
                            has_kr        ? MESA_DEBUG_GROUP_KR        :
                            has_mrp       ? MESA_DEBUG_GROUP_MRP       :
                            MESA_DEBUG_GROUP_ALL);
    req.debug_info.vml_format = has_vml_pattern;
    req.debug_info.full = has_full;
    req.debug_info.clear = has_clear;
    req.debug_info.has_action = has_action;
    req.debug_info.action = action;
    misc_icli_debug_api(&req);
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug suspend

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! suspend
CMD_VAR =
RUNTIME =
HELP    = Suspend port thread
BYWORD  =

VARIABLE_BEGIN
    misc_icli_req_t req;
VARIABLE_END

CODE_BEGIN
    misc_icli_req_init(&req, session_id);
    misc_icli_suspend_resume(&req);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug resume

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! resume
CMD_VAR =
RUNTIME =
HELP    = Resume port thread
BYWORD  =

VARIABLE_BEGIN
    misc_icli_req_t req;
VARIABLE_END

CODE_BEGIN
    misc_icli_req_init(&req, session_id);
    req.resume = 1;
    misc_icli_suspend_resume(&req);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g status [ interface <port_type_list> ]

DOC_CMD_DESC    = Get the status for 10g phy
DOC_CMD_EXAMPLE = debug phy-10g status

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
CMD_MODE = ICLI_CMD_MODE_EXEC
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: status
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = plist

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show 10g phy status

CODE_BEGIN
    if (!misc_icli_10g_phy_status(session_id, plist)) {
        return(ICLI_RC_ERROR);
    }
CODE_END

CMD_END

!==============================================================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g fw-status

DOC_CMD_DESC    = Get the status for the EDC FW running in the internal CPU
DOC_CMD_EXAMPLE = debug phy-10g fw-status

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: fw-status

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show 10g phy fw-status

CODE_BEGIN
    if (!misc_icli_10g_phy_fw_status(session_id, plist)) {
        return(ICLI_RC_ERROR);
    }
CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug wis cons-act <port_type_list> [ { enable <0-0x3> <0-0xf> <0-0x7ff> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: cons-act
! 4: <port_type_list>
! 5: enable
! 6: <0-0x3>
! 7: <0-0xf>
! 8: <0-0x7ff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_enable
CMD_VAR = v_0_0x3
CMD_VAR = v_0_0xf
CMD_VAR = v_0_0x7ff

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = 0 bit -AIS-L insertion on LOS :: 1 bit -AIS-L insertion on LOF
HELP = 0 bit -RDI-L back reporting on LOS:: \
       1 bit -RDI-L back reporting on LOF:: \
       2 bit -RDI-L back reporting on LOPC:: \
       3 bit -RDI-L back reporting on AIS_L
HELP = 0 bit -fault condition on far-end PLM-P:: \
       1 bit -fault condition on far-end AIS-P:: \
       2 bit -fault condition on RDI-L:: \
       3 bit -fault condition on SEF:: \
       4 bit -fault condition on LOF:: \
       5 bit -fault condition on LOS:: \
       6 bit -fault condition on AIS-L:: \
       7 bit -fault condition on LCD-P:: \
       8 bit -fault condition on PLM-P:: \
       9 bit -fault condition on AIS-P:: \
       10 bit -fault condition on LOP-P

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (misc_icli_wis_conse_act(session_id, v_port_type_list, has_enable, v_0_0x3, v_0_0xf, v_0_0x7ff) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug wis event-force interface <port_type_list> <0-0xffffffff> { enable | disable }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: event-force
! 4: interface
! 5: <port_type_list>
! 6: <0-0xffffffff>
! 7: enable
! 8: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_0xffffffff
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = WIS MASK for Single event or multiple events
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
    if (misc_icli_wis_event_force_conf(session_id, v_port_type_list, v_0_0xffffffff, has_enable, has_disable) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }

CODE_END

CMD_END

!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug wis force-conf interface <port_type_list> [ { set <0-3> <0-3> <0-3> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: wis
! 3: force-conf
! 4: interface
! 5: <port_type_list>
! 6: set
! 7: <0-3>
! 8: <0-3>
! 9: <0-3>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_set
CMD_VAR = v_0_to_3
CMD_VAR = v_0_to_3_1
CMD_VAR = v_0_to_3_2

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = to set forced alarm injection
HELP = 0 bit - Force AIS-L configuration :: 1 bit -  Force RDI-L configuration
HELP = 0 bit - Force transmission of AIS-L in the K2 byte :: 1 bit - Force transmission of RDI-L in the K2 byte
HELP = 0 bit - Force UNEQ-P configuration :: 1 bit - Force RDI-P configuration

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (misc_icli_wis_force_conf(session_id, v_port_type_list, has_set, v_0_to_3, v_0_to_3_1, v_0_to_3_2) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy macsec-sd6g-csr <port_type_list> { read | write } { target <uint16> address <0-0xffffffff> } [ value <0-0xffffffff> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR = plist

! 1: debug
! 2: phy
! 3: macsec-sd6g-csr
! 4: <port_type_list>
! 5: read
! 6: write
! 7: target
! 8: <uint16>
! 9: address
! 10: <0-0xffffffff>
! 11: value
! 12: <0-0xffffffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_read
CMD_VAR =
CMD_VAR =
CMD_VAR = v_target
CMD_VAR =
CMD_VAR = v_addr
CMD_VAR = has_value
CMD_VAR = v_value

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Read from the given register
HELP = Write to the given register
HELP = CSR target block id
HELP = block value
HELP = CSR register offset
HELP = offset value
HELP = value
HELP = value to be written

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = read : Option
BYWORD = write : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = value : Option
BYWORD =

CODE_BEGIN
    if(has_read) {
        ICLI_PRINTF("Read ");
    } else {
        ICLI_PRINTF("Write ");
    }

    ICLI_PRINTF("0x%02x ",v_target);
    ICLI_PRINTF("0x%08x ",v_addr);
    if (has_value) {
        ICLI_PRINTF("0x%08x ",v_value);
    }

    ICLI_PRINTF("\n");
    if(!misc_icli_debug_macsec_sd6g_csr_read_write(session_id, v_port_type_list,v_target,v_addr,v_value,has_read)) {
        return ICLI_RC_ERROR;
    }
CODE_END
CMD_END

!==============================================================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g kr-conf [ cm1 <-31-31> ] [ c0 <-31-31> ] [ cp1 <-31-31> ] [ ampl <300-1275> ] [ { ps25 | ps35 | ps55 | ps70 | ps120 } ] [ en-ob | dis-ob ] [ ser-inv | ser-no-inv ] [ host | line ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist

! 1: debug
! 2: phy-10g
! 3: kr-conf
! 4: cm1
! 5: <-31-31>
! 6: c0
! 7: <-31-31>
! 8: cp1
! 9: <-31-31>
! 10: ampl
! 11: <300-1275>
! 12: ps25
! 13: ps35
! 14: ps55
! 15: ps70
! 16: ps120
! 17: en-ob
! 18: dis-ob
! 19: ser-inv
! 20: ser-no-inv
! 21: host
! 22: line

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_cm1
CMD_VAR = cm_1
CMD_VAR = has_c0
CMD_VAR = c_0
CMD_VAR = has_cp1
CMD_VAR = c_1
CMD_VAR = has_ampl
CMD_VAR = amp_val
CMD_VAR = has_ps25
CMD_VAR = has_ps35
CMD_VAR = has_ps55
CMD_VAR = has_ps70
CMD_VAR = has_ps120
CMD_VAR = has_en_ob
CMD_VAR = has_dis_ob
CMD_VAR = has_ser_inv
CMD_VAR = has_ser_no_inv
CMD_VAR = has_host
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = Show or set the 10GBASE-KR parameters.
HELP = Show or set the 10GBASE-KR parameters.
HELP = Set the C-1 coefficient (ABS(cm1)+ABS(c0)+ABS(cp1)) < 31
HELP = C-1 coefficient value, range [-31..31]
HELP = Set the C0 coefficient (ABS(cm1)+ABS(c0)+ABS(cp1)) < 31
HELP = C0 coefficient value, range [-31..31]
HELP = Set the C+1 coefficient (ABS(cm1)+ABS(c0)+ABS(cp1)) < 31
HELP = C+1 coefficient value, range [-31..31]
HELP = Set the amplitude
HELP = Amplitude value in mV, range 300..1275
HELP = Set Slew rate ctrl of OB to 25ps
HELP = Set Slew rate ctrl of OB to 35ps
HELP = Set Slew rate ctrl of OB to 55ps
HELP = Set Slew rate ctrl of OB to 70ps
HELP = Set Slew rate ctrl of OB to 120ps
HELP = Enable output buffer and serializer
HELP = Disable output buffer and serializer
HELP = Invert input to serializer
HELP = Do not invert input to serializer
HELP = Configuration on host side (Not applicable for Venice family)
HELP = Configuration on line side (Not applicable for Venice family)

BYWORD =
BYWORD =
BYWORD =
BYWORD = cm1 : Option
BYWORD = <Cm1 : -31-31>
BYWORD = c0 : Option
BYWORD = <C0 : -31-31>
BYWORD = cp1 : Option
BYWORD = <C1 : -31-31>
BYWORD = ampl : Option
BYWORD = <AmpVal : 300-1275>
BYWORD = ps25 : Option
BYWORD = ps35 : Option
BYWORD = ps55 : Option
BYWORD = ps70 : Option
BYWORD = ps120 : Option
BYWORD = en-ob : Option
BYWORD = dis-ob : Option
BYWORD = ser-inv : Option
BYWORD = ser-no-inv : Option
BYWORD = host : Option
BYWORD = line : Option

CODE_BEGIN
    misc_icli_10g_kr_conf(session_id, has_cm1, cm_1, has_c0, c_0, has_cp1, c_1, has_ampl, amp_val,
                has_ps25, has_ps35, has_ps55, has_ps70, has_ps120, has_en_ob, has_dis_ob, has_ser_inv, has_ser_no_inv, plist,has_host);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g vscope interface <port_type_list> { { fast-scan | fast-scan-plus } { host | line } { enable error-threshold <3-1000> | disable } | xy-scan { host | line } { { enable x-start <0-127> y-start <0-63> x-count <0-127> y-count <0-63> x-incr <0-10> y-incr <0-10> ber <0-64> error-threshold <3-1000> } | disable } }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: vscope
! 4: interface
! 5: <port_type_list>
! 6: fast-scan
! 7: fast-scan-plus
! 8: host
! 9: line
! 10: enable
! 11: error-threshold
! 12: <3-1000>
! 13: disable
! 14: xy-scan
! 15: host
! 16: line
! 17: enable
! 18: x-start
! 19: <0-127>
! 20: y-start
! 21: <0-63>
! 22: x-count
! 23: <0-127>
! 24: y-count
! 25: <0-63>
! 26: x-incr
! 27: <0-10>
! 28: y-incr
! 29: <0-10>
! 30: ber
! 31: <0-64>
! 32:error-threshold
! 33:<3-1000>
! 34: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_fast_scan
CMD_VAR = has_fast_scan_plus
CMD_VAR = has_host
CMD_VAR = has_line
CMD_VAR = has_enable
CMD_VAR =
CMD_VAR = v_3_to_1000
CMD_VAR = has_disable
CMD_VAR = has_xy_scan
CMD_VAR = has_host_1
CMD_VAR = has_line_1
CMD_VAR = has_enable_1
CMD_VAR =
CMD_VAR = v_0_to_127
CMD_VAR =
CMD_VAR = v_0_to_63
CMD_VAR =
CMD_VAR = v_0_to_127_1
CMD_VAR =
CMD_VAR = v_0_to_63_1
CMD_VAR =
CMD_VAR = v_0_to_10
CMD_VAR =
CMD_VAR = v_0_to_10_1
CMD_VAR =
CMD_VAR = v_0_to_64
CMD_VAR =
CMD_VAR = v_3_to_1000_1
CMD_VAR = has_disable_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = fast-scan : Option
BYWORD = fast-scan-plus : Option
BYWORD = host : Option
BYWORD = line : Option
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = xy-scan : Option
BYWORD = host : Option
BYWORD = line : Option
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = disable : Option

CODE_BEGIN
if(!vtss_phy_10g_vscope_scan_icli(session_id, v_port_type_list, has_fast_scan, has_fast_scan_plus, has_host, has_line,v_3_to_1000, has_enable, has_disable, has_xy_scan , has_host_1, has_line_1, has_enable_1, v_0_to_127, v_0_to_63, v_0_to_127_1, v_0_to_63_1, v_0_to_10, v_0_to_10_1, v_0_to_64, v_3_to_1000_1, has_disable_1)){
	return (ICLI_RC_ERROR);
 }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g prbs-generator interface <port_type_list>  {{serdes prbsn<0-5> des-interface-width<0-5> [input-invert]} | pcs }  { line | host } [ enable | disable ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: prbs-generator
! 4: interface
! 5: <port_type_list>
! 6: serdes
! 7: prbsn
! 8: <0-5>
! 9: des-interface-width
! 10: <0-5>
! 11: input-invert
! 12: pcs
! 13: line
! 14: host
! 15: enable
! 16: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_serdes
CMD_VAR =
CMD_VAR = v_0_to_5
CMD_VAR =
CMD_VAR = v_0_to_5_1
CMD_VAR = has_input_invert
CMD_VAR = has_pcs
CMD_VAR = has_line
CMD_VAR = has_host
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = select the prbs to be implemented
HELP = 0:prbs7, 1:prbs15, 2:prbs23, 3:prbs11, 4:prbs31(default), 5:prbs9
HELP = DES interface width
HELP = 0:8,1:10,2:16,3:20,4:32,5:40 (default)
HELP = Enables PRBS checker input inversion
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = serdes : option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = input-invert : Option
BYWORD = pcs : option
BYWORD = line : Option
BYWORD = host : Option
BYWORD = enable : Option
BYWORD = disable : Option

VARIABLE_BEGIN
vtss_phy_10g_prbs_type_t type;
vtss_phy_10g_direction_t direction;
vtss_phy_10g_prbs_generator_conf_t conf;
mesa_bool_t set = TRUE;
VARIABLE_END

CODE_BEGIN
memset(&conf,0,sizeof(conf));
if (has_serdes) {
    type = VTSS_PHY_10G_PRBS_TYPE_SERDES;
    conf.prbsn_sel = v_0_to_5;
    conf.prbsn_tx_iw = v_0_to_5_1;
    if(has_input_invert){
        conf.prbsn_tx_io = TRUE;
    } else {
        conf.prbsn_tx_io = FALSE;
    }
    if(has_enable) {
        conf.enable = TRUE;
    } else if(has_disable){
        conf.enable = FALSE;
    } else {
        set = FALSE;
    }
} else if(has_pcs) {
    type = VTSS_PHY_10G_PRBS_TYPE_PCS;
    if(has_enable) {
        conf.prbs_gen_pcs = TRUE;
    } else if(has_disable) {
        conf.prbs_gen_pcs = FALSE;
    } else {
        set = FALSE;
    }
} else {
    type = VTSS_PHY_10G_PRBS_TYPE_CNT;
}

if(has_line) {
    direction = VTSS_PHY_10G_DIRECTION_LINE;
}
else if(has_host) {
    direction = VTSS_PHY_10G_DIRECTION_HOST;
}
else {
    direction = VTSS_PHY_10G_DIRECTION_CNT;
}

if(!misc_phy_10g_prbs_generator_conf(session_id, v_port_type_list, set, type, direction, &conf)) {
	return(ICLI_RC_ERROR);
}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g prbs-monitor interface <port_type_list> {serdes {prbsn<0-5> max-bist-frames <0-0xffff> error-states <0-3> des-interface-width <0-5> [ input-invert ] no-of-errors <0-7> bist-mode <0-3>} | pcs} { line | host } [ enable | disable ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR = plist

! 1: debug
! 2: phy-10g
! 3: prbs-monitor
! 4: interface
! 5: <port_type_list>
! 6: serdes
! 7: prbsn
! 8: <0-5>
! 9: max-bist-frames
! 10: <0-0xffff>
! 11: error-states
! 12: <0-3>
! 13: des-interface-width
! 14: <0-5>
! 15: input-invert
! 16: no-of-errors
! 17: <0-7>
! 18: bist-mode
! 19: <0-3>
! 20: enable
! 21: disable
! 22: pcs
! 23: line
! 24: host
! 25: enable
! 26: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_serdes
CMD_VAR =
CMD_VAR = v_0_to_5
CMD_VAR =
CMD_VAR = v_0_to_0xffff
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_0_to_5_1
CMD_VAR = has_input_invert
CMD_VAR =
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = v_0_to_3_1
CMD_VAR = has_pcs
CMD_VAR = has_line
CMD_VAR = has_host
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = select the prbs to be implemented
HELP = 0:prbs7, 1:prbs15, 2:prbs23, 3:prbs11, 4:prbs31(default), 5:prbs9
HELP = threshold to iterate counter for max_bist_frames
HELP =
HELP = States in which error counting is enabled
HELP = 3:all but IDLE; 2:check 1:stable+check,0:wait_stable+stable+check
HELP = DES interface width
HELP = 0:8,1:10,2:16,3:20,4:32,5:40 (default)
HELP = Enables PRBS checker input inversion
HELP = Number of consecutive errors/non-errors before transitioning to respective state.
HELP = value = num-40-bits-words + 1
HELP = BIST Mode
HELP = 0: off, 1:BIST, 2:BER, 3:CONT(infinite mode)
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = serdes : option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = input-invert : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = pcs : option
BYWORD = line : Option
BYWORD = host : Option
BYWORD = enable : Option
BYWORD = disable : Option

VARIABLE_BEGIN
vtss_phy_10g_prbs_type_t type;
vtss_phy_10g_direction_t direction;
vtss_phy_10g_prbs_monitor_conf_t conf;
mesa_bool_t set = TRUE;
VARIABLE_END

CODE_BEGIN
memset(&conf,0,sizeof(conf));
if (has_serdes) {
    type = VTSS_PHY_10G_PRBS_TYPE_SERDES;
    conf.prbsn_sel = v_0_to_5;
    conf.max_bist_frames = v_0_to_0xffff;
    conf.des_interface_width = v_0_to_5_1;
    conf.no_of_errors = v_0_to_7;
    conf.bist_mode = v_0_to_3_1;
    if(has_input_invert){
        conf.prbs_check_input_invert = TRUE;
    } else {
        conf.prbs_check_input_invert = FALSE;
    }
    if(has_enable) {
        conf.enable = TRUE;
    } else if(has_disable){
        conf.enable = FALSE;
    } else {
        set = FALSE;
    }
} else if(has_pcs) {
    type = VTSS_PHY_10G_PRBS_TYPE_PCS;
    if(has_enable) {
        conf.prbs_mon_pcs = TRUE;
    } else if(has_disable) {
        conf.prbs_mon_pcs = FALSE;
    } else {
        set = FALSE;
    }
} else {
    type = VTSS_PHY_10G_PRBS_TYPE_CNT;
}

if(has_line) {
    direction = VTSS_PHY_10G_DIRECTION_LINE;
}
else if(has_host) {
    direction = VTSS_PHY_10G_DIRECTION_HOST;
}
else {
    direction = VTSS_PHY_10G_DIRECTION_CNT;
}

if(!misc_phy_10g_prbs_monitor_conf(session_id, v_port_type_list, set, type, direction, &conf)) {
    return(ICLI_RC_ERROR);
}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g prbs-monitor-status interface <port_type_list> {serdes | pcs} [reset] { line | host }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   = sadfkjsdf asdkfjsdf sdfkjsdf
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: prbs-monitor-status
! 4: interface
! 5: <port_type_list>
! 6: serdes
! 7: pcs
! 8: reset
! 9: line
! 10: host

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_serdes
CMD_VAR = has_pcs
CMD_VAR = has_reset
CMD_VAR = has_line
CMD_VAR = has_host

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = serdes : option
BYWORD = pcs : option
BYWORD = reset : option
BYWORD = line : Option
BYWORD = host : Option

VARIABLE_BEGIN
vtss_phy_10g_prbs_type_t type;
vtss_phy_10g_direction_t direction;
mesa_bool_t reset = FALSE;
VARIABLE_END

CODE_BEGIN
if (has_serdes) {
	type = VTSS_PHY_10G_PRBS_TYPE_SERDES;
} else if(has_pcs) {
	type = VTSS_PHY_10G_PRBS_TYPE_PCS;
} else {
	type = VTSS_PHY_10G_PRBS_TYPE_CNT;
}

if(has_reset){
    reset = TRUE;
}
if(has_line) {
    direction = VTSS_PHY_10G_DIRECTION_LINE;
}
else if(has_host) {
    direction = VTSS_PHY_10G_DIRECTION_HOST;
}
else {
    direction = VTSS_PHY_10G_DIRECTION_CNT;
}

if(!misc_phy_10g_monitor_status(session_id, v_port_type_list, type, direction, reset)){
	return(ICLI_RC_ERROR);
}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g prbs-counters interface <port_type_list> { host | line }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   = sadfkjsdf asdkfjsdf sdfkjsdf
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: prbs-counters
! 4: interface
! 5: <port_type_list>
! 6: host
! 7: line

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR = has_line

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = host : Option
BYWORD = line : Option

CODE_BEGIN
if(!vtss_phy_10g_prbs_counters(session_id, v_port_type_list, has_line)){
return(ICLI_RC_ERROR);
}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g prbs-mon interface <port_type_list> { line | host } prbsn <0-5> max-bist-frames <0-0xffff> error-states <0-3> des-interface-width <0-5> [ input-invert ] no-of-errors <0-7> bist-mode <0-3> { enable | disable }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: prbs-mon
! 4: interface
! 5: <port_type_list>
! 6: line
! 7: host
! 8: prbsn
! 9: <0-5>
! 10: max-bist-frames
! 11: <0-0xffff>
! 12: error-states
! 13: <0-3>
! 14: des-interface-width
! 15: <0-5>
! 16: input-invert
! 17: no-of-errors
! 18: <0-7>
! 19: bist-mode
! 20: <0-3>
! 21: enable
! 22: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_line
CMD_VAR = has_host
CMD_VAR =
CMD_VAR = v_0_to_5
CMD_VAR =
CMD_VAR = v_0_to_0xffff
CMD_VAR =
CMD_VAR = v_0_to_3
CMD_VAR =
CMD_VAR = v_0_to_5_1
CMD_VAR = has_input_invert
CMD_VAR =
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = v_0_to_3_1
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = configure the prbs reciever
HELP =
HELP =
HELP = prbs on the line side
HELP = prbs on the host side
HELP = select the prbs to be implemented
HELP = 0:prbs7, 1:prbs15, 2:prbs23, 3:prbs11, 4:prbs31(default), 5:prbs9
HELP = threshold to iterate counter for max_bist_frames
HELP =
HELP = States in which error counting is enabled
HELP = 3:all but IDLE; 2:check 1:stable+check,0:wait_stable+stable+check
HELP = DES interface width
HELP = 0:8,1:10,2:16,3:20,4:32,5:40 (default)
HELP = Enables PRBS checker input inversion
HELP = Number of consecutive errors/non-errors before transitioning to respective state.
HELP = value = num-40-bits-words + 1
HELP = BIST Mode
HELP = 0: off, 1:BIST, 2:BER, 3:CONT(infinite mode)
HELP = enable the monitor
HELP = disable the monitor

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = line : Option
BYWORD = host : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = input-invert : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
if(!vtss_phy_10g_prbs_monitor( session_id, v_port_type_list, has_line, has_host, v_0_to_5, v_0_to_0xffff, v_0_to_3, v_0_to_5_1, has_input_invert,
            v_0_to_7, v_0_to_3_1, has_enable, has_disable)) {
    return(ICLI_RC_ERROR);
}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g prbs-gen interface <port_type_list> { line | host } prbsn <0-5> { enable | disable }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: prbs-gen
! 4: interface
! 5: <port_type_list>
! 6: line
! 7: host
! 8: prbsn
! 9: <0-5>
! 10: enable
! 11: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_line
CMD_VAR = has_host
CMD_VAR =
CMD_VAR = v_0_to_5
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = prbs generator configuration
HELP =
HELP =
HELP = prbs on the line side
HELP = prbs on the host side
HELP = select the prbs to be implemented
HELP = 0:prbs7, 1:prbs15, 2:prbs23, 3:prbs11, 4:prbs31(default), 5:prbs9
HELP = enable the prbs generator
HELP = disable the prbs generator

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = line : Option
BYWORD = host : Option
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
if(!vtss_phy_10g_prbs_generator(session_id, v_port_type_list, has_line, has_host, v_0_to_5, has_enable, has_disable))
    return(ICLI_RC_ERROR);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g pkt-mon interface <port_type_list> { enable [ { update | reset <0-6> } ] | disable } [ timestamp ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: pkt-mon
! 4: interface
! 5: <port_type_list>
! 6: enable
! 7: update
! 8: reset
! 9: <0-6>
! 10: disable
! 11: timestamp

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_enable
CMD_VAR = has_update
CMD_VAR = has_reset
CMD_VAR = v_0_to_6
CMD_VAR = has_disable
CMD_VAR = has_timestamp

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = update counters
HELP = reset counters
HELP = packet monitor reset conf\n\t\
       0 - All counters\n\t\
       1 - good crc counter\n\t\
       2 - bad crc counter\n\t\
       3 - fragment counter\n\t\
       4 - local fault counter\n\t\
       5 - Reset Ber counter\n\t\
       6 - None
HELP = disable packet monitor
HELP = PTP timestamp values.

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = update : Option
BYWORD = reset : Option
BYWORD =
BYWORD = disable : Option
BYWORD = timestamp : Option

CODE_BEGIN
    if (!misc_icli_10g_phy_pkt_monitor_conf(session_id, v_port_type_list, has_enable, has_update, has_reset, (vtss_phy_10g_pkt_mon_rst_t) v_0_to_6, has_disable,has_timestamp)) {
        return(ICLI_RC_ERROR);
    }
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g pkt-gen interface <port_type_list> { enable { ingress | egress } { { frames { ptp { <uint8> <uint8> <uint8> } | stand } <0-0xffff> <0-0xff> <0-0xffffffff> src-mac <mac_addr> dest-mac <mac_addr> | idle } } | disable }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: pkt-gen
! 4: interface
! 5: <port_type_list>
! 6: enable
! 7: ingress
! 8: egress
! 9: frames
! 10: ptp
! 11: <uint8>
! 12: <uint8>
! 13: <uint8>
! 14: stand
! 15: <0-0xffff>
! 16: <0-0xff>
! 17: <0-0xffffffff>
! 18: src-mac
! 19: <mac_addr>
! 20: dest-mac
! 21: <mac_addr>
! 22: idle
! 23: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_enable
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_frames
CMD_VAR = has_ptp
CMD_VAR = v_uint8
CMD_VAR = v_uint8_1
CMD_VAR = v_uint8_2
CMD_VAR = has_stand
CMD_VAR = v_0_0xffff
CMD_VAR = v_0_0xff
CMD_VAR = v_0_0xffffffff
CMD_VAR =
CMD_VAR = v_mac_addr
CMD_VAR =
CMD_VAR = v_mac_addr_1
CMD_VAR = has_idle
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = generate frames
HELP = ptp frames
HELP = ptp time stamp seconds
HELP = ptp time stamp nanoseconds
HELP = srate
HELP = standard frames
HELP = ether type
HELP = packet length
HELP = inter packet gap
HELP =
HELP = source MAC
HELP =
HELP = destination MAC
HELP = generate idles
HELP = disable packet generator

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = frames : Option
BYWORD = ptp : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = stand : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = idle : Option
BYWORD = disable : Option

CODE_BEGIN
    if (!misc_icli_10g_phy_pkt_generator(session_id, v_port_type_list, has_enable, has_ingress, has_egress, has_frames,has_ptp, v_uint8, v_uint8_1, v_uint8_2, has_stand, v_0_0xffff, v_0_0xff,   v_0_0xffffffff, v_mac_addr,v_mac_addr_1, has_idle, has_disable)){
                return(ICLI_RC_ERROR);
    }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g loopback [ { a | b | c | d | e | f | g | h | j | k | h2 | h3 | h4 | h5 | h6 | l0 | l1 | l2 | l3 | l2c } { enable | disable } ]

DOC_CMD_DESC    = Show or set 10g phy loopback mode
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g loopback  a enable

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: loopback
! 4: a
! 5: b
! 6: c
! 7: d
! 8: e
! 9: f
! 10: g
! 11: h
! 12: j
! 13: k
! 14: h2
! 15: h3
! 16: h4
! 17: h5
! 18: h6
! 19: l0
! 20: l1
! 21: l2
! 22: l3
! 23: l2c
! 24: enable
! 25: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_a
CMD_VAR = has_b
CMD_VAR = has_c
CMD_VAR = has_d
CMD_VAR = has_e
CMD_VAR = has_f
CMD_VAR = has_g
CMD_VAR = has_h
CMD_VAR = has_j
CMD_VAR = has_k
CMD_VAR = has_h2
CMD_VAR = has_h3
CMD_VAR = has_h4
CMD_VAR = has_h5
CMD_VAR = has_h6
CMD_VAR = has_l0
CMD_VAR = has_l1
CMD_VAR = has_l2
CMD_VAR = has_l3
CMD_VAR = has_l2c
CMD_VAR = has_enable
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set 10g phy loopback mode
HELP = a: XFI  -> XS  -> XFI - deep
HELP = b: XAUI -> XS -> XAUI - shallow
HELP = c: XAUI -> XS -> XAUI - deep
HELP = d: XFI  -> XS  -> XFI - shallow
HELP = e: XAUI -> PCS FIFO -> XAUI
HELP = f: XFI  -> PCS -> XFI (Venice equivalent: L2)
HELP = g: XAUI -> PCS -> XAUI (Venice equivalent: H3)
HELP = h: XFI  -> WIS -> XFI
HELP = j: XAUI -> PMA -> XAUI (Venice equivalent: H4)
HELP = k: XFI  -> PMA -> XFI
HELP = Venice Host Loopback 2, 40-bit XAUI-PHY interface Mirror XAUI data
HELP = Venice Host Loopback 3, 64-bit PCS after the gearbox FF00 repeating IEEE PCS system loopback
HELP = Venice Host Loopback 4, 64-bit WIS FF00 repeating IEEE WIS system loopback
HELP = Venice Host Loopback 5, 1-bit SFP+ after SerDes Mirror XAUI data IEEE PMA system loopback
HELP = Venice Host Loopback 6, 32-bit XAUI-PHY interface Mirror XAUI data
HELP = Venice Line Loopback 0, 4-bit XAUI before SerDes Mirror SFP+ data
HELP = Venice Line Loopback 1, 4-bit XAUI after SerDes Mirror SFP+ data IEEE PHY-XS network loopback
HELP = Venice Line Loopback 2, 64-bit XGMII after FIFO Mirror SFP+ data
HELP = Venice Line Loopback 3, 64-bit PMA interface Mirror SFP+ data
HELP = Malibu Line Loopback l2c, 64-bit XGMII interface Mirror SFP+ data
HELP = Enable loopback
HELP = Disable loopback

BYWORD =
BYWORD =
BYWORD =
BYWORD = a : Option
BYWORD = b : Option
BYWORD = c : Option
BYWORD = d : Option
BYWORD = e : Option
BYWORD = f : Option
BYWORD = g : Option
BYWORD = h : Option
BYWORD = j : Option
BYWORD = k : Option
BYWORD = h2 : Option
BYWORD = h3 : Option
BYWORD = h4 : Option
BYWORD = h5 : Option
BYWORD = h6 : Option
BYWORD = l0 : Option
BYWORD = l1 : Option
BYWORD = l2 : Option
BYWORD = l3 : Option
BYWORD = l2c : Option
BYWORD = enable : Option
BYWORD = disable : Option

CODE_BEGIN
    misc_icli_10g_phy_loopback(session_id, has_a, has_b, has_c, has_d, has_e, has_f, has_g, has_h,
                has_j, has_k, has_h2, has_h3, has_h4, has_h5, has_h6, has_l0, has_l1, has_l2, has_l3, has_l2c,
                has_enable, has_disable, plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g serdes-status [ interface <port_type_list> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: serdes-status
! 4: interface
! 5: <port_type_list>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = port_list

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD = interface : Option
BYWORD = <PortList : port_type_list>

VARIABLE_BEGIN
vtss_phy_10g_serdes_status_t serdes;
VARIABLE_END

CODE_BEGIN
misc_icli_10g_phy_serdes_status(session_id, &serdes, port_list);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g apc [ interface <port_type_list> ] [ host | line ] [ auto | manual | freeze | reset | restart | undo-freeze | undo-reset ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: apc
! 4: interface
! 5: <port_type_list>
! 6: host
! 7: line
! 8: auto
! 9: manual
! 10: freeze
! 11: reset
! 12: restart
! 13: undo-freeze
! 14: undo-reset

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = port_list
CMD_VAR = has_host
CMD_VAR =
CMD_VAR = has_auto
CMD_VAR = has_manual
CMD_VAR = has_freeze
CMD_VAR = has_reset
CMD_VAR = has_restart
CMD_VAR = has_undo_freeze
CMD_VAR = has_undo_reset

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = HOST configuration
HELP = LINE configuration
HELP = ALL IB parameters are under APC regulation
HELP = ALL IB parameters are controlled manually
HELP = Freezes all IB parameters , APC is neither in AUTO nor MANUAL mode
HELP = Resets APC (FSMs) but not Configuration registers
HELP = Restarts whole APC i.e. APC is initialized and calibration is done again
HELP = Release freeze
HELP = Release reset

BYWORD =
BYWORD =
BYWORD =
BYWORD = interface : Option
BYWORD = <PortList : port_type_list>
BYWORD = host : Option
BYWORD = line : Option
BYWORD = auto : Option
BYWORD = manual : Option
BYWORD = freeze : Option
BYWORD = reset : Option
BYWORD = restart : Option
BYWORD = undo-freeze : Option
BYWORD = undo-reset : Option

VARIABLE_BEGIN
vtss_phy_10g_apc_conf_t apc_conf;
BOOL is_set = TRUE;
VARIABLE_END

CODE_BEGIN
 if (has_auto) {
     apc_conf.op_mode = VTSS_IB_APC_AUTO;
 } else if (has_manual) {
     apc_conf.op_mode = VTSS_IB_APC_MANUAL;
 } else if (has_freeze) {
     apc_conf.op_mode = VTSS_IB_APC_FREEZE;
     apc_conf.op_mode_flag = TRUE;
 } else if (has_reset) {
     apc_conf.op_mode = VTSS_IB_APC_RESET;
     apc_conf.op_mode_flag = TRUE;
 } else if (has_restart) {
     apc_conf.op_mode = VTSS_IB_APC_RESTART;
 } else if (has_undo_freeze) {
     apc_conf.op_mode = VTSS_IB_APC_FREEZE;
     apc_conf.op_mode_flag = FALSE;
 } else if (has_undo_reset) {
     apc_conf.op_mode = VTSS_IB_APC_RESET;
     apc_conf.op_mode_flag = FALSE;
 } else {
     is_set = FALSE;
 }
 misc_icli_10g_phy_apc_conf(session_id, &apc_conf, port_list, is_set,has_host);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g ib [ interface <port_type_list> ] [ host | line ] [ auto [ offs [ <0-255> <0-255> ] | freeze ] [ gain [ <0-1023> <0-1023> ] | freeze ] [ gainadj [ <0-127> <0-127> ] | freeze ] [ l [ <0-255> <0-255> ] | freeze ] [ c [ <0-255> <0-255> ] | freeze ] [ agc [ <0-255> <0-255> ] | freeze ] [ dfe1 [ <0-255> <0-255> ] | freeze ] [ dfe2 [ <0-255> <0-255> ] | freeze ] [ dfe3 [ <0-255> <0-255> ] | freeze ] [ dfe4 [ <0-255> <0-255> ] | freeze ] ] [ manual [ offs <0-1023> ] [ gain <0-1023> ] [ gainadj <0-127> ] [ l <0-1023> ] [ c <0-1023> ] [ agc <0-1023> ] [ dfe1 <0-1023> ] [ dfe2 <0-1023> ] [ dfe3 <0-1023> ] [ dfe4 <0-1023> ] ] [ prbs <0-6> [ invert ] ] [ apc-bit-mask <0-0xfff> ] [ freeze-bit-mask <0-0xfff> ] [ ld <0-63> ]
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: ib
! 4: interface
! 5: <port_type_list>
! 6: host
! 7: line
! 8: auto
! 9: offs
! 10: <0-255>
! 11: <0-255>
! 12: freeze
! 13: gain
! 14: <0-1023>
! 15: <0-1023>
! 16: freeze
! 17: gainadj
! 18: <0-127>
! 19: <0-127>
! 20: freeze
! 21: l
! 22: <0-255>
! 23: <0-255>
! 24: freeze
! 25: c
! 26: <0-255>
! 27: <0-255>
! 28: freeze
! 29: agc
! 30: <0-255>
! 31: <0-255>
! 32: freeze
! 33: dfe1
! 34: <0-255>
! 35: <0-255>
! 36: freeze
! 37: dfe2
! 38: <0-255>
! 39: <0-255>
! 40: freeze
! 41: dfe3
! 42: <0-255>
! 43: <0-255>
! 44: freeze
! 45: dfe4
! 46: <0-255>
! 47: <0-255>
! 48: freeze
! 49: manual
! 50: offs
! 51: <0-1023>
! 52: gain
! 53: <0-1023>
! 54: gainadj
! 55: <0-127>
! 56: l
! 57: <0-1023>
! 58: c
! 59: <0-1023>
! 60: agc
! 61: <0-1023>
! 62: dfe1
! 63: <0-1023>
! 64: dfe2
! 65: <0-1023>
! 66: dfe3
! 67: <0-1023>
! 68: dfe4
! 69: <0-1023>
! 70: prbs
! 71: <0-6>
! 72: invert
! 73: apc-bit-mask
! 74: <0-0xfff>
! 75: freeze-bit-mask
! 76: <0-0xfff>
! 77: ld
! 78: <0-63>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = port_list
CMD_VAR = has_host
CMD_VAR =
CMD_VAR = has_auto
CMD_VAR = has_offs
CMD_VAR = offs_min
CMD_VAR = offs_max
CMD_VAR = has_freeze
CMD_VAR = has_gain
CMD_VAR = gain_min
CMD_VAR = gain_max
CMD_VAR = has_freeze_1
CMD_VAR = has_gainadj
CMD_VAR = gainadj_min
CMD_VAR = gainadj_max
CMD_VAR = has_freeze_2
CMD_VAR = has_l
CMD_VAR = l_min
CMD_VAR = l_max
CMD_VAR = has_freeze_3
CMD_VAR = has_c
CMD_VAR = c_min
CMD_VAR = c_max
CMD_VAR = has_freeze_4
CMD_VAR = has_agc
CMD_VAR = agc_min
CMD_VAR = agc_max
CMD_VAR = has_freeze_5
CMD_VAR = has_dfe1
CMD_VAR = dfe1_min
CMD_VAR = dfe1_max
CMD_VAR = has_freeze_6
CMD_VAR = has_dfe2
CMD_VAR = dfe2_min
CMD_VAR = dfe2_max
CMD_VAR = has_freeze_7
CMD_VAR = has_dfe3
CMD_VAR = dfe3_min
CMD_VAR = dfe3_max
CMD_VAR = has_freeze_8
CMD_VAR = has_dfe4
CMD_VAR = dfe4_min
CMD_VAR = dfe4_max
CMD_VAR = has_freeze_9
CMD_VAR = has_manual
CMD_VAR = has_offs_1
CMD_VAR = offs_value
CMD_VAR = has_gain_1
CMD_VAR = gain_value
CMD_VAR = has_gainadj_1
CMD_VAR = gainadj_value
CMD_VAR = has_l_1
CMD_VAR = l_value
CMD_VAR = has_c_1
CMD_VAR = c_value
CMD_VAR = has_agc_1
CMD_VAR = agc_value
CMD_VAR = has_dfe1_1
CMD_VAR = dfe1_value
CMD_VAR = has_dfe2_1
CMD_VAR = dfe2_value
CMD_VAR = has_dfe3_1
CMD_VAR = dfe3_value
CMD_VAR = has_dfe4_1
CMD_VAR = dfe4_value
CMD_VAR = has_prbs
CMD_VAR = pattern
CMD_VAR = has_invert
CMD_VAR = has_apc_bit_mask
CMD_VAR = apc_bit_mask
CMD_VAR = has_freeze_bit_mask
CMD_VAR = freeze_bit_mask
CMD_VAR =
CMD_VAR =

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP = Configuration is on Host side
HELP = Configuration is on Line side
HELP = Configures in APC mode
HELP = Configures OFFS parameter
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures GAIN parameter
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures GAIN Adjustment
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures L value
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures C value
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures AGC value
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures DFE1
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures DFE2
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures DFE3
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures DFE4
HELP = Minimum of the range
HELP = Maximum of the range
HELP = To Freeze current value
HELP = Configures IB in manual mode
HELP =
HELP = Configures OFFS parameter
HELP =
HELP = Configures GAIN parameter
HELP =
HELP = Configures GAIN Adjustment
HELP =
HELP = Configures L value
HELP =
HELP = Configures C value
HELP =
HELP = Configures AGC value
HELP =
HELP = Configures DFE1
HELP =
HELP = Configures DFE2
HELP =
HELP = Configures DFE3
HELP =
HELP = Configures DFE4
HELP =
HELP = PRBS Pattern selection 0->prbs7 1->prbs15 2->prbs23 3->prbs11 4->prbs31(default) 5->prbs9 6->Disables PRBS
HELP = Invert RX pattern
HELP =
HELP = Configures APC bitmask
HELP =
HELP = Configures Freeze bitmask
HELP =
HELP = Configures LD value

BYWORD =
BYWORD =
BYWORD =
BYWORD = interface : Option
BYWORD = <PortList : port_type_list>
BYWORD = host : Option
BYWORD = line : Option
BYWORD = auto : Option
BYWORD = offs : Option
BYWORD = <OffsMin : 0-255>
BYWORD = <OffsMax : 0-255>
BYWORD = freeze : Option
BYWORD = gain : Option
BYWORD = <GainMin : 0-1023>
BYWORD = <GainMax : 0-1023>
BYWORD = freeze : Option
BYWORD = gainadj : Option
BYWORD = <GainadjMin : 0-127>
BYWORD = <GainadjMax : 0-127>
BYWORD = freeze : Option
BYWORD = l : Option
BYWORD = <LMin : 0-255>
BYWORD = <LMax : 0-255>
BYWORD = freeze : Option
BYWORD = c : Option
BYWORD = <CMin : 0-255>
BYWORD = <CMax : 0-255>
BYWORD = freeze : Option
BYWORD = agc : Option
BYWORD = <AgcMin : 0-255>
BYWORD = <AgcMax : 0-255>
BYWORD = freeze : Option
BYWORD = dfe1 : Option
BYWORD = <Dfe1Min : 0-255>
BYWORD = <Dfe1Max : 0-255>
BYWORD = freeze : Option
BYWORD = dfe2 : Option
BYWORD = <Dfe2Min : 0-255>
BYWORD = <Dfe2Max : 0-255>
BYWORD = freeze : Option
BYWORD = dfe3 : Option
BYWORD = <Dfe3Min : 0-255>
BYWORD = <Dfe3Max : 0-255>
BYWORD = freeze : Option
BYWORD = dfe4 : Option
BYWORD = <Dfe4Min : 0-255>
BYWORD = <Dfe4Max : 0-255>
BYWORD = freeze : Option
BYWORD = manual : Option
BYWORD = offs : Option
BYWORD = <OffsValue : 0-1023>
BYWORD = gain : Option
BYWORD = <GainValue : 0-1023>
BYWORD = gainadj : Option
BYWORD = <GainadjValue : 0-127>
BYWORD = l : Option
BYWORD = <LValue : 0-1023>
BYWORD = c : Option
BYWORD = <CValue : 0-1023>
BYWORD = agc : Option
BYWORD = <AgcValue : 0-1023>
BYWORD = dfe1 : Option
BYWORD = <Dfe1Value : 0-1023>
BYWORD = dfe2 : Option
BYWORD = <Dfe2Value : 0-1023>
BYWORD = dfe3 : Option
BYWORD = <Dfe3Value : 0-1023>
BYWORD = dfe4 : Option
BYWORD = <Dfe4Value : 0-1023>
BYWORD = prbs : Option
BYWORD = <Pattern : 0-6>
BYWORD = invert : Option
BYWORD = apc-bit-mask : Option
BYWORD = <ApcBitMask : 0-0xfff>
BYWORD = freeze-bit-mask : Option
BYWORD = <FreezeBitMask : 0-0xfff>
BYWORD = ld : Option
BYWORD = <Ld : 0-63>

VARIABLE_BEGIN
    vtss_phy_10g_ib_conf_t ib_conf;
    BOOL is_set = TRUE;
    u8 bit_pos =0;
VARIABLE_END

CODE_BEGIN
memset(&ib_conf,0,sizeof(vtss_phy_10g_ib_conf_t));
if ( !has_auto && !has_manual && !has_prbs && !has_apc_bit_mask && !has_freeze_bit_mask) {
    is_set = FALSE;
}

if (has_auto) {
    /* Order of following comparisions is according to API */
    if (has_offs) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.offs.min = offs_min;
            ib_conf.offs.max = offs_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_gain) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_1) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.gain.min = gain_min;
            ib_conf.gain.max = gain_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_gainadj) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_2) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.gainadj.min = gainadj_min;
            ib_conf.gainadj.max = gainadj_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_l) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_3) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.l.min = l_min;
            ib_conf.l.max = l_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_c) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_4) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.c.min = c_min;
            ib_conf.c.max = c_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_agc) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_5) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.agc.min = agc_min;
            ib_conf.agc.max = agc_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_dfe1) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_6) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.dfe1.min = dfe1_min;
            ib_conf.dfe1.max = dfe1_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_dfe2) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_7) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.dfe2.min = dfe2_min;
            ib_conf.dfe2.max = dfe2_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_dfe3) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_8) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.dfe3.min = dfe3_min;
            ib_conf.dfe3.max = dfe3_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
    if (has_dfe4) {
        ib_conf.config_bit_mask |= 1<<(bit_pos++);
        if (has_freeze_9) {
            ib_conf.freeze_bit_mask |= 1<<(bit_pos++);
        } else {
            ib_conf.dfe4.min = dfe4_min;
            ib_conf.dfe4.max = dfe4_max;
            ib_conf.apc_bit_mask |= 1<<(bit_pos++);
        }
    }
}
if (has_manual) {
    bit_pos = 0;
    ib_conf.apc_bit_mask = 0xff;
    if (has_offs_1) {
        ib_conf.offs.value = offs_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_gain_1) {
        ib_conf.gain.value = gain_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_gainadj_1) {
        ib_conf.gainadj.value = gainadj_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_l_1) {
        ib_conf.l.value = l_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_c_1) {
        ib_conf.c.value = c_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_agc_1) {
        ib_conf.agc.value = agc_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_dfe1_1) {
        ib_conf.dfe1.value = dfe1_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_dfe2_1) {
        ib_conf.dfe2.value = dfe2_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_dfe3_1) {
        ib_conf.dfe3.value = dfe3_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
    bit_pos++;
    if (has_dfe4_1) {
        ib_conf.dfe4.value = dfe4_value;
        ib_conf.apc_bit_mask &= ~(1<<(bit_pos));
        ib_conf.config_bit_mask |= 1<<(bit_pos);
    }
}
if (has_prbs) {
    ib_conf.prbs = pattern;
    ib_conf.prbs_inv = has_invert;
}
if ((!has_apc_bit_mask || !has_freeze_bit_mask) && !has_manual) {
    ib_conf.apc_bit_mask = 0xff;
}else if (has_apc_bit_mask) {
    ib_conf.apc_bit_mask = apc_bit_mask;
}else if (has_freeze_bit_mask) {
    ib_conf.freeze_bit_mask = freeze_bit_mask;
}
misc_icli_10g_phy_ib_conf(session_id,&ib_conf,port_list,is_set,has_host, has_prbs);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g jitter-conf [ interface <port_type_list> ] [ direction [ host | line ] ] [ levn <0-255> ] [ incr-levn [ yes | no ] ] [ vtail <0-255> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: jitter-conf
! 4: interface
! 5: <port_type_list>
! 6: direction
! 7: host
! 8: line
! 9: levn
! 10: <0-255>
! 11: incr-levn
! 12: yes
! 13: no
! 14: vtail
! 15: <0-255>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = port_list
CMD_VAR =
CMD_VAR = has_host
CMD_VAR =
CMD_VAR = has_levn
CMD_VAR = levn_val
CMD_VAR = has_incr_levn
CMD_VAR = has_yes
CMD_VAR =
CMD_VAR = has_vtail
CMD_VAR = vtail_val

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD = interface : Option
BYWORD = <PortList : port_type_list>
BYWORD = direction : Option
BYWORD = host : Option
BYWORD = line : Option
BYWORD = levn : Option
BYWORD = <LevnVal : 0-255>
BYWORD = incr-levn : Option
BYWORD = yes : Option
BYWORD = no : Option
BYWORD = vtail : Option
BYWORD = <VtailVal : 0-255>

CODE_BEGIN
    if (has_levn || has_incr_levn || has_vtail) {
        misc_icli_phy_10g_jitter_conf(session_id, TRUE, has_host, levn_val, has_yes,vtail_val, port_list);
    } else {
        misc_icli_phy_10g_jitter_conf(session_id, FALSE, has_host, levn_val, has_yes,vtail_val, port_list);
    }
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g srefclk [enable] [freq { freq125 | freq15625 | freq15552 } ]

DOC_CMD_DESC    = Show or Enable locking line tx clock to srefclk input (Venice family only).
DOC_CMD_EXAMPLE = debug phy-10g srefclk enable

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: srefclk
! 4: enable
! 5: freq
! 6: freq125
! 7: freq15625
! 8: freq15552

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR = has_freq
CMD_VAR = freq125
CMD_VAR = freq15625
CMD_VAR = freq15552

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands.
HELP = Show or Enable locking line tx clock to srefclk input (Venice family only).
HELP = Enables srefclk. Use 'Debug no' form for disabling.
HELP = specify the frequency the Srefclk reciever is to be configured to.
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD = enable
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN

if (has_enable) {
    //Enable Srefclk
    if (!misc_icli_10g_phy_srefclk(session_id, has_enable, FALSE, FALSE, plist, has_freq, freq125, freq15625, freq15552)) {
        return(ICLI_RC_ERROR);
    }
} else {
   //Display Srefclk status
    if (!misc_icli_10g_phy_srefclk(session_id, FALSE, FALSE, TRUE, plist, has_freq, freq125, freq15625, freq15552)) {
        return(ICLI_RC_ERROR);
    }
}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug no phy-10g srefclk

DOC_CMD_DESC    = Disable locking line tx clock to srefclk input (Venice family only).
DOC_CMD_EXAMPLE = debug no phy-10g srefclk

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

HELP = ##ICLI_HELP_DEBUG
HELP = Negate a command or set its defaults
HELP = 10g Phy debug commands
HELP = Disable locking line tx clock to srefclk input (Venice family only).

CODE_BEGIN
    if (!misc_icli_10g_phy_srefclk(session_id, FALSE, TRUE, FALSE, plist, FALSE, FALSE, FALSE, FALSE)) {
        return(ICLI_RC_ERROR);
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g conf { [ mode { one-giga [ lane-0 | lane-3 ] | { repeater <0-8> } | lan | wan } ] [ host-intf { xaui | { rxaui [ ddr-a | ddr-k | ddr-m ] } } ] [ direction { host | line } ] [ clk-src { { lref | href } } ] [ media-type { sr | sr2 | zr | dac | kr | sr-sc | sr2-sc | zr-sc | zr2-sc | dac-sc | kr-sc } ] [ sgmii-pass-thru { enable | disable } ] [ amp-tol { high | low } ] [ link-6g-distance { short-range | long-range } ] [ apc-line-ld-ctrl { ld-lev-ini <0-0xff> } ] [ apc-offs-ctrl { apc-eqz-offs-par-cfg <0-0xffffffff> } ] }

DOC_CMD_DESC    = This command is used for debugging 10g phy mode
DOC_CMD_DEFAULT = Default mode is lan and default interface is XAUI
DOC_CMD_EXAMPLE = debug phy-10g mode lan

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: conf
! 4: mode
! 5: one-giga
! 6: lane-0
! 7: lane-3
! 8: repeater
! 9: <0-8>
! 10: lan
! 11: wan
! 12: host-intf
! 13: xaui
! 14: rxaui
! 15: ddr-a
! 16: ddr-k
! 17: ddr-m
! 18: direction
! 19: host
! 20: line
! 21: clk-src
! 22: lref
! 23: href
! 24: media-type
! 25: sr
! 26: sr2
! 27: zr
! 28: dac
! 29: kr
! 30: sr-sc
! 31: sr2-sc
! 32: zr-sc
! 33: zr2-sc
! 34: dac-sc
! 35: kr-sc
! 36: sgmii-pass-thru
! 37: enable
! 38: disable
! 39: amp-tol
! 40: high
! 41: low
! 42: link-6g-distance
! 43: short-range
! 44: long-range
! 45: apc-line-ld-ctrl
! 46: ld-lev-ini
! 47: <0-0xff>
! 48: apc-offs-ctrl
! 49: apc-eqz-offs-par-cfg
! 50: <0-0xffffffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_mode
CMD_VAR = has_one_giga
CMD_VAR = has_lane_0
CMD_VAR =
CMD_VAR = has_repeater
CMD_VAR = v_0_to_8
CMD_VAR = has_lan
CMD_VAR = has_wan
CMD_VAR = has_host_intf
CMD_VAR = has_xaui
CMD_VAR = has_rxaui
CMD_VAR = has_ddr_a
CMD_VAR = has_ddr_k
CMD_VAR = has_ddr_m
CMD_VAR =
CMD_VAR = has_host
CMD_VAR =
CMD_VAR = has_clk_src
CMD_VAR =
CMD_VAR = has_href
CMD_VAR = has_media_type
CMD_VAR = has_sr
CMD_VAR = has_sr2
CMD_VAR = has_zr
CMD_VAR = has_dac
CMD_VAR = has_kr
CMD_VAR = has_sr_sc
CMD_VAR = has_sr2_sc
CMD_VAR = has_zr_sc
CMD_VAR = has_zr2_sc
CMD_VAR = has_dac_sc
CMD_VAR = has_kr_sc
CMD_VAR = has_sgmii_pass_thru
CMD_VAR = has_enable
CMD_VAR =
CMD_VAR = has_amp_tol
CMD_VAR = has_high
CMD_VAR =
CMD_VAR = has_link_6g_distance
CMD_VAR =
CMD_VAR = has_long_range
CMD_VAR = has_apc_line_ld_ctrl
CMD_VAR = has_ld_lev_ini
CMD_VAR = v_0_0xff
CMD_VAR = has_apc_offs_ctrl
CMD_VAR = has_eqz_offs_par_cfg
CMD_VAR = v_0_0xffffffff

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set 10g phy mode and interface
HELP = mode i.e. data rate to be selected
HELP = 1G
HELP = SGMII lane 0
HELP = SGMII lane 3
HELP = Repeater mode
HELP = Data rate 0-None ,1-LAN rate ,2-WAN rate, 3-rate=11.3 Gbps clock 171Mhz,4-Fiber channel rate=10.51875 Gbps ,5- 1G rate, 6- 10.709 Gbps, 7- 11.095727 Gbps, 8- 11.05 Gbps
HELP = LAN mode
HELP = WAN mode
HELP = Host Interface selection
HELP = XAUI Interface
HELP = RXAUI Interface
HELP = ddr mode a
HELP = ddr mode k
HELP = ddr mode m
HELP = Direction to be configured
HELP = Host
HELP = Line
HELP = Clock source selection
HELP = uses Lref clock on the direction selected
HELP = uses Href clock on the direction selected
HELP = Media type selection
HELP = Initializes PHY with 10GBASE-SR SERDES settings
HELP = Initializes PHY with 10GBASE-SR2 SERDES settings
HELP = Initializes PHY with 10GBASE-ZR SERDES settings
HELP = Initializes PHY with SERDES settings that suits direct attach cable
HELP = Initializes PHY with 10GBASE-KR SERDES settings
HELP = Initializes PHY with soft control 10GBASE-SR SERDES settings
HELP = Initializes PHY with soft control 10GBASE-SR2 SERDES settings
HELP = Initializes PHY with soft control 10GBASE-ZR SERDES settings
HELP = Initializes PHY with soft control SERDES settings that suits direct attach cable
HELP = Initializes PHY with soft control 10GBASE-KR SERDES settings
HELP = cisco SGMII mode
HELP = enables CISCO SGMII
HELP = disables CISCO SGMII
HELP = Voltage amplitude tolerance
HELP = High
HELP = Low
HELP = distance of 6G serdes link partner
HELP = short range
HELP = long range
HELP =
HELP = Set APC LD Ctrl
HELP = Set ld_lev_ini
HELP = Set ld_lev_ini value
HELP = Set APC offs ctrl
HELP = Set APC_EQZ_PFFS_PAR_CFG
HELP = Set Value of eqz offs par cfg

BYWORD =
BYWORD =
BYWORD =
BYWORD = mode : Option
BYWORD = one-giga : Option
BYWORD = lane-0 : Option
BYWORD = lane-3 : Option
BYWORD = repeater : Option
BYWORD =
BYWORD = lan : Option
BYWORD = wan : Option
BYWORD = host-intf : Option
BYWORD = xaui : Option
BYWORD = rxaui : Option
BYWORD = ddr-a : Option
BYWORD = ddr-k : Option
BYWORD = ddr-m : Option
BYWORD = direction : Option
BYWORD = host : Option
BYWORD = line : Option
BYWORD = clk-src : Option
BYWORD = lref : Option
BYWORD = href : Option
BYWORD = media-type : Option
BYWORD = sr : Option
BYWORD = sr2 : Option
BYWORD = zr : Option
BYWORD = dac : Option
BYWORD = kr : Option
BYWORD = sr-sc : Option
BYWORD = sr2-sc : Option
BYWORD = zr-sc : Option
BYWORD = zr2-sc : Option
BYWORD = dac-sc : Option
BYWORD = kr-sc : Option
BYWORD = sgmii-pass-thru : Option
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = amp-tol : Option
BYWORD = high : Option
BYWORD = low : Option
BYWORD = link-6g-distance : Option
BYWORD = short-range : Option
BYWORD = long-range : Option
BYWORD = apc-line-ld-ctrl : Option
BYWORD = ld-lev-ini : Option
BYWORD =
BYWORD = apc-offs-ctrl : Option
BYWORD = apc-eqz-offs-par-cfg : Option
BYWORD =

CODE_BEGIN
u8 mode = 0;
u8 ddr_mode = 0;
u8 media_type = 0;
u8 host_if = 0;
BOOL lane = 3;

if (has_mode) {
    if ( has_lan )      { mode = 1; }else
    if ( has_wan )      { mode = 2; }else
    if ( has_one_giga ) { mode = 3; if( has_lane_0 ){ lane = 0; } }else
    if ( has_repeater ) { mode = 4; }
}

if (has_host_intf) {
   if (has_xaui) { host_if = 0; }
   if (has_rxaui) {
       host_if = 1;
       if (has_ddr_a) { ddr_mode = 0; } else
       if (has_ddr_k) { ddr_mode = 1; } else
       if (has_ddr_m) { ddr_mode = 2; }
   }
}

if (has_media_type) {
    if (has_sr) { media_type  = 0; }else
    if (has_sr2) { media_type  = 1; }else
    if (has_dac) { media_type = 2; }else
    if (has_zr) { media_type  = 3; }else
    if (has_kr) { media_type  = 4; }else
    if (has_sr_sc) { media_type  = 5; }else
    if (has_sr2_sc) { media_type  = 6; }else
    if (has_dac_sc) { media_type = 7; }else
    if (has_zr_sc) { media_type  = 8; }else
    if (has_zr2_sc) { media_type  = 9; }else
    if (has_kr_sc) { media_type  = 10; }else
    { media_type = 0; }
}
    misc_icli_10g_phy_mode(session_id, has_mode, mode, lane, v_0_to_8, has_host_intf, host_if, ddr_mode, has_host,has_clk_src,has_href,has_media_type,media_type,has_sgmii_pass_thru,has_enable,has_amp_tol,has_high,plist, has_link_6g_distance, has_long_range, has_apc_line_ld_ctrl, has_ld_lev_ini, v_0_0xff, has_apc_offs_ctrl, has_eqz_offs_par_cfg, v_0_0xffffffff);

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g reset

DOC_CMD_DESC    = This command is used for resetting 10g phy

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: reset

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Reset 10g phy

CODE_BEGIN
    if (!misc_icli_10g_phy_reset(session_id, plist)) {
        return(ICLI_RC_ERROR);
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g gpio <0-39> { [ mode { output | input | alternative } ] | [ level { high | low } ] }

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! debug
! phy-10g
! gpio
! <1-13>
! mode
! output
! input
! alternative

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = gpio_no
CMD_VAR = has_mode
CMD_VAR = has_mode_output
CMD_VAR = has_mode_input
CMD_VAR = has_mode_alternative
CMD_VAR = has_level
CMD_VAR = high
CMD_VAR = low

HELP    = ##ICLI_HELP_DEBUG
HELP    = 10g Phy debug commands
HELP    = GPIO keyword
HELP    = To configure or display GPIO status
HELP    = Configure GPIO operating mode
HELP    = Set GPIO as output
HELP    = Set GPIO as input
HELP    = Set GPIO in alternative mode (see data-sheet)
HELP    = Set the GPIO
HELP    = Set the GPIO high
HELP    = Set the GPIO low

CODE_BEGIN
    if (has_mode) {
        if (!misc_icli_10g_phy_gpio(session_id, plist, has_mode_output, has_mode_input, has_mode_alternative, FALSE, FALSE, FALSE, gpio_no)) {
            return ICLI_RC_ERROR;
        }
    } else if (has_level) {
        high = !low;
        if (!misc_icli_10g_phy_gpio(session_id, plist, FALSE, FALSE, FALSE, FALSE, TRUE, high, gpio_no)) {
            return ICLI_RC_ERROR;
        }
    } else {
        if (!misc_icli_10g_phy_gpio(session_id, plist, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, gpio_no)) {
            return ICLI_RC_ERROR;
        }
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g { { read-i2c <0-255> } | { write-i2c <0-255> <0-255> } }

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist

! 1: debug
! 2: phy-10g
! 3: read-i2c
! 4: <sfpplus-reg-addr>
! 5: write-i2c
! 6: <sfpplus-reg-addr>
! 7: <hexval>

CMD_VAR =
CMD_VAR =
CMD_VAR = has_read_i2c
CMD_VAR = address_read
CMD_VAR = has_write_i2c
CMD_VAR = address_write
CMD_VAR = value

RUNTIME = misc_icli_10G_phy_ts_and_jr2_present
RUNTIME = misc_icli_10G_phy_ts_and_jr2_present
RUNTIME = misc_icli_10G_phy_ts_and_jr2_present
RUNTIME = misc_icli_10G_phy_ts_and_jr2_present
RUNTIME = misc_icli_10G_phy_ts_and_jr2_present
RUNTIME = misc_icli_10G_phy_ts_and_jr2_present
RUNTIME = misc_icli_10G_phy_ts_and_jr2_present

HELP    = ##ICLI_HELP_DEBUG
HELP    = 10g Phy debug commands
HELP    = Reads data from I2C device connected to venice.
HELP    = SFP plus register address (0-255).
HELP    = Writes data to I2C device connected to venice.
HELP    = SFP plus register address (0-255).
HELP    = SFP plus register value (0-255).

BYWORD =
BYWORD =
BYWORD =
BYWORD = <sfpplus-reg-addr>
BYWORD =
BYWORD = <sfpplus-reg-addr>
BYWORD = <sfpplus-reg-val_hex>

CODE_BEGIN
    if (!misc_icli_10g_phy_rd_wr_i2c(session_id, plist, address_read, address_write, has_read_i2c, has_write_i2c, value)) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g failover { a | b | c | d | e | f | get }

DOC_CMD_DESC    = This command is used for debugging and setting failover mode.
DOC_CMD_DEFAULT = The default failover mode is 'a'.
DOC_CMD_EXAMPLE = debug phy-10g failover  a

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: failover
! 4: a
! 5: b
! 6: c
! 7: d
! 8: e
! 9: f
! 10: get

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_a
CMD_VAR = has_b
CMD_VAR = has_c
CMD_VAR = has_d
CMD_VAR = has_e
CMD_VAR = has_f
CMD_VAR = has_get

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set 10g phy failover mode
HELP = a: PMA <--> XAUI normal
HELP = b: PMA <--> XAUI crossed
HELP = c: PMA 0 <--> XAUI 0; PMA 0 -->XAUI 1
HELP = d: PMA 0 <--> XAUI 1; PMA 0 -->XAUI 0
HELP = e: PMA 1 <--> XAUI 0; PMA 1 -->XAUI 1
HELP = f: PMA 1 <--> XAUI 1; PMA 1 -->XAUI 0
HELP = Shows the 10g phy failover mode

BYWORD =
BYWORD =
BYWORD =
BYWORD = a : Option
BYWORD = b : Option
BYWORD = c : Option
BYWORD = d : Option
BYWORD = e : Option
BYWORD = f : Option
BYWORD =

CODE_BEGIN
    {if (!misc_icli_10g_phy_failover(session_id, has_a, has_b, has_c, has_d, has_e, has_f, has_get, plist))
        return(ICLI_RC_ERROR);}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g power [enable]

DOC_CMD_DESC    = Show or Enable Power status.
DOC_CMD_EXAMPLE = debug phy-10g power enable

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: power
! 4: enable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands.
HELP = Show or Enable power status.
HELP = Enables Power. Use 'Debug no' form for disabling.

BYWORD =
BYWORD =
BYWORD =
BYWORD = enable

CODE_BEGIN

if (has_enable) {
    //Enable Power
    if (!misc_icli_10g_phy_power(session_id, has_enable, FALSE, FALSE, plist)) {
        return(ICLI_RC_ERROR);
    }
} else {
   //Display power status
    if (!misc_icli_10g_phy_power(session_id, FALSE, FALSE, TRUE, plist)) {
        return(ICLI_RC_ERROR);
    }
}
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug no phy-10g power

DOC_CMD_DESC    = Disable Power.
DOC_CMD_EXAMPLE = debug no phy-10g power

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

HELP = ##ICLI_HELP_DEBUG
HELP = Negate a command or set its defaults
HELP = 10g Phy debug commands
HELP = Disables Power

CODE_BEGIN
    if (!misc_icli_10g_phy_power(session_id, FALSE, TRUE, FALSE, plist)) {
        return(ICLI_RC_ERROR);
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g synce [{mode <1-6>} [clk-out <0-1>] [hitless <0-1>] [rclk-div <0-1>] [sref-div <0-3>] [wref-div <0-1>]]

DOC_CMD_DESC    = Set or show SyncE modes on 10G PHY.

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: synce
! 4: mode
! 5: <1~6>
! 6: clk_out
! 7: <0~1>
! 8: hitless
! 9: <0~1>
! 10: rclk_div
! 11: <0~1>
! 12: sref_div
! 13: <0~3>
! 14: wref_div
! 15: <0~1>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_mode
CMD_VAR = mode
CMD_VAR = has_clk_out
CMD_VAR = clk_out
CMD_VAR = has_hitless
CMD_VAR = hitless
CMD_VAR = has_rclk_div
CMD_VAR = rclk_div
CMD_VAR = has_sref_div
CMD_VAR = sref_div
CMD_VAR = has_wref_div
CMD_VAR = wref_div

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or Set SyncE modes on 10G PHY.
HELP = Synchronous ethernet modes
HELP = 3:LAN \
       4:WAN \
       5 : Mixed mode, channel being configured in LAN mode and other is in WAN mode \
       6 : Mixed mode, channel being configured in WAN mode and other is in LAN mode
HELP = Recovered clocks used from phy
HELP = 0 : RXCLKOUT \
       1 : TXCLKOUT
HELP = Clock synthesizer is hitless or not
HELP = 0 : External Clock synthesizer is not hitless, SREFCLK and XREFCLK used as input Clock \
       1 : External Clock synthesizer is hitless, XREFCLK is used as input Clock
HELP = Recovered Clock's divisor
HELP = 0 : Recovered clock is divided by 64 \
       1 : Recovered clock is divided by 66
HELP = SREFCLK's divisor
HELP = 0  : SREFCLK is divided by 64 \
       1  : SREFCLK is divided by 66 \
       2  : SREFCLK is divided by 16
HELP = WREFCLK's divisor
HELP = 0  : WREFCLK/16 is not used \
       1  : WREFCLK/16 is used

BYWORD =
BYWORD =
BYWORD =
BYWORD = <mode>
BYWORD =
BYWORD = <clk_out>
BYWORD =
BYWORD = <hitless>
BYWORD =
BYWORD = <rclk_div>
BYWORD =
BYWORD = <sref_div>
BYWORD =
BYWORD = <wref_div>
BYWORD =

CODE_BEGIN
    if (!misc_icli_10g_phy_synce_mode(session_id, has_mode, mode, has_clk_out, clk_out, has_hitless, \
                                   hitless, has_rclk_div, rclk_div, has_sref_div, sref_div, has_wref_div, \
                                   wref_div,  plist)) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g synce-clkout [enable]

DOC_CMD_DESC    = Enable or Show SyncE clock out status on 10G PHY.

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: synce-clkout
! 4: enable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Enable or Show SyncE clock out status on 10G PHY.
HELP = Enable SyncE clock out.

CODE_BEGIN
    if (!misc_icli_10g_phy_synce_clkout(session_id, has_enable, FALSE, plist)) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug no phy-10g synce-clkout

DOC_CMD_DESC    = Disable SyncE clock out status on 10G PHY.

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: no
! 2: debug
! 3: phy-10g
! 4: synce-clkout

HELP = ##ICLI_HELP_DEBUG
HELP = Negate a command or set its defaults
HELP = 10g Phy debug commands
HELP = Disable SyncE clock out status on 10G PHY.

CODE_BEGIN
    if (!misc_icli_10g_phy_synce_clkout(session_id, FALSE, TRUE, plist)) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g xfp-clkout [enable]

DOC_CMD_DESC    = Enable or Show Clock out for XFP.

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: xfp-clkout
! 4: enable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Enable or Show Clock out for XFP.
HELP = Enable clock out for XFP.

CODE_BEGIN
    if (!misc_icli_10g_phy_xfp_clkout(session_id, has_enable, FALSE, plist)) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug no phy-10g xfp-clkout

DOC_CMD_DESC    = Disable Clock out for XFP.

PRIVILEGE = ICLI_PRIVILEGE_15

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: no
! 2: debug
! 3: phy-10g
! 4: xfp-clkout

HELP = ##ICLI_HELP_DEBUG
HELP = Negate a command or set its defaults
HELP = 10g Phy debug commands
HELP = Disable Clock out for XFP.

CODE_BEGIN
    if (!misc_icli_10g_phy_xfp_clkout(session_id, FALSE, TRUE, plist)) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g ckout [ { enable | disable } ]  [ { use-squelch-src-as-is | invert-squelch-src } ] [ { Squelch-src <0-63> } ] [ { full-rate-clk | div-by-2-clk } ] [ { clk-out-src <0-31> } ]

DOC_CMD_DESC    = Show or set ckout mode for Malibu Phy.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g ckout enable

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: ckout
! 4: enable
! 5: disable
! 6: use_squelch_src_as_is
! 7: invert_squelch_src
! 8: Squelch_src
! 9: <0~63>
! 10: full_rate_clk
! 11: div_by_2_clk
! 12: clk_out_src
! 13: <0~31>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR = has_disable
CMD_VAR = has_use_squelch_src_as_is
CMD_VAR = has_invert_squelch_src
CMD_VAR = has_Squelch_src
CMD_VAR = Squelch_src
CMD_VAR = has_full_rate_clk
CMD_VAR = has_div_by_2_clk
CMD_VAR = has_clk_out_src
CMD_VAR = clk_out_src

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set CKOUT mode for Malibu 10Gphy
HELP = Enable CKOUT
HELP = Disable CKOUT
HELP = Use Squelch Source as is
HELP = Invert Squelch Source
HELP = Source of Auto Squelch Logic for CKOUT
HELP = 0-31: Various sources \
       32-63: Disable Squelch
HELP = Generate full-rate clock (i.e. LAN: 322.25MHz, WAN: 311.04MHz, 1G: 125MHz)
HELP = Generate divide-by-2 version (i.e. LAN: 161.12MHz, etc)
HELP = Select data to be transmitted from CKOUT pin (CKOUT SRC)
HELP = 0: Line 0 Transmit Clock \
       1: Line 1 Transmit Clock \
       2: Line 2 Transmit Clock \
       3: Line 3 Transmit Clock \
       4: Host 0 Transmit Clock \
       5: Host 1 Transmit Clock \
       6: Host 2 Transmit Clock \
       7: Host 3 Transmit Clock \
       8: Line 0 Recovered Clock \
       9: Line 1 Recovered Clock \
       10: Line 2 Recovered Clock \
       11: Line 3 Recovered Clock \
       12: Host 0 Recovered Clock \
       13: Host 1 Recovered Clock \
       14: Host 2 Recovered Clock \
       15: Host 3 Recovered Clock \
       16: Host Pll Clock \
       17: Line Pll Clock \
       18: CSR Clock \
       19: LTC Clock \
       20: Df2f clk \
       21: F2df clk \
       29: Debug \
       30: Debug \
       31: Oscillator output

BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = use_squelch_src_as_is : Option
BYWORD = invert_squelch_src : Option
BYWORD = Squelch_src : Option
BYWORD = <Squelch_src>
BYWORD = full_rate_clk : Option
BYWORD = div_by_2_clk : Option
BYWORD = clk_out_src : Option
BYWORD = <clk_out_src>

CODE_BEGIN
    misc_icli_10g_phy_ckout(session_id, has_enable, has_disable, has_use_squelch_src_as_is,
        has_invert_squelch_src, has_Squelch_src, (vtss_phy_10g_squelch_src_t) Squelch_src, has_full_rate_clk,
        has_div_by_2_clk, has_clk_out_src, (vtss_ckout_data_sel_t) clk_out_src, plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g lane-sync [ { enable | disable } ] [ { rx-macro <0-2> } { rx-channel-id <0-3> } ] [ { tx-macro <0-2> } { tx-channel-id <0-3> } ]

DOC_CMD_DESC    = Show or Set Lane Sync for Malibu Phy.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g lane-sync enable

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: lane-sync
! 4: enable
! 5: disable
! 6: rx-macro
! 7: <0-2>
! 8: rx-channel-id
! 9: <0-3>
! 10: tx-macro
! 11: <0-2>
! 12: tx-channel-id
! 13: <0-3>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR = has_disable
CMD_VAR = has_rx_macro
CMD_VAR = rx_macro
CMD_VAR =
CMD_VAR = rx_chid
CMD_VAR = has_tx_macro
CMD_VAR = tx_macro
CMD_VAR =
CMD_VAR = tx_chid

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set lane sync for Malibu 10Gphy
HELP = Enable lane sync
HELP = Disable lane sync
HELP = RX_MACRO to which tx lane will be synched
HELP = 0: LINE 1: HOST 2: SREFCLK(Default '0' for Line)
HELP = Rx Channel id configuration ,range is indexed with zero i.e from 0,1..
HELP = 0-3 (Maximum limit is given, considering 4 channel malibu)
HELP = TX_MACRO for lane sync
HELP = 0: LINE 1: HOST 2: SCKOUT(Default '0' for line
HELP = Tx Channel id configuration ,range is indexed with zero i.e from 0,1..
HELP = 0-3 (Maximum limit is given, considering 4 channel malibu)

BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = rx-macro : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = tx-macro : Option
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    misc_icli_10g_phy_lane_sync(session_id, has_enable, has_disable, has_rx_macro,
        (vtss_phy_10g_rx_macro_t) rx_macro, has_tx_macro, (vtss_phy_10g_tx_macro_t) tx_macro, rx_chid, tx_chid, plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g sckout [ { enable | disable } ]  [ { frequency <0-1> } ] [ { use-squelch-src-as-is | invert-squelch-src } ] [ { Squelch-src <0-63> } ] [ { sckout-clkout-sel <0-15> } ]

DOC_CMD_DESC    = Show or Set SCKOUT mode for Malibu Phy.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g sckout enable

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: sckout
! 4: enable
! 5: disable
! 6: frequency
! 7: <0~1>
! 8: use_squelch_src_as_is
! 9: invert_squelch_src
! 10: Squelch_src
! 11: <0~63>
! 12: sckout_clkout_sel
! 13: <0~15>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR = has_disable
CMD_VAR = has_frequency
CMD_VAR = frequency
CMD_VAR = has_use_squelch_src_as_is
CMD_VAR = has_invert_squelch_src
CMD_VAR = has_Squelch_src
CMD_VAR = Squelch_src
CMD_VAR = has_sckout_clkout_sel
CMD_VAR = sckout_clkout_sel

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set SCKOUT mode for Malibu 10Gphy
HELP = Enable SCKOUT
HELP = Disable SCKOUT
HELP = SCKOUT Frequency
HELP = 0: 156.25MHz 1: 125MHz
HELP = Use Squelch Source as is
HELP = Invert Squelch Source
HELP = Source of Auto Squelch Logic for SCKOUT
HELP = 0-31: Various sources \
       32-63: Disable Squelch
HELP = Selects the source to which the SCKOUT transmit clock will be synchronoized
HELP = 0: Line 0 recovered clock \
       1: Line 1 recovered clock \
       2: Line 2 recovered clock \
       3: Line 3 recovered clock \
       4: Host 0 recovered clock \
       5: Host 1 recovered clock \
       6: Host 2 recovered clock \
       7: Host 3 recovered clock \
       8: SREFCLK \
       9-15: Synchronization disabled

BYWORD =
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = frequency : Option
BYWORD = <frequency>
BYWORD = use_squelch_src_as_is : Option
BYWORD = invert_squelch_src : Option
BYWORD = Squelch_src : Option
BYWORD = <Squelch_src>
BYWORD = sckout_clkout_sel : Option
BYWORD = <sckout_clkout_sel>

CODE_BEGIN
    misc_icli_10g_phy_sckout(session_id, has_enable, has_disable, has_frequency,
         (vtss_phy_10g_sckout_freq_t) frequency, has_use_squelch_src_as_is,
        has_invert_squelch_src, has_Squelch_src, (vtss_phy_10g_squelch_src_t ) Squelch_src,
        has_sckout_clkout_sel, (vtss_phy_10g_clk_sel_t) sckout_clkout_sel, plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g clk-sel [ { line | host } ] [ { clk-sel-no <0-3> } ] [ { clk-sel-val <0-15> } ]

DOC_CMD_DESC    = Set Line_CLK_SEL or HOST_CLK_SEL for Malibu Phy.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g clk-sel line 0 1

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: clk-sel
! 4: line
! 5: host
! 6: clk_sel_no
! 7: <0~3>
! 8: clk_sel_val
! 9: <0~15>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_line
CMD_VAR = has_host
CMD_VAR = has_clk_sel_no
CMD_VAR = clk_sel_no
CMD_VAR = has_clk_sel_val
CMD_VAR = clk_sel_val

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Set Line_CLK_SEL or HOST_CLK_SEL for Malibu 10Gphy
HELP = Set LINE_CLK_SEL
HELP = Set HOST_CLK_SEL
HELP = 0: LINE0_CLK_SEL or HOST0_CLK_SEL \
       1: LINE1_CLK_SEL or HOST1_CLK_SEL \
       2: LINE2_CLK_SEL or HOST2_CLK_SEL \
       3: LINE3_CLK_SEL or HOST3_CLK_SEL
HELP = Select the source to which the given line transmit \
       clock will be synchronoized
HELP = 0: Line 0 recovered clock \
       1: Line 1 recovered clock \
       2: Line 2 recovered clock \
       3: Line 3 recovered clock \
       4: Host 0 recovered clock \
       5: Host 1 recovered clock \
       6: Host 2 recovered clock \
       7: Host 3 recovered clock \
       8: SREFCLK \
       9-15: Synchronization disabled

BYWORD =
BYWORD =
BYWORD =
BYWORD = line : Option
BYWORD = host : Option
BYWORD = clk_sel_no : Option
BYWORD = <clk_sel_no>
BYWORD = clk_sel_val : Option
BYWORD = <clk_sel_val>

CODE_BEGIN
    misc_icli_10g_phy_clk_sel(session_id, has_line, has_host, has_clk_sel_no,
        clk_sel_no, has_clk_sel_val, (vtss_phy_10g_clk_sel_t) clk_sel_val, plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g rxckout [ { disable | rx-clock | tx-clock } ] [ { pcs-fault-squelch | no-pcs-fault-squelch } ] [ { lopc-squelch | no-lopc-squelch } ]

DOC_CMD_DESC    = Show or set rxckout mode for a 10G phy.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g rxckout rx-clock pcs-fault-squelch

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: rxckout
! 4: disable
! 5: rx-clock
! 6: tx-clock
! 7: pcs-fault-squelch
! 8: no-pcs-fault-squelch
! 9: lopc-squelch
! 10: no-lopc-squelch

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = has_rx_clock
CMD_VAR = has_tx_clock
CMD_VAR = has_pcs_fault_squelch
CMD_VAR = has_no_pcs_fault_squelch
CMD_VAR = has_lopc_squelch
CMD_VAR = has_no_lopc_squelch

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set rxckout mode for a 10G phy
HELP = Disable (tristate) rxckout
HELP = rxckout is derived from the line side rx clock
HELP = rxckout is derived from the line side tx clock
HELP = rxckout is squelched in case of PCS_FAULT
HELP = rxckout is NOT squelched in case of PCS_FAULT
HELP = rxckout is squelched in case of LOPC
HELP = rxckout is NOT squelched in case of LOPC

BYWORD =
BYWORD =
BYWORD =
BYWORD = disable : Option
BYWORD = rx-clock : Option
BYWORD = tx-clock : Option
BYWORD = pcs-fault-squelch : Option
BYWORD = no-pcs-fault-squelch : Option
BYWORD = lopc-squelch : Option
BYWORD = no-lopc-squelch : Option

CODE_BEGIN
    misc_icli_10g_phy_rxckout(session_id, has_disable, has_rx_clock, has_tx_clock,
        has_pcs_fault_squelch, has_no_pcs_fault_squelch, has_lopc_squelch, has_no_lopc_squelch, plist);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy-10g txckout [ { disable | rx-clock | tx-clock } ]

DOC_CMD_DESC    = Show or set txckout mode for a 10G phy.
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy-10g txckout tx-clock

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy-10g
! 3: txckout
! 4: disable
! 5: rx-clock
! 6: tx-clock

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = has_rx_clock
CMD_VAR = has_tx_clock

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP = ##ICLI_HELP_DEBUG
HELP = 10g Phy debug commands
HELP = Show or set txckout mode for a 10G phy
HELP = Disable (tristate) txckout
HELP = txckout is derived from the line side rx clock
HELP = txckout is derived from the line side tx clock

BYWORD =
BYWORD =
BYWORD =
BYWORD = disable : Option
BYWORD = rx-clock : Option
BYWORD = tx-clock : Option

CODE_BEGIN
    misc_icli_10g_phy_txckout(session_id, has_disable, has_rx_clock, has_tx_clock, plist);
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api latency interface <port_type_list> { ingress | egress } [ latency <0-65535> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_latency
CMD_VAR = v_0_to_65535

BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = latency : Option

CODE_BEGIN
    if (misc_icli_ts_latency(session_id, has_ingress,has_egress, has_latency, v_0_to_65535,v_port_type_list) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api nphase interface <port_type_list> [ nphase <1-5> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: nphase
! 5: interface
! 6: <port_type_list>
! 7: nphase
! 8: <1-5>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_nphase
CMD_VAR = v_1_to_5

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = 1->PPS_O, 2->PPS_RI, 3->EGR_SOF, 4->ING_SOF, 5->LS

BYWORD =
BYWORD =
BYWORD =
BYWORD = nphase : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if (misc_icli_ts_nphase(session_id,has_nphase,v_1_to_5,v_port_type_list) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api delay-asym interface <port_type_list> [ asym <-32768-32767> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: delay-asym
! 5: interface
! 6: <port_type_list>
! 7: asym
! 8: <-32768-32767>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_asym
CMD_VAR = v_minus_32768_to_32767

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = asym : Option
BYWORD =

CODE_BEGIN
    if (misc_icli_ts_asym_delay(session_id,has_asym,v_minus_32768_to_32767,v_port_type_list) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api path-delay interface <port_type_list> [ delay <0-4294967295> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: path-delay
! 5: interface
! 6: <port_type_list>
! 7: delay
! 8: <0-4294967295>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_delay
CMD_VAR = v_0_to_4294967295

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = delay : Option
BYWORD =

CODE_BEGIN
    if (misc_icli_ts_path_delay(session_id,has_delay,v_0_to_4294967295,v_port_type_list) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN
COMMAND = debug critd {semaphore | mutex | recursive-mutex} {init | enter | exit | delete}
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! critd
CMD_VAR =
BYWORD  =
HELP    = Critical section
RUNTIME =

!
CMD_VAR = has_semaphore
BYWORD  =
HELP    = Debug command for testing semaphores. You can create, enter or exit a semphore.
RUNTIME =

!
CMD_VAR = has_mutex
BYWORD  =
HELP    = Debug command for testing mutexes. You can create, enter or exit a mutex.
RUNTIME =

!
CMD_VAR = has_recursive_mutex
BYWORD  =
HELP    = Debug command for testing recursive mutexes. You can create, enter or exit a mutex.
RUNTIME =

!
CMD_VAR = has_init
BYWORD  =
HELP    = Initiliaze a (recursive) mutex or a semaphore.
RUNTIME =

!
CMD_VAR = has_enter
BYWORD  =
HELP    = Enters a (recursive) mutex or a semaphore. When you enter twice (without exiting) a deadlock will happen, and you will see a semaphore deadlock printout after a little while.
RUNTIME =

!
CMD_VAR = has_exit
BYWORD  =
HELP    = Exits a (recursive) mutex or semaphore.
RUNTIME =

CMD_VAR = has_delete
BYWORD  =
HELP    = Delete a (recursive) mutex or semaphore.
RUNTIME =

VARIABLE_BEGIN
    static critd_t debug_crit;
    critd_type_t type;
VARIABLE_END

CODE_BEGIN
    if (has_mutex) {
       type = CRITD_TYPE_MUTEX;
    } else if (has_recursive_mutex) {
       type = CRITD_TYPE_MUTEX_RECURSIVE;
    } else if (has_semaphore) {
       type = CRITD_TYPE_SEMAPHORE;
    }  else {
       T_E("Unknown type");
       return ICLI_RC_ERROR;
    }

    if (has_init) {
      T_I("Initializing debug crit");
      critd_init(&debug_crit, "debug", VTSS_MODULE_ID_MISC, type);
    } else  if (has_enter) {
      T_I("Enter debug crit");
      critd_enter(&debug_crit, __FILE__, __LINE__);
    } else if (has_exit) {
      T_I("Exit debug crit");
      critd_exit(&debug_crit, __FILE__, __LINE__);
    } else if (has_delete) {
      T_I("Delete debug crit");
      critd_delete(&debug_crit);
    } else {
      T_E("Don't know what to do");
      return ICLI_RC_ERROR;
    }

    return ICLI_RC_OK;
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN
COMMAND = debug critd list [ <cword> ] [ detailed ]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
PROPERTY  = ICLI_CMD_PROP_GREP

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! critd
CMD_VAR =
BYWORD  =
HELP    = Critical section
RUNTIME =

! list
CMD_VAR =
BYWORD  =
HELP    = List critd mutexes/semaphores and their status
RUNTIME =

! <cword>
CMD_VAR = module_name
BYWORD  =
HELP    = List per module
RUNTIME = _runtime_cword_module

! detailed
CMD_VAR = b_detailed
RUNTIME =
HELP    = List in detail
BYWORD  =

VARIABLE_BEGIN
    vtss_module_id_t    module_id;
VARIABLE_END

CODE_BEGIN
    if ( module_name ) {
        module_id = _module_id_get( module_name );
    } else {
        module_id = VTSS_MODULE_ID_NONE;
    }

    critd_dbg_list_icli(session_id, module_id, b_detailed, 1, NULL);
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug critd maxlock [ <cword> ] [ clear ]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
PROPERTY  = ICLI_CMD_PROP_GREP

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! critd
CMD_VAR =
BYWORD  =
HELP    = Critical section
RUNTIME =

! maxlock
CMD_VAR =
BYWORD  =
HELP    = Critd max lock time locations
RUNTIME =

! <cword>
CMD_VAR = module_name
BYWORD  =
HELP    = Module name
RUNTIME = _runtime_cword_module

! clear
CMD_VAR = b_clear
RUNTIME =
HELP    = Clear max lock counters
BYWORD  =

VARIABLE_BEGIN
    vtss_module_id_t  module_id;
VARIABLE_END

CODE_BEGIN
    if (module_name) {
        module_id = _module_id_get(module_name);
    } else {
        module_id = VTSS_MODULE_ID_NONE;
    }

    critd_dbg_max_lock_icli(session_id, module_id, 1, b_clear);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN
COMMAND = debug critd leaf-test
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! critd
CMD_VAR =
BYWORD  =
HELP    = Critical section
RUNTIME =

! leaf-test
CMD_VAR =
BYWORD  =
HELP    = Test that if a leaf-mutex is taken, no other mutex can be taken.
RUNTIME =

VARIABLE_BEGIN
    critd_t mutex, leaf_mutex;
VARIABLE_END

CODE_BEGIN
    critd_init(&mutex,      "debug_mutex",      VTSS_MODULE_ID_MISC, CRITD_TYPE_MUTEX);
    critd_init(&leaf_mutex, "debug_leaf_mutex", VTSS_MODULE_ID_MISC, CRITD_TYPE_MUTEX, true);

    // First take leaf mutex, then another mutex. Taking the other mutex should
    // cause trace errors.
    critd_enter(&leaf_mutex, __FILE__, __LINE__);
    critd_enter(&mutex,      __FILE__, __LINE__);

    // Clean up.
    critd_exit(&mutex,      __FILE__, __LINE__);
    critd_exit(&leaf_mutex, __FILE__, __LINE__);

    critd_delete(&mutex);
    critd_delete(&leaf_mutex);
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_I2C)

COMMAND = debug i2c read <uint> <uint> [{count <uint>}]

PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! i2c
CMD_VAR =
BYWORD  =
HELP    = I2C
RUNTIME =

! read
CMD_VAR =
BYWORD  =
HELP    = Read data through I2C
RUNTIME =

! <uint>
CMD_VAR = bus_no
BYWORD  =
HELP    = I2C adapter (bus) to read
RUNTIME =

! <uint>
CMD_VAR = i2c_addr
BYWORD  =
HELP    = I2C address
RUNTIME =

! count
CMD_VAR = has_count
RUNTIME =
HELP    = count keyword
BYWORD  =

! <uint>
CMD_VAR = count
RUNTIME =
HELP    = Number of bytes to read (Max 255)
BYWORD  =

VARIABLE_BEGIN
    int         file;
    uchar       i2c_data[256];
    u32         i;
VARIABLE_END

CODE_BEGIN
    if (!has_count) {
        count = 1; // Default read one byte
    }

    if (count > 255) {
        ICLI_PRINTF("Max number of bytes to read: %d\n", 255);
        return ICLI_RC_ERROR;
    }

    if ((file = vtss_i2c_adapter_open(bus_no, i2c_addr)) >= 0) {
        mesa_rc rc;
        if ( (rc = vtss_i2c_dev_rd(file, &i2c_data[0], count)) == VTSS_RC_OK ) {
            for ( i = 0; i < count; ++i ) {
                ICLI_PRINTF("Data read from I2C [%d] = 0x%02X\n", i, i2c_data[i]);
            }
        } else {
            ICLI_PRINTF("Could not read (%s)\n",  error_txt(rc));
        }
        vtss_i2c_dev_close(file);
    } else {
        ICLI_PRINTF("Unable to open I2C bus %d: %s\n", bus_no, strerror(errno));
    }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_I2C)

COMMAND   = debug i2c write <uint> <uint> <hexval>
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! i2c
CMD_VAR =
BYWORD  =
HELP    = I2C
RUNTIME =

! write
CMD_VAR =
BYWORD  =
HELP    = Write data through I2C
RUNTIME =

! <uint>
CMD_VAR = bus_no
BYWORD  =
HELP    = I2C adapter (bus) to write
RUNTIME =

! <uint>
CMD_VAR = i2c_addr
BYWORD  =
HELP    = I2C address
RUNTIME =

! <hexval>
CMD_VAR = data
RUNTIME =
HELP    = Data to write
BYWORD  =

VARIABLE_BEGIN
    int         file;
VARIABLE_END

CODE_BEGIN
    if ((file = vtss_i2c_adapter_open(bus_no, i2c_addr)) >= 0) {
        if ( vtss_i2c_dev_wr(file, data.hex, data.len) == VTSS_RC_ERROR ) {
            ICLI_PRINTF("%% Failed : Write operation\n");
        }
        vtss_i2c_dev_close(file);
    } else {
        ICLI_PRINTF("Unable to open I2C bus %d: %s\n", bus_no, strerror(errno));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG = defined(VTSS_SW_OPTION_I2C)

COMMAND   = debug i2c scan <uint> <uint> <uint>
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! i2c
CMD_VAR =
BYWORD  =
HELP    = I2C
RUNTIME =

! scan
CMD_VAR =
BYWORD  =
HELP    = Scan the address to check if existed
RUNTIME =

! <uint>
CMD_VAR = bus_no
BYWORD  =
HELP    = I2C adapter (bus) to scan
RUNTIME =

! <uint>
CMD_VAR = start_addr
BYWORD  =
HELP    = Starting address to scan
RUNTIME =

! <uint>
CMD_VAR = addr_cnt
BYWORD  =
HELP    = Count of addresses to scan
RUNTIME =

VARIABLE_BEGIN
    int         file;
    u32         i;
    uchar       i2c_data[40];
VARIABLE_END

CODE_BEGIN
    if ((file = vtss_i2c_adapter_open(bus_no, start_addr)) >= 0) {
        for ( i = 0; i <= addr_cnt; ++i ) {
            ICLI_PRINTF("Testing I2C address : 0x%08X --> ", start_addr+i);
            ioctl(file, I2C_SLAVE, start_addr+i);
            if (vtss_i2c_dev_rd(file, &i2c_data[0], 1) == VTSS_RC_OK ) {
                ICLI_PRINTF("OK\n");
            } else {
                ICLI_PRINTF("No response\n");
            }
        }
        vtss_i2c_dev_close(file);
    } else {
        ICLI_PRINTF("Unable to open I2C bus %d: %s\n", bus_no, strerror(errno));
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug init-modules cmd {init | start | conf-def | icfg-loading-pre | icfg-loading-post | suspend-resume} [isid <uint>] [flags <uint>]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = b_init
CMD_VAR = b_start
CMD_VAR = b_conf_def
CMD_VAR = b_icfg_loading_pre
CMD_VAR = b_icfg_loading_post
CMD_VAR =
CMD_VAR = b_isid
CMD_VAR = isid
CMD_VAR = b_flag
CMD_VAR = flag

HELP = ##ICLI_HELP_DEBUG
HELP = Initialization process
HELP = Initial command
HELP = INIT_CMD_INIT
HELP = INIT_CMD_START
HELP = INIT_CMD_CONF_DEF
HELP = INIT_CMD_ICFG_LOADING_PRE
HELP = INIT_CMD_ICFG_LOADING_POST
HELP = INIT_CMD_SUSPEND_RESUME
HELP = ISID
HELP = ISID number
HELP = Initial flag
HELP = Flag value

VARIABLE_BEGIN
    vtss_init_data_t data;
VARIABLE_END

CODE_BEGIN
    memset(&data, 0, sizeof(data));

    data.cmd = b_init              ? INIT_CMD_INIT              :
               b_start             ? INIT_CMD_START             :
               b_conf_def          ? INIT_CMD_CONF_DEF          :
               b_icfg_loading_pre  ? INIT_CMD_ICFG_LOADING_PRE  :
               b_icfg_loading_post ? INIT_CMD_ICFG_LOADING_POST : INIT_CMD_SUSPEND_RESUME;

    if (b_isid) {
        data.isid   = isid;
        data.resume = isid;
    }

    if (b_flag) {
        data.flags = flag;
    }

    (void)init_modules(&data);
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug thread priority set <uint16> {below | normal | above | high | higher | highest} [real-time]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! thread
CMD_VAR =
BYWORD  =
HELP    = Thread configuration
RUNTIME =

! priority
CMD_VAR =
BYWORD  =
HELP    = Thread priority
RUNTIME =

! set
CMD_VAR =
BYWORD  =
HELP    = Set thread priority
RUNTIME =

! <uint16>
CMD_VAR = thread_id
BYWORD  =
HELP    = Thread ID to set priority for
RUNTIME =

! below
CMD_VAR = has_below
BYWORD  =
HELP    = Below normal
RUNTIME =

! normal
CMD_VAR = has_normal
BYWORD  =
HELP    = Normal (default)
RUNTIME =

! above
CMD_VAR = has_above
BYWORD  =
HELP    = Above normal
RUNTIME =

! high
CMD_VAR = has_high
BYWORD  =
HELP    = High
RUNTIME =

! higher
CMD_VAR = has_higher
BYWORD  =
HELP    = Higher
RUNTIME =

! highest
CMD_VAR = has_highest
BYWORD  =
HELP    = Highest
RUNTIME =

! real-time
CMD_VAR = has_rt
BYWORD  =
HELP    = Use real-time scheduler (default is normal scheduler)
RUNTIME =

VARIABLE_BEGIN
    vtss_handle_t      thread_handle;
    vtss_thread_prio_t prio;
VARIABLE_END

CODE_BEGIN
    thread_handle = vtss_thread_handle_from_id(thread_id);
    if (thread_handle == 0) {
        ICLI_PRINTF("%% Failed to obtain thread handle for thread ID %u.\n", thread_id);
        return ICLI_RC_ERROR;
    }

    if (has_below) {
        prio = has_rt ? VTSS_THREAD_PRIO_BELOW_NORMAL_RT : VTSS_THREAD_PRIO_BELOW_NORMAL;
    } else if (has_normal) {
        prio = has_rt ? VTSS_THREAD_PRIO_DEFAULT_RT      : VTSS_THREAD_PRIO_DEFAULT;
    } else if (has_above) {
        prio = has_rt ? VTSS_THREAD_PRIO_ABOVE_NORMAL_RT : VTSS_THREAD_PRIO_ABOVE_NORMAL;
    } else if (has_high) {
        prio = has_rt ? VTSS_THREAD_PRIO_HIGH_RT         : VTSS_THREAD_PRIO_HIGH;
    } else if (has_higher) {
        prio = has_rt ? VTSS_THREAD_PRIO_HIGHER_RT       : VTSS_THREAD_PRIO_HIGHER;
    } else if (has_highest) {
        prio = has_rt ? VTSS_THREAD_PRIO_HIGHEST_RT      : VTSS_THREAD_PRIO_HIGHEST;
    } else {
        // Should be impossible
        ICLI_PRINTF("%% Internal Error: No priority selected\n");
        return ICLI_RC_ERROR;
    }

    vtss_thread_prio_set(thread_handle, prio);
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug thread {{status [backtrace] [id {all | <uint>}]} | context-switches}
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
PROPERTY  = ICLI_CMD_PROP_GREP

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! thread
CMD_VAR =
BYWORD  =
HELP    = Thread configuration
RUNTIME =

! status
CMD_VAR = has_status
BYWORD  =
HELP    = Thread status
RUNTIME =

! backtrace
CMD_VAR = has_backtrace
BYWORD  =
HELP    = Show stack backtrace
RUNTIME =

! id
CMD_VAR = has_id
BYWORD  =
HELP    = Details for one or all threads
RUNTIME =

! all
CMD_VAR = has_all
BYWORD  =
HELP    = Details for all threads
RUNTIME =

! <uint>
CMD_VAR = tid
BYWORD  =
HELP    = Details for a particular thread (use 'debug thread status' without further args to obtain this)
RUNTIME =

! context-switches
CMD_VAR =
BYWORD  =
HELP    = Show number of context switches
RUNTIME =

CODE_BEGIN
    if (has_status) {
        if (has_id) {
            misc_thread_details_print(icli_session_self_printf, has_all ? -1 : tid);
        } else {
            misc_thread_status_print(icli_session_self_printf, has_backtrace, FALSE);
        }
    } else {
        misc_thread_context_switches_print(icli_session_self_printf);
    }
CODE_END
CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug sgpio read [group <uint>]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
RUNTIME = misc_icli_sgpio_present

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! sgpio
CMD_VAR =
BYWORD  =
HELP    = Serialized GPIO
RUNTIME =

! read
CMD_VAR =
BYWORD  =
HELP    = Do a read of the serialized GPIO
RUNTIME =

! group
CMD_VAR = has_group
BYWORD  =
HELP    = Serialized GPIO group
RUNTIME =

! <uint>
CMD_VAR = group
BYWORD  =
HELP    = Serialized GPIO group number
RUNTIME =

VARIABLE_BEGIN
    u8                     p;
    u8                     bit;
    mesa_sgpio_port_data_t sgpio_data[MESA_SGPIO_PORTS];
    mesa_sgpio_conf_t      conf;
    mesa_sgpio_group_t     group_no;
VARIABLE_END

CODE_BEGIN
    if (has_group) {
        group_no = group;
    } else {
        group_no = 0;
    }
    if (mesa_sgpio_conf_get(NULL, 0, group_no, &conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Fail: get conf for SGPIO group %d\n", group_no);
        return ICLI_RC_ERROR;
    }

    // Loop through all the sgpio and print out their value.
    if (mesa_sgpio_read(NULL, 0, group_no, sgpio_data) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Fail: get data from SGPIO group %d\n", group_no);
    } else {
        ICLI_PRINTF("SGPIO group %d  ", group_no);
        for (bit = 0; bit < conf.bit_count; ++bit) {
            ICLI_PRINTF(" b%d", bit);
        }
        ICLI_PRINTF("\n");
        for (p = 0; p < MESA_SGPIO_PORTS; ++p) {
            ICLI_PRINTF("SGPIO port %2d  ", p);
            for (bit = 0; bit < conf.bit_count; ++bit) {
                ICLI_PRINTF("  %d", sgpio_data[p].value[bit]);
            }
            ICLI_PRINTF("\n");
        }
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug sgpio write [group <uint>] <uint> [ <uint> [ <uint> [ <uint> ]]]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
RUNTIME = misc_icli_sgpio_present

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! sgpio
CMD_VAR =
BYWORD  =
HELP    = Serialized GPIO
RUNTIME =

! write
CMD_VAR =
BYWORD  =
HELP    = Write serialized GPIO
RUNTIME =

! group
CMD_VAR = has_group
BYWORD  =
HELP    = Serialized GPIO group
RUNTIME =

! <uint>
CMD_VAR = group
BYWORD  =
HELP    = Serialized GPIO group number
RUNTIME =

! <uint>
CMD_VAR = data_1
BYWORD  =
HELP    = Data 1
RUNTIME =

! <uint>
CMD_VAR = data_2
BYWORD  =
HELP    = Data 2
RUNTIME =

! <uint>
CMD_VAR = data_3
BYWORD  =
HELP    = Data 3
RUNTIME =

! <uint>
CMD_VAR = data_4
BYWORD  =
HELP    = Data 4
RUNTIME =

VARIABLE_BEGIN
    u8                 p, bit;
    u32                data[4];
    mesa_sgpio_conf_t  conf;
    mesa_sgpio_group_t group_no;
VARIABLE_END

CODE_BEGIN
    if (has_group) {
        group_no = group;
    } else {
        group_no = 0;
    }
    data[0] = data_1;
    data[1] = data_2;
    data[2] = data_3;
    data[3] = data_4;
    if (mesa_sgpio_conf_get(NULL, 0, group_no, &conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Fail: get conf for SGPIO group %d\n", group_no);
        return ICLI_RC_ERROR;
    }
    for (p = 0; p < MESA_SGPIO_PORTS; ++p) {
        for (bit = 0; bit < conf.bit_count; bit++) {
            conf.port_conf[p].mode[bit] = (mesa_sgpio_mode_t)((data[bit] >> p) & 0x1);
        }
    }
    if (mesa_sgpio_conf_set(NULL, 0, group_no, &conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Fail : set conf for SGPIO group %d\n", group_no);
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug sgpio conf group <uint> port-mask <uint> bits-per-port <uint>
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
RUNTIME = misc_icli_sgpio_present

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! sgpio
CMD_VAR =
BYWORD  =
HELP    = Serialized GPIO
RUNTIME =

! conf
CMD_VAR =
BYWORD  =
HELP    = Configure serialized GPIO
RUNTIME =

! group
CMD_VAR =
BYWORD  =
HELP    = Serialized GPIO group
RUNTIME =

! <uint>
CMD_VAR = group_no
BYWORD  =
HELP    = Serialized GPIO group number
RUNTIME =

! port-mask
CMD_VAR =
BYWORD  =
HELP    = Serialized GPIO port mask
RUNTIME =

! <uint>
CMD_VAR = port_mask
BYWORD  =
HELP    = Serialized GPIO port mask
RUNTIME =

! bits-per-port
CMD_VAR =
BYWORD  =
HELP    = Bits per port
RUNTIME =

! <uint>
CMD_VAR = bit_count
BYWORD  =
HELP    = bits per port
RUNTIME =

VARIABLE_BEGIN
    u8                 p;
    mesa_sgpio_conf_t  conf;
VARIABLE_END

CODE_BEGIN
    if (mesa_sgpio_conf_get(NULL, 0, group_no, &conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Fail: get conf for SGPIO group %d\n", group_no);
        return ICLI_RC_ERROR;
    }
    for (p = 0; p < MESA_SGPIO_PORTS; ++p) {
        conf.port_conf[p].enabled = ((port_mask >> p) & 0x1);
    }
    conf.bit_count = bit_count;

    if (mesa_sgpio_conf_set(NULL, 0, group_no, &conf) != VTSS_RC_OK) {
        ICLI_PRINTF("%% Fail : set conf for SGPIO group %d\n", group_no);
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug sfp read <0-255> <0-40> <0-60> <uint8> [ <uint8> ]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC

FUNC_NAME = _debug_sfp_read

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! sfp
CMD_VAR =
BYWORD  =
HELP    = SFP
RUNTIME =

! read
CMD_VAR =
BYWORD  =
HELP    = Read SFP
RUNTIME =

! <0-255>
CMD_VAR = i2c_addr
BYWORD  =
HELP    = I2C address
RUNTIME =

! <0-40>
CMD_VAR = i2c_bytes
BYWORD  =
HELP    = Number of bytes to read
RUNTIME =

! <0-50>
CMD_VAR = port_no
BYWORD  =
HELP    = Port number
RUNTIME =

! <uint8>
CMD_VAR = sfp_reg_addr_0
BYWORD  =
HELP    = SFP register address
RUNTIME =

! <uint8>
CMD_VAR = sfp_reg_addr_1
BYWORD  =
HELP    = SFP register address
RUNTIME =

VARIABLE_BEGIN
    uchar       i2c_data[40];
    u32         i;
    uchar       sfp_reg_addr[2];
VARIABLE_END

CODE_BEGIN
    sfp_reg_addr[0] = sfp_reg_addr_0;
    sfp_reg_addr[1] = sfp_reg_addr_1;

    if ( meba_sfp_i2c_xfer(board_instance, port_no, false, i2c_addr, sfp_reg_addr[0], &i2c_data[0], i2c_bytes, FALSE) == VTSS_RC_OK) {
        for ( i = 0; i < i2c_bytes; ++i ) {
            ICLI_PRINTF("Data read from I2C = 0x%X,\n", i2c_data[i]);
        }
    } else {
       ICLI_PRINTF("Could not read I2C\n");
    }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND   = debug sfp write <0-255> <0-60> <uint8> <uint8> <uint8>
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC

FUNC_NAME = _debug_sfp_write

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! sfp
CMD_VAR =
BYWORD  =
HELP    = SFP
RUNTIME =

! write
CMD_VAR =
BYWORD  =
HELP    = Write SFP
RUNTIME =

! <0-255>
CMD_VAR = i2c_addr
BYWORD  =
HELP    = I2C address
RUNTIME =

! <0-50>
CMD_VAR = port_no
BYWORD  =
HELP    = Port number
RUNTIME =

! <uint8>
CMD_VAR = sfp_reg_addr
BYWORD  =
HELP    = SFP register address
RUNTIME =

! <uint8>
CMD_VAR = i2c_data_0
BYWORD  =
HELP    = Data 1 to write
RUNTIME =

! <uint8>
CMD_VAR = i2c_data_1
BYWORD  =
HELP    = Data 2 to write
RUNTIME =

VARIABLE_BEGIN
    u8  i2c_data[2];
VARIABLE_END

CODE_BEGIN
    i2c_data[0] = i2c_data_0;
    i2c_data[1] = i2c_data_1;

    if ( meba_sfp_i2c_xfer(board_instance, port_no, true, i2c_addr, sfp_reg_addr, i2c_data, 1, FALSE) == VTSS_RC_ERROR ) {
        ICLI_PRINTF("%% Fail: write SFP, port_no %u, i2c_addr %u, sfp_reg_addr %u\n", port_no, i2c_addr, sfp_reg_addr);
    }

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug spi-transfer <1-3> <0-1> <uint> <uint> <0-50> [ <hexval> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_arch_jaguar2

! debug
CMD_VAR =
RUNTIME =
HELP    =  ##ICLI_HELP_DEBUG
BYWORD  =

! spi-transfer
CMD_VAR =
RUNTIME =
HELP    = Write to/Read from SPI device
BYWORD  =

! <1-3>
CMD_VAR = v_1_to_3
RUNTIME =
HELP    = SPI_CS Identifier
BYWORD  =

! <0-1>
CMD_VAR = v_0_to_1
RUNTIME =
HELP    = Set to 1 to make CS active high, 0 to make it active low.
BYWORD  =

! <uint>
CMD_VAR = v_uint
RUNTIME =
HELP    = Mask of the GPIO register
BYWORD  =

! <uint>
CMD_VAR = v_uint_1
RUNTIME =
HELP    = Value of the GPIO register
BYWORD  =

! <0-49>
CMD_VAR = v_0_to_50
RUNTIME =
HELP    = No of bytes to read/write from the SPI (0-50)
BYWORD  =

! <hexval>
CMD_VAR = v_hexval
RUNTIME =
HELP    = Sequence of hexadecimal values to be written to the SPI device. Format 0x123456....
BYWORD  =

CODE_BEGIN
    misc_icli_spi_transaction(session_id, v_1_to_3, v_0_to_1, v_uint, v_uint_1, v_0_to_50, &v_hexval);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy mmd-read-direct <0-2> <0-31> <0-31> <0-65535>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy mmd-read-direct 1 26 0x3 0xf000

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy
! 3: mmd-read-direct
! 4: <0-2>
! 5: <0-31>
! 6: <0-31>
! 7: <0-65535>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_0_to_2
CMD_VAR = v_0_to_31
CMD_VAR = v_0_to_31_1
CMD_VAR = v_0_to_65535

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = MMD Management read without port Mapping
HELP = MIIM ctrl
HELP = MIIM address
HELP = Dev address
HELP = Register address

BYWORD =
BYWORD =
BYWORD =
BYWORD = <0-2>
BYWORD = <0-31>
BYWORD = <0-31>
BYWORD = <0-65535>

CODE_BEGIN
    if(!misc_icli_phy_mmd_read_direct(session_id, (mesa_miim_controller_t) v_0_to_2, v_0_to_31, v_0_to_31_1, v_0_to_65535))
        return ICLI_RC_ERROR;
CODE_END

CMD_END

!=======================================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy mmd-write-direct <0-2> <0-31> <0-31> <0-65535> <uint16>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy mmd-write-direct 1 26 0x3 0xf000 0x10

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy
! 3: mmd-write-direct
! 4: <0-2>
! 5: <0-31>
! 6: <0-31>
! 7: <0-65535>
! 8: <uint16>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_0_to_2
CMD_VAR = v_0_to_31
CMD_VAR = v_0_to_31_1
CMD_VAR = v_0_to_65535
CMD_VAR = v_uint16

HELP =
HELP =
HELP = MMD Management write without port Mapping
HELP = MIIM ctrl
HELP = MIIM address
HELP = Dev address
HELP = Register address
HELP = value to be written

BYWORD =
BYWORD =
BYWORD =
BYWORD = <0-2>
BYWORD = <0-1>
BYWORD = <0-1>
BYWORD = <0-65535>
BYWORD = <0-65535>

CODE_BEGIN
    if(!misc_icli_phy_mmd_write_direct(session_id, (mesa_miim_controller_t) v_0_to_2, v_0_to_31, v_0_to_31_1, v_0_to_65535, v_uint16))
        return ICLI_RC_ERROR;
CODE_END

CMD_END
!=======================================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy aqr mmd-dump-direct <0-2> <0-31>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy mmd-read-direct 0 8

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy
! 3: aqr
! 4: mmd-dump-direct
! 5: <0-2>
! 6: <0-31>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_0_to_2
CMD_VAR = v_0_to_31

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = Aquantia
HELP = MMD Management read without port Mapping
HELP = MIIM ctrl
HELP = MIIM address

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = <0-2>
BYWORD = <0-31>

CODE_BEGIN
    if(!misc_icli_phy_aqr_mmd_dump_direct(session_id, (mesa_miim_controller_t) v_0_to_2, v_0_to_31))
        return ICLI_RC_ERROR;
CODE_END

CMD_END

!======================================================================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ltc-freq [ { enable <0-255> <0-255> | disable } ]

DOC_CMD_DESC    = Duty cycle of LTC timer programmable
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE = debug phy ltc-freq enable 12 21

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ltc-freq
! 4: enable
! 5: <0-255>
! 6: <0-255>
! 7: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR = v_0_to_255
CMD_VAR = v_0_to_255_1
CMD_VAR = has_disable

HELP =
HELP =
HELP = LTC block output clock based on LTC timer
HELP = enable frequency synthesis pulse
HELP = High duty cycle
HELP = Low duty cycle
HELP = disable frequency synthesis pulse

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = High duty cycle
BYWORD = Low duty cycle
BYWORD = disable : Option

CODE_BEGIN
    if(phy_icli_cmd_ltc_freq_synth(session_id, plist, has_enable, has_disable, v_0_to_255, v_0_to_255_1) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy tod-time interface <port_type_list> [ { time-sec <0-255> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: tod-time
! 4: interface
! 5: <port_type_list>
! 6: time-sec
! 7: <0-255>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_time_sec
CMD_VAR = v_0_to_255

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = time-sec : Option
BYWORD =

CODE_BEGIN
    if(misc_phy_icli_cmd_tod_time(session_id, v_port_type_list, has_time_sec, v_0_to_255) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-read <port_type_list> <0-7> <0-0xffff>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-read
! 4: <port_type_list>
! 5: <0-7>
! 6: <0-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_7
CMD_VAR = v_0_0xffff

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = Read 1588 registers
HELP = interface name
HELP = block id \n\t\
       0 - engine 0 ingress\n\t\
       1 - engine 0 egress\n\t\
       2 - engine 1 ingress\n\t\
       3 - engine 1 egress\n\t\
       4 - engine 2 ingress\n\t\
       5 - engine 2 egress\n\t\
       6 - Proc 0\n\t\
       7 - Proc 1
HELP = address of the register

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    misc_icli_deb_phy_ts_mmd_read(session_id, v_port_type_list, v_0_to_7, v_0_0xffff);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-write <port_type_list> <0-7> <0-0xffff> <0-0xffffffff>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-write
! 4: <port_type_list>
! 5: <0-7>
! 6: <0-0xffff>
! 7: <0-0xffffffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_7
CMD_VAR = v_0_0xffff
CMD_VAR = v_0_0xffffffff

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = Write 1588 registers
HELP = interface name
HELP = block-id\n\t\
       0 - engine 0 ingress\n\t\
       1 - engine 0 egress\n\t\
       2 - engine 1 ingress\n\t\
       3 - engine 1 egress\n\t\
       4 - engine 2 ingress\n\t\
       5 - engine 2 egress\n\t\
       6 - Proc 0\n\t\
       7 - Proc 1
HELP = address of the register
HELP = Value to write in register

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    misc_icli_deb_phy_ts_mmd_write(session_id, v_port_type_list, v_0_to_7, v_0_0xffff, v_0_0xffffffff);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api init <port_type_list> <0-3> { ingress | egress } <0-14> <0-7> <0-7> [ strict | non-strict ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: init
! 5: <port_type_list>
! 6: <0-3>
! 7: ingress
! 8: egress
! 9: <0-14>
! 10: <0-7>
! 11: <0-7>
! 12: strict
! 13: non-strict

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_14
CMD_VAR = v_0_to_7
CMD_VAR = v_0_to_7_1
CMD_VAR = has_strict
CMD_VAR = has_non_strict

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = 1588 api configuration
HELP = 1588 engine initialisation
HELP = interface name
HELP = engine id (0 - 3)
HELP =
HELP =
HELP = encapsulation type, Following are the encapsulation types supported\n\
       \t\t0 -> ETH/PTP \n\
       \t\t1 -> ETH/IP/PTP \n\
       \t\t2 -> ETH/IP/IP/PTP \n\
       \t\t3 -> ETH/ETH/PTP \n\
       \t\t4 -> ETH/ETH/IP/PTP \n\
       \t\t5 -> ETH/MPLS/IP/PTP \n\
       \t\t6 -> ETH/MPLS/ETH/PTP \n\
       \t\t7 -> ETH/MPLS/ETH/IP/PTP \n\
       \t\t8 -> ETH/MPLS/ACH/PTP \n\
       \t\t9 -> ETH/OAM \n\
       \t\t10-> ETH/ETH/OAM \n\
       \t\t11-> ETH/MPLS/ETH/OAM\n\
       \t\t12-> ETH/MPLS/ACH/OAM\n\
       \t\t13-> TS ANY PKT\n\
       \t\t14-> ETH/GENERIC
HELP = flow start index
HELP = flow end index
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = strict : Option
BYWORD = non-strict : Option

VARIABLE_BEGIN
BOOL ingress;
u8 flow_match;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    flow_match = has_strict ? VTSS_PHY_TS_ENG_FLOW_MATCH_STRICT : (has_non_strict ? VTSS_PHY_TS_ENG_FLOW_MATCH_ANY : VTSS_PHY_TS_ENG_FLOW_MATCH_ANY);

    misc_icli_deb_phy_ts_engine_init(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_14, v_0_to_7, v_0_to_7_1, flow_match);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api clear <port_type_list> <0-3> { ingress | egress } [ correction-field { ptp-action <0-5> } { ptp-packet <0-3> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: clear
! 5: <port_type_list>
! 6: <0-3>
! 7: ingress
! 8: egress
! 9: correction-field
! 10: ptp-action
! 11: <0-5>
! 12: ptp-packet
! 13: <0-3>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR =
CMD_VAR = has_correction_field
CMD_VAR =
CMD_VAR = v_0_to_5
CMD_VAR =
CMD_VAR = v_0_to_3_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = Clear 1588 engine configuration
HELP = interface name
HELP = 1588 engine id
HELP =
HELP =
HELP = To clear correction field of a PTP packet type
HELP = corresponding action id configured
HELP =
HELP = ptp packet type
HELP = 0 - sync,1 - delay request,2 - peer delay request,3 - peer delay response

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = correction-field : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if(has_correction_field) {
        /* To clear correction field in specified message type args (engine id , is_ingress, action id, ptp msg type)*/
         misc_icli_deb_phy_ts_correction_field_clear(session_id, v_port_type_list, v_0_to_3, has_ingress, v_0_to_5, v_0_to_3_1);
    } else {
        /* To clear enigine configuration */
        misc_icli_deb_phy_ts_engine_clear(session_id, v_port_type_list, v_0_to_3, has_ingress);
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api mode-set <port_type_list> <0-3> { ingress | egress } [ enable | disable ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: mode-set
! 5: <port_type_list>
! 6: <0-3>
! 7: ingress
! 8: egress
! 9: enable
! 10: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR =
CMD_VAR = has_disable

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = Enable 1588 Analayzer configuration for the respective port
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = enable : Option
BYWORD = disable : Option

VARIABLE_BEGIN
BOOL ingress;
BOOL enable;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    enable = has_disable ? FALSE : TRUE;

    misc_icli_deb_phy_ts_engine_mode(session_id, v_port_type_list, v_0_to_3, ingress, enable);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api channel-map <port_type_list> <0-3> { ingress | egress } [ flow <0-7> ] [ channel-mask <0-3> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: channel-map
! 5: <port_type_list>
! 6: <0-3>
! 7: ingress
! 8: egress
! 9: flow
! 10: <0-7>
! 11: channel-mask
! 12: <0-3>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_flow
CMD_VAR = v_0_to_7
CMD_VAR = has_channel_mask
CMD_VAR = v_0_to_3_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = Set Channel mask (0 - 3)
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP =
HELP = flow id
HELP =
HELP = channel mask 1:channel 0, 2:channel 1, 3:both channels

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = flow : Option
BYWORD =
BYWORD = channel-mask : Option
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);

    misc_icli_ts_engine_chan_map(session_id, v_port_type_list, v_0_to_3, ingress, has_flow, v_0_to_7, has_channel_mask, v_0_to_3_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api comm-conf eth1 <port_type_list> <0-3> { ingress | egress } [ pbb-en | pbb-dis ] [ etype <0-0xffff> ] [ tpid <0-0xffff> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: comm-conf
! 5: eth1
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: pbb-en
! 11: pbb-dis
! 12: etype
! 13: <0-0xffff>
! 14: tpid
! 15: <0-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_pbb_en
CMD_VAR = has_pbb_dis
CMD_VAR = has_etype
CMD_VAR = v_0_0xffff
CMD_VAR = has_tpid
CMD_VAR = v_0_0xffff_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = common configuration of Analyzer comparator
HELP = Configure eth1 comparator
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = Ether type
HELP =
HELP = tpid

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = pbb-en : Option
BYWORD = pbb-dis : Option
BYWORD = etype : Option
BYWORD =
BYWORD = tpid : Option
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_pbb;
    BOOL pbb_en;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    has_pbb = has_pbb_en | has_pbb_dis;
    pbb_en = (has_pbb_en)?TRUE : FALSE;

    misc_icli_ts_engine_eth1_comm_conf(session_id, v_port_type_list, v_0_to_3, ingress, has_pbb, pbb_en, has_etype, v_0_0xffff, has_tpid, v_0_0xffff_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api flow-conf eth1 <port_type_list> <0-3> { ingress | egress } <0-7> [ enable | disable ] [ match-full | any-uc | any-mc ] [ address <mac_addr> ] [ match-src | match-dest | match-src-dest ] [ vlan-chk-en | vlan-chk-dis ] [ num-tag <0-2> ] [ tag-rng-none | tag-rng-outer | tag-rng-inner ] [ tag1-type <1-4> ] [ tag2-type <1-4> ] [ tag1-lower <1-4094> ] [ tag1-upper <1-0xffff> ] [ tag2-lower <1-4094> ] [ tag2-upper <1-0xffff> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: flow-conf
! 5: eth1
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-7>
! 11: enable
! 12: disable
! 13: match-full
! 14: any-uc
! 15: any-mc
! 16: address
! 17: <mac_addr>
! 18: match-src
! 19: match-dest
! 20: match-src-dest
! 21: vlan-chk-en
! 22: vlan-chk-dis
! 23: num-tag
! 24: <0-2>
! 25: tag-rng-none
! 26: tag-rng-outer
! 27: tag-rng-inner
! 28: tag1-type
! 29: <1-4>
! 30: tag2-type
! 31: <1-4>
! 32: tag1-lower
! 33: <1-4094>
! 34: tag1-upper
! 35: <1-0xffff>
! 36: tag2-lower
! 37: <1-4094>
! 38: tag2-upper
! 39: <1-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = has_match_full
CMD_VAR = has_any_uc
CMD_VAR = has_any_mc
CMD_VAR = has_address
CMD_VAR = v_mac_addr
CMD_VAR = has_match_src
CMD_VAR = has_match_dest
CMD_VAR = has_match_src_dest
CMD_VAR = has_vlan_chk_en
CMD_VAR = has_vlan_chk_dis
CMD_VAR = has_num_tag
CMD_VAR = v_0_to_2
CMD_VAR = has_tag_rng_none
CMD_VAR = has_tag_rng_outer
CMD_VAR = has_tag_rng_inner
CMD_VAR = has_tag1_type
CMD_VAR = v_1_to_4
CMD_VAR = has_tag2_type
CMD_VAR = v_1_to_4_1
CMD_VAR = has_tag1_lower
CMD_VAR = v_1_to_4094
CMD_VAR = has_tag1_upper
CMD_VAR = v_1_0xffff
CMD_VAR = has_tag2_lower
CMD_VAR = v_1_to_4094_1
CMD_VAR = has_tag2_upper
CMD_VAR = v_1_0xffff_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = Configure a flow in the comparator
HELP = Configure for eth1 comparator flows
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = flow id
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = Number of vlan tags in the header
HELP = number of tags
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = match-full : Option
BYWORD = any-uc : Option
BYWORD = any-mc : Option
BYWORD = address : Option
BYWORD =
BYWORD = match-src : Option
BYWORD = match-dest : Option
BYWORD = match-src-dest : Option
BYWORD = vlan-chk-en : Option
BYWORD = vlan-chk-dis : Option
BYWORD = num-tag : Option
BYWORD =
BYWORD = tag-rng-none : Option
BYWORD = tag-rng-outer : Option
BYWORD = tag-rng-inner : Option
BYWORD = tag1-type : Option
BYWORD =
BYWORD = tag2-type : Option
BYWORD =
BYWORD = tag1-lower : Option
BYWORD =
BYWORD = tag1-upper : Option
BYWORD =
BYWORD = tag2-lower : Option
BYWORD =
BYWORD = tag2-upper : Option
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_mac_match_mode;
    u8 mac_match_mode;
    BOOL has_match_addr_types;
    u8 src_dest_match;
    BOOL has_vlan_chk;
    BOOL vlan_chk;
    BOOL has_tag_rng;
    u8 tag_rng;
    BOOL enable;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    enable = has_disable? FALSE : TRUE;
    has_mac_match_mode = (has_match_full | has_any_uc | has_any_mc);
    mac_match_mode = has_match_full ? VTSS_PHY_TS_ETH_ADDR_MATCH_48BIT :
                     (has_any_uc ? VTSS_PHY_TS_ETH_ADDR_MATCH_ANY_UNICAST :
                     VTSS_PHY_TS_ETH_ADDR_MATCH_ANY_MULTICAST);
    has_match_addr_types = (has_match_src | has_match_dest | has_match_src_dest);
    src_dest_match = has_match_src ? 0 : (has_match_dest ? 1 : 2);
    has_vlan_chk = has_vlan_chk_en | has_vlan_chk_dis;
    vlan_chk = has_vlan_chk_en ? TRUE : FALSE;
    has_tag_rng = (has_tag_rng_none | has_tag_rng_outer | has_tag_rng_inner);
    tag_rng = (has_tag_rng_none ? VTSS_PHY_TS_TAG_RANGE_NONE :
              (has_tag_rng_outer ? VTSS_PHY_TS_TAG_RANGE_OUTER :
               VTSS_PHY_TS_TAG_RANGE_INNER));

    misc_icli_deb_phy_ts_engine_eth1_flow_conf(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_7, enable, has_mac_match_mode, mac_match_mode, has_address, v_mac_addr, has_match_addr_types, src_dest_match, has_vlan_chk, vlan_chk, has_tag_rng, tag_rng, has_num_tag, v_0_to_2, has_tag1_type, v_1_to_4, has_tag2_type, v_1_to_4_1, has_tag1_lower, v_1_to_4094, has_tag1_upper, v_1_0xffff, has_tag2_lower, v_1_to_4094_1, has_tag2_upper, v_1_0xffff_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api comm-conf eth2 <port_type_list> <0-3> { ingress | egress } [ etype <0-0xffff> ] [ tpid <0-0xffff> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: comm-conf
! 5: eth2
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: etype
! 11: <0-0xffff>
! 12: tpid
! 13: <0-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_etype
CMD_VAR = v_0_0xffff
CMD_VAR = has_tpid
CMD_VAR = v_0_0xffff_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure eth2 comparator
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = Ether type filled in ethernet header
HELP =
HELP = tpid
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = etype : Option
BYWORD =
BYWORD = tpid : Option
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);

    misc_icli_ts_engine_eth2_comm_conf(session_id, v_port_type_list, v_0_to_3, ingress, has_etype, v_0_0xffff, has_tpid, v_0_0xffff_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api flow-conf eth2 <port_type_list> <0-3> { ingress | egress } <0-7> [ enable | disable ] [ match-full | any-uc | any-mc ] [ address <mac_addr> ] [ match-src | match-dest | match-src-dest ] [ vlan-chk-en | vlan-chk-dis ] [ num-tag <0-2> ] [ tag-rng-none | tag-rng-outer | tag-rng-inner ] [ tag1-type <1-4> ] [ tag2-type <1-4> ] [ tag1-lower <1-4094> ] [ tag1-upper <1-0xffff> ] [ tag2-lower <1-4094> ] [ tag2-upper <1-0xffff> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: flow-conf
! 5: eth2
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-7>
! 11: enable
! 12: disable
! 13: match-full
! 14: any-uc
! 15: any-mc
! 16: address
! 17: <mac_addr>
! 18: match-src
! 19: match-dest
! 20: match-src-dest
! 21: vlan-chk-en
! 22: vlan-chk-dis
! 23: num-tag
! 24: <0-2>
! 25: tag-rng-none
! 26: tag-rng-outer
! 27: tag-rng-inner
! 28: tag1-type
! 29: <1-4>
! 30: tag2-type
! 31: <1-4>
! 32: tag1-lower
! 33: <1-4094>
! 34: tag1-upper
! 35: <1-0xffff>
! 36: tag2-lower
! 37: <1-4094>
! 38: tag2-upper
! 39: <1-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = has_match_full
CMD_VAR = has_any_uc
CMD_VAR = has_any_mc
CMD_VAR = has_address
CMD_VAR = v_mac_addr
CMD_VAR = has_match_src
CMD_VAR = has_match_dest
CMD_VAR = has_match_src_dest
CMD_VAR = has_vlan_chk_en
CMD_VAR = has_vlan_chk_dis
CMD_VAR = has_num_tag
CMD_VAR = v_0_to_2
CMD_VAR = has_tag_rng_none
CMD_VAR = has_tag_rng_outer
CMD_VAR = has_tag_rng_inner
CMD_VAR = has_tag1_type
CMD_VAR = v_1_to_4
CMD_VAR = has_tag2_type
CMD_VAR = v_1_to_4_1
CMD_VAR = has_tag1_lower
CMD_VAR = v_1_to_4094
CMD_VAR = has_tag1_upper
CMD_VAR = v_1_0xffff
CMD_VAR = has_tag2_lower
CMD_VAR = v_1_to_4094_1
CMD_VAR = has_tag2_upper
CMD_VAR = v_1_0xffff_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure for eth2 comparator flows
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = flow id
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP = Number of vlan tags in the header
HELP = number of tags
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = match-full : Option
BYWORD = any-uc : Option
BYWORD = any-mc : Option
BYWORD = address : Option
BYWORD =
BYWORD = match-src : Option
BYWORD = match-dest : Option
BYWORD = match-src-dest : Option
BYWORD = vlan-chk-en : Option
BYWORD = vlan-chk-dis : Option
BYWORD = num-tag : Option
BYWORD =
BYWORD = tag-rng-none : Option
BYWORD = tag-rng-outer : Option
BYWORD = tag-rng-inner : Option
BYWORD = tag1-type : Option
BYWORD =
BYWORD = tag2-type : Option
BYWORD =
BYWORD = tag1-lower : Option
BYWORD =
BYWORD = tag1-upper : Option
BYWORD =
BYWORD = tag2-lower : Option
BYWORD =
BYWORD = tag2-upper : Option
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_mac_match_mode;
    u8 mac_match_mode;
    BOOL has_match_addr_types;
    u8 src_dest_match;
    BOOL has_vlan_chk;
    BOOL vlan_chk;
    BOOL has_tag_rng;
    u8 tag_rng;
    BOOL enable;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    enable = has_disable ? FALSE : TRUE;
    has_mac_match_mode = (has_match_full | has_any_uc | has_any_mc);
    mac_match_mode = has_match_full ? VTSS_PHY_TS_ETH_ADDR_MATCH_48BIT :
                     (has_any_uc ? VTSS_PHY_TS_ETH_ADDR_MATCH_ANY_UNICAST :
                     VTSS_PHY_TS_ETH_ADDR_MATCH_ANY_MULTICAST);
    has_match_addr_types = (has_match_src | has_match_dest | has_match_src_dest);
    src_dest_match = has_match_src ? 0 : (has_match_dest ? 1 : 2);
    has_vlan_chk = has_vlan_chk_en | has_vlan_chk_dis;
    vlan_chk = has_vlan_chk_en ? TRUE : FALSE;
    has_tag_rng = (has_tag_rng_none | has_tag_rng_outer | has_tag_rng_inner);
    tag_rng = (has_tag_rng_none ? VTSS_PHY_TS_TAG_RANGE_NONE :
              (has_tag_rng_outer ? VTSS_PHY_TS_TAG_RANGE_OUTER :
              VTSS_PHY_TS_TAG_RANGE_INNER));

    misc_icli_deb_phy_ts_engine_eth2_flow_conf(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_7, enable, has_mac_match_mode, mac_match_mode, has_address, v_mac_addr, has_match_addr_types, src_dest_match, has_vlan_chk, vlan_chk, has_tag_rng, tag_rng, has_num_tag, v_0_to_2, has_tag1_type, v_1_to_4, has_tag2_type, v_1_to_4_1, has_tag1_lower, v_1_to_4094, has_tag1_upper, v_1_0xffff, has_tag2_lower, v_1_to_4094_1, has_tag2_upper, v_1_0xffff_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api action add <port_type_list> <0-3> { ingress | egress } <0-5> <0-3> [ { ptp <0-4> <0-1> <0-255> <0-255> [DelayReqTs] } | { y1731-oam <0-1> <0-255> <0-255> } | { ietf-oam <0-1> <0-7> } | { generic <0-5> <0-0xffffffff> <0-0xffffffff> <0-0xffffffff> <0-0xffffffff> <0-1> <0-0xff> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: action
! 5: add
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-5>
! 11: <0-3>
! 12: ptp
! 13: <0-4>
! 14: <0-1>
! 15: <0-255>
! 16: <0-255>
! 17: delay_req_ts
! 18: y1731-oam
! 19: <0-1>
! 20: <0-255>
! 21: <0-255>
! 22: ietf-oam
! 23: <0-1>
! 24: <0-7>
! 25: generic
! 26: <0-5>
! 27: <0-0xffffffff>
! 28: <0-0xffffffff>
! 29: <0-0xffffffff>
! 30: <0-0xffffffff>
! 31: <0-1>
! 32: <0-0xff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_5
CMD_VAR = v_0_to_3_1
CMD_VAR = has_ptp
CMD_VAR = v_0_to_4
CMD_VAR = v_0_to_1
CMD_VAR = v_0_to_255
CMD_VAR = v_0_to_255_1
CMD_VAR = has_delay_req_ts
CMD_VAR = has_y1731_oam
CMD_VAR = v_0_to_1_1
CMD_VAR = v_0_to_255_2
CMD_VAR = v_0_to_255_3
CMD_VAR = has_ietf_oam
CMD_VAR = v_0_to_1_2
CMD_VAR = v_0_to_7
CMD_VAR = has_generic
CMD_VAR = v_0_to_5_1
CMD_VAR = v_0_0xffffffff
CMD_VAR = v_0_0xffffffff_1
CMD_VAR = v_0_0xffffffff_2
CMD_VAR = v_0_0xffffffff_3
CMD_VAR = v_0_to_1_3
CMD_VAR = v_0_0xff

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = action configuration
HELP = add action
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = action id
HELP = Channel mask
HELP = Configure ptp action
HELP = Clock mode \n\
       0 -> BC One Step\n\
       1 -> BC Two Step\n\
       2 -> TC one Step\n\
       3 -> TC Two Step\n\
       4 -> Delay compensation
HELP = Delay method\n\t\
       0 -> Peer to Peer\n\t\
       1 -> End to End
HELP = domain lower value
HELP = domain upper value
HELP = delay request recieve timestamp
HELP = Configure y1731-oam action
HELP = y1731 oam delay \n\t\
       0 -> One-way Delay Measurement Method(1DM)\n\t\
       1 -> Two-way Delay Measurement Method(DMM)
HELP = MEG - Maintenance entity group\n\t\
       lower value of meg range
HELP = MEG - Maintenance entity group\n\t\
       upper value of meg range
HELP = Configure ietf-oam action
HELP = delay method \n\t\
       0 -> Delay Measurement Method(DM)\n\t\
       1 -> Loss and Delay Measurement(LDM)
HELP = Traffic Class : DSCP Field in the Header
HELP = Configure generic action
HELP = flow id
HELP = data upper to be matched
HELP = data lower to be matched
HELP = mask upper
HELP = mask lower
HELP = timestamp type\n 0 - 4 byte timestamp\n 1 - 10 byte timestamp
HELP = timestamp offset with respect to ptp comparator match

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD =
BYWORD = ptp : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = y1731-oam : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = ietf-oam : Option
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    u8 delaym = 0;
    u8 domain_lower = 0;
    u8 domain_upper = 0;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    if (has_ptp) {
        delaym = v_0_to_1;
        domain_lower = v_0_to_255;
        domain_upper = v_0_to_255_1;
    } else if (has_y1731_oam) {
        delaym = v_0_to_1_1;
        domain_lower = v_0_to_255_2;
        domain_upper = v_0_to_255_3;
    } else if (has_ietf_oam) {
        delaym = v_0_to_1_2;
    }

    misc_icli_ts_engine_add_action(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_5, v_0_to_3_1, has_ptp, v_0_to_4, delaym, domain_lower, domain_upper, has_delay_req_ts, has_y1731_oam, has_ietf_oam, v_0_to_7, has_generic, v_0_to_5_1, v_0_0xffffffff, v_0_0xffffffff_1, v_0_0xffffffff_2, v_0_0xffffffff_3, v_0_to_1_3, v_0_0xff);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api action del <port_type_list> <0-3> { ingress | egress } <0-5>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: action
! 5: del
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-5>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_5

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Delete 1588 action
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = action id

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);

    misc_icli_deb_phy_ts_engine_action_del(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_5);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api comm-conf ip1 <port_type_list> <0-3> { ingress | egress } [ ipv4 | ipv6 ] <1-0xffff> <0-0xffff> <1-0xffff> <0-0xffff>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: comm-conf
! 5: ip1
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: ipv4
! 11: ipv6
! 12: <1-0xffff>
! 13: <0-0xffff>
! 14: <1-0xffff>
! 15: <0-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_ipv4
CMD_VAR = has_ipv6
CMD_VAR = v_1_0xffff
CMD_VAR = v_0_0xffff
CMD_VAR = v_1_0xffff_1
CMD_VAR = v_0_0xffff_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure ip1 comparator
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = Configure for ipv4 packet match
HELP = Configure for ipv6 packet match
HELP = source port value
HELP = source port value mask
HELP = destination port value
HELP = destination port value mask

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = ipv4 : Option
BYWORD = ipv6 : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_ipmode;
    u8 ip_mode;
VARIABLE_END

CODE_BEGIN
    ingress = (has_ingress)? TRUE : ((has_egress)?FALSE : TRUE);
    has_ipmode = (has_ipv4 | has_ipv6);
    ip_mode = has_ipv6 ? VTSS_PHY_TS_IP_VER_6 : VTSS_PHY_TS_IP_VER_4;

    misc_icli_deb_phy_ts_engine_ip1_comm_conf(session_id, v_port_type_list, v_0_to_3, ingress, has_ipmode, ip_mode, v_1_0xffff, v_0_0xffff, v_1_0xffff_1, v_0_0xffff_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api flow-conf ip1 <port_type_list> <0-3> { ingress | egress } <0-7> [ enable | disable ] [ match-src | match-dest | match-src-dest ] [ { ipv4 <ipv4_addr> <ipv4_netmask> } | { ipv6 <ipv6_addr> <ipv6_netmask> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: flow-conf
! 5: ip1
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-7>
! 11: enable
! 12: disable
! 13: match-src
! 14: match-dest
! 15: match-src-dest
! 16: ipv4
! 17: <ipv4_addr>
! 18: <ipv4_netmask>
! 19: ipv6
! 20: <ipv6_addr>
! 21: <ipv6_netmask>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = has_match_src
CMD_VAR = has_match_dest
CMD_VAR = has_match_src_dest
CMD_VAR = has_ipv4
CMD_VAR = v_ipv4_addr
CMD_VAR = v_ipv4_netmask
CMD_VAR = has_ipv6
CMD_VAR = v_ipv6_addr
CMD_VAR = v_ipv6_netmask

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure for ip1 comparator flows
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = flow id
HELP =
HELP =
HELP = match source address
HELP = match destination address
HELP = match both source and destination addresses
HELP = ipv4 match
HELP = ipv4 address
HELP = ipv4 mask
HELP = ipv6 match
HELP = ipv6 address
HELP = ipv6 mask

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = match-src : Option
BYWORD = match-dest : Option
BYWORD = match-src-dest : Option
BYWORD = ipv4 : Option
BYWORD =
BYWORD =
BYWORD = ipv6 : Option
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_match_addr_types;
    u8 src_dest_match;
    BOOL enable;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    enable = has_disable? FALSE : TRUE;
    has_match_addr_types = has_match_src | has_match_dest | has_match_src_dest;
    src_dest_match = has_match_dest ? VTSS_PHY_TS_IP_MATCH_DEST :
                     (has_match_src_dest ? VTSS_PHY_TS_IP_MATCH_SRC_OR_DEST :
                     VTSS_PHY_TS_IP_MATCH_SRC);

    misc_icli_deb_phy_ts_ip1_flow_conf(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_7, enable, has_match_addr_types, src_dest_match, has_ipv4, v_ipv4_addr, v_ipv4_netmask, has_ipv6, v_ipv6_addr, v_ipv6_netmask);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api comm-conf ip2 <port_type_list> <0-3> { ingress | egress } [ ipv4 | ipv6 ] <1-0xffff> <0-0xffff> <1-0xffff> <0-0xffff>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: comm-conf
! 5: ip2
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: ipv4
! 11: ipv6
! 12: <1-0xffff>
! 13: <0-0xffff>
! 14: <1-0xffff>
! 15: <0-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_ipv4
CMD_VAR = has_ipv6
CMD_VAR = v_1_0xffff
CMD_VAR = v_0_0xffff
CMD_VAR = v_1_0xffff_1
CMD_VAR = v_0_0xffff_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure ip2 comparator
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = ipv4 match
HELP = ipv6 match
HELP = source port value
HELP = source port value mask
HELP = destination port value
HELP = destination port value mask

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = ipv4 : Option
BYWORD = ipv6 : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_ipmode;
    u8 ip_mode;
VARIABLE_END

CODE_BEGIN
    ingress = (has_ingress)? TRUE : (has_egress?FALSE : TRUE);
    has_ipmode = (has_ipv4 | has_ipv6);
    ip_mode = has_ipv6 ? VTSS_PHY_TS_IP_VER_6 : VTSS_PHY_TS_IP_VER_4;

    misc_icli_deb_phy_ts_engine_ip2_comm_conf(session_id, v_port_type_list, v_0_to_3, ingress, has_ipmode, ip_mode, v_1_0xffff, v_0_0xffff, v_1_0xffff_1, v_0_0xffff_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api flow-conf ip2 <port_type_list> <0-3> { ingress | egress } <0-7> [ enable | disable ] [ match-src | match-dest | match-src-dest ] [ { ipv4 <ipv4_addr> <ipv4_netmask> } | { ipv6 <ipv6_addr> <ipv6_netmask> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: flow-conf
! 5: ip2
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-7>
! 11: enable
! 12: disable
! 13: match-src
! 14: match-dest
! 15: match-src-dest
! 16: ipv4
! 17: <ipv4_addr>
! 18: <ipv4_netmask>
! 19: ipv6
! 20: <ipv6_addr>
! 21: <ipv6_netmask>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = has_match_src
CMD_VAR = has_match_dest
CMD_VAR = has_match_src_dest
CMD_VAR = has_ipv4
CMD_VAR = v_ipv4_addr
CMD_VAR = v_ipv4_netmask
CMD_VAR = has_ipv6
CMD_VAR = v_ipv6_addr
CMD_VAR = v_ipv6_netmask

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure for ip2 comparator flows
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = flow id
HELP =
HELP =
HELP = match source address
HELP = match destination address
HELP = match both source and destination addresses
HELP = ipv4 match
HELP = ipv4 address
HELP = ipv4 mask
HELP = ipv6 match
HELP = ipv6 address
HELP = ipv6 mask

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = match-src : Option
BYWORD = match-dest : Option
BYWORD = match-src-dest : Option
BYWORD = ipv4 : Option
BYWORD =
BYWORD =
BYWORD = ipv6 : Option
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_match_addr_types;
    u8 src_dest_match;
    BOOL enable;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress? TRUE : ((has_egress)? FALSE : TRUE);
    enable = has_disable ? FALSE : TRUE;
    has_match_addr_types = has_match_src | has_match_dest | has_match_src_dest;
    src_dest_match = has_match_dest ? VTSS_PHY_TS_IP_MATCH_DEST :
                     (has_match_src_dest ? VTSS_PHY_TS_IP_MATCH_SRC_OR_DEST :
                     VTSS_PHY_TS_IP_MATCH_SRC);

    misc_icli_deb_phy_ts_ip2_flow_conf(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_7, enable, has_match_addr_types, src_dest_match, has_ipv4, v_ipv4_addr, v_ipv4_netmask, has_ipv6, v_ipv6_addr, v_ipv6_netmask);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api comm-conf mpls <port_type_list> <0-3> { ingress | egress } [ cw-en ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: comm-conf
! 5: mpls
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: cw-en

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_cw_en

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure for mpls comparator
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = Enable control word configuration in mpls packet

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = cw-en : Option

VARIABLE_BEGIN
    BOOL ingress;
    BOOL cw_en;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress && ~has_egress;
    cw_en = has_cw_en ? TRUE : FALSE;

    misc_icli_deb_phy_ts_mpls_comm_conf(session_id, v_port_type_list, v_0_to_3, ingress, cw_en);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api flow-conf mpls <port_type_list> <0-3> { ingress | egress } <0-7> [ enable | disable ] <1-4> [ stk-ref-top | stk-ref-bottom ] [ stk-lvl-0 <0~0xfffff> ] [ stk-lvl-1 <0~0xfffff> ] [ stk-lvl-2 <0~0xfffff> ] [ stk-lvl-3 <0~0xfffff> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: flow-conf
! 5: mpls
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-7>
! 11: enable
! 12: disable
! 13: <1-4>
! 14: stk-ref-top
! 15: stk-ref-bottom
! 16: stk-lvl-0
! 17: <0~0xfffff>
! 18: stk-lvl-1
! 19: <0~0xfffff>
! 20: stk-lvl-2
! 21: <0~0xfffff>
! 22: stk-lvl-3
! 23: <0~0xfffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = v_1_to_4
CMD_VAR = has_stk_ref_top
CMD_VAR = has_stk_ref_bottom
CMD_VAR = has_stk_lvl_0
CMD_VAR = v_0_0xfffff
CMD_VAR = has_stk_lvl_1
CMD_VAR = v_0_0xfffff_1
CMD_VAR = has_stk_lvl_2
CMD_VAR = v_0_0xfffff_2
CMD_VAR = has_stk_lvl_3
CMD_VAR = v_0_0xfffff_3

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure for mpls flows
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = flow id
HELP =
HELP =
HELP = stack depth (1-4)
HELP = Search from top of the stack
HELP = Search from bottom of the stack
HELP =
HELP = Stack level 0
HELP =
HELP = Stack level 1
HELP =
HELP = Stack level 2
HELP =
HELP = Stack level 3

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD =
BYWORD = stk-ref-top : Option
BYWORD = stk-ref-bottom : Option
BYWORD = stk-lvl-0 : Option
BYWORD =
BYWORD = stk-lvl-1 : Option
BYWORD =
BYWORD = stk-lvl-2 : Option
BYWORD =
BYWORD = stk-lvl-3 : Option
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL has_stk_ref;
    u8 stk_ref_point;
    BOOL enable;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress && ~has_egress;
    enable = has_disable ? FALSE : TRUE;
    has_stk_ref = has_stk_ref_top | has_stk_ref_bottom;
    stk_ref_point = has_stk_ref_bottom ? VTSS_PHY_TS_MPLS_STACK_REF_POINT_END :
                    VTSS_PHY_TS_MPLS_STACK_REF_POINT_TOP;

    misc_icli_deb_phy_ts_engine_mpls_flow_conf(session_id, v_port_type_list, v_0_to_3, ingress, v_0_to_7, enable, v_1_to_4, has_stk_ref, stk_ref_point, has_stk_lvl_0, v_0_0xfffff, has_stk_lvl_1, v_0_0xfffff_1, has_stk_lvl_2, v_0_0xfffff_2, has_stk_lvl_3, v_0_0xfffff_3);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api comm-conf ach <port_type_list> <0-3> { ingress | egress } <0-0xff> <0-0xffff> <0-0xffff>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: comm-conf
! 5: ach
! 6: <port_type_list>
! 7: <0-3>
! 8: ingress
! 9: egress
! 10: <0-0xff>
! 11: <0-0xffff>
! 12: <0-0xffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_0xff
CMD_VAR = v_0_0xffff
CMD_VAR = v_0_0xffff_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure ACH comparator
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = ACH version
HELP = channel type
HELP = protocol id

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress && ~has_egress;

    misc_icli_deb_phy_ts_engine_ach_comm_conf(session_id, v_port_type_list, v_0_to_3, ingress, v_0_0xff, v_0_0xffff, v_0_0xffff_1);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api comm-conf gen-ts <port_type_list> <0-1> { ingress | egress } next-proto-offset <0-0xff> flow-offset <0-31>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: comm-conf
! 5: gen-ts
! 6: <port_type_list>
! 7: <0-1>
! 8: ingress
! 9: egress
! 10: next-proto-offset
! 11: <0-0xff>
! 12: flow-offset
! 13: <0-31>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_1
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR =
CMD_VAR = v_0_0xff
CMD_VAR =
CMD_VAR = v_0_to_31

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure for Generic timestamp encapsulation
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = next protocol offset to be configured in ip1 comparator
HELP = next protocol offset
HELP = offset of flow to be matched in ip1 comparator
HELP = flow offset in the current comparator

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress && ~has_egress;

    misc_icli_deb_phy_ts_engine_generic_comm_conf(session_id, v_port_type_list, v_0_to_1, ingress, v_0_0xff, v_0_to_31);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api flow-conf gen-ts <port_type_list> <0-1> { ingress | egress } <0-7> [ enable | disable ] [ dupper <0-0xffffffff> mask <0-0xffffffff> ] [ dupper-mid <0-0xffffffff> mask <0-0xffffffff> ] [ dlower-mid <0-0xffffffff> mask <0-0xffffffff> ] [ dlower <0-0xffffffff> mask <0-0xffffffff> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: flow-conf
! 5: gen-ts
! 6: <port_type_list>
! 7: <0-1>
! 8: ingress
! 9: egress
! 10: <0-7>
! 11: enable
! 12: disable
! 13: dupper
! 14: <0-0xffffffff>
! 15: mask
! 16: <0-0xffffffff>
! 17: dupper-mid
! 18: <0-0xffffffff>
! 19: mask
! 20: <0-0xffffffff>
! 21: dlower-mid
! 22: <0-0xffffffff>
! 23: mask
! 24: <0-0xffffffff>
! 25: dlower
! 26: <0-0xffffffff>
! 27: mask
! 28: <0-0xffffffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = v_0_to_1
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = v_0_to_7
CMD_VAR =
CMD_VAR = has_disable
CMD_VAR = has_dupper
CMD_VAR = v_0_0xffffffff
CMD_VAR =
CMD_VAR = v_0_0xffffffff_1
CMD_VAR = has_dupper_mid
CMD_VAR = v_0_0xffffffff_2
CMD_VAR =
CMD_VAR = v_0_0xffffffff_3
CMD_VAR = has_dlower_mid
CMD_VAR = v_0_0xffffffff_4
CMD_VAR =
CMD_VAR = v_0_0xffffffff_5
CMD_VAR = has_dlower
CMD_VAR = v_0_0xffffffff_6
CMD_VAR =
CMD_VAR = v_0_0xffffffff_7

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = Configure for generic encapsulation in ip1 comparator
HELP = interface name
HELP = engine id
HELP =
HELP =
HELP = flow id
HELP =
HELP =
HELP = data for upper register in ip1 flow
HELP =
HELP = mask for data upper register in ip1 flow
HELP =
HELP = data for upper mid in ip1 flow
HELP =
HELP = mask for upper mid data register in ip1 flow
HELP =
HELP = data for lower mid register in ip1 flow
HELP =
HELP = mask for lower mid data register in ip1 flow
HELP =
HELP = data for lowermost matching register in ip1 flow
HELP =
HELP = mask for lowermost data register in ip1 flow
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD =
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = dupper : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = dupper-mid : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = dlower-mid : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD = dlower : Option
BYWORD =
BYWORD =
BYWORD =

VARIABLE_BEGIN
    BOOL ingress;
    BOOL enable;
VARIABLE_END

CODE_BEGIN
    ingress = has_ingress && ~has_egress;
    enable = has_disable ? FALSE : TRUE;
    if (!has_dupper) {
        v_0_0xffffffff = 0;
        v_0_0xffffffff_1 = 0;
    }
    if (!has_dupper_mid) {
        v_0_0xffffffff_2 = 0;
        v_0_0xffffffff_3 = 0;
    }
    if (!has_dlower_mid) {
        v_0_0xffffffff_4 = 0;
        v_0_0xffffffff_5 = 0;
    }
    if (!has_dlower) {
        v_0_0xffffffff_6 = 0;
        v_0_0xffffffff_7 = 0;
    }

    misc_icli_deb_phy_ts_generic_flow_conf(session_id, v_port_type_list, v_0_to_1, ingress, v_0_to_7, enable, v_0_0xffffffff, v_0_0xffffffff_1, v_0_0xffffffff_2, v_0_0xffffffff_3, v_0_0xffffffff_4, v_0_0xffffffff_5, v_0_0xffffffff_6, v_0_0xffffffff_7);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api statistics <port_type_list> [ time <0-60> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: statistics
! 5: <port_type_list>
! 6: time
! 7: <0-60>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_time
CMD_VAR = v_0_to_60

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP = interface name
HELP = Number of seconds to collect statistics
HELP = time in seconds. Max allowed is 60.

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = time : Option
BYWORD =

CODE_BEGIN
    if (!has_time) {
        v_0_to_60 = 0;
    }
    misc_icli_deb_phy_ts_statistics(session_id, v_port_type_list, v_0_to_60);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api signature interface <port_type_list> [ sig-mask <0-0x7f> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: signature
! 5: interface
! 6: <port_type_list>
! 7: sig-mask
! 8: <0-0xff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_sig_mask
CMD_VAR = v_0_0x7f

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = 1588 Signature to be used for matching frames
HELP =
HELP =
HELP = Signature mask
HELP = 0x1-Source IP\n0x2-Destination IP\n0x4-message type\n0x8-Domain number\
       0x10-Source port id\n0x20-PTP frame Sequence ID\n0x40-Destination MAC address

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = sig-mask : Option
BYWORD =

CODE_BEGIN
    misc_icli_deb_phy_ts_signature(session_id, v_port_type_list, has_sig_mask, v_0_0x7f);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy ts-api block init <port_type_list> [ clk-freq <0-4> ] [ clk-src <0-5> ] [ rx-ts-pos <0-1> ] [ tx-fifo-mode <0-1> ] [ tx-fifo-spi-conf ] [  tx-fifo-hi-clk-cycs <uint8> ] [ tx-fifo-lo-clk-cycs <uint8> ] [ modify-frm <0-1> ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: phy
! 3: ts-api
! 4: block
! 5: init
! 6: <port_type_list>
! 7: clk-freq
! 8: <0-4>
! 9: clk-src
! 10: <0-5>
! 11: rx-ts-pos
! 12: <0-1>
! 13: tx-fifo-mode
! 14: <0-1>
! 15: tx-fifo-spi-conf
! 16: tx-fifo-hi-clk-cycs
! 17: <uint8>
! 18: tx-fifo-lo-clk-cycs
! 19: <uint8>
! 20: modify-frm
! 21: <0-1>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_clk_freq
CMD_VAR = v_0_to_4
CMD_VAR = has_clk_src
CMD_VAR = v_0_to_5
CMD_VAR = has_rx_ts_pos
CMD_VAR = v_0_to_1
CMD_VAR = has_tx_fifo_mode
CMD_VAR = v_0_to_1_1
CMD_VAR = has_tx_fifo_spi_conf
CMD_VAR = has_tx_fifo_hi_clk_cycs
CMD_VAR = v_uint8
CMD_VAR = has_tx_fifo_lo_clk_cycs
CMD_VAR = v_uint8_1
CMD_VAR = has_modify_frm
CMD_VAR = v_0_to_1_2

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP = Initialize the entire 1588 block
HELP =
HELP = interface name
HELP = Clock frequency
HELP = 0 -> 125 MHz\n 1 -> 156.25 MHz\n 2 -> 200 MHz\n 3 -> 250 MHz\n 4 -> 500 MHz\n
HELP = Clock source
HELP = 0 -> External source\n 1 -> 10G: XAUI lane 0 recovered clock. 1G: MAC RX clock\n\
       2 -> 10G: XAUI lane 0 recovered clock, 1G: MAC TX clock\n3 -> Received line clock\n\
       4 -> Transmitted line clock\n 5 -> 10G: Invalid, 1G: Internal 250 MHz Clock
HELP = Rx Timestamp position
HELP = 0 - Timestamp in PTP header\t 1 - Timestamp at the end
HELP = Tx Fifo mode interface for reading timestamps
HELP = 0 - Normal CPU interface\t 1 - SPI interface
HELP = modify frames from same phy
HELP = Set to 1 if frames modified in ingress from same PHY need to be modified in egress
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = clk-freq : Option
BYWORD =
BYWORD = clk-src : Option
BYWORD =
BYWORD = rx-ts-pos : Option
BYWORD =
BYWORD = tx-fifo-mode : Option
BYWORD =
BYWORD = tx-fifo-spi-conf : option
BYWORD = tx-fifo-hi-clk-cycs : option
BYWORD =
BYWORD = tx-fifo-lo-clk-cycs : option
BYWORD =
BYWORD = modify-frm : Option
BYWORD =

CODE_BEGIN
    misc_icli_deb_phy_ts_block_init(session_id, v_port_type_list, has_clk_freq, v_0_to_4, has_clk_src, v_0_to_5, has_rx_ts_pos, v_0_to_1, has_tx_fifo_mode, v_0_to_1_1, has_tx_fifo_spi_conf,  has_tx_fifo_hi_clk_cycs, v_uint8, has_tx_fifo_lo_clk_cycs, v_uint8_1, has_modify_frm, v_0_to_1_2);

CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug show phy ts-api interface <port_type_list> engine <0-3> { ingress | egress } { eng-init | comm-conf flow <0-7> { eth1 | eth2 | ip1 | ip2 | mpls | ach | gen-ts } | flow-conf flow <0-7> { eth1 | eth2 | ip1 | ip2 | mpls | gen-ts } | action { ptp | oam | generic } }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_phy_ts_present

! 1: debug
! 2: show
! 3: phy
! 4: ts-api
! 5: interface
! 6: <port_type_list>
! 7: engine
! 8: <0-3>
! 9: ingress
! 10: egress
! 11: eng-init
! 12: comm-conf
! 13: flow
! 14: <0-7>
! 15: eth1
! 16: eth2
! 17: ip1
! 18: ip2
! 19: mpls
! 20: ach
! 21: gen-ts
! 22: flow-conf
! 23: flow
! 24: <0-7>
! 25: eth1
! 26: eth2
! 27: ip1
! 28: ip2
! 29: mpls
! 30: gen-ts
! 31: action
! 32: ptp
! 33: oam
! 34: generic

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR =
CMD_VAR = v_0_to_3
CMD_VAR = has_ingress
CMD_VAR = has_egress
CMD_VAR = has_eng_init
CMD_VAR = has_comm_conf
CMD_VAR =
CMD_VAR = v_0_to_7
CMD_VAR = has_eth1
CMD_VAR = has_eth2
CMD_VAR = has_ip1
CMD_VAR = has_ip2
CMD_VAR = has_mpls
CMD_VAR = has_ach
CMD_VAR = has_gen_ts
CMD_VAR = has_flow_conf
CMD_VAR =
CMD_VAR = v_0_to_7_1
CMD_VAR = has_eth1_1
CMD_VAR = has_eth2_1
CMD_VAR = has_ip1_1
CMD_VAR = has_ip2_1
CMD_VAR = has_mpls_1
CMD_VAR = has_gen_ts_1
CMD_VAR = has_action
CMD_VAR = has_ptp
CMD_VAR = has_oam
CMD_VAR = has_generic

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP = Show phy configuration
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = ingress : Option
BYWORD = egress : Option
BYWORD = eng-init : Option
BYWORD = comm-conf : Option
BYWORD =
BYWORD =
BYWORD = eth1 : Option
BYWORD = eth2 : Option
BYWORD = ip1 : Option
BYWORD = ip2 : Option
BYWORD = mpls : Option
BYWORD = ach : Option
BYWORD = gen-ts : Option
BYWORD = flow-conf : Option
BYWORD =
BYWORD =
BYWORD = eth1 : Option
BYWORD = eth2 : Option
BYWORD = ip1 : Option
BYWORD = ip2 : Option
BYWORD = mpls : Option
BYWORD = gen-ts : Option
BYWORD = action : Option
BYWORD = ptp : Option
BYWORD = oam : Option
BYWORD = generic : Option

VARIABLE_BEGIN
    BOOL ingress;
    u8 flow_id = 0;
VARIABLE_END

CODE_BEGIN
    if (has_comm_conf) {
        flow_id = v_0_to_7;
    } else if (has_flow_conf) {
        flow_id = v_0_to_7_1;
    }
    ingress = has_ingress && ~has_egress;

    misc_icli_show_phy_ts_conf(session_id, v_port_type_list, v_0_to_3, ingress, has_eng_init, flow_id, has_comm_conf, has_eth1, has_eth2, has_ip1, has_ip2, has_mpls, has_ach, has_gen_ts, has_flow_conf, has_eth1_1, has_eth2_1, has_ip1_1, has_ip2_1, has_mpls_1, has_gen_ts_1, has_action, has_ptp, has_oam, has_generic);
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug phy csr interface <port_type_list> [ { read <uint8> <0~0xffff> } | { write <uint8> <uint16> <0-0xffffffff> } ]

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =
RUNTIME = misc_icli_10g_present

! 1: debug
! 2: phy
! 3: csr
! 4: interface
! 5: <port_type_list>
! 6: read
! 7: <uint8>
! 8: <uint16>
! 9: write
! 10: <uint8>
! 11: <uint16>
! 12: <0-0xffffffff>

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_read
CMD_VAR = v_uint8
CMD_VAR = v_uint16
CMD_VAR = has_write
CMD_VAR = v_uint8_1
CMD_VAR = v_uint16_1
CMD_VAR = v_val

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = read : Option
BYWORD =
BYWORD =
BYWORD = write : Option
BYWORD =
BYWORD =
BYWORD =

CODE_BEGIN
    if(has_read) {
        if(!misc_icli_phy_csr_read_write(session_id, v_port_type_list, v_uint8, 0, 0, TRUE, v_uint16))
            return ICLI_RC_ERROR;
    } else if(has_write) {
        if(!misc_icli_phy_csr_read_write(session_id, v_port_type_list, v_uint8_1, v_uint16_1, v_val, FALSE, NULL))
            return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug misc test <1-1000>

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! misc
CMD_VAR =
RUNTIME =
HELP    = Miscellaneous commands
BYWORD  =

! test
CMD_VAR =
RUNTIME =
HELP    = Test command
BYWORD  =

! <1-1000>
CMD_VAR = value
RUNTIME =
HELP    =
BYWORD  = Test command number

VARIABLE_BEGIN
    misc_icli_req_t req;
VARIABLE_END

CODE_BEGIN
    misc_icli_req_init(&req, session_id);
    req.value = value;
    ICLI_RC(misc_icli_test(&req));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug port link { enable | disable}

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_INTERFACE_PORT_LIST
MODE_VAR = plist

! 1: debug
! 2: port
! 3: link
! 4: enable
! 5: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = has_enable
CMD_VAR =

HELP = Debug keyword
HELP = port
HELP = break link of the phy/SFP through MEBA
HELP = break the link by PHY/SFP config
HELP = un-break the link by PHY/SFP config

CODE_BEGIN
    VTSS_RC(misc_icli_debug_port_state(session_id, plist, has_enable));
CODE_END

CMD_END

!==============================================================================

CMD_BEGIN

IF_FLAG =

COMMAND = debug assert { appl | os | except | cap | asan <1-10> }

FUNC_NAME = _debug_assert

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =

CMD_MODE = ICLI_CMD_MODE_EXEC

CMD_VAR =
CMD_VAR =
CMD_VAR = b_appl
CMD_VAR = b_os
CMD_VAR = b_except
CMD_VAR = b_cap
CMD_VAR = b_asan
CMD_VAR = value

HELP    = ##ICLI_HELP_DEBUG
HELP    = Assert function
HELP    = Application assertion
HELP    = OS assertion
HELP    = Exception
HELP    = CapArray out-of-range write
HELP    = ASAN test out-of-range write
HELP    = ASAN test, value to write out-of-range

VARIABLE_BEGIN
    u32 *addr = NULL;
    u32 array[2];
VARIABLE_END

CODE_BEGIN
    if (b_appl) {
        // Application Assertion
        ICLI_PRINTF("Generating application assertion...\n");
        VTSS_ASSERT(0);
    } else if (b_os) {
        // OS Assertion
        ICLI_PRINTF("Generating OS assertion...\n");

        // Avoid Lint Warning 506: Constant value Boolean
        /*lint -e{506} */
        VTSS_ASSERT(0) // Artificial OS assertion
    } else if (b_except) {
        // Exception. De-reference NULL-pointer to test PC gets into boot data.
        ICLI_PRINTF("Generating exception...\n");

        // Avoid Lint Warning 413: Likely use of null pointer 'addr' in argument to operator 'unary *'
        /*lint -e{413} */
        if (*addr) {
            ICLI_PRINTF("Unreachable\n"); // Unreachable;
        }
    } else if (b_cap) {
        CapArray<int, MEBA_CAP_BOARD_PORT_MAP_COUNT> a;
        ICLI_PRINTF("Do an out-of-range write (on purpose)...\n");
        a[100] = 2;
    } else if (b_asan) {
        ICLI_PRINTF("Do an out-of-range write (on purpose)...\n");
        array[100] = value;

        // Prevent compiler from saying: array set but not used
        if (array[100] != value) {
            ICLI_PRINTF("Already overwritten\n");
        }
    }

CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG = defined(VTSS_SW_OPTION_THREAD_LOAD_MONITOR)
COMMAND   = debug thread load-monitor
DOC_CMD_DESC = Control per-thread load monitoring
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =
CMD_MODE  = ICLI_CMD_MODE_EXEC
CMD_VAR =
CMD_VAR =
CMD_VAR =
HELP    = ##ICLI_HELP_DEBUG
HELP    = thread
HELP    = load monitoring control

VARIABLE_BEGIN
    mesa_rc rc;
VARIABLE_END

CODE_BEGIN
    if ((rc = misc_thread_load_monitor_start()) != VTSS_RC_OK) {
        ICLI_PRINTF("%% %s\n", error_txt(rc));
        return ICLI_RC_ERROR;
    }

    ICLI_PRINTF("Enabling per-thread load monitoring.\n");
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG = defined(VTSS_SW_OPTION_THREAD_LOAD_MONITOR)
COMMAND   = debug no thread load-monitor
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
HELP    = ##ICLI_HELP_DEBUG
HELP    = ##ICLI_HELP_NO
HELP    = thread
HELP    = load monitoring control

VARIABLE_BEGIN
    mesa_rc rc;
VARIABLE_END

CODE_BEGIN
    if ((rc = misc_thread_load_monitor_stop()) != VTSS_RC_OK) {
        ICLI_PRINTF("%% %s\n", error_txt(rc));
        return ICLI_RC_ERROR;
    }

    ICLI_PRINTF("Disabled per-thread load monitoring.\n");
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
COMMAND   = debug memory dump <uint> [ count <uint> ] [ size <1,2,4> ]
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_EXEC
PROPERTY  = ICLI_CMD_PROP_GREP

IF_FLAG   =

! debug
CMD_VAR =
BYWORD  =
HELP    = ##ICLI_HELP_DEBUG
RUNTIME =

! memory
CMD_VAR =
BYWORD  =
HELP    = Memory data
RUNTIME =

! dump
CMD_VAR =
BYWORD  =
HELP    = Display memory data
RUNTIME =

! <uint>
CMD_VAR = addr
BYWORD  =
HELP    = Memory address
RUNTIME =

! count
CMD_VAR =
BYWORD  =
HELP    = Number of memory blocks. If not defined, default count is 1
RUNTIME =

! <uint>
CMD_VAR = count
BYWORD  =
HELP    = Number of memory blocks
RUNTIME =

! size
CMD_VAR =
BYWORD  =
HELP    = Size of one memory block. If not defined, default size is 1
RUNTIME =

! <uint>
CMD_VAR = size
BYWORD  =
HELP    = Size of one memory block
RUNTIME =

VARIABLE_BEGIN
    u8      arr[16];
    int     start_pos, end_pos, i;

    /* default value */
    count = 1;
    size  = 1;
VARIABLE_END

CODE_BEGIN
    if ((addr & (size - 1)) != 0) {
        ICLI_PRINTF("%% Error: <addr> misaligned with <item_size>\n");
        return ICLI_RC_ERROR;
    }

    // start_pos included, end_pos not included.
    switch (size) {
    case 1: {
        u8 *p = (u8 *)((u64)addr);
        while (count > 0) {
            start_pos = (u64)p & 0xF;
            end_pos   = start_pos + count < 16 ? start_pos + count : 16;
            for (i = start_pos; i < end_pos; i++) {
                arr[i] = *p++;
            }
            mem_print(addr, arr, start_pos, end_pos);
            u32 cnt = end_pos - start_pos;
            addr  += cnt;
            count -= cnt;
        }
        break;
    }

    case 2: {
        u16 *p = (u16 *)((u64)addr);
        while (count > 0) {
            start_pos = (u64)p & 0xF;
            end_pos   = start_pos + 2 * count < 16 ? start_pos + 2 * count : 16;
            for (i = start_pos; i < end_pos; i += 2) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
                *((u16 *)&arr[i]) = *p++;
#pragma GCC diagnostic pop
            }
            mem_print( addr, arr, start_pos, end_pos);
            u32 cnt = end_pos - start_pos;
            addr  += cnt;
            count -= cnt / 2;
        }
        break;
    }

    case 4: {
        u32 *p = (u32 *)((u64)addr);
        while (count > 0) {
            start_pos = (u64)p & 0xF;
            end_pos   = start_pos + 4 * count < 16 ? start_pos + 4 * count : 16;
            for (i = start_pos; i < end_pos; i += 4) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
                *((u32 *)&arr[i]) = *p++;
#pragma GCC diagnostic pop
            }
            mem_print(addr, arr, start_pos, end_pos);
            u32 cnt = end_pos - start_pos;
            addr  += cnt;
            count -= cnt / 4;
        }
        break;
    }

    default:
        ICLI_PRINTF("%% Failed : size %u, Not supported\n", size);
        break;
    }
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG =
COMMAND   = debug pagemap [process-id <int>] [{perm <word>} | details] [changes-only] [section <line128>]
DOC_CMD_DESC = Dump this or a nother process' pagemap
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! pagemap
CMD_VAR =
RUNTIME =
HELP    = Show virtual address pagemap along with virtual and physical sizes
BYWORD  =

! process-id
CMD_VAR = has_process_id
RUNTIME =
HELP    = You may specify a process ID. If not, this application's process ID is used.
BYWORD  =

! <int>
CMD_VAR = pid
RUNTIME =
HELP    = Process ID to show
BYWORD  =

! perm
CMD_VAR =
RUNTIME =
HELP    = Filter on section permissions.
BYWORD  =

! <word>
CMD_VAR = perm
RUNTIME =
HELP    = String that must be 4 chars long and contain the chars <r, w, x, p, s> at most once and <-, .> zero or more times. Use '.' as don't care. For example, use 'rw-.' to get read/writable data and '..x.' to get all executable sections. Default is '....'
BYWORD  =

! details
CMD_VAR = has_details
RUNTIME =
HELP    = Print all mapped pagemap entries from the item found in 'section' (exact match)
BYWORD  =

! changes-only
CMD_VAR = changes_only
RUNTIME =
HELP    = Only show entries changed since last invokation of this command
BYWORD  =

! section
CMD_VAR =
RUNTIME =
HELP    = Optional string containing the section name to find and display (exact match)
BYWORD  =

! <line128> MUST COME LAST, BECAUSE IT ALWAYS EATS THE REMAINDER OF A LINE
CMD_VAR = section
RUNTIME =
HELP    = Optional string containing the section name to find and display, e.g. 'debug pagemap section [heap]'
BYWORD  = <Section: line128>

CODE_BEGIN
    if (has_details && changes_only) {
        // I can't figure out a way to now allow these two at the same time, so let's do it runtime.
        ICLI_PRINTF("%% 'details' aand 'changes-only' are not supported simultaneously\n");
        return ICLI_RC_ERROR;
    }

    if (has_details && !section) {
        ICLI_PRINTF("%% I'm pretty sure, you don't want to show details for all virtual memory areas. Please use 'section' to limit it\n");
        return ICLI_RC_ERROR;
    }

    if (misc_icli_pagemap_show(session_id, section, has_process_id ? pid : getpid(), perm, has_details, changes_only) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG =
COMMAND   = debug vmstat [changes-only]
DOC_CMD_DESC = Dump /proc/vmstat
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! vmstat
CMD_VAR =
RUNTIME =
HELP    = Show virtual memory statistics
BYWORD  =

! changes-only
CMD_VAR = changes_only
RUNTIME =
HELP    = Only show changed entries
BYWORD  =

CODE_BEGIN
    if (misc_icli_vmstat_show(session_id, changes_only) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG = defined(VTSS_SW_OPTION_THREAD_LOAD_MONITOR)
COMMAND   = debug pgfaults
DOC_CMD_DESC = Show number of page faults that have occurred during last second and last 10 seconds.
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! vmstat
CMD_VAR =
RUNTIME =
HELP    = Show number of page faults (only works when thread load monitor is enabled)
BYWORD  =

CODE_BEGIN
    if (misc_icli_pgfaults_show(session_id) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG =
COMMAND   = debug slabinfo [changes-only]
DOC_CMD_DESC = Dump /proc/slabinfo in a reader-friendly form.
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! slabinfo
CMD_VAR =
RUNTIME =
HELP    = Show content of /proc/slabinfo in a reader-friendly form.
BYWORD  =

! changes-only
CMD_VAR = changes_only
RUNTIME =
HELP    = Only show entries changed since last invokation of this command.
BYWORD  =

CODE_BEGIN
    if (misc_icli_slabinfo_show(session_id, changes_only) != VTSS_RC_OK) {
        return ICLI_RC_ERROR;
    }
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG =
COMMAND   = debug sleep <uint>
DOC_CMD_DESC = Pauses the current thread for a number of milliseconds.
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! pause
CMD_VAR =
RUNTIME =
HELP    = Pause the current thread for a number of milliseconds
BYWORD  =

! <uint>
CMD_VAR = msecs
RUNTIME =
HELP    = Number of milliseconds to put current thread to sleep
BYWORD  =

CODE_BEGIN
    VTSS_OS_MSLEEP(msecs);
CODE_END
CMD_END

!==============================================================================
CMD_BEGIN
IF_FLAG =
COMMAND   = debug zl40251
DOC_CMD_DESC = Used once during manufacturing to program the EEPROM of the zl40251 buffers
PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  =
CMD_MODE  = ICLI_CMD_MODE_EXEC

! debug
CMD_VAR =
RUNTIME =
HELP    = ##ICLI_HELP_DEBUG
BYWORD  =

! zl40251
CMD_VAR =
RUNTIME =
HELP    = Program EEPROM of zl40251
BYWORD  =

CODE_BEGIN
    zl40251_initialization();
CODE_END
CMD_END
!==============================================================================
CMD_BEGIN

IF_FLAG =

COMMAND = debug vscope interface <port_type_list> { fast-scan { enable error-threshold <3-1000> | disable } | xy-scan { { enable x-start <0-127> y-start <0-63> x-count <0-127> y-count <0-63> x-incr <0-10> y-incr <0-10> ber <0-64> error-threshold <3-1000> } | disable } }

DOC_CMD_DESC    =
DOC_CMD_DEFAULT =
DOC_CMD_USAGE   =
DOC_CMD_EXAMPLE =

FUNC_NAME =
FUNC_REUSE =

PRIVILEGE = ICLI_PRIVILEGE_15
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE = ICLI_CMD_MODE_EXEC
MODE_VAR =

! 1:  debug
! 2:  vscope
! 3:  interface
! 4:  <port_type_list>
! 5:  fast-scan
! 6:  enable
! 7:  error-threshold
! 8:  <3-1000>
! 9:  disable
! 10: xy-scan
! 11: enable
! 12: x-start
! 13: <0-127>
! 14: y-start
! 15: <0-63>
! 16: x-count
! 17: <0-127>
! 18: y-count
! 19: <0-63>
! 20: x-incr
! 21: <0-10>
! 22: y-incr
! 23: <0-10>
! 24: ber
! 25: <0-64>
! 26: error-threshold
! 27: <3-1000>
! 28: disable

CMD_VAR =
CMD_VAR =
CMD_VAR =
CMD_VAR = v_port_type_list
CMD_VAR = has_fast_scan
CMD_VAR = has_enable
CMD_VAR =
CMD_VAR = v_3_to_1000
CMD_VAR = has_disable
CMD_VAR = has_xy_scan
CMD_VAR = has_enable_1
CMD_VAR =
CMD_VAR = v_0_to_127
CMD_VAR =
CMD_VAR = v_0_to_63
CMD_VAR =
CMD_VAR = v_0_to_127_1
CMD_VAR =
CMD_VAR = v_0_to_63_1
CMD_VAR =
CMD_VAR = v_0_to_10
CMD_VAR =
CMD_VAR = v_0_to_10_1
CMD_VAR =
CMD_VAR = v_0_to_64
CMD_VAR =
CMD_VAR = v_3_to_1000_1
CMD_VAR = has_disable_1

RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =
RUNTIME =

HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =
HELP =

BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = fast-scan : Option
BYWORD = enable : Option
BYWORD = disable : Option
BYWORD = xy-scan : Option
BYWORD =
BYWORD =
BYWORD = enable : Option
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD =
BYWORD = disable : Option

CODE_BEGIN
if(!vtss_vscope_scan_icli(session_id, v_port_type_list, has_fast_scan, v_3_to_1000, has_enable, has_disable, has_xy_scan, has_enable_1, v_0_to_127, v_0_to_63, v_0_to_127_1, v_0_to_63_1, v_0_to_10, v_0_to_10_1, v_0_to_64, v_3_to_1000_1, has_disable_1)) {
        return (ICLI_RC_ERROR);
}
CODE_END

CMD_END
