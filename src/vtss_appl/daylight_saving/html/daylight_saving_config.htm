<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Copyright (c) 2006-2023 Microsemi Corporation "Microsemi". All Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted but only in
 connection with products utilizing the Microsemi switch and PHY products.
 Permission is also granted for you to integrate into other products, disclose,
 transmit and distribute the software only in an absolute machine readable
 format (e.g. HEX file) and only in or with products utilizing the Microsemi
 switch and PHY products.  The source code of the software may not be
 disclosed, transmitted or distributed without the prior written permission of
 Microsemi.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software.  Microsemi retains all
 ownership, copyright, trade secret and proprietary rights in the software and
 its source code, including all modifications thereto.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
 WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
 ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
 NON-INFRINGEMENT.

-->
<html>

<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>System Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_dst_config.htm";

var reqObject;
var global_offset_value = 1;
var oTOffsetHours = genArrayStr(-23, 23);
var oVOffsetHours = genArrayInt(-23, 23);
var oTMode = Array("Disabled", "Recurring", "Non-Recurring");
var oVMode = Array(0, 1, 2);
var oTWeek = genArrayStr(1, 5);
var oVWeek = genArrayInt(1, 5);
var oTDay = Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun");
var oVDay = genArrayInt(1, 7);
var oTMon = Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
var oVMon = genArrayInt(1, 12);
var oTHours = genArrayStr(0, 23);
var oVHours = genArrayInt(0, 23);
var oTMinutes = genArrayStr(0, 59);
var oVMinutes = genArrayInt(0, 59);
var oTDate = genArrayStr(1, 31);
var oVDate = genArrayInt(1, 31);
var oTYear = genArrayStr(2000, 2097);
var oVYear = genArrayInt(2000, 2097);

var trIDs  = Array("trWeekS", "trDayS", "trMonthS", "trDateS", "trYearS", "trHoursS", "trMinutesS", "trWeekE", "trDayE", "trMonthE", "trDateE", "trYearE", "trHoursE", "trMinutesE", "trOffset");
var tdIDs  = Array("week_s",  "day_s",  "month_s",  "date_s",  "year_s",  "hours_s",  "minutes_s",  "week_e",  "day_e",  "month_e",  "date_e",  "year_e",  "hours_e",  "minutes_e",  "offset");

var oTTimeZone = Array(
"Manual Setting",
"(UTC-12:00) International Date Line West",
"(UTC-11:00) Coordinated Universal Time-11",
"(UTC-10:00) Hawaii",
"(UTC-10:00) Aleutian Island",
"(UTC-09:30) Marquesas Islands",
"(UTC-09:00) Alaska",
"(UTC-09:00) Coordinated Universal Time-09",
"(UTC-08:00) Pacific Time (US and Canada)",
"(UTC-08:00) Baja California",
"(UTC-08:00) Coordinated Universal Time-08",
"(UTC-07:00) Arizona",
"(UTC-07:00) Chihuahua, La Paz, Mazatlan",
"(UTC-07:00) Mountain Time (US and Canada)",
"(UTC-06:00) Central America",
"(UTC-06:00) Central Time (US and Canada)",
"(UTC-06:00) Easter Island",
"(UTC-06:00) Guadalajara, Mexico City, Monterrey",
"(UTC-06:00) Saskatchewan",
"(UTC-05:00) Bogota, Lima, Quito, Rio Branco",
"(UTC-05:00) Eastern Time (US and Canada)",
"(UTC-05:00) Indiana (East)",
"(UTC-05:00) Chetumal",
"(UTC-05:00) Haiti",
"(UTC-05:00) Havana",
"(UTC-04:00) Atlantic Time (Canada)",
"(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
"(UTC-04:00) Asuncion",
"(UTC-04:00) Santiago",
"(UTC-04:00) Caracas",
"(UTC-04:00) Cuiaba",
"(UTC-04:00) Turks and Caicos",
"(UTC-03:30) Newfoundland",
"(UTC-03:00) Brasilia",
"(UTC-03:00) Buenos Aires",
"(UTC-03:00) Cayenne, Fortaleza",
"(UTC-03:00) Greenland",
"(UTC-03:00) Montevideo",
"(UTC-03:00) Araguaina",
"(UTC-03:00) Saint Pierre and Miquelon",
"(UTC-03:00) Salvador",
"(UTC-02:00) Coordinated Universal Time-02",
"(UTC-01:00) Azores",
"(UTC-01:00) Cape Verde Is.",
"(UTC)       Coordinated Universal Time",
"(UTC+00:00) Casablanca",
"(UTC+00:00) Dublin, Edinburgh, Lisbon, London",
"(UTC+00:00) Monrovia, Reykjavik",
"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
"(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",
"(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
"(UTC+01:00) West Central Africa",
"(UTC+01:00) Windhoek",
"(UTC+02:00) Amman",
"(UTC+02:00) Athens, Bucharest",
"(UTC+02:00) Beirut",
"(UTC+02:00) Cairo",
"(UTC+02:00) Harare, Pretoria",
"(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
"(UTC+02:00) Jerusalem",
"(UTC+02:00) Kaliningrad",
"(UTC+02:00) Tripoli",
"(UTC+02:00) Coordinated Universal Time+09",
"(UTC+03:00) Baghdad",
"(UTC+03:00) Kuwait, Riyadh",
"(UTC+03:00) Moscow, St. Petersburg, Volgograd",
"(UTC+03:00) Nairobi",
"(UTC+03:00) Istanbul",
"(UTC+03:00) Minsk",
"(UTC+03:30) Tehran",
"(UTC+04:00) Abu Dhabi, Muscat",
"(UTC+04:00) Baku",
"(UTC+04:00) Astrakhan, Ulyanovsk",
"(UTC+04:00) Port Louis",
"(UTC+04:00) Yerevan",
"(UTC+04:00) Tbilisi",
"(UTC+04:00) Izhevsk, Samara",
"(UTC+04:30) Kabul",
"(UTC+05:00) Ekaterinburg",
"(UTC+05:00) Islamabad, Karachi",
"(UTC+05:00) Tashkent",
"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",
"(UTC+05:30) Sri Jayawardenapura",
"(UTC+05:45) Kathmandu",
"(UTC+06:00) Astana",
"(UTC+06:00) Dhaka",
"(UTC+06:00) Omsk",
"(UTC+06:30) Yangon (Rangoon)",
"(UTC+07:00) Bangkok, Hanoi, Jakarta",
"(UTC+07:00) Krasnoyarsk",
"(UTC+07:00) Hovd",
"(UTC+07:00) Novosibirsk",
"(UTC+07:00) Tomsk",
"(UTC+07:00) Barnaul, Gorno-Altaysk",
"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
"(UTC+08:00) Irkutsk, Ulaan Bataar",
"(UTC+08:00) Kuala Lumpur, Singapore",
"(UTC+08:00) Perth",
"(UTC+08:00) Taipei",
"(UTC+08:00) Ulaanbaatar",
"(UTC+08:30) Pyongyang",
"(UTC+08:45) Eucla",
"(UTC+09:00) Osaka, Sapporo, Tokyo",
"(UTC+09:00) Seoul",
"(UTC+09:00) Yakutsk",
"(UTC+09:00) Chita",
"(UTC+09:30) Adelaide",
"(UTC+09:30) Darwin",
"(UTC+10:00) Brisbane",
"(UTC+10:00) Canberra, Melbourne, Sydney",
"(UTC+10:00) Guam, Port Moresby",
"(UTC+10:00) Hobart",
"(UTC+10:00) Vladivostok",
"(UTC+10:30) Lord Howe Island",
"(UTC+11:00) Magadan",
"(UTC+11:00) Bougainville Island",
"(UTC+11:00) Chokurdakh",
"(UTC+11:00) Norfolk Island",
"(UTC+11:00) Sakhalin",
"(UTC+11:00) Solomon Is., New Caledonia",
"(UTC+12:00) Auckland, Wellington",
"(UTC+12:00) Fiji",
"(UTC+12:00) Coordinated Universal Time+12",
"(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky",
"(UTC+12:45) Chatham Islands",
"(UTC+13:00) Nuku'alofa",
"(UTC+13:00) Samoa",
"(UTC+14:00) Kiritimati Island");
      
var manualSetVal = 99999;
var oVTimeZone = Array(
manualSetVal, /* Manual setting                                            */
-7200, /* (UTC-12:00) International Date Line West                         */
-6600, /* (UTC-11:00) Coordinated Universal Time-11                        */
-6000, /* (UTC-10:00) Hawaii                                               */
-6001, /* (UTC-10:00) Aleutian Island                                      */
-5700, /* (UTC-09:30) Marquesas Islands                                    */
-5400, /* (UTC-09:00) Alaska                                               */
-5401, /* (UTC-09:00) Coordinated Universal Time-09                        */
-4800, /* (UTC-08:00) Pacific Time (US and Canada)                         */
-4801, /* (UTC-08:00) Baja California                                      */
-4802, /* (UTC-08:00) Coordinated Universal Time-08                        */
-4200, /* (UTC-07:00) Arizona                                              */
-4201, /* (UTC-07:00) Chihuahua, La Paz, Mazatlan                          */
-4202, /* (UTC-07:00) Mountain Time (US and Canada)                        */
-3600, /* (UTC-06:00) Central America                                      */
-3601, /* (UTC-06:00) Central Time (US and Canada)                         */
-3602, /* (UTC-06:00) Easter Island                                        */
-3603, /* (UTC-06:00) Guadalajara, Mexico City, Monterrey                  */
-3604, /* (UTC-06:00) Saskatchewan                                         */
-3000, /* (UTC-05:00) Bogota, Lima, Quito, Rio Branco                      */
-3001, /* (UTC-05:00) Eastern Time (US and Canada)                         */
-3002, /* (UTC-05:00) Indiana (East)                                       */
-3003, /* (UTC-05:00) Chetumal                                             */
-3004, /* (UTC-05:00) Haiti                                                */
-3005, /* (UTC-05:00) Havana                                               */
-2400, /* (UTC-04:00) Atlantic Time (Canada)                               */
-2401, /* (UTC-04:00) Georgetown, La Paz, Manaus, San Juan                 */
-2402, /* (UTC-04:00) Asuncion                                             */
-2403, /* (UTC-04:00) Santiago                                             */
-2404, /* (UTC-04:00) Caracas                                              */
-2405, /* (UTC-04:00) Cuiaba                                               */
-2406, /* (UTC-04:00) Turks and Caicos                                     */
-2100, /* (UTC-03:30) Newfoundland                                         */
-1800, /* (UTC-03:00) Brasilia                                             */
-1801, /* (UTC-03:00) Buenos Aires                                         */
-1802, /* (UTC-03:00) Cayenne, Fortaleza                                   */
-1803, /* (UTC-03:00) Greenland                                            */
-1804, /* (UTC-03:00) Montevideo                                           */
-1805, /* (UTC-03:00) Araguaina                                            */
-1806, /* (UTC-03:00) Saint Pierre and Miquelon                            */
-1807, /* (UTC-03:00) Salvador                                             */
-1200, /* (UTC-02:00) Coordinated Universal Time-02                        */
 -600, /* (UTC-01:00) Azores                                               */
 -601, /* (UTC-01:00) Cape Verde Is.                                       */
    0, /* (UTC)       Coordinated Universal Time                           */
    1, /* (UTC+00:00) Casablanca                                           */
    2, /* (UTC+00:00) Dublin, Edinburgh, Lisbon, London                    */
    3, /* (UTC+00:00) Monrovia, Reykjavik                                  */
  600, /* (UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna     */
  601, /* (UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague    */
  602, /* (UTC+01:00) Brussels, Copenhagen, Madrid, Paris                  */
  603, /* (UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb                     */
  604, /* (UTC+01:00) West Central Africa                                  */
  605, /* (UTC+01:00) Windhoek                                             */
 1200, /* (UTC+02:00) Amman                                                */
 1201, /* (UTC+02:00) Athens, Bucharest                                    */
 1202, /* (UTC+02:00) Beirut                                               */
 1203, /* (UTC+02:00) Cairo                                                */
 1204, /* (UTC+02:00) Harare, Pretoria                                     */
 1205, /* (UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius        */
 1206, /* (UTC+02:00) Jerusalem                                            */
 1207, /* (UTC+02:00) Kaliningrad                                          */
 1208, /* (UTC+02:00) Tripoli                                              */
 1209, /* (UTC+02:00) Coordinated Universal Time+09                        */
 1800, /* (UTC+03:00) Baghdad                                              */
 1801, /* (UTC+03:00) Kuwait, Riyadh                                       */
 1802, /* (UTC+03:00) Moscow, St. Petersburg, Volgograd                    */
 1803, /* (UTC+03:00) Nairobi                                              */
 1804, /* (UTC+03:00) Istanbul                                             */
 1805, /* (UTC+03:00) Minsk                                                */
 2100, /* (UTC+03:30) Tehran                                               */
 2400, /* (UTC+04:00) Abu Dhabi, Muscat                                    */
 2401, /* (UTC+04:00) Baku                                                 */
 2402, /* (UTC+04:00) Astrakhan, Ulyanovsk                                 */
 2403, /* (UTC+04:00) Port Louis                                           */
 2404, /* (UTC+04:00) Yerevan                                              */
 2405, /* (UTC+04:00) Tbilisi                                              */
 2406, /* (UTC+04:00) Izhevsk, Samara                                      */
 2700, /* (UTC+04:30) Kabul                                                */
 3000, /* (UTC+05:00) Ekaterinburg                                         */
 3001, /* (UTC+05:00) Islamabad, Karachi                                   */
 3002, /* (UTC+05:00) Tashkent                                             */
 3300, /* (UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi                  */
 3301, /* (UTC+05:30) Sri Jayawardenapura                                  */
 3450, /* (UTC+05:45) Kathmandu                                            */
 3600, /* (UTC+06:00) Astana                                               */
 3601, /* (UTC+06:00) Dhaka                                                */
 3602, /* (UTC+06:00) Omsk                                                 */
 3900, /* (UTC+06:30) Yangon (Rangoon)                                     */
 4200, /* (UTC+07:00) Bangkok, Hanoi, Jakarta                              */
 4201, /* (UTC+07:00) Krasnoyarsk                                          */
 4202, /* (UTC+07:00) Hovd                                                 */
 4203, /* (UTC+07:00) Novosibirsk                                          */
 4204, /* (UTC+07:00) Tomsk                                                */
 4205, /* (UTC+07:00) Barnaul, Gorno-Altaysk                               */
 4800, /* (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi                */
 4801, /* (UTC+08:00) Irkutsk, Ulaan Bataar                                */
 4802, /* (UTC+08:00) Kuala Lumpur, Singapore                              */
 4803, /* (UTC+08:00) Perth                                                */
 4804, /* (UTC+08:00) Taipei                                               */
 4805, /* (UTC+08:00) Ulaanbaatar                                          */
 5100, /* (UTC+08:30) Pyongyang                                            */
 5250, /* (UTC+08:45) Eucla                                                */
 5400, /* (UTC+09:00) Osaka, Sapporo, Tokyo                                */
 5401, /* (UTC+09:00) Seoul                                                */
 5402, /* (UTC+09:00) Yakutsk                                              */
 5403, /* (UTC+09:00) Chita                                                */
 5700, /* (UTC+09:30) Adelaide                                             */
 5701, /* (UTC+09:30) Darwin                                               */
 6000, /* (UTC+10:00) Brisbane                                             */
 6001, /* (UTC+10:00) Canberra, Melbourne, Sydney                          */
 6002, /* (UTC+10:00) Guam, Port Moresby                                   */
 6003, /* (UTC+10:00) Hobart                                               */
 6004, /* (UTC+10:00) Vladivostok                                          */
 6300, /* (UTC+10:30) Lord Howe Island                                     */
 6600, /* (UTC+11:00) Magadan                                              */
 6601, /* (UTC+11:00) Bougainville Island                                  */
 6602, /* (UTC+11:00) Chokurdakh                                           */
 6603, /* (UTC+11:00) Norfolk Island                                       */
 6604, /* (UTC+11:00) Sakhalin                                             */
 6605, /* (UTC+11:00) Solomon Is., New Caledonia                           */
 7200, /* (UTC+12:00) Auckland, Wellington                                 */
 7201, /* (UTC+12:00) Fiji                                                 */
 7202, /* (UTC+12:00) Coordinated Universal Time+12                        */
 7203, /* (UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky                     */
 7650, /* (UTC+12:45) Chatham Islands                                      */
 7800, /* (UTC+13:00) Nuku'alofa                                           */
 7801, /* (UTC+13:00) Samoa                                                */
 8400  /* (UTC+14:00) Kiritimati Island                                    */);

/*
function isAcronymStr(str)
{
    if (!str) {
        return true;
    }

    var myReg = /^[A-Za-z0-9\-\.]{0,}$/;
    return myReg.test(str);
}
*/

function checkForm()
{

    var fld = document.getElementById("acronym");
    if (fld) {
        if (fld.value.length > 16) {
            GiveAlert("Error! Invalid String:Unable to set 'Acronym' more than 16 characters.", fld);
            return false;
        }
/*
        if (!isAcronymStr(fld.value)) {
            GiveAlert("Error! Invalid input for 'Acronym'. It is restricted to 16 alpha-numeric characters and can contain '-' or '.'.", fld);
            return false;
        }
*/
    }

    if(!isWithinRange("offset", 1, 1439, "'Offset setting'")) {
            return false;
    }

    return true;
}

function createModeTblHeader(frag, id, header_str)
{
    var tr = CreateStyledElement("tr", "config_header");
    tr.id = tr.name = id;
    addTextHeaderCell(tr, header_str, "hdrl", 2);
    frag.appendChild(tr);
}

function onchangeMode()
{
    var fld_value = document.getElementById("mode").value;

    //mode: 0/disabled, 1/recurring, 2/non-recurring
    for (var i = 0; i < trIDs.length; i++) {
        if (parseInt(fld_value, 10) === 0) {
            if (i <= 1 || i == 7 || i == 8) {
                document.getElementById(trIDs[i]).style.display = "none";
            } else {
                document.getElementById(trIDs[i]).style.display = "";
            }
            document.getElementById(tdIDs[i]).disabled = true;
        } else {
            document.getElementById(trIDs[i]).style.display = "";
            document.getElementById(tdIDs[i]).disabled = false;
        }
    }

    switch (parseInt(fld_value, 10)) {
        case (0): //disabled
            //document.getElementById("header_start_time").style.display = "none";
            //document.getElementById("header_end_time").style.display = "none";
            //document.getElementById("header_offset").style.display = "none";

            //document.getElementById("offset").value = "1";
            document.getElementById("offset").value = global_offset_value;
            break;
        case (1): //recurring
            document.getElementById("header_start_time").style.display = "";
            document.getElementById("header_end_time").style.display = "";
            document.getElementById("header_offset").style.display = "";

            document.getElementById("trDateS").style.display = "none";
            document.getElementById("date_s").disabled = true;
            document.getElementById("trYearS").style.display = "none";
            document.getElementById("year_s").disabled = true;

            document.getElementById("trDateE").style.display = "none";
            document.getElementById("date_e").disabled = true;
            document.getElementById("trYearE").style.display = "none";
            document.getElementById("year_e").disabled = true;
            break;
        case (2): //non-recurring
            document.getElementById("header_start_time").style.display = "";
            document.getElementById("header_end_time").style.display = "";
            document.getElementById("header_offset").style.display = "";

            document.getElementById("trWeekS").style.display = "none";
            document.getElementById("week_s").disabled = true;
            document.getElementById("trDayS").style.display = "none";
            document.getElementById("day_s").disabled = true;

            document.getElementById("trWeekE").style.display = "none";
            document.getElementById("week_e").disabled = true;
            document.getElementById("trDayE").style.display = "none";
            document.getElementById("day_e").disabled = true;
            break;
        default:
            document.getElementById("offset").value = global_offset_value;
            break;
    }
}

function onchangeTimezone()
{
    var manual_setting = false;
    var timeoffset = 0;
    for (var i = 0; i < this.options.length; i++) {
        if (this.options[i].selected === true) {
            manual_setting = this.options[i].value == manualSetVal ? true : false;
            timeoffset = this.options[i].value;
            break;
        }
    }

    if (!manual_setting) {
        UpdateIdSetSelect("time_offset_hours", Math.trunc(Math.trunc(this.value/10) / 60));
        var offset_m = Math.trunc(timeoffset/10) % 60;
        UpdateIdSetSelect("time_offset_minutes", Math.abs(offset_m));
    }
    document.getElementById("time_offset_hours").disabled   = !manual_setting;
    document.getElementById("time_offset_minutes").disabled = !manual_setting;
}

function processUpdate(req, ref)
{
    var frag, tbody, td, tr;
    var values = req.responseText.split(",");

    //Format: <time_zone>,<acronym>

    frag = document.createDocumentFragment();
    createModeTblHeader(frag, "header_timezone", "Time Zone Configuration");

    if (reqObject != req) {
        reqObject = req;
    }

    if (req.responseText) {

        tr = CreateStyledElement("tr", "config");
        td = addTextCell(tr, "Time Zone", "param_label");
        td.style.width = "10em";
        var timeoffset = parseInt(values[0], 10);
        var array_idx = oVTimeZone.indexOf(timeoffset);
        addSelectCell(tr, oTTimeZone, oVTimeZone, array_idx < 0 ? manualSetVal : timeoffset, "cl", "time_zone", null, null, null, onchangeTimezone);
        frag.appendChild(tr);

        tr = CreateStyledElement("tr", "config");
        td = addTextCell(tr, "Hours", "param_label");
        td.style.width = "10em";
        td = addSelectCell(tr, oTOffsetHours, oVOffsetHours, Math.trunc(Math.trunc(timeoffset/10) / 60), "cl", "time_offset_hours", "100%", null, array_idx < 0 ? false : true);
        frag.appendChild(tr);

        tr = CreateStyledElement("tr", "config");
        td = addTextCell(tr, "Minutes", "param_label");
        td.style.width = "10em";
        var offset_m = Math.trunc(timeoffset/10) % 60;
        td = addSelectCell(tr, oTMinutes, oVMinutes, Math.abs(offset_m), "cl", "time_offset_minutes", "100%", null, array_idx < 0 ? false : true);
        frag.appendChild(tr);

        tr = CreateStyledElement("tr", "config");
        td = addTextCell(tr, "Acronym", "param_label");
        td.style.width = "10em";
        addInputCellWithText(tr, values[1] === null ? "" : unescape(values[1]), "cl", "acronym", 18, 16, "", "", " ( 0 - 16 characters )");
        frag.appendChild(tr);
    }

    tbody = document.getElementById("tzTbl");
    clearChildNodes(tbody);
    if (!tbody.appendChild(frag)) {
        alert("This browser doesn't support dynamic tables.");
    }


    //Daylight Saving Time

    frag = document.createDocumentFragment();
    createModeTblHeader(frag, "header_daylight_saving_time", "Daylight Saving Time Mode");

    if (req.responseText) {

        tr = CreateStyledElement("tr", "config");
        addTextCell(tr, "Daylight Saving Time", "param_label");
        td = addSelectCell(tr, oTMode, oVMode, parseInt(values[2], 10), "cl", "mode");
        td.onchange = onchangeMode;
        td.style.width = "16em";
        frag.appendChild(tr);
    }

    tbody = document.getElementById("modeTbl");
    clearChildNodes(tbody);
    if (!tbody.appendChild(frag)) {
        alert("This browser doesn't support dynamic tables.");
    }

    // Start time
    createModeTblHeader(frag, "header_start_time" , "Start Time settings");
    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trWeekS";
    td = addTextCell(tr, "Week", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTWeek, oVWeek, parseInt(values[3], 10), "cl", "week_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDayS";
    td = addTextCell(tr, "Day", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDay, oVDay, parseInt(values[4], 10), "cl", "day_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMonthS";
    td = addTextCell(tr, "Month", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTMon, oVMon, parseInt(values[5], 10), "cl", "month_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDateS";
    td = addTextCell(tr, "Date", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDate, oVDate, parseInt(values[6], 10), "cl", "date_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trYearS";
    td = addTextCell(tr, "Year", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTYear, oVYear, parseInt(values[7], 10), "cl", "year_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trHoursS";
    td = addTextCell(tr, "Hours", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTHours, oVHours, parseInt(values[8], 10), "cl", "hours_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMinutesS";
    td = addTextCell(tr, "Minutes", "param_label");
    td.style.width = "10em";
    td.id = td.name = "trMinutesSP";
    td = addSelectCell(tr, oTMinutes, oVMinutes, parseInt(values[9], 10), "cl", "minutes_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    // End Time
    createModeTblHeader(frag, "header_end_time", "End Time settings");
    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trWeekE";
    td = addTextCell(tr, "Week", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTWeek, oVWeek, parseInt(values[10], 10), "cl", "week_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDayE";
    td = addTextCell(tr, "Day", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDay, oVDay, parseInt(values[11], 10), "cl", "day_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMonthE";
    td = addTextCell(tr, "Month", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTMon, oVMon, parseInt(values[12], 10), "cl", "month_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDateE";
    td = addTextCell(tr, "Date", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDate, oVDate, parseInt(values[13], 10), "cl", "date_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trYearE";
    td = addTextCell(tr, "Year", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTYear, oVYear, parseInt(values[14], 10), "cl", "year_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trHoursE";
    td = addTextCell(tr, "Hours", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTHours, oVHours, parseInt(values[15], 10), "cl", "hours_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMinutesE";
    td = addTextCell(tr, "Minutes", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTMinutes, oVMinutes, parseInt(values[16], 10), "cl", "minutes_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    //offset
    createModeTblHeader(frag, "header_offset", "Offset settings");
    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trOffset";
    td = addTextCell(tr, "Offset", "param_label");
    td.style.width = "10em";
    global_offset_value = parseInt(values[17], 10);
    td = addInputCellWithText(tr, global_offset_value, "cl", "offset", 12, 4, "", "", " (1 - 1439) Minutes");
    frag.appendChild(tr);

    tbody = document.getElementById("cfgTbl");
    clearChildNodes(tbody);
    if (!tbody.appendChild(frag)) {
        alert("This browser doesn't support dynamic tables.");
    }
    onchangeMode();
}

function resetForm()
{
    processUpdate(reqObject, null);
}

function requestUpdate()
{
    //var req = " www.Vitesse.com,vitesse.com,3rd floor";
    //processUpdate(req, null);
    loadXMLDoc("/config/time_dst", processUpdate, null);
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<form method="POST" action="/config/time_dst" onsubmit="return checkForm();">

<h1>Time Zone Configuration</h1>

<table id="timeZoneConfiguration" summary="Time Zone Configuration" cellspacing="0" class="config">
 <tbody id="tzTbl">
 </tbody>
</table>

<div>&nbsp;</div>
<h1>Daylight Saving Time Configuration</h1>

<table id="DstConfiguration" summary="DST Configuration" cellspacing="0" class="config">
 <tbody id="modeTbl">
 </tbody>
</table>

<div>&nbsp;</div>
<table id="RecurringConfiguration" summary="Recurring Configuration" cellspacing="0" class="config">
 <tbody id="cfgTbl">
 </tbody>
</table>

<p>
<input type="submit" value="Save">
<input type="reset" value="Reset" onclick="resetForm();">
</p>

</form>
</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
