#
# Copyright (c) 2006-2017 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.
#
if(NOT TARGET @PROJECT_NAME@)

find_file(@CMAKE_PROJECT_NAME@_DEPENDFILE @CMAKE_PROJECT_NAME@Depends.cmake
      @CMAKE_INSTALL_PREFIX@/@INSTALL_CMAKE_DIR@
)
include(${@CMAKE_PROJECT_NAME@_DEPENDFILE})

find_path(@CMAKE_PROJECT_NAME@_INCLUDE_DIRS vtss/basics/config.h
    @CMAKE_INSTALL_PREFIX@/@INSTALL_INCLUDE_DIR@
)

# Include the configuration of the prebuild module
set(@PROJECT_NAME@_NAME               "@THIS_PROJECT_NAME@")
set(@PROJECT_NAME@_BRANCH_NAME        "@THIS_PROJECT_BRANCH_NAME@")
set(@PROJECT_NAME@_VERSION_TAG_STRING "@THIS_PROJECT_VERSION_TAG_STRING@")
set(@PROJECT_NAME@_VERSION_HASH       "@THIS_PROJECT_VERSION_HASH@")
set(@PROJECT_NAME@_VERSION1           @THIS_PROJECT_VERSION1@)
set(@PROJECT_NAME@_VERSION2           @THIS_PROJECT_VERSION2@)
set(@PROJECT_NAME@_VERSION3           @THIS_PROJECT_VERSION3@)
set(@PROJECT_NAME@_VERSION            "@THIS_PROJECT_VERSION@")
set(@PROJECT_NAME@_USER               "@THIS_PROJECT_USER@")
set(@PROJECT_NAME@_MACHINE            "@THIS_PROJECT_MACHINE@")
set(@PROJECT_NAME@_BUILD_TIME         "@THIS_PROJECT_BUILD_TIME@")
set(@PROJECT_NAME@_BUILD_NUMBER       @THIS_PROJECT_BUILD_NUMBER@)
set(@PROJECT_NAME@_BUILD_DIRTY        @THIS_PROJECT_BUILD_DIRTY@)
set(@PROJECT_NAME@_USE_API_TYPES      @VTSS_USE_API_HEADERS@)

# Project dependencies
if (${@PROJECT_NAME@_USE_API_TYPES})
    find_package(vtss_api REQUIRED)
endif()

# Configure link libraries
set(@CMAKE_PROJECT_NAME@_LIBRARIES vtss_basics)
list(REMOVE_DUPLICATES @CMAKE_PROJECT_NAME@_LIBRARIES)

# Configure include directories
set(@CMAKE_PROJECT_NAME@_INCLUDE_DIRS
    ${@CMAKE_PROJECT_NAME@_INCLUDE_DIRS}
)

if (${@PROJECT_NAME@_USE_API_TYPES})
    list(APPEND @CMAKE_PROJECT_NAME@_INCLUDE_DIRS ${vtss_api_INCLUDE_DIRS})
endif()


# Produce some nice prints when this library is includeed
message(STATUS "@CMAKE_PROJECT_NAME@-config (SHARED) version @THIS_PROJECT_VERSION@ at @THIS_PROJECT_BRANCH_NAME@")
message(STATUS "  Hash             = @THIS_PROJECT_VERSION_HASH@")
message(STATUS "  TagString        = @THIS_PROJECT_VERSION_TAG_STRING@")
message(STATUS "  Type             = @CMAKE_BUILD_TYPE@")
message(STATUS "  cxx_flags        = @CMAKE_CXX_FLAGS@")
message(STATUS "  c_flags          = @CMAKE_C_FLAGS@")
if (${@PROJECT_NAME@_USE_API_TYPES})
    message(STATUS "  API types        = system")
else()
    message(STATUS "  API types        = hard-coded")
endif()

foreach(f ${@CMAKE_PROJECT_NAME@_INCLUDE_DIRS})
    message(STATUS "  Include:         ${f}")
endforeach()
foreach(f ${@CMAKE_PROJECT_NAME@_LIBRARIES})
    #GET_PROPERTY(p TARGET ${f} PROPERTY LOCATION)
    #message(STATUS "  Library: ${p}")
    GET_TARGET_PROPERTY(p ${f} LOCATION)
    if(${p} MATCHES "p-NOTFOUND")
        message(STATUS "  Library-file:    ${f}")
    else(${p} MATCHES "p-NOTFOUND")
        message(STATUS "  Library-target:  ${p}")
    endif(${p} MATCHES "p-NOTFOUND")
endforeach()

endif(NOT TARGET @PROJECT_NAME@)

