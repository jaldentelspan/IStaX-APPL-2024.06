########################################################-*- mode: Makefile -*-
#
# Copyright (c) 2006-2020 Microsemi Corporation "Microsemi". All Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted but only in
# connection with products utilizing the Microsemi switch and PHY products.
# Permission is also granted for you to integrate into other products, disclose,
# transmit and distribute the software only in an absolute machine readable
# format (e.g. HEX file) and only in or with products utilizing the Microsemi
# switch and PHY products.  The source code of the software may not be
# disclosed, transmitted or distributed without the prior written permission of
# Microsemi.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software.  Microsemi retains all
# ownership, copyright, trade secret and proprietary rights in the software and
# its source code, including all modifications thereto.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS". MICROSEMI HEREBY DISCLAIMS ALL
# WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER SUCH WARRANTIES
# ARE EXPRESS, IMPLIED, STATUTORY OR OTHERWISE INCLUDING, WITHOUT LIMITATION,
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR USE OR PURPOSE AND
# NON-INFRINGEMENT.
#
# ------------------------------------------------------------------------

DIR_msg := $(DIR_APPL)/msg
MODULE_ID_msg := 7 # VTSS_MODULE_ID_MSG
OBJECTS_msg := msg.o

$(OBJECTS_msg): %.o: $(DIR_msg)/%.cxx
	$(call compile_cxx,$(MODULE_ID_msg), $@, $<)

# Built-in ICLI
$(eval $(call add_icli,$(MODULE_ID_msg), $(DIR_msg)/msg.icli))

INCLUDES += -I$(DIR_msg)

# S/W coding style check
VTSS_CODE_STYLE_CHK_FILES_msg := $(DIR_msg)/msg.cxx
VTSS_CODE_STYLE_CHK_FILES_msg += $(DIR_msg)/*.h

# In a homogeneous stack, all switches are identical (i.e.
# you don't have support for connecting 24- and 48-ported switches at the
# same time, and all PHYs are of the same type (Cu or SFP)).
# In such cases, we can make all switches configurable right
# away, so that a switch can be configured before it has ever
# been seen in a stack. The primary switch assumes that all switches have
# the same layout/personality as itself.
#
# In a heterogeneous stack (default), a switch must have been
# seen in the stack before it will receive configuration from
# a default-config (or startup-config) file. So if a new
# switch is added and the default-config contains wildcards
# for ports, it will take a reboot of the mater to have this
# default-config applied to the new-comer.
# This is not the case in a homogenous stack.
# Comment this line in, if you have have homogeneous stack
# DEFINES += -DVTSS_SW_OPTION_MSG_HOMOGENEOUS_STACK

